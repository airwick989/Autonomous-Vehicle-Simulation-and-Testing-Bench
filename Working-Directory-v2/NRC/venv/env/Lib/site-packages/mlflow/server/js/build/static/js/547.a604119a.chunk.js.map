{"version":3,"file":"static/js/547.a604119a.chunk.js","mappings":"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","sources":["../../../../../src/clientSideRowModel/clientSideRowModel.ts","../../../../../src/clientSideRowModel/clientSideNodeManager.ts","../../../../../src/clientSideRowModel/filterStage.ts","../../../../../src/clientSideRowModel/sortStage.ts","../../../../../src/clientSideRowModel/flattenStage.ts","../../../../../src/clientSideRowModel/sortService.ts","../../../../../src/clientSideRowModel/filterService.ts","../../../../../src/clientSideRowModel/immutableService.ts","../../../../src/clientSideRowModelModule.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/generic.ts","../node_modules/@ag-grid-community/core/dist/src/ts/columns/columnKeyCreator.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/object.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/function.ts","../node_modules/@ag-grid-community/core/dist/src/ts/context/context.ts","../node_modules/@ag-grid-community/core/dist/src/ts/modules/moduleNames.ts","../node_modules/@ag-grid-community/core/src/ts/eventService.ts","../node_modules/@ag-grid-community/core/dist/src/ts/constants/constants.ts","../node_modules/@ag-grid-community/core/dist/src/ts/modules/moduleRegistry.ts","../node_modules/@ag-grid-community/core/dist/src/ts/entities/column.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/array.ts","../node_modules/@ag-grid-community/core/dist/src/ts/entities/columnGroup.ts","../node_modules/@ag-grid-community/core/dist/src/ts/entities/providedColumnGroup.ts","../node_modules/@ag-grid-community/core/dist/src/ts/entities/defaultColumnTypes.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/event.ts","../node_modules/@ag-grid-community/core/dist/src/ts/context/beanStub.ts","../node_modules/@ag-grid-community/core/dist/src/ts/columns/columnFactory.ts","../node_modules/@ag-grid-community/core/src/ts/eventKeys.ts","../node_modules/@ag-grid-community/core/dist/src/ts/columns/groupInstanceIdCreator.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/string.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/map.ts","../node_modules/@ag-grid-community/core/dist/src/ts/columns/columnModel.ts","../node_modules/@ag-grid-community/core/dist/src/ts/columns/columnUtils.ts","../node_modules/@ag-grid-community/core/dist/src/ts/columns/displayedGroupCreator.ts","../node_modules/@ag-grid-community/core/src/ts/propertyKeys.ts","../node_modules/@ag-grid-community/core/dist/src/ts/components/componentUtil.ts","../node_modules/@ag-grid-community/core/dist/src/ts/components/agStackComponentsRegistry.ts","../node_modules/@ag-grid-community/core/dist/src/ts/components/colDefUtil.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/color.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/csv.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/browser.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/dom.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/general.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/aria.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/number.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/date.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/fuzzyMatch.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/icon.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/keyboard.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/mouse.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/rowNode.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/set.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/promise.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/utils.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/numberSequence.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/customTooltipFeature.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/timer.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/component.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/componentAnnotations.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/filter/provided/simpleFilter.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/filter/floating/provided/readOnlyFloatingFilter.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/filter/provided/date/dateCompWrapper.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/filter/provided/optionsFactory.ts","../node_modules/@ag-grid-community/core/dist/src/ts/filter/filterLocaleText.ts","../node_modules/@ag-grid-community/core/dist/src/ts/constants/keyCode.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/managedFocusFeature.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/filter/provided/providedFilter.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/agAbstractLabel.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/agAbstractField.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/agPickerField.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/agList.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/agSelect.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/agAbstractInputField.ts","../node_modules/@ag-grid-community/core/dist/src/ts/entities/rowNode.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/filter/provided/scalarFilter.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/filter/provided/date/dateFilter.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/filter/floating/provided/simpleFloatingFilter.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/filter/provided/date/dateFloatingFilter.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/filter/provided/date/defaultDateComponent.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/filter/provided/number/numberFilter.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/filter/provided/text/textFilter.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/filter/floating/provided/textInputFloatingFilter.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/filter/provided/number/numberFloatingFilter.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/filter/provided/text/textFloatingFilter.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/touchListener.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/headerRendering/cells/column/headerComp.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/headerRendering/cells/columnGroup/headerGroupComp.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/popupComponent.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/cellEditors/largeTextCellEditor.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/cellEditors/selectCellEditor.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/cellEditors/popupSelectCellEditor.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/cellEditors/textCellEditor.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/cellEditors/popupTextCellEditor.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/cellRenderers/animateShowChangeCellRenderer.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/cellRenderers/animateSlideCellRenderer.ts","../node_modules/@ag-grid-community/core/dist/src/ts/dragAndDrop/dragAndDropService.ts","../node_modules/@ag-grid-community/core/dist/src/ts/rendering/checkboxSelectionComponent.ts","../node_modules/@ag-grid-community/core/dist/src/ts/interfaces/iExcelCreator.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/row/rowDragComp.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/cellRenderers/groupCellRendererCtrl.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/cellRenderers/groupCellRenderer.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/cellRenderers/loadingCellRenderer.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/overlays/loadingOverlayComponent.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/overlays/noRowsOverlayComponent.ts","../node_modules/@ag-grid-community/core/dist/src/ts/rendering/tooltipComponent.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/components/framework/userComponentRegistry.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/components/framework/componentTypes.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/filter/floating/floatingFilterMapper.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/components/framework/userComponentFactory.ts","../node_modules/@ag-grid-community/core/dist/src/ts/dragAndDrop/dragService.ts","../node_modules/@ag-grid-community/core/dist/src/ts/filter/filterManager.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/headerRendering/cells/abstractCell/abstractHeaderCellComp.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/headerRendering/cells/floatingFilter/headerFilterCellComp.ts","../node_modules/@ag-grid-community/core/dist/src/ts/entities/sideBar.ts","../node_modules/@ag-grid-community/core/src/ts/gridOptionsWrapper.ts","../node_modules/@ag-grid-community/core/dist/src/ts/styling/layoutFeature.ts","../node_modules/@ag-grid-community/core/dist/src/ts/gridBodyComp/gridBodyCtrl.ts","../node_modules/@ag-grid-community/core/dist/src/ts/gridBodyComp/gridBodyScrollFeature.ts","../node_modules/@ag-grid-community/core/src/ts/autoScrollService.ts","../node_modules/@ag-grid-community/core/dist/src/ts/gridBodyComp/rowDragFeature.ts","../node_modules/@ag-grid-community/core/dist/src/ts/interfaces/IRangeService.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/cell/cellRangeFeature.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/row/rowCtrl.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/cell/cellPositionFeature.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/cell/cellCustomStyleFeature.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/tooltipFeature.ts","../node_modules/@ag-grid-community/core/dist/src/ts/rendering/beans.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/cell/cellMouseListenerFeature.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/cell/cellKeyboardListenerFeature.ts","../node_modules/@ag-grid-community/core/dist/src/ts/rendering/dndSourceComp.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/cell/cellCtrl.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/gridBodyComp/rowContainer/rowContainerCtrl.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/gridBodyComp/rowContainer/rowContainerEventsFeature.ts","../node_modules/@ag-grid-community/core/dist/src/ts/gridBodyComp/viewportSizeFeature.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/gridBodyComp/rowContainer/setPinnedLeftWidthFeature.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/gridBodyComp/rowContainer/setPinnedRightWidthFeature.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/gridBodyComp/rowContainer/setHeightFeature.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/gridBodyComp/rowContainer/dragListenerFeature.ts","../node_modules/@ag-grid-community/core/dist/src/ts/gridBodyComp/centerWidthFeature.ts","../node_modules/@ag-grid-community/core/dist/src/ts/gridBodyComp/gridBodyComp.ts","../node_modules/@ag-grid-community/core/dist/src/ts/gridBodyComp/scrollVisibleService.ts","../node_modules/@ag-grid-community/core/dist/src/ts/gridBodyComp/mouseEventService.ts","../node_modules/@ag-grid-community/core/dist/src/ts/gridBodyComp/navigationService.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/cellEditors/popupEditorWrapper.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/cell/cellComp.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/row/rowComp.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/gridBodyComp/rowContainer/rowContainerComp.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/headerRendering/row/headerRowComp.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/headerRendering/columnDrag/bodyDropPivotTarget.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/headerRendering/columnDrag/moveColumnFeature.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/headerRendering/columnDrag/bodyDropTarget.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/headerRendering/cells/cssClassApplier.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/headerRendering/cells/column/headerCellComp.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/headerRendering/cells/columnGroup/headerGroupCellComp.ts","../node_modules/@ag-grid-community/core/dist/src/ts/interfaces/iClientSideRowModel.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/headerRendering/cells/abstractCell/abstractHeaderCellCtrl.ts","../node_modules/@ag-grid-community/core/src/ts/gridApi.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/headerRendering/common/headerNavigationService.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/features/setLeftFeature.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/headerRendering/cells/hoverFeature.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/headerRendering/cells/floatingFilter/headerFilterCellCtrl.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/headerRendering/cells/column/resizeFeature.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/agCheckbox.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/headerRendering/cells/column/selectAllFeature.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/headerRendering/cells/column/headerCellCtrl.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/headerRendering/cells/columnGroup/groupResizeFeature.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/headerRendering/cells/columnGroup/groupWidthFeature.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/headerRendering/cells/columnGroup/headerGroupCellCtrl.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/headerRendering/row/headerRowCtrl.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/headerRendering/rowContainer/headerRowContainerCtrl.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/headerRendering/rowContainer/headerRowContainerComp.ts","../node_modules/@ag-grid-community/core/dist/src/ts/headerRendering/gridHeaderCtrl.ts","../node_modules/@ag-grid-community/core/dist/src/ts/headerRendering/gridHeaderComp.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/headerRendering/common/horizontalResizeService.ts","../node_modules/@ag-grid-community/core/dist/esm/es5/src/ts/headerRendering/cells/column/standardMenu.ts","../node_modules/@ag-grid-community/core/dist/src/ts/layout/tabbedLayout.ts","../node_modules/@ag-grid-community/core/dist/src/ts/misc/simpleHttpRequest.ts","../node_modules/@ag-grid-community/core/dist/src/ts/interfaces/serverSideTransaction.ts","../node_modules/@ag-grid-community/core/dist/src/ts/misc/resizeObserverService.ts","../node_modules/@ag-grid-community/core/dist/src/ts/misc/animationFrameService.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/features/positionableFeature.ts","../node_modules/@ag-grid-community/core/dist/src/ts/rendering/autoWidthCalculator.ts","../node_modules/@ag-grid-community/core/dist/src/ts/rendering/rowRenderer.ts","../node_modules/@ag-grid-community/core/dist/src/ts/rendering/valueFormatterService.ts","../node_modules/@ag-grid-community/core/dist/src/ts/pinnedRowModel/pinnedRowModel.ts","../node_modules/@ag-grid-community/core/dist/src/ts/utils/changedPath.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/popupService.ts","../node_modules/@ag-grid-community/core/dist/src/ts/rowNodeCache/rowNodeBlock.ts","../node_modules/@ag-grid-community/core/dist/src/ts/rowNodeCache/rowNodeBlockLoader.ts","../node_modules/@ag-grid-community/core/dist/src/ts/pagination/paginationProxy.ts","../node_modules/@ag-grid-community/core/dist/src/ts/styling/stylingService.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/agRadioButton.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/agToggleButton.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/agInputTextField.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/agInputTextArea.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/agInputNumberField.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/agInputRange.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/agSlider.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/agAngleSelect.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/agColorPanel.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/agPanel.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/agDialog.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/agColorPicker.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/agGroupComponent.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/tabGuardCtrl.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/tabGuardComp.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/agMenuList.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/agMenuPanel.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/agMenuItemComponent.ts","../node_modules/@ag-grid-community/core/src/ts/focusService.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/overlays/overlayWrapperComponent.ts","../node_modules/@ag-grid-community/core/dist/src/ts/widgets/virtualList.ts","../node_modules/@ag-grid-community/core/src/ts/vanillaFrameworkOverrides.ts","../node_modules/@ag-grid-community/core/src/ts/cellNavigationService.ts","../node_modules/@ag-grid-community/core/src/ts/alignedGridsService.ts","../node_modules/@ag-grid-community/core/src/ts/selectionService.ts","../node_modules/@ag-grid-community/core/dist/src/ts/columns/columnApi.ts","../node_modules/@ag-grid-community/core/dist/src/ts/valueService/valueService.ts","../node_modules/@ag-grid-community/core/dist/src/ts/valueService/expressionService.ts","../node_modules/@ag-grid-community/core/src/ts/templateService.ts","../node_modules/@ag-grid-community/core/src/ts/logger.ts","../node_modules/@ag-grid-community/core/dist/src/ts/gridComp/gridCtrl.ts","../node_modules/@ag-grid-community/core/dist/src/ts/gridComp/gridComp.ts","../node_modules/@ag-grid-community/core/src/ts/sortController.ts","../node_modules/@ag-grid-community/core/dist/src/ts/rendering/columnHoverService.ts","../node_modules/@ag-grid-community/core/dist/src/ts/rendering/columnAnimationService.ts","../node_modules/@ag-grid-community/core/dist/src/ts/columns/autoGroupColService.ts","../node_modules/@ag-grid-community/core/dist/src/ts/pagination/paginationAutoPageSizeService.ts","../node_modules/@ag-grid-community/core/dist/src/ts/valueService/valueCache.ts","../node_modules/@ag-grid-community/core/dist/src/ts/valueService/changeDetectionService.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/components/framework/agComponentUtils.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/components/framework/componentMetadataProvider.ts","../node_modules/@ag-grid-community/core/src/ts/environment.ts","../node_modules/@ag-grid-community/core/dist/src/ts/rendering/rowContainerHeightService.ts","../node_modules/@ag-grid-community/core/dist/src/ts/rowNodes/selectableService.ts","../node_modules/@ag-grid-community/core/dist/src/ts/pagination/paginationComp.ts","../node_modules/@ag-grid-community/core/dist/src/ts/entities/rowPosition.ts","../node_modules/@ag-grid-community/core/dist/src/ts/entities/cellPosition.ts","../node_modules/@ag-grid-community/core/dist/src/ts/undoRedo/undoRedoStack.ts","../node_modules/@ag-grid-community/core/dist/src/ts/undoRedo/undoRedoService.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/headerRendering/common/headerPosition.ts","../node_modules/@ag-grid-community/core/dist/src/ts/columns/columnDefFactory.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/rendering/row/rowCssClassCalculator.ts","../node_modules/@ag-grid-community/core/dist/src/ts/rowNodes/rowNodeSorter.ts","../node_modules/@ag-grid-community/core/src/ts/ctrlsService.ts","../node_modules/@ag-grid-community/core/src/ts/ctrlsFactory.ts","../node_modules/@ag-grid-community/core/dist/src/ts/gridBodyComp/fakeHScrollCtrl.ts","../node_modules/@ag-grid-community/core/dist/src/ts/gridBodyComp/fakeHScrollComp.ts","../node_modules/@ag-grid-community/core/dist/src/ts/gridBodyComp/pinnedWidthService.ts","../node_modules/@ag-grid-community/core/dist/src/ts/entities/rowNodeEventThrottle.ts","../node_modules/@ag-grid-community/core/src/ts/grid.ts","../node_modules/@ag-grid-community/core/src/ts/functions.ts","../node_modules/@ag-grid-community/core/dist/esm/src/ts/components/framework/frameworkComponentWrapper.ts","../node_modules/@ag-grid-community/core/dist/src/ts/interfaces/iSparklineCellRendererParams.ts","../node_modules/@ag-grid-community/core/src/ts/main.ts","../node_modules/@ag-grid-community/react/lib/agGridReact.tsx","../node_modules/@ag-grid-community/react/lib/legacy/legacy/agGridReactLegacy.ts","../node_modules/@ag-grid-community/react/lib/legacy/legacy/legacyReactComponent.ts","../node_modules/@ag-grid-community/react/lib/reactUi/reactUi/agGridReactUi.tsx","../node_modules/@ag-grid-community/react/lib/reactUi/reactUi/beansContext.tsx","../node_modules/@ag-grid-community/react/lib/reactUi/cellRenderer/reactUi/cellRenderer/detailCellRenderer.tsx","../node_modules/@ag-grid-community/react/lib/reactUi/cellRenderer/reactUi/cellRenderer/groupCellRenderer.tsx","../node_modules/@ag-grid-community/react/lib/reactUi/cells/reactUi/cells/cellComp.tsx","../node_modules/@ag-grid-community/react/lib/reactUi/cells/reactUi/cells/popupEditorComp.tsx","../node_modules/@ag-grid-community/react/lib/reactUi/cells/reactUi/cells/showJsRenderer.tsx","../node_modules/@ag-grid-community/react/lib/reactUi/reactUi/gridBodyComp.tsx","../node_modules/@ag-grid-community/react/lib/reactUi/reactUi/gridComp.tsx","../node_modules/@ag-grid-community/react/lib/reactUi/header/reactUi/header/gridHeaderComp.tsx","../node_modules/@ag-grid-community/react/lib/reactUi/header/reactUi/header/headerCellComp.tsx","../node_modules/@ag-grid-community/react/lib/reactUi/header/reactUi/header/headerFilterCellComp.tsx","../node_modules/@ag-grid-community/react/lib/reactUi/header/reactUi/header/headerGroupCellComp.tsx","../node_modules/@ag-grid-community/react/lib/reactUi/header/reactUi/header/headerRowComp.tsx","../node_modules/@ag-grid-community/react/lib/reactUi/header/reactUi/header/headerRowContainerComp.tsx","../node_modules/@ag-grid-community/react/lib/reactUi/reactUi/jsComp.tsx","../node_modules/@ag-grid-community/react/lib/reactUi/reactUi/reactComment.tsx","../node_modules/@ag-grid-community/react/lib/reactUi/rows/reactUi/rows/rowComp.tsx","../node_modules/@ag-grid-community/react/lib/reactUi/rows/reactUi/rows/rowContainerComp.tsx","../node_modules/@ag-grid-community/react/lib/reactUi/reactUi/tabGuardComp.tsx","../node_modules/@ag-grid-community/react/lib/reactUi/reactUi/useEffectOnce.tsx","../node_modules/@ag-grid-community/react/lib/reactUi/reactUi/utils.tsx","../node_modules/@ag-grid-community/react/lib/shared/shared/agGridColumn.ts","../node_modules/@ag-grid-community/react/lib/shared/shared/changeDetectionService.ts","../node_modules/@ag-grid-community/react/lib/shared/shared/keyGenerator.ts","../node_modules/@ag-grid-community/react/lib/shared/shared/newReactComponent.ts","../node_modules/@ag-grid-community/react/lib/shared/shared/portalManager.ts","../node_modules/@ag-grid-community/react/lib/shared/shared/reactComponent.ts","../node_modules/@ag-grid-community/react/lib/shared/shared/reactFrameworkOverrides.tsx","../node_modules/@ag-grid-community/react/main.js","../node_modules/@ag-grid-community/react/node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/@ag-grid-community/react/node_modules/prop-types/index.js","../node_modules/@ag-grid-community/react/node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/react-dom/cjs/react-dom-server.browser.production.min.js","../node_modules/react-dom/server.browser.js"],"sourcesContent":[null,null,null,null,null,null,null,null,null,"/**\n * If value is undefined, null or blank, returns null, otherwise returns the value\n * @param {T} value\n * @returns {T | null}\n */\nexport function makeNull<T extends unknown>(value?: T): T | null {\n    if (value == null || value === '') {\n        return null;\n    }\n    return value;\n}\n\nexport function exists(value: string | null | undefined, allowEmptyString?: boolean): value is string;\nexport function exists<T>(value: T): value is NonNullable<T>;\nexport function exists(value: any, allowEmptyString = false): boolean {\n    return value != null && (value !== '' || allowEmptyString);\n}\n\nexport function missing<T>(value: T | null | undefined): value is Exclude<undefined | null, T>;\nexport function missing(value: any): boolean {\n    return !exists(value);\n}\n\nexport function missingOrEmpty<T>(value?: T[] | string | null): boolean {\n    return value == null || value.length === 0;\n}\n\nexport function toStringOrNull(value: any): string | null {\n    return value != null && typeof value.toString === 'function' ? value.toString() : null;\n}\n\n// for parsing html attributes, where we want empty strings and missing attributes to be undefined\nexport function attrToNumber(value?: number | string | null): number | null | undefined {\n    if (value === undefined) {\n        // undefined or empty means ignore the value\n        return;\n    }\n\n    if (value === null || value === '') {\n        // null or blank means clear\n        return null;\n    }\n\n    if (typeof value === 'number') {\n        return isNaN(value) ? undefined : value;\n    }\n\n    const valueParsed = parseInt(value, 10);\n\n    return isNaN(valueParsed) ? undefined : valueParsed;\n}\n\n// for parsing html attributes, where we want empty strings and missing attributes to be undefined\nexport function attrToBoolean(value?: boolean | string | null): boolean | undefined {\n    if (value === undefined) {\n        // undefined or empty means ignore the value\n        return;\n    }\n\n    if (value === null || value === '') {\n        // null means clear\n        return false;\n    }\n\n    if (typeof value === 'boolean') {\n        // if simple boolean, return the boolean\n        return value;\n    }\n\n    // if equal to the string 'true' (ignoring case) then return true\n    return (/true/i).test(value);\n}\n\n// for parsing html attributes, where we want empty strings and missing attributes to be undefined\nexport function attrToString(value?: string): string | undefined {\n    if (value == null || value === '') { return; }\n\n    return value;\n}\n\n/** @deprecated */\nexport function referenceCompare<T>(left: T, right: T): boolean {\n    if (left == null && right == null) {\n        return true;\n    }\n\n    if (left == null && right != null) {\n        return false;\n    }\n\n    if (left != null && right == null) {\n        return false;\n    }\n\n    return left === right;\n}\n\nexport function jsonEquals<T1, T2>(val1: T1, val2: T2): boolean {\n    const val1Json = val1 ? JSON.stringify(val1) : null;\n    const val2Json = val2 ? JSON.stringify(val2) : null;\n\n    return val1Json === val2Json;\n}\n\nexport function defaultComparator(valueA: any, valueB: any, accentedCompare: boolean = false): number {\n    const valueAMissing = valueA == null;\n    const valueBMissing = valueB == null;\n\n    // this is for aggregations sum and avg, where the result can be a number that is wrapped.\n    // if we didn't do this, then the toString() value would be used, which would result in\n    // the strings getting used instead of the numbers.\n    if (valueA && valueA.toNumber) {\n        valueA = valueA.toNumber();\n    }\n\n    if (valueB && valueB.toNumber) {\n        valueB = valueB.toNumber();\n    }\n\n    if (valueAMissing && valueBMissing) {\n        return 0;\n    }\n\n    if (valueAMissing) {\n        return -1;\n    }\n\n    if (valueBMissing) {\n        return 1;\n    }\n\n    function doQuickCompare<T>(a: T, b: T): number {\n        return (a > b ? 1 : (a < b ? -1 : 0));\n    }\n\n    if (typeof valueA !== 'string') {\n        return doQuickCompare(valueA, valueB);\n    }\n\n    if (!accentedCompare) {\n        return doQuickCompare(valueA, valueB);\n    }\n\n    try {\n        // using local compare also allows chinese comparisons\n        return valueA.localeCompare(valueB);\n    } catch (e) {\n        // if something wrong with localeCompare, eg not supported\n        // by browser, then just continue with the quick one\n        return doQuickCompare(valueA, valueB);\n    }\n\n}\n\nexport function values<T>(object: { [key: string]: T; } | Set<T> | Map<any, T>): T[] {\n    if (object instanceof Set || object instanceof Map) {\n        const arr: T[] = [];\n\n        object.forEach((value: T) => arr.push(value));\n\n        return arr;\n    }\n\n    return Object.values(object);\n}\n","// class returns a unique id to use for the column. it checks the existing columns, and if the requested\n// id is already taken, it will start appending numbers until it gets a unique id.\n// eg, if the col field is 'name', it will try ids: {name, name_1, name_2...}\n// if no field or id provided in the col, it will try the ids of natural numbers\n\nimport { toStringOrNull } from \"../utils/generic\";\n\nexport class ColumnKeyCreator {\n\n    private existingKeys: {[key: string]: boolean} = {};\n\n    public addExistingKeys(keys: string[]): void {\n        for (let i = 0; i < keys.length; i++) {\n            this.existingKeys[keys[i]] = true;\n        }\n    }\n\n    public getUniqueKey(colId?: string | null, colField?: string | null): string {\n        // in case user passed in number for colId, convert to string\n        colId = toStringOrNull(colId);\n\n        let count = 0;\n\n        while (true) {\n            let idToTry: string;\n            if (colId) {\n                idToTry = colId;\n                if (count !== 0) {\n                    idToTry += '_' + count;\n                }\n            } else if (colField) {\n                idToTry = colField;\n                if (count !== 0) {\n                    idToTry += '_' + count;\n                }\n            } else {\n                idToTry = '' + count;\n            }\n\n            if (!this.existingKeys[idToTry]) {\n                this.existingKeys[idToTry] = true;\n                return idToTry;\n            }\n\n            count++;\n        }\n    }\n\n}","import { missing, exists, values } from './generic';\n\nexport function iterateObject<T>(object: { [p: string]: T; } | T[] | null | undefined, callback: (key: string, value: T) => void) {\n    if (object == null) { return; }\n\n    if (Array.isArray(object)) {\n        object.forEach((value, index) => callback(`${index}`, value));\n    } else {\n        Object.keys(object).forEach(key => callback(key, object[key]));\n    }\n}\n\nexport function cloneObject<T extends {}>(object: T): T {\n    const copy = {} as T;\n    const keys = Object.keys(object);\n\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const value = (object as any)[key];\n        (copy as any)[key] = value;\n    }\n\n    return copy;\n}\n\nexport function deepCloneObject<T>(object: T): T {\n    return JSON.parse(JSON.stringify(object));\n}\n\n// returns copy of an object, doing a deep clone of any objects with that object.\n// this is used for eg creating copies of Column Definitions, where we want to\n// deep copy all objects, but do not want to deep copy functions (eg when user provides\n// a function or class for colDef.cellRenderer)\nexport function deepCloneDefinition<T>(object: T, keysToSkip?: string[]): T | undefined {\n    if (!object) { return; }\n\n    const obj = object as any;\n    const res: any = {};\n\n    Object.keys(obj).forEach(key => {\n\n        if (keysToSkip && keysToSkip.indexOf(key) >= 0) { return; }\n\n        const value = obj[key];\n\n        // 'simple object' means a bunch of key/value pairs, eg {filter: 'myFilter'}. it does\n        // NOT include the following:\n        // 1) arrays\n        // 2) functions or classes (eg ColumnAPI instance)\n        const sourceIsSimpleObject = isNonNullObject(value) && value.constructor === Object;\n\n        if (sourceIsSimpleObject) {\n            res[key] = deepCloneDefinition(value);\n        } else {\n            res[key] = value;\n        }\n    });\n\n    return res;\n}\n\nexport function getProperty<T, K extends keyof T>(object: T, key: K): any {\n    return object[key];\n}\n\nexport function setProperty<T, K extends keyof T>(object: T, key: K, value: any): void {\n    object[key] = value;\n}\n\n/**\n * Will copy the specified properties from `source` into the equivalent properties on `target`, ignoring properties with\n * a value of `undefined`.\n */\nexport function copyPropertiesIfPresent<S, T extends S, K extends keyof S>(source: S, target: T, ...properties: K[]) {\n    properties.forEach(p => copyPropertyIfPresent(source, target, p));\n}\n\n/**\n * Will copy the specified property from `source` into the equivalent property on `target`, unless the property has a\n * value of `undefined`. If a transformation is provided, it will be applied to the value before being set on `target`.\n */\nexport function copyPropertyIfPresent<S, T extends S, K extends keyof S>(source: S, target: T, property: K, transform?: (value: S[K]) => any) {\n    const value = getProperty(source, property);\n\n    if (value !== undefined) {\n        setProperty(target, property, transform ? transform(value) : value);\n    }\n}\n\nexport function getAllKeysInObjects(objects: any[]): string[] {\n    const allValues: any = {};\n\n    objects.filter(obj => obj != null).forEach(obj => {\n        Object.keys(obj).forEach(key => allValues[key] = null);\n    });\n\n    return Object.keys(allValues);\n}\n\nexport function getAllValuesInObject<T extends Object>(obj: T): any[] {\n    if (!obj) { return []; }\n    const anyObject = Object as any;\n    if (typeof anyObject.values === 'function') {\n        return anyObject.values(obj);\n    }\n\n    const ret: any[] = [];\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && obj.propertyIsEnumerable(key)) {\n            ret.push(obj[key]);\n        }\n    }\n\n    return ret;\n}\n\nexport function mergeDeep(dest: any, source: any, copyUndefined = true, makeCopyOfSimpleObjects = false): void {\n    if (!exists(source)) { return; }\n\n    iterateObject(source, (key: string, sourceValue: any) => {\n        let destValue: any = dest[key];\n\n        if (destValue === sourceValue) { return; }\n\n        // when creating params, we don't want to just copy objects over. otherwise merging ColDefs (eg DefaultColDef\n        // and Column Types) would result in params getting shared between objects.\n        // by putting an empty value into destValue first, it means we end up copying over values from\n        // the source object, rather than just copying in the source object in it's entirety.\n        if (makeCopyOfSimpleObjects) {\n            const objectIsDueToBeCopied = destValue == null && sourceValue != null;\n\n            if (objectIsDueToBeCopied) {\n                // 'simple object' means a bunch of key/value pairs, eg {filter: 'myFilter'}, as opposed\n                // to a Class instance (such as ColumnAPI instance).\n                const sourceIsSimpleObject = typeof sourceValue === 'object' && sourceValue.constructor === Object;\n                const dontCopy = sourceIsSimpleObject;\n\n                if (dontCopy) {\n                    destValue = {};\n                    dest[key] = destValue;\n                }\n            }\n        }\n\n        if (isNonNullObject(sourceValue) && isNonNullObject(destValue) && !Array.isArray(destValue)) {\n            mergeDeep(destValue, sourceValue, copyUndefined, makeCopyOfSimpleObjects);\n        } else if (copyUndefined || sourceValue !== undefined) {\n            dest[key] = sourceValue;\n        }\n    });\n}\n\nexport function missingOrEmptyObject(value: any): boolean {\n    return missing(value) || Object.keys(value).length === 0;\n}\n\nexport function get(source: any, expression: string, defaultValue: any): any {\n    if (source == null) { return defaultValue; }\n\n    const keys = expression.split('.');\n    let objectToRead = source;\n\n    while (keys.length > 1) {\n        objectToRead = objectToRead[keys.shift()!];\n\n        if (objectToRead == null) {\n            return defaultValue;\n        }\n    }\n\n    const value = objectToRead[keys[0]];\n\n    return value != null ? value : defaultValue;\n}\n\nexport function set(target: any, expression: string, value: any) {\n    if (target == null) { return; }\n\n    const keys = expression.split('.');\n    let objectToUpdate = target;\n\n    while (keys.length > 1) {\n        objectToUpdate = objectToUpdate[keys.shift()!];\n\n        if (objectToUpdate == null) {\n            return;\n        }\n    }\n\n    objectToUpdate[keys[0]] = value;\n}\n\nexport function deepFreeze(object: any): any {\n    Object.freeze(object);\n\n    values(object).forEach(v => {\n        if (isNonNullObject(v) || typeof v === 'function') {\n            deepFreeze(v);\n        }\n    });\n\n    return object;\n}\n\nexport function getValueUsingField(data: any, field: string, fieldContainsDots: boolean): any {\n    if (!field || !data) { return; }\n\n    // if no '.', then it's not a deep value\n    if (!fieldContainsDots) {\n        return data[field];\n    }\n\n    // otherwise it is a deep value, so need to dig for it\n    const fields = field.split('.');\n    let currentObject = data;\n\n    for (let i = 0; i < fields.length; i++) {\n        if (currentObject == null) {\n            return undefined;\n        }\n        currentObject = currentObject[fields[i]];\n    }\n\n    return currentObject;\n}\n\n// used by ColumnAPI and GridAPI to remove all references, so keeping grid in memory resulting in a\n// memory leak if user is not disposing of the GridAPI or ColumnApi references\nexport function removeAllReferences(obj: any, objectName: string): void {\n    Object.keys(obj).forEach(key => {\n        const value = obj[key];\n        // we want to replace all the @autowired services, which are objects. any simple types (boolean, string etc)\n        // we don't care about\n        if (typeof value === 'object') {\n            obj[key] = undefined;\n        }\n    });\n    const proto = Object.getPrototypeOf(obj);\n    const properties: any = {};\n\n    Object.keys(proto).forEach(key => {\n        const value = proto[key];\n        // leave all basic types - this is needed for GridAPI to leave the \"destroyed: boolean\" attribute alone\n        if (typeof value === 'function') {\n            const func = () => {\n                console.warn(\n                    `AG Grid: ${objectName} function ${key}() cannot be called as the grid has been destroyed.\n                     Please don't call grid API functions on destroyed grids - as a matter of fact you shouldn't\n                     be keeping the API reference, your application has a memory leak! Remove the API reference\n                     when the grid is destroyed.`\n                );\n            };\n            properties[key] = { value: func, writable: true };\n        }\n    });\n\n    Object.defineProperties(obj, properties);\n}\n\nexport function isNonNullObject(value: any): boolean {\n    return typeof value === 'object' && value !== null;\n}\n","const FUNCTION_STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\nconst FUNCTION_ARGUMENT_NAMES = /([^\\s,]+)/g;\nconst doOnceFlags: { [key: string]: boolean; } = {};\n\n/**\n * If the key was passed before, then doesn't execute the func\n * @param {Function} func\n * @param {string} key\n */\nexport function doOnce(func: () => void, key: string) {\n    if (doOnceFlags[key]) { return; }\n\n    func();\n    doOnceFlags[key] = true;\n}\n\nexport function getFunctionName(funcConstructor: any) {\n    // for every other browser in the world\n    if (funcConstructor.name) {\n        return funcConstructor.name;\n    }\n\n    // for the pestilence that is ie11\n    const matches = /function\\s+([^\\(]+)/.exec(funcConstructor.toString());\n    return matches && matches.length === 2 ? matches[1].trim() : null;\n}\n\n/** @deprecated */\nexport function getFunctionParameters(func: any) {\n    const fnStr = func.toString().replace(FUNCTION_STRIP_COMMENTS, '');\n\n    return fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(FUNCTION_ARGUMENT_NAMES) || [];\n}\n\nexport function isFunction(val: any): boolean {\n    return !!(val && val.constructor && val.call && val.apply);\n}\n\nexport function executeInAWhile(funcs: Function[]): void {\n    executeAfter(funcs, 400);\n}\n\nconst executeNextVMTurnFuncs: Function[] = [];\nlet executeNextVMTurnPending = false;\n\nexport function executeNextVMTurn(func: () => void): void {\n    executeNextVMTurnFuncs.push(func);\n\n    if (executeNextVMTurnPending) { return; }\n\n    executeNextVMTurnPending = true;\n    window.setTimeout(() => {\n        const funcsCopy = executeNextVMTurnFuncs.slice();\n        executeNextVMTurnFuncs.length = 0;\n        executeNextVMTurnPending = false;\n        funcsCopy.forEach(func => func());\n    }, 0);\n}\n\nexport function executeAfter(funcs: Function[], milliseconds = 0): void {\n    if (funcs.length > 0) {\n        window.setTimeout(() => funcs.forEach(func => func()), milliseconds);\n    }\n}\n\n/**\n * from https://stackoverflow.com/questions/24004791/can-someone-explain-the-debounce-function-in-javascript\n * @param {Function} func The function to be debounced\n * @param {number} wait The time in ms to debounce\n * @param {boolean} immediate If it should run immediately or wait for the initial debounce delay\n * @return {Function} The debounced function\n */\nexport function debounce(func: (...args: any[]) => void, wait: number, immediate: boolean = false): (...args: any[]) => void {\n    // 'private' variable for instance\n    // The returned function will be able to reference this due to closure.\n    // Each call to the returned function will share this common timer.\n    let timeout: any;\n\n    // Calling debounce returns a new anonymous function\n    return function(...args: any[]) {\n        // reference the context and args for the setTimeout function\n        const context = this;\n\n        // Should the function be called now? If immediate is true\n        //   and not already in a timeout then the answer is: Yes\n        const callNow = immediate && !timeout;\n\n        // This is the basic debounce behaviour where you can call this\n        //   function several times, but it will only execute once\n        //   [before or after imposing a delay].\n        //   Each time the returned function is called, the timer starts over.\n        window.clearTimeout(timeout);\n\n        // Set the new timeout\n        timeout = window.setTimeout(function() {\n            // Inside the timeout function, clear the timeout variable\n            // which will let the next execution run when in 'immediate' mode\n            timeout = null;\n\n            // Check if the function already ran with the immediate flag\n            if (!immediate) {\n                // Call the original function with apply\n                // apply lets you define the 'this' object as well as the arguments\n                //    (both captured before setTimeout)\n                func.apply(context, args);\n            }\n        }, wait);\n\n        // Immediate mode and no wait timer? Execute the function..\n        if (callNow) {\n            func.apply(context, args);\n        }\n    };\n}\n\n/**\n * @param {Function} func The function to be throttled\n * @param {number} wait The time in ms to throttle\n * @return {Function} The throttled function\n */\nexport function throttle(func: (...args: any[]) => void, wait: number): (...args: any[]) => void {\n    let previousCall = 0;\n\n    return function(...args: any[]) {\n        const context = this;\n        const currentCall = new Date().getTime();\n\n        if (currentCall - previousCall < wait) { return; }\n\n        previousCall = currentCall;\n\n        func.apply(context, args);\n    };\n}\n\nexport function waitUntil(condition: () => boolean, callback: () => void, timeout: number = 100, timeoutMessage?: string) {\n    const timeStamp = new Date().getTime();\n\n    let interval: number | null = null;\n    let executed: boolean = false;\n\n    const internalCallback = () => {\n        const reachedTimeout = ((new Date().getTime()) - timeStamp) > timeout;\n        if (condition() || reachedTimeout) {\n            callback();\n            executed = true;\n            if (interval != null) {\n                window.clearInterval(interval);\n                interval = null;\n            }\n\n            if (reachedTimeout && timeoutMessage) {\n                console.warn(timeoutMessage);\n            }\n        }\n    };\n\n    internalCallback();\n\n    if (!executed) {\n        interval = window.setInterval(internalCallback, 10);\n    }\n}\n\nexport function compose(...fns: Function[]) {\n    return (arg: any) => fns.reduce((composed, f) => f(composed), arg);\n}\n\nexport function callIfPresent(func: Function): void {\n    if (func) { func(); }\n}\n","import { ILogger } from \"../iLogger\";\nimport { Component } from \"../widgets/component\";\nimport { exists, values } from \"../utils/generic\";\nimport { iterateObject } from \"../utils/object\";\nimport { getFunctionName } from \"../utils/function\";\n\n// steps in booting up:\n// 1. create all beans\n// 2. autowire all attributes\n// 3. wire all beans\n// 4. initialise the model\n// 5. initialise the view\n// 6. boot??? (not sure if this is needed)\n// each bean is responsible for initialising itself, taking items from the gridOptionsWrapper\n\nexport interface ContextParams {\n    providedBeanInstances: any;\n    beanClasses: any[];\n    debug: boolean;\n}\n\nexport interface ComponentMeta {\n    componentClass: new () => Object;\n    componentName: string;\n}\n\nexport interface ControllerMeta {\n    controllerClass: new () => Object;\n    controllerName: string;\n}\n\ninterface BeanWrapper {\n    bean: any;\n    beanInstance: any;\n    beanName: any;\n}\n\nexport class Context {\n\n    private beanWrappers: { [key: string]: BeanWrapper; } = {};\n    private contextParams: ContextParams;\n    private logger: ILogger;\n\n    private destroyed = false;\n\n    public constructor(params: ContextParams, logger: ILogger) {\n        if (!params || !params.beanClasses) {\n            return;\n        }\n\n        this.contextParams = params;\n\n        this.logger = logger;\n        this.logger.log(\">> creating ag-Application Context\");\n\n        this.createBeans();\n\n        const beanInstances = this.getBeanInstances();\n\n        this.wireBeans(beanInstances);\n\n        this.logger.log(\">> ag-Application Context ready - component is alive\");\n    }\n\n    private getBeanInstances(): any[] {\n        return values(this.beanWrappers).map(beanEntry => beanEntry.beanInstance);\n    }\n\n    public createBean<T extends any>(bean: T, afterPreCreateCallback?: (comp: Component) => void): T {\n        if (!bean) {\n            throw Error(`Can't wire to bean since it is null`);\n        }\n        this.wireBeans([bean], afterPreCreateCallback);\n        return bean;\n    }\n\n    private wireBeans(beanInstances: any[], afterPreCreateCallback?: (comp: Component) => void): void {\n        this.autoWireBeans(beanInstances);\n        this.methodWireBeans(beanInstances);\n\n        this.callLifeCycleMethods(beanInstances, 'preConstructMethods');\n\n        // the callback sets the attributes, so the component has access to attributes\n        // before postConstruct methods in the component are executed\n        if (exists(afterPreCreateCallback)) {\n            beanInstances.forEach(afterPreCreateCallback);\n        }\n\n        this.callLifeCycleMethods(beanInstances, 'postConstructMethods');\n    }\n\n    private createBeans(): void {\n        // register all normal beans\n        this.contextParams.beanClasses.forEach(this.createBeanWrapper.bind(this));\n        // register override beans, these will overwrite beans above of same name\n\n        // instantiate all beans - overridden beans will be left out\n        iterateObject(this.beanWrappers, (key: string, beanEntry: BeanWrapper) => {\n            let constructorParamsMeta: any;\n            if (beanEntry.bean.__agBeanMetaData && beanEntry.bean.__agBeanMetaData.autowireMethods && beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor) {\n                constructorParamsMeta = beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor;\n            }\n            const constructorParams = this.getBeansForParameters(constructorParamsMeta, beanEntry.bean.name);\n            const newInstance = applyToConstructor(beanEntry.bean, constructorParams);\n            beanEntry.beanInstance = newInstance;\n        });\n\n        const createdBeanNames = Object.keys(this.beanWrappers).join(', ');\n        this.logger.log(`created beans: ${createdBeanNames}`);\n    }\n\n    // tslint:disable-next-line\n    private createBeanWrapper(BeanClass: new () => Object): void {\n        const metaData = (BeanClass as any).__agBeanMetaData;\n\n        if (!metaData) {\n            let beanName: string;\n            if (BeanClass.prototype.constructor) {\n                beanName = getFunctionName(BeanClass.prototype.constructor);\n            } else {\n                beanName = \"\" + BeanClass;\n            }\n            console.error(`Context item ${beanName} is not a bean`);\n            return;\n        }\n\n        const beanEntry = {\n            bean: BeanClass,\n            beanInstance: null as any,\n            beanName: metaData.beanName\n        };\n\n        this.beanWrappers[metaData.beanName] = beanEntry;\n    }\n\n    private autoWireBeans(beanInstances: any[]): void {\n        beanInstances.forEach(beanInstance => {\n            this.forEachMetaDataInHierarchy(beanInstance, (metaData: any, beanName: string) => {\n                const attributes = metaData.agClassAttributes;\n                if (!attributes) {\n                    return;\n                }\n\n                attributes.forEach((attribute: any) => {\n                    const otherBean = this.lookupBeanInstance(beanName, attribute.beanName, attribute.optional);\n                    beanInstance[attribute.attributeName] = otherBean;\n                });\n            });\n        });\n    }\n\n    private methodWireBeans(beanInstances: any[]): void {\n        beanInstances.forEach(beanInstance => {\n            this.forEachMetaDataInHierarchy(beanInstance, (metaData: any, beanName: string) => {\n                iterateObject(metaData.autowireMethods, (methodName: string, wireParams: any[]) => {\n                    // skip constructor, as this is dealt with elsewhere\n                    if (methodName === \"agConstructor\") {\n                        return;\n                    }\n                    const initParams = this.getBeansForParameters(wireParams, beanName);\n                    beanInstance[methodName].apply(beanInstance, initParams);\n                });\n            });\n        });\n    }\n\n    private forEachMetaDataInHierarchy(beanInstance: any, callback: (metaData: any, beanName: string) => void): void {\n\n        let prototype: any = Object.getPrototypeOf(beanInstance);\n        while (prototype != null) {\n\n            const constructor: any = prototype.constructor;\n\n            if (constructor.hasOwnProperty('__agBeanMetaData')) {\n                const metaData = constructor.__agBeanMetaData;\n                const beanName = this.getBeanName(constructor);\n                callback(metaData, beanName);\n            }\n\n            prototype = Object.getPrototypeOf(prototype);\n        }\n    }\n\n    private getBeanName(constructor: any): string {\n        if (constructor.__agBeanMetaData && constructor.__agBeanMetaData.beanName) {\n            return constructor.__agBeanMetaData.beanName;\n        }\n\n        const constructorString = constructor.toString();\n        const beanName = constructorString.substring(9, constructorString.indexOf(\"(\"));\n        return beanName;\n    }\n\n    private getBeansForParameters(parameters: any, beanName: string): any[] {\n        const beansList: any[] = [];\n        if (parameters) {\n            iterateObject(parameters, (paramIndex: string, otherBeanName: string) => {\n                const otherBean = this.lookupBeanInstance(beanName, otherBeanName);\n                beansList[Number(paramIndex)] = otherBean;\n            });\n        }\n        return beansList;\n    }\n\n    private lookupBeanInstance(wiringBean: string, beanName: string, optional = false): any {\n        if (beanName === \"context\") {\n            return this;\n        }\n\n        if (this.contextParams.providedBeanInstances && this.contextParams.providedBeanInstances.hasOwnProperty(beanName)) {\n            return this.contextParams.providedBeanInstances[beanName];\n        }\n\n        const beanEntry = this.beanWrappers[beanName];\n\n        if (beanEntry) {\n            return beanEntry.beanInstance;\n        }\n\n        if (!optional) {\n            console.error(`AG Grid: unable to find bean reference ${beanName} while initialising ${wiringBean}`);\n        }\n\n        return null;\n    }\n\n    private callLifeCycleMethods(beanInstances: any[], lifeCycleMethod: string): void {\n        beanInstances.forEach(beanInstance => this.callLifeCycleMethodsOnBean(beanInstance, lifeCycleMethod));\n    }\n\n    private callLifeCycleMethodsOnBean(beanInstance: any, lifeCycleMethod: string, methodToIgnore?: string): void {\n        // putting all methods into a map removes duplicates\n        const allMethods: { [methodName: string]: boolean; } = {};\n\n        // dump methods from each level of the metadata hierarchy\n        this.forEachMetaDataInHierarchy(beanInstance, (metaData: any) => {\n            const methods = metaData[lifeCycleMethod] as string[];\n            if (methods) {\n                methods.forEach(methodName => {\n                    if (methodName != methodToIgnore) {\n                        allMethods[methodName] = true;\n                    }\n                });\n            }\n        });\n\n        const allMethodsList = Object.keys(allMethods);\n        allMethodsList.forEach(methodName => beanInstance[methodName]());\n    }\n\n    public getBean(name: string): any {\n        return this.lookupBeanInstance(\"getBean\", name, true);\n    }\n\n    public destroy(): void {\n        if (this.destroyed) { return; }\n\n        this.logger.log(\">> Shutting down ag-Application Context\");\n\n        const beanInstances = this.getBeanInstances();\n        this.destroyBeans(beanInstances);\n\n        this.contextParams.providedBeanInstances = null;\n        this.destroyed = true;\n\n        this.logger.log(\">> ag-Application Context shut down - component is dead\");\n    }\n\n    public destroyBean<T>(bean: T): undefined {\n        if (!bean) { return; }\n\n        this.destroyBeans([bean]);\n    }\n\n    public destroyBeans<T>(beans: T[]): T[] {\n        if (!beans) { return []; }\n\n        beans.forEach(bean => {\n            this.callLifeCycleMethodsOnBean(bean, 'preDestroyMethods', 'destroy');\n\n            // call destroy() explicitly if it exists\n            const beanAny = bean as any;\n\n            if (typeof beanAny.destroy === 'function') {\n                beanAny.destroy();\n            }\n        });\n\n        return [];\n    }\n}\n\n// taken from: http://stackoverflow.com/questions/3362471/how-can-i-call-a-javascript-constructor-using-call-or-apply\n// allows calling 'apply' on a constructor\nfunction applyToConstructor(constructor: Function, argArray: any[]) {\n    const args = [null].concat(argArray);\n    const factoryFunction = constructor.bind.apply(constructor, args);\n    return new factoryFunction();\n}\n\nexport function PreConstruct(target: Object, methodName: string, descriptor: TypedPropertyDescriptor<any>): void {\n    const props = getOrCreateProps(target.constructor);\n    if (!props.preConstructMethods) {\n        props.preConstructMethods = [];\n    }\n    props.preConstructMethods.push(methodName);\n}\n\nexport function PostConstruct(target: Object, methodName: string, descriptor: TypedPropertyDescriptor<any>): void {\n    const props = getOrCreateProps(target.constructor);\n    if (!props.postConstructMethods) {\n        props.postConstructMethods = [];\n    }\n    props.postConstructMethods.push(methodName);\n}\n\nexport function PreDestroy(target: Object, methodName: string, descriptor: TypedPropertyDescriptor<any>): void {\n    const props = getOrCreateProps(target.constructor);\n    if (!props.preDestroyMethods) {\n        props.preDestroyMethods = [];\n    }\n    props.preDestroyMethods.push(methodName);\n}\n\nexport function Bean(beanName: string): Function {\n    return (classConstructor: any) => {\n        const props = getOrCreateProps(classConstructor);\n        props.beanName = beanName;\n    };\n}\n\nexport function Autowired(name?: string): Function {\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n        autowiredFunc(target, name, false, target, propertyKey, null);\n    };\n}\n\nexport function Optional(name?: string): Function {\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n        autowiredFunc(target, name, true, target, propertyKey, null);\n    };\n}\n\nfunction autowiredFunc(target: any, name: string | undefined, optional: boolean, classPrototype: any, methodOrAttributeName: string, index: number | null) {\n    if (name === null) {\n        console.error(\"AG Grid: Autowired name should not be null\");\n        return;\n    }\n    if (typeof index === \"number\") {\n        console.error(\"AG Grid: Autowired should be on an attribute\");\n        return;\n    }\n\n    // it's an attribute on the class\n    const props = getOrCreateProps(target.constructor);\n    if (!props.agClassAttributes) {\n        props.agClassAttributes = [];\n    }\n    props.agClassAttributes.push({\n        attributeName: methodOrAttributeName,\n        beanName: name,\n        optional: optional\n    });\n}\n\nexport function Qualifier(name: string): Function {\n    return (classPrototype: any, methodOrAttributeName: string, index: number) => {\n        const constructor: any = typeof classPrototype == \"function\" ? classPrototype : classPrototype.constructor;\n        let props: any;\n\n        if (typeof index === \"number\") {\n            // it's a parameter on a method\n            let methodName: string;\n            if (methodOrAttributeName) {\n                props = getOrCreateProps(constructor);\n                methodName = methodOrAttributeName;\n            } else {\n                props = getOrCreateProps(constructor);\n                methodName = \"agConstructor\";\n            }\n            if (!props.autowireMethods) {\n                props.autowireMethods = {};\n            }\n            if (!props.autowireMethods[methodName]) {\n                props.autowireMethods[methodName] = {};\n            }\n            props.autowireMethods[methodName][index] = name;\n        }\n    };\n}\n\nfunction getOrCreateProps(target: any): any {\n    if (!target.hasOwnProperty(\"__agBeanMetaData\")) {\n        target.__agBeanMetaData = {};\n    }\n\n    return target.__agBeanMetaData;\n}\n","export enum ModuleNames {\n\n    // when using modules, user references this\n    CommunityCoreModule = \"@ag-grid-community/core\", // should this be grid-community-core?\n    // when not using modules, user references this\n    CommunityAllModules = \"@ag-grid-community/all\", // should this be grid-community-all\n\n    // community modules\n    InfiniteRowModelModule = \"@ag-grid-community/infinite-row-model\",\n    ClientSideRowModelModule = \"@ag-grid-community/client-side-row-model\",\n    CsvExportModule = \"@ag-grid-community/csv-export\",\n\n    // enterprise core - users never import on this, but other enterprise modules do\n    EnterpriseCoreModule = \"@ag-grid-enterprise/core\", // should this be grid-enterprise-core?\n    // when not using modules, user references this\n    EnterpriseAllModules = \"@ag-grid-enterprise/all\", // should this be grid-enterprise-all\n\n    // enterprise modules\n    RowGroupingModule = \"@ag-grid-enterprise/row-grouping\",\n    ColumnToolPanelModule = \"@ag-grid-enterprise/column-tool-panel\",\n    FiltersToolPanelModule = \"@ag-grid-enterprise/filter-tool-panel\",\n    MenuModule = \"@ag-grid-enterprise/menu\",\n    SetFilterModule = \"@ag-grid-enterprise/set-filter\",\n    MultiFilterModule = \"@ag-grid-enterprise/multi-filter\",\n    StatusBarModule = \"@ag-grid-enterprise/status-bar\",\n    SideBarModule = \"@ag-grid-enterprise/side-bar\",\n    RangeSelectionModule = \"@ag-grid-enterprise/range-selection\",\n    MasterDetailModule = \"@ag-grid-enterprise/master-detail\",\n    RichSelectModule = \"@ag-grid-enterprise/rich-select\",\n    GridChartsModule = \"@ag-grid-enterprise/charts\",\n    ViewportRowModelModule = \"@ag-grid-enterprise/viewport-row-model\",\n    ServerSideRowModelModule = \"@ag-grid-enterprise/server-side-row-model\", // or\n    ExcelExportModule = \"@ag-grid-enterprise/excel-export\",\n    ClipboardModule = \"@ag-grid-enterprise/clipboard\",\n    SparklinesModule = \"@ag-grid-enterprise/sparklines\",\n\n    // framework wrappers currently don't provide beans, comps etc, so no need to be modules,\n    // however i argue they should be as in theory they 'could' provide beans etc\n    AngularModule = \"@ag-grid-community/angular\",\n    ReactModule = \"@ag-grid-community/react\",\n    VueModule = \"@ag-grid-community/vue\",\n    PolymerModule = \"@ag-grid-community/polymer\",\n\n    // and then this, which is definitely not a grid module, as it should not have any dependency\n    // on the grid (ie shouldn't even reference the Module interface)\n    // ChartsModule = \"@ag-grid-community/charts-core\",\n}\n","import { Logger, LoggerFactory } from \"./logger\";\nimport { Bean, Qualifier } from \"./context/context\";\nimport { IEventEmitter } from \"./interfaces/iEventEmitter\";\nimport { GridOptionsWrapper } from \"./gridOptionsWrapper\";\nimport { AgEvent } from \"./events\";\nimport { IFrameworkOverrides } from \"./interfaces/iFrameworkOverrides\";\n\n@Bean('eventService')\nexport class EventService implements IEventEmitter {\n\n    private allSyncListeners = new Map<string, Set<Function>>();\n    private allAsyncListeners = new Map<string, Set<Function>>();\n\n    private globalSyncListeners = new Set<Function>();\n    private globalAsyncListeners = new Set<Function>();\n\n    private frameworkOverrides: IFrameworkOverrides;\n\n    private asyncFunctionsQueue: Function[] = [];\n    private scheduled = false;\n\n    // using an object performs better than a Set for the number of different events we have\n    private firedEvents: { [key: string]: boolean; } = {};\n\n    // because this class is used both inside the context and outside the context, we do not\n    // use autowired attributes, as that would be confusing, as sometimes the attributes\n    // would be wired, and sometimes not.\n    //\n    // the global event servers used by AG Grid is autowired by the context once, and this\n    // setBeans method gets called once.\n    //\n    // the times when this class is used outside of the context (eg RowNode has an instance of this\n    // class) then it is not a bean, and this setBeans method is not called.\n    public setBeans(\n        @Qualifier('loggerFactory') loggerFactory: LoggerFactory,\n        @Qualifier('gridOptionsWrapper') gridOptionsWrapper: GridOptionsWrapper,\n        @Qualifier('frameworkOverrides') frameworkOverrides: IFrameworkOverrides,\n        @Qualifier('globalEventListener') globalEventListener: Function | null = null) {\n        this.frameworkOverrides = frameworkOverrides;\n\n        if (globalEventListener) {\n            const async = gridOptionsWrapper.useAsyncEvents();\n            this.addGlobalListener(globalEventListener, async);\n        }\n    }\n\n    private getListeners(eventType: string, async: boolean, autoCreateListenerCollection: boolean): Set<Function> | undefined {\n        const listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;\n        let listeners = listenerMap.get(eventType);\n\n        // Note: 'autoCreateListenerCollection' should only be 'true' if a listener is about to be added. For instance\n        // getListeners() is also called during event dispatch even though no listeners are added. This measure protects\n        // against 'memory bloat' as empty collections will prevent the RowNode's event service from being removed after\n        // the RowComp is destroyed, see noRegisteredListenersExist() below.\n        if (!listeners && autoCreateListenerCollection) {\n            listeners = new Set<Function>();\n            listenerMap.set(eventType, listeners);\n        }\n\n        return listeners;\n    }\n\n    public noRegisteredListenersExist(): boolean {\n        return this.allSyncListeners.size === 0 && this.allAsyncListeners.size === 0 &&\n            this.globalSyncListeners.size === 0 && this.globalAsyncListeners.size === 0;\n    }\n\n    public addEventListener(eventType: string, listener: Function, async = false): void {\n        this.getListeners(eventType, async, true)!.add(listener);\n    }\n\n    public removeEventListener(eventType: string, listener: Function, async = false): void {\n        const listeners = this.getListeners(eventType, async, false);\n        if (!listeners) { return; }\n\n        listeners.delete(listener);\n\n        if (listeners.size === 0) {\n            const listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;\n            listenerMap.delete(eventType);\n        }\n    }\n\n    public addGlobalListener(listener: Function, async = false): void {\n        (async ? this.globalAsyncListeners : this.globalSyncListeners).add(listener);\n    }\n\n    public removeGlobalListener(listener: Function, async = false): void {\n        (async ? this.globalAsyncListeners : this.globalSyncListeners).delete(listener);\n    }\n\n    public dispatchEvent(event: AgEvent): void {\n        this.dispatchToListeners(event, true);\n        this.dispatchToListeners(event, false);\n\n        this.firedEvents[event.type] = true;\n    }\n\n    public dispatchEventOnce(event: AgEvent): void {\n        if (!this.firedEvents[event.type]) {\n            this.dispatchEvent(event);\n        }\n    }\n\n    private dispatchToListeners(event: AgEvent, async: boolean) {\n        const eventType = event.type;\n        const processEventListeners = (listeners: Set<Function>) => listeners.forEach(listener => {\n            if (async) {\n                this.dispatchAsync(() => listener(event));\n            } else {\n                listener(event);\n            }\n        });\n\n        const listeners = this.getListeners(eventType, async, false);\n        if (listeners) {\n            processEventListeners(listeners);\n        }\n\n        const globalListeners = async ? this.globalAsyncListeners : this.globalSyncListeners;\n\n        globalListeners.forEach(listener => {\n            if (async) {\n                this.dispatchAsync(\n                    () => this.frameworkOverrides.dispatchEvent(eventType, () => listener(eventType, event), true)\n                );\n            } else {\n                this.frameworkOverrides.dispatchEvent(eventType, () => listener(eventType, event), true);\n            }\n        });\n    }\n\n    // this gets called inside the grid's thread, for each event that it\n    // wants to set async. the grid then batches the events into one setTimeout()\n    // because setTimeout() is an expensive operation. ideally we would have\n    // each event in it's own setTimeout(), but we batch for performance.\n    private dispatchAsync(func: Function): void {\n        // add to the queue for executing later in the next VM turn\n        this.asyncFunctionsQueue.push(func);\n\n        // check if timeout is already scheduled. the first time the grid calls\n        // this within it's thread turn, this should be false, so it will schedule\n        // the 'flush queue' method the first time it comes here. then the flag is\n        // set to 'true' so it will know it's already scheduled for subsequent calls.\n        if (!this.scheduled) {\n            // if not scheduled, schedule one\n            window.setTimeout(this.flushAsyncQueue.bind(this), 0);\n            // mark that it is scheduled\n            this.scheduled = true;\n        }\n    }\n\n    // this happens in the next VM turn only, and empties the queue of events\n    private flushAsyncQueue(): void {\n        this.scheduled = false;\n\n        // we take a copy, because the event listener could be using\n        // the grid, which would cause more events, which would be potentially\n        // added to the queue, so safe to take a copy, the new events will\n        // get executed in a later VM turn rather than risk updating the\n        // queue as we are flushing it.\n        const queueCopy = this.asyncFunctionsQueue.slice();\n        this.asyncFunctionsQueue = [];\n\n        // execute the queue\n        queueCopy.forEach(func => func());\n    }\n}\n","export class Constants {\n\n    static ROW_BUFFER_SIZE = 10;\n    static LAYOUT_INTERVAL = 500;\n    static BATCH_WAIT_MILLIS = 50;\n\n    static EXPORT_TYPE_DRAG_COPY = 'dragCopy';\n    static EXPORT_TYPE_CLIPBOARD = 'clipboard';\n    static EXPORT_TYPE_EXCEL = 'excel';\n    static EXPORT_TYPE_CSV = 'csv';\n\n    static ROW_MODEL_TYPE_INFINITE = 'infinite';\n    static ROW_MODEL_TYPE_VIEWPORT = 'viewport';\n    static ROW_MODEL_TYPE_CLIENT_SIDE = 'clientSide';\n    static ROW_MODEL_TYPE_SERVER_SIDE = 'serverSide';\n\n    static ALWAYS = 'always';\n    static ONLY_WHEN_GROUPING = 'onlyWhenGrouping';\n\n    static PINNED_TOP = 'top';\n    static PINNED_BOTTOM = 'bottom';\n\n    static DOM_LAYOUT_NORMAL = 'normal';\n    static DOM_LAYOUT_PRINT = 'print';\n    static DOM_LAYOUT_AUTO_HEIGHT = 'autoHeight';\n\n    static GROUP_AUTO_COLUMN_ID = 'ag-Grid-AutoColumn';\n\n    static SOURCE_PASTE = 'paste';\n\n    static PINNED_RIGHT: 'right' = 'right';\n    static PINNED_LEFT: 'left' = 'left';\n\n    static SORT_ASC: 'asc' = 'asc';\n    static SORT_DESC: 'desc' = 'desc';\n\n    static INPUT_SELECTOR = 'input, select, button, textarea';\n    static FOCUSABLE_SELECTOR = '[tabindex], input, select, button, textarea';\n    static FOCUSABLE_EXCLUDE = '.ag-hidden, .ag-hidden *, [disabled], .ag-disabled, .ag-disabled *';\n}\n","import { Module } from \"../interfaces/iModule\";\nimport { ModuleNames } from \"./moduleNames\";\nimport { doOnce } from \"../utils/function\";\nimport { values } from \"../utils/generic\";\n\nexport class ModuleRegistry {\n\n    // having in a map a) removes duplicates and b) allows fast lookup\n    private static modulesMap: { [name: string]: Module; } = {};\n    private static moduleBased: boolean | undefined;\n\n    public static register(module: Module, moduleBased = true): void {\n        ModuleRegistry.modulesMap[module.moduleName] = module;\n\n        if (ModuleRegistry.moduleBased === undefined) {\n            ModuleRegistry.moduleBased = moduleBased;\n        } else {\n            if (ModuleRegistry.moduleBased !== moduleBased) {\n                doOnce(() => {\n                    console.warn(`AG Grid: You are mixing modules (i.e. @ag-grid-community/core) and packages (ag-grid-community) - you can only use one or the other of these mechanisms.`);\n                    console.warn('Please see https://www.ag-grid.com/javascript-grid/packages-modules/ for more information.');\n\n                },\n                    'ModulePackageCheck');\n            }\n        }\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    public static registerModules(modules: Module[], moduleBased = true): void {\n        if (!modules) {\n            return;\n        }\n        modules.forEach(module => ModuleRegistry.register(module, moduleBased));\n    }\n\n    public static assertRegistered(moduleName: ModuleNames, reason: string): boolean {\n        if (this.isRegistered(moduleName)) {\n            return true;\n        }\n\n        const warningKey = reason + moduleName;\n        let warningMessage: string;\n        if (ModuleRegistry.moduleBased) {\n            warningMessage = `AG Grid: unable to use ${reason} as module ${moduleName} is not present. Please see: https://www.ag-grid.com/javascript-grid/modules/`;\n        } else {\n            warningMessage = `AG Grid: unable to use ${reason} as package 'ag-grid-enterprise' is not present. Please see: https://www.ag-grid.com/javascript-grid/packages/`;\n        }\n\n        doOnce(() => {\n            console.warn(warningMessage);\n        }, warningKey);\n\n        return false;\n    }\n\n    public static isRegistered(moduleName: ModuleNames): boolean {\n        return !!ModuleRegistry.modulesMap[moduleName];\n    }\n\n    public static getRegisteredModules(): Module[] {\n        return values(ModuleRegistry.modulesMap);\n    }\n\n    public static isPackageBased(): boolean {\n        return !ModuleRegistry.moduleBased;\n    }\n}\n","import { IHeaderColumn } from \"./iHeaderColumn\";\nimport { IProvidedColumn } from \"./iProvidedColumn\";\nimport {\n    AbstractColDef,\n    BaseColDefParams,\n    ColDef,\n    ColSpanParams,\n    IAggFunc,\n    ColumnFunctionCallbackParams,\n    RowSpanParams\n} from \"./colDef\";\nimport { EventService } from \"../eventService\";\nimport { Autowired, Context, PostConstruct } from \"../context/context\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { ColumnUtils } from \"../columns/columnUtils\";\nimport { RowNode } from \"./rowNode\";\nimport { IEventEmitter } from \"../interfaces/iEventEmitter\";\nimport { ColumnEvent, ColumnEventType } from \"../events\";\nimport { ColumnApi } from \"../columns/columnApi\";\nimport { GridApi } from \"../gridApi\";\nimport { ColumnGroup } from \"./columnGroup\";\nimport { ProvidedColumnGroup } from \"./providedColumnGroup\";\nimport { Constants } from \"../constants/constants\";\nimport { ModuleNames } from \"../modules/moduleNames\";\nimport { ModuleRegistry } from \"../modules/moduleRegistry\";\nimport { attrToNumber, attrToBoolean, exists, missing } from \"../utils/generic\";\nimport { doOnce } from \"../utils/function\";\nimport { mergeDeep } from \"../utils/object\";\n\nlet instanceIdSequence = 0;\n\n// Wrapper around a user provide column definition. The grid treats the column definition as ready only.\n// This class contains all the runtime information about a column, plus some logic (the definition has no logic).\n// This class implements both interfaces ColumnGroupChild and ProvidedColumnGroupChild as the class can\n// appear as a child of either the original tree or the displayed tree. However the relevant group classes\n// for each type only implements one, as each group can only appear in it's associated tree (eg ProvidedColumnGroup\n// can only appear in OriginalColumn tree).\nexport class Column implements IHeaderColumn, IProvidedColumn, IEventEmitter {\n\n    // + renderedHeaderCell - for making header cell transparent when moving\n    public static EVENT_MOVING_CHANGED = 'movingChanged';\n    // + renderedCell - changing left position\n    public static EVENT_LEFT_CHANGED = 'leftChanged';\n    // + renderedCell - changing width\n    public static EVENT_WIDTH_CHANGED = 'widthChanged';\n    // + renderedCell - for changing pinned classes\n    public static EVENT_LAST_LEFT_PINNED_CHANGED = 'lastLeftPinnedChanged';\n    public static EVENT_FIRST_RIGHT_PINNED_CHANGED = 'firstRightPinnedChanged';\n    // + renderedColumn - for changing visibility icon\n    public static EVENT_VISIBLE_CHANGED = 'visibleChanged';\n    // + every time the filter changes, used in the floating filters\n    public static EVENT_FILTER_CHANGED = 'filterChanged';\n    // + renderedHeaderCell - marks the header with filter icon\n    public static EVENT_FILTER_ACTIVE_CHANGED = 'filterActiveChanged';\n    // + renderedHeaderCell - marks the header with sort icon\n    public static EVENT_SORT_CHANGED = 'sortChanged';\n\n    public static EVENT_MENU_VISIBLE_CHANGED = 'menuVisibleChanged';\n\n    // + toolpanel, for gui updates\n    public static EVENT_ROW_GROUP_CHANGED = 'columnRowGroupChanged';\n    // + toolpanel, for gui updates\n    public static EVENT_PIVOT_CHANGED = 'columnPivotChanged';\n    // + toolpanel, for gui updates\n    public static EVENT_VALUE_CHANGED = 'columnValueChanged';\n\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('columnUtils') private columnUtils: ColumnUtils;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('context') private context: Context;\n\n    private readonly colId: any;\n    private colDef: ColDef;\n\n    // used by React (and possibly other frameworks) as key for rendering\n    private instanceId = instanceIdSequence++;\n\n    // We do NOT use this anywhere, we just keep a reference. this is to check object equivalence\n    // when the user provides an updated list of columns - so we can check if we have a column already\n    // existing for a col def. we cannot use the this.colDef as that is the result of a merge.\n    // This is used in ColumnFactory\n    private userProvidedColDef: ColDef | null;\n\n    private actualWidth: any;\n\n    private visible: any;\n    private pinned: 'left' | 'right' | null;\n    private left: number | null;\n    private oldLeft: number | null;\n    private aggFunc: string | IAggFunc | null | undefined;\n    private sort: 'asc' | 'desc' | null | undefined;\n    private sortIndex: number | null | undefined;\n    private moving = false;\n    private menuVisible = false;\n\n    private lastLeftPinned: boolean;\n    private firstRightPinned: boolean;\n\n    private minWidth: number | null | undefined;\n    private maxWidth: number | null | undefined;\n\n    private filterActive = false;\n\n    private eventService: EventService = new EventService();\n\n    private fieldContainsDots: boolean;\n    private tooltipFieldContainsDots: boolean;\n\n    private rowGroupActive = false;\n    private pivotActive = false;\n    private aggregationActive = false;\n    private flex: number | null | undefined;\n\n    private readonly primary: boolean;\n\n    private parent: ColumnGroup;\n    private originalParent: ProvidedColumnGroup | null;\n\n    constructor(colDef: ColDef, userProvidedColDef: ColDef | null, colId: string, primary: boolean) {\n        this.colDef = colDef;\n        this.userProvidedColDef = userProvidedColDef;\n        this.colId = colId;\n        this.primary = primary;\n\n        this.setState(colDef);\n    }\n\n    public getInstanceId(): number {\n        return this.instanceId;\n    }\n\n    private setState(colDef: ColDef): void {\n        // sort\n        if (colDef.sort !== undefined) {\n            if (colDef.sort === Constants.SORT_ASC || colDef.sort === Constants.SORT_DESC) {\n                this.sort = colDef.sort;\n            }\n        } else {\n            if (colDef.initialSort === Constants.SORT_ASC || colDef.initialSort === Constants.SORT_DESC) {\n                this.sort = colDef.initialSort;\n            }\n        }\n\n        // sortIndex\n        const sortIndex = attrToNumber(colDef.sortIndex);\n        const initialSortIndex = attrToNumber(colDef.initialSortIndex);\n        if (sortIndex !== undefined) {\n            if (sortIndex !== null) {\n                this.sortIndex = sortIndex;\n            }\n        } else {\n            if (initialSortIndex !== null) {\n                this.sortIndex = initialSortIndex;\n            }\n        }\n\n        // hide\n        const hide = attrToBoolean(colDef.hide);\n        const initialHide = attrToBoolean(colDef.initialHide);\n\n        if (hide !== undefined) {\n            this.visible = !hide;\n        } else {\n            this.visible = !initialHide;\n        }\n\n        // pinned\n        if (colDef.pinned !== undefined) {\n            this.setPinned(colDef.pinned);\n        } else {\n            this.setPinned(colDef.initialPinned);\n        }\n\n        // flex\n        const flex = attrToNumber(colDef.flex);\n        const initialFlex = attrToNumber(colDef.initialFlex);\n        if (flex !== undefined) {\n            this.flex = flex;\n        } else if (initialFlex !== undefined) {\n            this.flex = initialFlex;\n        }\n    }\n\n    // gets called when user provides an alternative colDef, eg\n    public setColDef(colDef: ColDef, userProvidedColDef: ColDef | null): void {\n        this.colDef = colDef;\n        this.userProvidedColDef = userProvidedColDef;\n        this.initMinAndMaxWidths();\n        this.initDotNotation();\n    }\n\n    /**\n     * Returns the column definition provided by the application.\n     * This may not be correct, as items can be superseded by default column options.\n     * However it's useful for comparison, eg to know which application column definition matches that column.\n     */\n    public getUserProvidedColDef(): ColDef | null {\n        return this.userProvidedColDef;\n    }\n\n    public setParent(parent: ColumnGroup): void {\n        this.parent = parent;\n    }\n\n    /** Returns the parent column group, if column grouping is active. */\n    public getParent(): ColumnGroup {\n        return this.parent;\n    }\n\n    public setOriginalParent(originalParent: ProvidedColumnGroup | null): void {\n        this.originalParent = originalParent;\n    }\n\n    public getOriginalParent(): ProvidedColumnGroup | null {\n        return this.originalParent;\n    }\n\n    // this is done after constructor as it uses gridOptionsWrapper\n    @PostConstruct\n    private initialise(): void {\n        this.initMinAndMaxWidths();\n\n        this.resetActualWidth('gridInitializing');\n\n        this.initDotNotation();\n\n        this.validate();\n    }\n\n    private initDotNotation(): void {\n        const suppressDotNotation = this.gridOptionsWrapper.isSuppressFieldDotNotation();\n        this.fieldContainsDots = exists(this.colDef.field) && this.colDef.field.indexOf('.') >= 0 && !suppressDotNotation;\n        this.tooltipFieldContainsDots = exists(this.colDef.tooltipField) && this.colDef.tooltipField.indexOf('.') >= 0 && !suppressDotNotation;\n    }\n\n    private initMinAndMaxWidths(): void {\n        const colDef = this.colDef;\n\n        this.minWidth = this.columnUtils.calculateColMinWidth(colDef);\n        this.maxWidth = this.columnUtils.calculateColMaxWidth(colDef);\n    }\n\n    public resetActualWidth(source: ColumnEventType = 'api'): void {\n        const initialWidth = this.columnUtils.calculateColInitialWidth(this.colDef);\n        this.setActualWidth(initialWidth, source, true);\n    }\n\n    public isEmptyGroup(): boolean {\n        return false;\n    }\n\n    public isRowGroupDisplayed(colId: string): boolean {\n        if (missing(this.colDef) || missing(this.colDef.showRowGroup)) {\n            return false;\n        }\n\n        const showingAllGroups = this.colDef.showRowGroup === true;\n        const showingThisGroup = this.colDef.showRowGroup === colId;\n\n        return showingAllGroups || showingThisGroup;\n    }\n\n    /** Returns `true` if column is a primary column, `false` if secondary. Secondary columns are used for pivoting. */\n    public isPrimary(): boolean {\n        return this.primary;\n    }\n\n    /** Returns `true` if column filtering is allowed. */\n    public isFilterAllowed(): boolean {\n        // filter defined means it's a string, class or true.\n        // if its false, null or undefined then it's false.\n        const filterDefined = !!this.colDef.filter || !!this.colDef.filterFramework;\n        return filterDefined;\n    }\n\n    public isFieldContainsDots(): boolean {\n        return this.fieldContainsDots;\n    }\n\n    public isTooltipFieldContainsDots(): boolean {\n        return this.tooltipFieldContainsDots;\n    }\n\n    private validate(): void {\n\n        const colDefAny = this.colDef as any;\n\n        function warnOnce(msg: string, key: string, obj?: any) {\n            doOnce(() => {\n                if (obj) {\n                    console.warn(msg, obj);\n                } else {\n                    doOnce(() => console.warn(msg), key);\n                }\n            }, key);\n        }\n\n        const usingCSRM = this.gridOptionsWrapper.isRowModelDefault();\n        if (usingCSRM && !ModuleRegistry.isRegistered(ModuleNames.RowGroupingModule)) {\n            const rowGroupingItems =\n                ['enableRowGroup', 'rowGroup', 'rowGroupIndex', 'enablePivot', 'enableValue', 'pivot', 'pivotIndex', 'aggFunc'];\n            rowGroupingItems.forEach(item => {\n                if (exists(colDefAny[item])) {\n                    if (ModuleRegistry.isPackageBased()) {\n                        warnOnce(`AG Grid: ${item} is only valid in ag-grid-enterprise, your column definition should not have ${item}`, 'ColumnRowGroupingMissing' + item);\n                    } else {\n                        warnOnce(`AG Grid: ${item} is only valid with AG Grid Enterprise Module ${ModuleNames.RowGroupingModule} - your column definition should not have ${item}`, 'ColumnRowGroupingMissing' + item);\n                    }\n                }\n            });\n        }\n\n        if (!ModuleRegistry.isRegistered(ModuleNames.RichSelectModule)) {\n            if (this.colDef.cellEditor === 'agRichSelect') {\n                if (ModuleRegistry.isPackageBased()) {\n                    warnOnce(`AG Grid: ${this.colDef.cellEditor} can only be used with ag-grid-enterprise`, 'ColumnRichSelectMissing');\n                } else {\n                    warnOnce(`AG Grid: ${this.colDef.cellEditor} can only be used with AG Grid Enterprise Module ${ModuleNames.RichSelectModule}`, 'ColumnRichSelectMissing');\n                }\n            }\n        }\n\n        if (this.gridOptionsWrapper.isTreeData()) {\n            const itemsNotAllowedWithTreeData = ['rowGroup', 'rowGroupIndex', 'pivot', 'pivotIndex'];\n            itemsNotAllowedWithTreeData.forEach(item => {\n                if (exists(colDefAny[item])) {\n                    warnOnce(`AG Grid: ${item} is not possible when doing tree data, your column definition should not have ${item}`, 'TreeDataCannotRowGroup');\n                }\n            });\n        }\n\n        if (exists(this.colDef.width) && typeof this.colDef.width !== 'number') {\n            warnOnce('AG Grid: colDef.width should be a number, not ' + typeof this.colDef.width, 'ColumnCheck_asdfawef');\n        }\n\n        if (colDefAny.pinnedRowCellRenderer) {\n            warnOnce('AG Grid: pinnedRowCellRenderer no longer exists, use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned. This was an unfortunate (but necessary) change we had to do to allow future plans we have of re-skinng the data grid in frameworks such as React, Angular and Vue. See https://www.ag-grid.com/javascript-grid/cell-rendering/#many-renderers-one-column', 'colDef.pinnedRowCellRenderer-deprecated');\n        }\n        if (colDefAny.pinnedRowCellRendererParams) {\n            warnOnce('AG Grid: pinnedRowCellRenderer no longer exists, use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned. This was an unfortunate (but necessary) change we had to do to allow future plans we have of re-skinng the data grid in frameworks such as React, Angular and Vue. See https://www.ag-grid.com/javascript-grid/cell-rendering/#many-renderers-one-column', 'colDef.pinnedRowCellRenderer-deprecated');\n        }\n        if (colDefAny.pinnedRowCellRendererFramework) {\n            warnOnce('AG Grid: pinnedRowCellRenderer no longer exists, use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned. This was an unfortunate (but necessary) change we had to do to allow future plans we have of re-skinng the data grid in frameworks such as React, Angular and Vue. See https://www.ag-grid.com/javascript-grid/cell-rendering/#many-renderers-one-column', 'colDef.pinnedRowCellRenderer-deprecated');\n        }\n        if (colDefAny.pinnedRowValueGetter) {\n            warnOnce('AG Grid: pinnedRowCellRenderer is deprecated, use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned. This was an unfortunate (but necessary) change we had to do to allow future plans we have of re-skinng the data grid in frameworks such as React, Angular and Vue.', 'colDef.pinnedRowCellRenderer-deprecated');\n        }\n    }\n\n    /** Add an event listener to the column. */\n    public addEventListener(eventType: string, listener: Function): void {\n        this.eventService.addEventListener(eventType, listener);\n    }\n\n    /** Remove event listener from the column. */\n    public removeEventListener(eventType: string, listener: Function): void {\n        this.eventService.removeEventListener(eventType, listener);\n    }\n\n    private createColumnFunctionCallbackParams(rowNode: RowNode): ColumnFunctionCallbackParams {\n        return {\n            node: rowNode,\n            data: rowNode.data,\n            column: this,\n            colDef: this.colDef,\n            context: this.gridOptionsWrapper.getContext(),\n            api: this.gridOptionsWrapper.getApi()!,\n            columnApi: this.gridOptionsWrapper.getColumnApi()!\n        };\n    }\n\n    public isSuppressNavigable(rowNode: RowNode): boolean {\n        // if boolean set, then just use it\n        if (typeof this.colDef.suppressNavigable === 'boolean') {\n            return this.colDef.suppressNavigable;\n        }\n\n        // if function, then call the function to find out\n        if (typeof this.colDef.suppressNavigable === 'function') {\n            const params = this.createColumnFunctionCallbackParams(rowNode);\n            const userFunc = this.colDef.suppressNavigable;\n            return userFunc(params);\n        }\n\n        return false;\n    }\n\n    public isCellEditable(rowNode: RowNode): boolean {\n\n        // only allow editing of groups if the user has this option enabled\n        if (rowNode.group && !this.gridOptionsWrapper.isEnableGroupEdit()) {\n            return false;\n        }\n\n        return this.isColumnFunc(rowNode, this.colDef.editable);\n    }\n\n    public isSuppressFillHandle(): boolean {\n        return !!attrToBoolean(this.colDef.suppressFillHandle);\n    }\n\n    public isAutoHeight(): boolean {\n        return !!attrToBoolean(this.colDef.autoHeight);\n    }\n\n    public isRowDrag(rowNode: RowNode): boolean {\n        return this.isColumnFunc(rowNode, this.colDef.rowDrag);\n    }\n\n    public isDndSource(rowNode: RowNode): boolean {\n        return this.isColumnFunc(rowNode, this.colDef.dndSource);\n    }\n\n    public isCellCheckboxSelection(rowNode: RowNode): boolean {\n        return this.isColumnFunc(rowNode, this.colDef.checkboxSelection);\n    }\n\n    public isSuppressPaste(rowNode: RowNode): boolean {\n        return this.isColumnFunc(rowNode, this.colDef ? this.colDef.suppressPaste : null);\n    }\n\n    public isResizable(): boolean {\n        return !!attrToBoolean(this.colDef.resizable);\n    }\n\n    private isColumnFunc(rowNode: RowNode, value?: boolean | ((params: ColumnFunctionCallbackParams) => boolean) | null): boolean {\n        // if boolean set, then just use it\n        if (typeof value === 'boolean') {\n            return value;\n        }\n\n        // if function, then call the function to find out\n        if (typeof value === 'function') {\n            const params = this.createColumnFunctionCallbackParams(rowNode);\n            const editableFunc = value;\n            return editableFunc(params);\n        }\n\n        return false;\n    }\n\n    public setMoving(moving: boolean, source: ColumnEventType = \"api\"): void {\n        this.moving = moving;\n        this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_MOVING_CHANGED, source));\n    }\n\n    private createColumnEvent(type: string, source: ColumnEventType): ColumnEvent {\n        return {\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            type: type,\n            column: this,\n            columns: [this],\n            source: source\n        };\n    }\n\n    public isMoving(): boolean {\n        return this.moving;\n    }\n\n    /** If sorting is active, returns the sort direction e.g. `'asc'` or `'desc'`. */\n    public getSort(): 'asc' | 'desc' | null | undefined {\n        return this.sort;\n    }\n\n    public setSort(sort: 'asc' | 'desc' | null | undefined, source: ColumnEventType = \"api\"): void {\n        if (this.sort !== sort) {\n            this.sort = sort;\n            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_SORT_CHANGED, source));\n        }\n    }\n\n    public setMenuVisible(visible: boolean, source: ColumnEventType = \"api\"): void {\n        if (this.menuVisible !== visible) {\n            this.menuVisible = visible;\n            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_MENU_VISIBLE_CHANGED, source));\n        }\n    }\n\n    public isMenuVisible(): boolean {\n        return this.menuVisible;\n    }\n\n    public isSortAscending(): boolean {\n        return this.sort === Constants.SORT_ASC;\n    }\n\n    public isSortDescending(): boolean {\n        return this.sort === Constants.SORT_DESC;\n    }\n\n    public isSortNone(): boolean {\n        return missing(this.sort);\n    }\n\n    public isSorting(): boolean {\n        return exists(this.sort);\n    }\n\n    public getSortIndex(): number | null | undefined {\n        return this.sortIndex;\n    }\n\n    public setSortIndex(sortOrder?: number | null): void {\n        this.sortIndex = sortOrder;\n    }\n\n    public setAggFunc(aggFunc: string | IAggFunc | null | undefined): void {\n        this.aggFunc = aggFunc;\n    }\n\n    /** If aggregation is set for the column, returns the aggregation function. */\n    public getAggFunc(): string | IAggFunc | null | undefined {\n        return this.aggFunc;\n    }\n\n    public getLeft(): number | null {\n        return this.left;\n    }\n\n    public getOldLeft(): number | null {\n        return this.oldLeft;\n    }\n\n    public getRight(): number {\n        return this.left + this.actualWidth;\n    }\n\n    public setLeft(left: number | null, source: ColumnEventType = \"api\") {\n        this.oldLeft = this.left;\n        if (this.left !== left) {\n            this.left = left;\n            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_LEFT_CHANGED, source));\n        }\n    }\n\n    /** Returns `true` if filter is active on the column. */\n    public isFilterActive(): boolean {\n        return this.filterActive;\n    }\n\n    // additionalEventAttributes is used by provided simple floating filter, so it can add 'floatingFilter=true' to the event\n    public setFilterActive(active: boolean, source: ColumnEventType = \"api\", additionalEventAttributes?: any): void {\n        if (this.filterActive !== active) {\n            this.filterActive = active;\n            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_FILTER_ACTIVE_CHANGED, source));\n        }\n        const filterChangedEvent = this.createColumnEvent(Column.EVENT_FILTER_CHANGED, source);\n        if (additionalEventAttributes) {\n            mergeDeep(filterChangedEvent, additionalEventAttributes);\n        }\n        this.eventService.dispatchEvent(filterChangedEvent);\n    }\n\n    public setPinned(pinned: string | boolean | null | undefined): void {\n        if (pinned === true || pinned === Constants.PINNED_LEFT) {\n            this.pinned = Constants.PINNED_LEFT;\n        } else if (pinned === Constants.PINNED_RIGHT) {\n            this.pinned = Constants.PINNED_RIGHT;\n        } else {\n            this.pinned = null;\n        }\n    }\n\n    public setFirstRightPinned(firstRightPinned: boolean, source: ColumnEventType = \"api\"): void {\n        if (this.firstRightPinned !== firstRightPinned) {\n            this.firstRightPinned = firstRightPinned;\n            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_FIRST_RIGHT_PINNED_CHANGED, source));\n        }\n    }\n\n    public setLastLeftPinned(lastLeftPinned: boolean, source: ColumnEventType = \"api\"): void {\n        if (this.lastLeftPinned !== lastLeftPinned) {\n            this.lastLeftPinned = lastLeftPinned;\n            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_LAST_LEFT_PINNED_CHANGED, source));\n        }\n    }\n\n    public isFirstRightPinned(): boolean {\n        return this.firstRightPinned;\n    }\n\n    public isLastLeftPinned(): boolean {\n        return this.lastLeftPinned;\n    }\n\n    public isPinned(): boolean {\n        return this.pinned === Constants.PINNED_LEFT || this.pinned === Constants.PINNED_RIGHT;\n    }\n\n    public isPinnedLeft(): boolean {\n        return this.pinned === Constants.PINNED_LEFT;\n    }\n\n    public isPinnedRight(): boolean {\n        return this.pinned === Constants.PINNED_RIGHT;\n    }\n\n    public getPinned(): 'left' | 'right' | null | undefined {\n        return this.pinned;\n    }\n\n    public setVisible(visible: boolean, source: ColumnEventType = \"api\"): void {\n        const newValue = visible === true;\n        if (this.visible !== newValue) {\n            this.visible = newValue;\n            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_VISIBLE_CHANGED, source));\n        }\n    }\n\n    public isVisible(): boolean {\n        return this.visible;\n    }\n\n    /** Returns the column definition for this column.\n     * The column definition will be the result of merging the application provided column definition with any provided defaults\n     * (e.g. `defaultColDef` grid option, or column types.\n     *\n     * Equivalent: `getDefinition` */\n    public getColDef(): ColDef {\n        return this.colDef;\n    }\n\n    public getColumnGroupShow(): string | undefined {\n        return this.colDef.columnGroupShow;\n    }\n    /**\n     * Returns the unique ID for the column.\n     *\n     * Equivalent: `getId`, `getUniqueId` */\n    public getColId(): string {\n        return this.colId;\n    }\n    /**\n     * Returns the unique ID for the column.\n     *\n     * Equivalent: `getColId`, `getUniqueId` */\n    public getId(): string {\n        return this.getColId();\n    }\n    /**\n     * Returns the unique ID for the column.\n     *\n     * Equivalent: `getColId`, `getId` */\n    public getUniqueId(): string {\n        return this.getId();\n    }\n\n    public getDefinition(): AbstractColDef {\n        return this.colDef;\n    }\n\n    /** Returns the current width of the column. If the column is resized, the actual width is the new size. */\n    public getActualWidth(): number {\n        return this.actualWidth;\n    }\n\n    private createBaseColDefParams(rowNode: RowNode): BaseColDefParams {\n        const params: BaseColDefParams = {\n            node: rowNode,\n            data: rowNode.data,\n            colDef: this.colDef,\n            column: this,\n            api: this.gridOptionsWrapper.getApi()!,\n            columnApi: this.gridOptionsWrapper.getColumnApi()!,\n            context: this.gridOptionsWrapper.getContext()\n        };\n        return params;\n    }\n\n    public getColSpan(rowNode: RowNode): number {\n        if (missing(this.colDef.colSpan)) { return 1; }\n        const params: ColSpanParams = this.createBaseColDefParams(rowNode);\n        const colSpan = this.colDef.colSpan(params);\n        // colSpan must be number equal to or greater than 1\n\n        return Math.max(colSpan, 1);\n    }\n\n    public getRowSpan(rowNode: RowNode): number {\n        if (missing(this.colDef.rowSpan)) { return 1; }\n        const params: RowSpanParams = this.createBaseColDefParams(rowNode);\n        const rowSpan = this.colDef.rowSpan(params);\n        // rowSpan must be number equal to or greater than 1\n\n        return Math.max(rowSpan, 1);\n    }\n\n    public setActualWidth(actualWidth: number, source: ColumnEventType = \"api\", silent: boolean = false): void {\n        if (this.minWidth != null) {\n            actualWidth = Math.max(actualWidth, this.minWidth);\n        }\n        if (this.maxWidth != null) {\n            actualWidth = Math.min(actualWidth, this.maxWidth);\n        }\n        if (this.actualWidth !== actualWidth) {\n            // disable flex for this column if it was manually resized.\n            this.actualWidth = actualWidth;\n            if (this.flex && source !== 'flex' && source !== 'gridInitializing') {\n                this.flex = null;\n            }\n\n            if (!silent) {\n                this.fireColumnWidthChangedEvent(source);\n            }\n        }\n    }\n\n    public fireColumnWidthChangedEvent(source: ColumnEventType): void {\n        this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_WIDTH_CHANGED, source));\n    }\n\n    public isGreaterThanMax(width: number): boolean {\n        if (this.maxWidth != null) {\n            return width > this.maxWidth;\n        }\n        return false;\n    }\n\n    public getMinWidth(): number | null | undefined {\n        return this.minWidth;\n    }\n\n    public getMaxWidth(): number | null | undefined {\n        return this.maxWidth;\n    }\n\n    public getFlex(): number {\n        return this.flex || 0;\n    }\n\n    // this method should only be used by the columnModel to\n    // change flex when required by the setColumnState method.\n    public setFlex(flex: number | null) {\n        if (this.flex !== flex) { this.flex = flex; }\n    }\n\n    public setMinimum(source: ColumnEventType = \"api\"): void {\n        if (exists(this.minWidth)) {\n            this.setActualWidth(this.minWidth, source);\n        }\n    }\n\n    public setRowGroupActive(rowGroup: boolean, source: ColumnEventType = \"api\"): void {\n        if (this.rowGroupActive !== rowGroup) {\n            this.rowGroupActive = rowGroup;\n            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_ROW_GROUP_CHANGED, source));\n        }\n    }\n\n    /** Returns `true` if row group is currently active for this column. */\n    public isRowGroupActive(): boolean {\n        return this.rowGroupActive;\n    }\n\n    public setPivotActive(pivot: boolean, source: ColumnEventType = \"api\"): void {\n        if (this.pivotActive !== pivot) {\n            this.pivotActive = pivot;\n            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_PIVOT_CHANGED, source));\n        }\n    }\n\n    /** Returns `true` if pivot is currently active for this column. */\n    public isPivotActive(): boolean {\n        return this.pivotActive;\n    }\n\n    public isAnyFunctionActive(): boolean {\n        return this.isPivotActive() || this.isRowGroupActive() || this.isValueActive();\n    }\n\n    public isAnyFunctionAllowed(): boolean {\n        return this.isAllowPivot() || this.isAllowRowGroup() || this.isAllowValue();\n    }\n\n    public setValueActive(value: boolean, source: ColumnEventType = \"api\"): void {\n        if (this.aggregationActive !== value) {\n            this.aggregationActive = value;\n            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_VALUE_CHANGED, source));\n        }\n    }\n\n    /** Returns `true` if value (aggregation) is currently active for this column. */\n    public isValueActive(): boolean {\n        return this.aggregationActive;\n    }\n\n    public isAllowPivot(): boolean {\n        return this.colDef.enablePivot === true;\n    }\n\n    public isAllowValue(): boolean {\n        return this.colDef.enableValue === true;\n    }\n\n    public isAllowRowGroup(): boolean {\n        return this.colDef.enableRowGroup === true;\n    }\n\n    public getMenuTabs(defaultValues: string[]): string[] {\n        let menuTabs = this.getColDef().menuTabs;\n\n        if (menuTabs == null) {\n            menuTabs = defaultValues;\n        }\n\n        return menuTabs;\n    }\n\n    // this used to be needed, as previous version of ag-grid had lockPosition as column state,\n    // so couldn't depend on colDef version.\n    public isLockPosition(): boolean {\n        console.warn('AG Grid: since v21, col.isLockPosition() should not be used, please use col.getColDef().lockPosition instead.');\n        return this.colDef ? !!this.colDef.lockPosition : false;\n    }\n\n    // this used to be needed, as previous version of ag-grid had lockVisible as column state,\n    // so couldn't depend on colDef version.\n    public isLockVisible(): boolean {\n        console.warn('AG Grid: since v21, col.isLockVisible() should not be used, please use col.getColDef().lockVisible instead.');\n        return this.colDef ? !!this.colDef.lockVisible : false;\n    }\n\n    // this used to be needed, as previous version of ag-grid had lockPinned as column state,\n    // so couldn't depend on colDef version.\n    public isLockPinned(): boolean {\n        console.warn('AG Grid: since v21, col.isLockPinned() should not be used, please use col.getColDef().lockPinned instead.');\n        return this.colDef ? !!this.colDef.lockPinned : false;\n    }\n\n}\n","import { exists, toStringOrNull } from './generic';\n\nexport function firstExistingValue<A>(...values: A[]): A | null {\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n\n        if (exists(value)) {\n            return value;\n        }\n    }\n\n    return null;\n}\n\nexport function existsAndNotEmpty<T>(value?: T[]): boolean {\n    return value != null && value.length > 0;\n}\n\nexport function last<T>(arr: T[]): T;\nexport function last<T extends Node>(arr: NodeListOf<T>): T;\nexport function last(arr: any): any {\n    if (!arr || !arr.length) { return; }\n\n    return arr[arr.length - 1];\n}\n\nexport function areEqual<T>(a?: T[] | null, b?: T[] | null, comparator?: (a: T, b: T) => boolean): boolean {\n    if (a == null && b == null) {\n        return true;\n    }\n\n    return a != null &&\n        b != null &&\n        a.length === b.length &&\n        a.every((value, index) => comparator ? comparator(value, b[index]) : b[index] === value);\n}\n\n/** @deprecated */\nexport function compareArrays(array1?: any[], array2?: any[]): boolean {\n    return areEqual(array1, array2);\n}\n\n/** @deprecated */\nexport function shallowCompare(arr1: any[], arr2: any[]): boolean {\n    return areEqual(arr1, arr2);\n}\n\nexport function sortNumerically(array: number[]): number[] {\n    return array.sort((a, b) => a - b);\n}\n\nexport function removeRepeatsFromArray<T>(array: T[], object: T) {\n    if (!array) { return; }\n\n    for (let index = array.length - 2; index >= 0; index--) {\n        const thisOneMatches = array[index] === object;\n        const nextOneMatches = array[index + 1] === object;\n\n        if (thisOneMatches && nextOneMatches) {\n            array.splice(index + 1, 1);\n        }\n    }\n}\n\nexport function removeFromArray<T>(array: T[], object: T) {\n    const index = array.indexOf(object);\n\n    if (index >= 0) {\n        array.splice(index, 1);\n    }\n}\n\nexport function removeAllFromArray<T>(array: T[], toRemove: T[]) {\n    toRemove.forEach(item => removeFromArray(array, item));\n}\n\nexport function insertIntoArray<T>(array: T[], object: T, toIndex: number) {\n    array.splice(toIndex, 0, object);\n}\n\nexport function insertArrayIntoArray<T>(dest: T[], src: T[], toIndex: number) {\n    if (dest == null || src == null) { return; }\n\n    // put items in backwards, otherwise inserted items end up in reverse order\n    for (let i = src.length - 1; i >= 0; i--) {\n        const item = src[i];\n        insertIntoArray(dest, item, toIndex);\n    }\n}\n\nexport function moveInArray<T>(array: T[], objectsToMove: T[], toIndex: number) {\n    // first take out items from the array\n    removeAllFromArray(array, objectsToMove);\n\n    // now add the objects, in same order as provided to us, that means we start at the end\n    // as the objects will be pushed to the right as they are inserted\n    objectsToMove.slice().reverse().forEach(obj => insertIntoArray(array, obj, toIndex));\n}\n\nexport function includes<T>(array: T[], value: T): boolean {\n    return array.indexOf(value) > -1;\n}\n\nexport function flatten(arrayOfArrays: any[]): any[] {\n    return [].concat.apply([], arrayOfArrays);\n}\n\nexport function pushAll<T>(target: T[], source: T[]): void {\n    if (source == null || target == null) { return; }\n\n    source.forEach(value => target.push(value));\n}\n\nexport function toStrings<T>(array: T[]): ((string | null)[]) | null {\n    return array.map(toStringOrNull);\n}\n\nexport function forEachReverse<T>(list: T[], action: (value: T, index: number) => void): void {\n    if (list == null) {\n        return;\n    }\n\n    for (let i = list.length - 1; i >= 0; i--) {\n        action(list[i], i);\n    }\n}\n","import { IHeaderColumn } from \"./iHeaderColumn\";\nimport { ColGroupDef } from \"./colDef\";\nimport { Column } from \"./column\";\nimport { AbstractColDef } from \"./colDef\";\nimport { ProvidedColumnGroup } from \"./providedColumnGroup\";\nimport { EventService } from \"../eventService\";\nimport { Autowired } from \"../context/context\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { AgEvent } from \"../events\";\nimport { last } from \"../utils/array\";\n\nexport class ColumnGroup implements IHeaderColumn {\n\n    public static HEADER_GROUP_SHOW_OPEN = 'open';\n    public static HEADER_GROUP_SHOW_CLOSED = 'closed';\n\n    public static EVENT_LEFT_CHANGED = 'leftChanged';\n    public static EVENT_DISPLAYED_CHILDREN_CHANGED = 'displayedChildrenChanged';\n\n    // this is static, a it is used outside of this class\n    public static createUniqueId(groupId: string, instanceId: number): string {\n        return groupId + '_' + instanceId;\n    }\n\n    @Autowired('gridOptionsWrapper') gridOptionsWrapper: GridOptionsWrapper;\n\n    // all the children of this group, regardless of whether they are opened or closed\n    private children: IHeaderColumn[] | null;\n    // depends on the open/closed state of the group, only displaying columns are stored here\n    private displayedChildren: IHeaderColumn[] | null = [];\n\n    private readonly groupId: string;\n    private readonly instanceId: number;\n    private readonly providedColumnGroup: ProvidedColumnGroup;\n    private readonly pinned: 'left' | 'right' | null;\n\n    // private moving = false\n    private left: number | null;\n    private oldLeft: number | null;\n    private localEventService: EventService = new EventService();\n\n    private parent: ColumnGroup | null;\n\n    constructor(providedColumnGroup: ProvidedColumnGroup, groupId: string, instanceId: number, pinned: 'left' | 'right' | null) {\n        this.groupId = groupId;\n        this.instanceId = instanceId;\n        this.providedColumnGroup = providedColumnGroup;\n        this.pinned = pinned;\n    }\n\n    // as the user is adding and removing columns, the groups are recalculated.\n    // this reset clears out all children, ready for children to be added again\n    public reset(): void {\n        this.parent = null;\n        this.children = null;\n        this.displayedChildren = null;\n    }\n\n    public getParent(): ColumnGroup {\n        return this.parent!;\n    }\n\n    public setParent(parent: ColumnGroup): void {\n        this.parent = parent;\n    }\n\n    public getUniqueId(): string {\n        return ColumnGroup.createUniqueId(this.groupId, this.instanceId);\n    }\n\n    public isEmptyGroup(): boolean {\n        return this.displayedChildren!.length === 0;\n    }\n\n    public isMoving(): boolean {\n        const allLeafColumns = this.getProvidedColumnGroup().getLeafColumns();\n        if (!allLeafColumns || allLeafColumns.length === 0) { return false; }\n\n        return allLeafColumns.every(col => col.isMoving());\n    }\n\n    public checkLeft(): void {\n        // first get all children to setLeft, as it impacts our decision below\n        this.displayedChildren!.forEach((child: IHeaderColumn) => {\n            if (child instanceof ColumnGroup) {\n                child.checkLeft();\n            }\n        });\n\n        // set our left based on first displayed column\n        if (this.displayedChildren!.length > 0) {\n            if (this.gridOptionsWrapper.isEnableRtl()) {\n                const lastChild = last(this.displayedChildren!);\n                const lastChildLeft = lastChild.getLeft();\n                this.setLeft(lastChildLeft);\n            } else {\n                const firstChildLeft = this.displayedChildren![0].getLeft();\n                this.setLeft(firstChildLeft);\n            }\n        } else {\n            // this should never happen, as if we have no displayed columns, then\n            // this groups should not even exist.\n            this.setLeft(null);\n        }\n    }\n\n    public getLeft(): number | null {\n        return this.left;\n    }\n\n    public getOldLeft(): number | null {\n        return this.oldLeft;\n    }\n\n    public setLeft(left: number | null) {\n        this.oldLeft = left;\n        if (this.left !== left) {\n            this.left = left;\n            this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_LEFT_CHANGED));\n        }\n    }\n\n    public getPinned(): 'left' | 'right' | null {\n        return this.pinned;\n    }\n\n    private createAgEvent(type: string): AgEvent {\n        return { type };\n    }\n\n    public addEventListener(eventType: string, listener: Function): void {\n        this.localEventService.addEventListener(eventType, listener);\n    }\n\n    public removeEventListener(eventType: string, listener: Function): void {\n        this.localEventService.removeEventListener(eventType, listener);\n    }\n\n    public getGroupId(): string {\n        return this.groupId;\n    }\n\n    public getInstanceId(): number {\n        return this.instanceId;\n    }\n\n    public isChildInThisGroupDeepSearch(wantedChild: IHeaderColumn): boolean {\n        let result = false;\n\n        this.children!.forEach((foundChild: IHeaderColumn) => {\n            if (wantedChild === foundChild) {\n                result = true;\n            }\n            if (foundChild instanceof ColumnGroup) {\n                if (foundChild.isChildInThisGroupDeepSearch(wantedChild)) {\n                    result = true;\n                }\n            }\n        });\n\n        return result;\n    }\n\n    public getActualWidth(): number {\n        let groupActualWidth = 0;\n        if (this.displayedChildren) {\n            this.displayedChildren.forEach((child: IHeaderColumn) => {\n                groupActualWidth += child.getActualWidth();\n            });\n        }\n        return groupActualWidth;\n    }\n\n    public isResizable(): boolean {\n        if (!this.displayedChildren) { return false; }\n\n        // if at least one child is resizable, then the group is resizable\n        let result = false;\n        this.displayedChildren.forEach((child: IHeaderColumn) => {\n            if (child.isResizable()) {\n                result = true;\n            }\n        });\n\n        return result;\n    }\n\n    public getMinWidth(): number {\n        let result = 0;\n        this.displayedChildren!.forEach((groupChild: IHeaderColumn) => {\n            result += groupChild.getMinWidth() || 0;\n        });\n        return result;\n    }\n\n    public addChild(child: IHeaderColumn): void {\n        if (!this.children) {\n            this.children = [];\n        }\n        this.children.push(child);\n    }\n\n    public getDisplayedChildren(): IHeaderColumn[] | null {\n        return this.displayedChildren;\n    }\n\n    public getLeafColumns(): Column[] {\n        const result: Column[] = [];\n        this.addLeafColumns(result);\n        return result;\n    }\n\n    public getDisplayedLeafColumns(): Column[] {\n        const result: Column[] = [];\n        this.addDisplayedLeafColumns(result);\n        return result;\n    }\n\n    // why two methods here doing the same thing?\n    public getDefinition(): AbstractColDef | null {\n        return this.providedColumnGroup.getColGroupDef();\n    }\n\n    public getColGroupDef(): ColGroupDef | null {\n        return this.providedColumnGroup.getColGroupDef();\n    }\n\n    public isPadding(): boolean {\n        return this.providedColumnGroup.isPadding();\n    }\n\n    public isExpandable(): boolean {\n        return this.providedColumnGroup.isExpandable();\n    }\n\n    public isExpanded(): boolean {\n        return this.providedColumnGroup.isExpanded();\n    }\n\n    public setExpanded(expanded: boolean): void {\n        this.providedColumnGroup.setExpanded(expanded);\n    }\n\n    private addDisplayedLeafColumns(leafColumns: Column[]): void {\n        this.displayedChildren!.forEach((child: IHeaderColumn) => {\n            if (child instanceof Column) {\n                leafColumns.push(child);\n            } else if (child instanceof ColumnGroup) {\n                child.addDisplayedLeafColumns(leafColumns);\n            }\n        });\n    }\n\n    private addLeafColumns(leafColumns: Column[]): void {\n        this.children!.forEach((child: IHeaderColumn) => {\n            if (child instanceof Column) {\n                leafColumns.push(child);\n            } else if (child instanceof ColumnGroup) {\n                child.addLeafColumns(leafColumns);\n            }\n        });\n    }\n\n    public getChildren(): IHeaderColumn[] | null {\n        return this.children;\n    }\n\n    public getColumnGroupShow(): string | undefined {\n        return this.providedColumnGroup.getColumnGroupShow();\n    }\n\n    public getProvidedColumnGroup(): ProvidedColumnGroup {\n        return this.providedColumnGroup;\n    }\n\n    /** @deprecated getOriginalColumnGroup is deprecated, use getOriginalColumnGroup. */\n    public getOriginalColumnGroup(): ProvidedColumnGroup {\n        console.warn('AG Grid: columnGroup.getOriginalColumnGroup() is deprecated due to a method rename, use columnGroup.getProvidedColumnGroup() instead');\n        return this.getProvidedColumnGroup();\n    }\n\n    public getPaddingLevel(): number {\n        const parent = this.getParent();\n\n        if (!this.isPadding() || !parent || !parent.isPadding()) {\n            return 0;\n        }\n\n        return 1 + parent.getPaddingLevel();\n    }\n\n    public calculateDisplayedColumns() {\n        // clear out last time we calculated\n        this.displayedChildren = [];\n\n        // find the column group that is controlling expandable. this is relevant when we have padding (empty)\n        // groups, where the expandable is actually the first parent that is not a padding group.\n        let parentWithExpansion: ColumnGroup = this;\n        while (parentWithExpansion != null && parentWithExpansion.isPadding()) {\n            parentWithExpansion = parentWithExpansion.getParent();\n        }\n\n        const isExpandable = parentWithExpansion ? parentWithExpansion.providedColumnGroup.isExpandable() : false;\n        // it not expandable, everything is visible\n        if (!isExpandable) {\n            this.displayedChildren = this.children;\n            this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED));\n            return;\n        }\n\n        // Add cols based on columnGroupShow\n        // Note - the below also adds padding groups, these are always added because they never have\n        // colDef.columnGroupShow set.\n        this.children!.forEach(child => {\n            // never add empty groups\n            const emptyGroup = child instanceof ColumnGroup && (!child.displayedChildren || !child.displayedChildren.length);\n            if (emptyGroup) { return; }\n\n            const headerGroupShow = child.getColumnGroupShow();\n            switch (headerGroupShow) {\n                case ColumnGroup.HEADER_GROUP_SHOW_OPEN:\n                    // when set to open, only show col if group is open\n                    if (parentWithExpansion.providedColumnGroup.isExpanded()) {\n                        this.displayedChildren!.push(child);\n                    }\n                    break;\n                case ColumnGroup.HEADER_GROUP_SHOW_CLOSED:\n                    // when set to open, only show col if group is open\n                    if (!parentWithExpansion.providedColumnGroup.isExpanded()) {\n                        this.displayedChildren!.push(child);\n                    }\n                    break;\n                default:\n                    this.displayedChildren!.push(child);\n                    break;\n            }\n        });\n\n        this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED));\n    }\n}\n","import { IProvidedColumn } from \"./iProvidedColumn\";\nimport { ColGroupDef } from \"./colDef\";\nimport { ColumnGroup } from \"./columnGroup\";\nimport { Column } from \"./column\";\nimport { EventService } from \"../eventService\";\nimport { IEventEmitter } from \"../interfaces/iEventEmitter\";\nimport { AgEvent } from \"../events\";\n\nexport class ProvidedColumnGroup implements IProvidedColumn, IEventEmitter {\n\n    public static EVENT_EXPANDED_CHANGED = 'expandedChanged';\n    public static EVENT_EXPANDABLE_CHANGED = 'expandableChanged';\n\n    private localEventService = new EventService();\n\n    private colGroupDef: ColGroupDef | null;\n    private originalParent: ProvidedColumnGroup | null;\n\n    private children: IProvidedColumn[];\n    private groupId: string;\n    private expandable = false;\n\n    private expanded: boolean;\n    private padding: boolean;\n\n    private level: number;\n\n    constructor(colGroupDef: ColGroupDef | null, groupId: string, padding: boolean, level: number) {\n        this.colGroupDef = colGroupDef;\n        this.groupId = groupId;\n        this.expanded = !!colGroupDef && !!colGroupDef.openByDefault;\n        this.padding = padding;\n        this.level = level;\n    }\n\n    public setOriginalParent(originalParent: ProvidedColumnGroup | null): void {\n        this.originalParent = originalParent;\n    }\n\n    public getOriginalParent(): ProvidedColumnGroup | null {\n        return this.originalParent;\n    }\n\n    public getLevel(): number {\n        return this.level;\n    }\n\n    public isVisible(): boolean {\n        // return true if at least one child is visible\n        if (this.children) {\n            return this.children.some(child => child.isVisible());\n        }\n\n        return false;\n    }\n\n    public isPadding(): boolean {\n        return this.padding;\n    }\n\n    public setExpanded(expanded: boolean | undefined): void {\n        this.expanded = expanded === undefined ? false : expanded;\n        const event: AgEvent = {\n            type: ProvidedColumnGroup.EVENT_EXPANDED_CHANGED\n        };\n        this.localEventService.dispatchEvent(event);\n    }\n\n    public isExpandable(): boolean {\n        return this.expandable;\n    }\n\n    public isExpanded(): boolean {\n        return this.expanded;\n    }\n\n    public getGroupId(): string {\n        return this.groupId;\n    }\n\n    public getId(): string {\n        return this.getGroupId();\n    }\n\n    public setChildren(children: IProvidedColumn[]): void {\n        this.children = children;\n    }\n\n    public getChildren(): IProvidedColumn[] {\n        return this.children;\n    }\n\n    public getColGroupDef(): ColGroupDef | null {\n        return this.colGroupDef;\n    }\n\n    public getLeafColumns(): Column[] {\n        const result: Column[] = [];\n        this.addLeafColumns(result);\n        return result;\n    }\n\n    private addLeafColumns(leafColumns: Column[]): void {\n        if (!this.children) { return; }\n\n        this.children.forEach((child: IProvidedColumn) => {\n            if (child instanceof Column) {\n                leafColumns.push(child);\n            } else if (child instanceof ProvidedColumnGroup) {\n                child.addLeafColumns(leafColumns);\n            }\n        });\n    }\n\n    public getColumnGroupShow(): string | undefined {\n        const colGroupDef = this.colGroupDef;\n\n        if (!colGroupDef) { return; }\n\n        return colGroupDef.columnGroupShow;\n    }\n\n    // need to check that this group has at least one col showing when both expanded and contracted.\n    // if not, then we don't allow expanding and contracting on this group\n\n    public setupExpandable() {\n        this.setExpandable();\n        // note - we should be removing this event listener\n        this.getLeafColumns().forEach(col => col.addEventListener(Column.EVENT_VISIBLE_CHANGED, this.onColumnVisibilityChanged.bind(this)));\n    }\n\n    public setExpandable() {\n        if (this.isPadding()) { return; }\n        // want to make sure the group doesn't disappear when it's open\n        let atLeastOneShowingWhenOpen = false;\n        // want to make sure the group doesn't disappear when it's closed\n        let atLeastOneShowingWhenClosed = false;\n        // want to make sure the group has something to show / hide\n        let atLeastOneChangeable = false;\n\n        const children = this.findChildrenRemovingPadding();\n\n        for (let i = 0, j = children.length; i < j; i++) {\n            const abstractColumn = children[i];\n            if (!abstractColumn.isVisible()) {\n                continue;\n            }\n            // if the abstractColumn is a grid generated group, there will be no colDef\n            const headerGroupShow = abstractColumn.getColumnGroupShow();\n\n            if (headerGroupShow === ColumnGroup.HEADER_GROUP_SHOW_OPEN) {\n                atLeastOneShowingWhenOpen = true;\n                atLeastOneChangeable = true;\n            } else if (headerGroupShow === ColumnGroup.HEADER_GROUP_SHOW_CLOSED) {\n                atLeastOneShowingWhenClosed = true;\n                atLeastOneChangeable = true;\n            } else {\n                atLeastOneShowingWhenOpen = true;\n                atLeastOneShowingWhenClosed = true;\n            }\n        }\n\n        const expandable = atLeastOneShowingWhenOpen && atLeastOneShowingWhenClosed && atLeastOneChangeable;\n\n        if (this.expandable !== expandable) {\n            this.expandable = expandable;\n            const event: AgEvent = {\n                type: ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED\n            };\n            this.localEventService.dispatchEvent(event);\n        }\n    }\n\n    private findChildrenRemovingPadding(): IProvidedColumn[] {\n        const res: IProvidedColumn[] = [];\n\n        const process = (items: IProvidedColumn[]) => {\n            items.forEach(item => {\n                // if padding, we add this children instead of the padding\n                const skipBecausePadding = item instanceof ProvidedColumnGroup && item.isPadding();\n                if (skipBecausePadding) {\n                    process((item as ProvidedColumnGroup).children);\n                } else {\n                    res.push(item);\n                }\n            });\n        };\n\n        process(this.children);\n\n        return res;\n    }\n\n    private onColumnVisibilityChanged(): void {\n        this.setExpandable();\n    }\n\n    public addEventListener(eventType: string, listener: Function): void {\n        this.localEventService.addEventListener(eventType, listener);\n    }\n\n    public removeEventListener(eventType: string, listener: Function): void {\n        this.localEventService.removeEventListener(eventType, listener);\n    }\n}\n","import { ColDef } from \"./colDef\";\n\nexport const DefaultColumnTypes: { [key: string]: ColDef } = {\n    numericColumn: {\n        headerClass: 'ag-right-aligned-header',\n        cellClass: 'ag-right-aligned-cell'\n    },\n    rightAligned: {\n        headerClass: 'ag-right-aligned-header',\n        cellClass: 'ag-right-aligned-cell'\n    }\n};\n","import { GridOptionsWrapper } from '../gridOptionsWrapper';\nimport { IFrameworkOverrides } from '../interfaces/iFrameworkOverrides';\nimport { includes } from './array';\n\nconst AG_GRID_STOP_PROPAGATION = '__ag_Grid_Stop_Propagation';\nconst PASSIVE_EVENTS = ['touchstart', 'touchend', 'touchmove', 'touchcancel'];\nconst supports: { [key: string]: boolean; } = {};\n\n/**\n * a user once raised an issue - they said that when you opened a popup (eg context menu)\n * and then clicked on a selection checkbox, the popup wasn't closed. this is because the\n * popup listens for clicks on the body, however ag-grid WAS stopping propagation on the\n * checkbox clicks (so the rows didn't pick them up as row selection selection clicks).\n * to get around this, we have a pattern to stop propagation for the purposes of AG Grid,\n * but we still let the event pass back to the body.\n * @param {Event} event\n */\nexport function stopPropagationForAgGrid(event: Event): void {\n    (event as any)[AG_GRID_STOP_PROPAGATION] = true;\n}\n\nexport function isStopPropagationForAgGrid(event: Event): boolean {\n    return (event as any)[AG_GRID_STOP_PROPAGATION] === true;\n}\n\nexport const isEventSupported = (() => {\n    const tags = {\n        select: 'input',\n        change: 'input',\n        submit: 'form',\n        reset: 'form',\n        error: 'img',\n        load: 'img',\n        abort: 'img'\n    } as any;\n\n    const eventChecker = (eventName: any) => {\n        if (typeof supports[eventName] === 'boolean') {\n            return supports[eventName];\n        }\n\n        const el = document.createElement(tags[eventName] || 'div');\n        eventName = 'on' + eventName;\n\n        return supports[eventName] = (eventName in el);\n    };\n\n    return eventChecker;\n})();\n\nexport function getCtrlForEvent<T>(gridOptionsWrapper: GridOptionsWrapper, event: Event, type: string): T | null {\n    let sourceElement = event.target as HTMLElement;\n\n    while (sourceElement) {\n        const renderedComp = gridOptionsWrapper.getDomData(sourceElement, type);\n\n        if (renderedComp) {\n            return renderedComp as T;\n        }\n\n        sourceElement = sourceElement.parentElement!;\n    }\n\n    return null;\n}\n\n/**\n * @deprecated\n * Adds all type of change listeners to an element, intended to be a text field\n * @param {HTMLElement} element\n * @param {EventListener} listener\n */\nexport function addChangeListener(element: HTMLElement, listener: EventListener) {\n    element.addEventListener('changed', listener);\n    element.addEventListener('paste', listener);\n    element.addEventListener('input', listener);\n}\n\nexport function isElementInEventPath(element: HTMLElement, event: Event): boolean {\n    if (!event || !element) {\n        return false;\n    }\n\n    return getEventPath(event).indexOf(element) >= 0;\n}\n\nexport function createEventPath(event: Event): EventTarget[] {\n    const res: EventTarget[] = [];\n    let pointer: any = event.target;\n\n    while (pointer) {\n        res.push(pointer);\n        pointer = pointer.parentElement;\n    }\n\n    return res;\n}\n\n/**\n * firefox doesn't have event.path set, or any alternative to it, so we hack\n * it in. this is needed as it's to late to work out the path when the item is\n * removed from the dom. used by MouseEventService, where it works out if a click\n * was from the current grid, or a detail grid (master / detail).\n * @param {Event} event\n */\nexport function addAgGridEventPath(event: Event): void {\n    (event as any).__agGridEventPath = getEventPath(event);\n}\n\n/**\n * Gets the path for an Event.\n * https://stackoverflow.com/questions/39245488/event-path-undefined-with-firefox-and-vue-js\n * https://developer.mozilla.org/en-US/docs/Web/API/Event\n * @param {Event} event\n * @returns {EventTarget[]}\n */\nexport function getEventPath(event: Event): EventTarget[] {\n    const eventNoType = event as any;\n\n    if (eventNoType.path) {\n        // Chrome supports path\n        return eventNoType.path;\n    }\n\n    if (eventNoType.composedPath) {\n        // Firefox supports composePath\n        return eventNoType.composedPath();\n    }\n\n    if (eventNoType.__agGridEventPath) {\n        // Firefox supports composePath\n        return eventNoType.__agGridEventPath;\n    }\n\n    // and finally, if none of the above worked,\n    // we create the path ourselves\n    return createEventPath(event);\n}\n\nexport function addSafePassiveEventListener(\n    frameworkOverrides: IFrameworkOverrides,\n    eElement: HTMLElement,\n    event: string, listener: (event?: any) => void\n) {\n    const isPassive = includes(PASSIVE_EVENTS, event);\n    const options = isPassive ? {passive: true} : undefined;\n\n    // this check is here for certain scenarios where I believe the user must be destroying\n    // the grid somehow but continuing for it to be used\n    if (frameworkOverrides && frameworkOverrides.addEventListener) {\n        frameworkOverrides.addEventListener(eElement, event, listener, options);\n    }\n}\n","import { IEventEmitter } from \"../interfaces/iEventEmitter\";\nimport { EventService } from \"../eventService\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { AgEvent } from \"../events\";\nimport { Autowired, Context, PreDestroy } from \"./context\";\nimport { IFrameworkOverrides } from \"../interfaces/iFrameworkOverrides\";\nimport { Component } from \"../widgets/component\";\nimport { addSafePassiveEventListener } from \"../utils/event\";\n\nexport class BeanStub implements IEventEmitter {\n\n    public static EVENT_DESTROYED = 'destroyed';\n\n    protected localEventService: EventService;\n\n    private destroyFunctions: (() => void)[] = [];\n    private destroyed = false;\n\n    // for vue 3 - prevents Vue from trying to make this (and obviously any sub classes) from being reactive\n    // prevents vue from creating proxies for created objects and prevents identity related issues\n    public __v_skip = true;\n\n    @Autowired('frameworkOverrides') private readonly frameworkOverrides: IFrameworkOverrides;\n    @Autowired('context') protected readonly context: Context;\n    @Autowired('eventService') protected readonly eventService: EventService;\n    @Autowired('gridOptionsWrapper') protected readonly gridOptionsWrapper: GridOptionsWrapper;\n\n    // this was a test constructor niall built, when active, it prints after 5 seconds all beans/components that are\n    // not destroyed. to use, create a new grid, then api.destroy() before 5 seconds. then anything that gets printed\n    // points to a bean or component that was not properly disposed of.\n    // constructor() {\n    //     setTimeout(()=> {\n    //         if (this.isAlive()) {\n    //             let prototype: any = Object.getPrototypeOf(this);\n    //             const constructor: any = prototype.constructor;\n    //             const constructorString = constructor.toString();\n    //             const beanName = constructorString.substring(9, constructorString.indexOf(\"(\"));\n    //             console.log('is alive ' + beanName);\n    //         }\n    //     }, 5000);\n    // }\n\n    // CellComp and GridComp and override this because they get the FrameworkOverrides from the Beans bean\n    protected getFrameworkOverrides(): IFrameworkOverrides {\n        return this.frameworkOverrides;\n    }\n\n    public getContext(): Context {\n        return this.context;\n    }\n\n    @PreDestroy\n    protected destroy(): void {\n\n        // let prototype: any = Object.getPrototypeOf(this);\n        // const constructor: any = prototype.constructor;\n        // const constructorString = constructor.toString();\n        // const beanName = constructorString.substring(9, constructorString.indexOf(\"(\"));\n\n        this.destroyFunctions.forEach(func => func());\n        this.destroyFunctions.length = 0;\n        this.destroyed = true;\n\n        this.dispatchEvent({ type: BeanStub.EVENT_DESTROYED });\n    }\n\n    public addEventListener(eventType: string, listener: Function): void {\n        if (!this.localEventService) {\n            this.localEventService = new EventService();\n        }\n\n        this.localEventService.addEventListener(eventType, listener);\n    }\n\n    public removeEventListener(eventType: string, listener: Function): void {\n        if (this.localEventService) {\n            this.localEventService.removeEventListener(eventType, listener);\n        }\n    }\n\n    public dispatchEventAsync(event: AgEvent): void {\n        window.setTimeout(() => this.dispatchEvent(event), 0);\n    }\n\n    public dispatchEvent<T extends AgEvent>(event: T): void {\n        if (this.localEventService) {\n            this.localEventService.dispatchEvent(event);\n        }\n    }\n\n    public addManagedListener(\n        object: Window | HTMLElement | GridOptionsWrapper | IEventEmitter,\n        event: string,\n        listener: (event?: any) => void\n    ): (() => null) | undefined {\n        if (this.destroyed) {\n            return;\n        }\n\n        if (object instanceof HTMLElement) {\n            addSafePassiveEventListener(this.getFrameworkOverrides(), object, event, listener);\n        } else {\n            object.addEventListener(event, listener);\n        }\n\n        const destroyFunc: () => null = () => {\n            object.removeEventListener(event, listener);\n\n            this.destroyFunctions = this.destroyFunctions.filter(fn => fn !== destroyFunc);\n\n            return null;\n        };\n\n        this.destroyFunctions.push(destroyFunc);\n\n        return destroyFunc;\n    }\n\n    public isAlive = (): boolean => !this.destroyed;\n\n    public addDestroyFunc(func: () => void): void {\n        // if we are already destroyed, we execute the func now\n        if (this.isAlive()) {\n            this.destroyFunctions.push(func);\n        } else {\n            func();\n        }\n    }\n\n    public createManagedBean<T>(bean: T, context?: Context): T {\n        const res = this.createBean(bean, context);\n        this.addDestroyFunc(this.destroyBean.bind(this, bean, context));\n        return res;\n    }\n\n    protected createBean<T>(bean: T, context?: Context | null, afterPreCreateCallback?: (comp: Component) => void): T {\n        return (context || this.getContext()).createBean(bean, afterPreCreateCallback);\n    }\n\n    protected destroyBean<T>(bean: T, context?: Context): T | undefined {\n        return (context || this.getContext()).destroyBean(bean);\n    }\n\n    protected destroyBeans<T>(beans: T[], context?: Context): T[] {\n        if (beans) {\n            beans.forEach(bean => this.destroyBean(bean, context));\n        }\n\n        return [];\n    }\n}\n","import { Logger, LoggerFactory } from '../logger';\nimport { ColumnUtils } from './columnUtils';\nimport { AbstractColDef, ColDef, ColGroupDef } from \"../entities/colDef\";\nimport { ColumnKeyCreator } from \"./columnKeyCreator\";\nimport { IProvidedColumn } from \"../entities/iProvidedColumn\";\nimport { ProvidedColumnGroup } from \"../entities/providedColumnGroup\";\nimport { Column } from \"../entities/column\";\nimport { Autowired, Bean, Qualifier } from \"../context/context\";\nimport { DefaultColumnTypes } from \"../entities/defaultColumnTypes\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { Constants } from \"../constants/constants\";\nimport { iterateObject, mergeDeep } from '../utils/object';\nimport { attrToNumber, attrToBoolean } from '../utils/generic';\nimport { removeFromArray } from '../utils/array';\n\n// takes ColDefs and ColGroupDefs and turns them into Columns and OriginalGroups\n@Bean('columnFactory')\nexport class ColumnFactory extends BeanStub {\n\n    @Autowired('columnUtils') private columnUtils: ColumnUtils;\n\n    private logger: Logger;\n\n    private setBeans(@Qualifier('loggerFactory') loggerFactory: LoggerFactory) {\n        this.logger = loggerFactory.create('ColumnFactory');\n    }\n\n    public createColumnTree(defs: (ColDef | ColGroupDef)[] | null, primaryColumns: boolean, existingTree?: IProvidedColumn[])\n        : { columnTree: IProvidedColumn[], treeDept: number; } {\n\n        // column key creator dishes out unique column id's in a deterministic way,\n        // so if we have two grids (that could be master/slave) with same column definitions,\n        // then this ensures the two grids use identical id's.\n        const columnKeyCreator = new ColumnKeyCreator();\n\n        const {existingCols, existingGroups, existingColKeys} = this.extractExistingTreeData(existingTree);\n        columnKeyCreator.addExistingKeys(existingColKeys);\n\n        // create am unbalanced tree that maps the provided definitions\n        const unbalancedTree = this.recursivelyCreateColumns(defs, 0, primaryColumns,\n            existingCols, columnKeyCreator, existingGroups);\n        const treeDept = this.findMaxDept(unbalancedTree, 0);\n        this.logger.log('Number of levels for grouped columns is ' + treeDept);\n        const columnTree = this.balanceColumnTree(unbalancedTree, 0, treeDept, columnKeyCreator);\n\n        const deptFirstCallback = (child: IProvidedColumn, parent: ProvidedColumnGroup) => {\n            if (child instanceof ProvidedColumnGroup) {\n                child.setupExpandable();\n            }\n            // we set the original parents at the end, rather than when we go along, as balancing the tree\n            // adds extra levels into the tree. so we can only set parents when balancing is done.\n            child.setOriginalParent(parent);\n        };\n\n        this.columnUtils.depthFirstOriginalTreeSearch(null, columnTree, deptFirstCallback);\n\n        return {\n            columnTree,\n            treeDept\n        };\n    }\n\n    private extractExistingTreeData(existingTree?: IProvidedColumn[]):\n        {\n            existingCols: Column[],\n            existingGroups: ProvidedColumnGroup[],\n            existingColKeys: string[]\n        }  {\n\n        const existingCols: Column[] = [];\n        const existingGroups: ProvidedColumnGroup[] = [];\n        const existingColKeys: string[] = [];\n\n        if (existingTree) {\n            this.columnUtils.depthFirstOriginalTreeSearch(null, existingTree, (item: IProvidedColumn) => {\n                if (item instanceof ProvidedColumnGroup) {\n                    const group = item;\n                    existingGroups.push(group);\n                } else {\n                    const col = item as Column;\n                    existingColKeys.push(col.getId());\n                    existingCols.push(col);\n                }\n            });\n        }\n\n        return {existingCols, existingGroups, existingColKeys};\n    }\n\n    public createForAutoGroups(autoGroupCols: Column[], gridBalancedTree: IProvidedColumn[]): IProvidedColumn[] {\n        return autoGroupCols.map((col) => this.createAutoGroupTreeItem(gridBalancedTree, col));\n    }\n\n    private createAutoGroupTreeItem(balancedColumnTree: IProvidedColumn[], column: Column): IProvidedColumn {\n        const dept = this.findDepth(balancedColumnTree);\n\n        // at the end, this will be the top of the tree item.\n        let nextChild: IProvidedColumn = column;\n\n        for (let i = dept - 1; i >= 0; i--) {\n            const autoGroup = new ProvidedColumnGroup(\n                null,\n                `FAKE_PATH_${column.getId()}}_${i}`,\n                true,\n                i\n            );\n            this.context.createBean(autoGroup);\n            autoGroup.setChildren([nextChild]);\n            nextChild.setOriginalParent(autoGroup);\n            nextChild = autoGroup;\n        }\n\n        // at this point, the nextChild is the top most item in the tree\n        return nextChild;\n    }\n\n    private findDepth(balancedColumnTree: IProvidedColumn[]): number {\n        let dept = 0;\n        let pointer = balancedColumnTree;\n\n        while (pointer && pointer[0] && pointer[0] instanceof ProvidedColumnGroup) {\n            dept++;\n            pointer = (pointer[0] as ProvidedColumnGroup).getChildren();\n        }\n        return dept;\n    }\n\n    private balanceColumnTree(\n        unbalancedTree: IProvidedColumn[],\n        currentDept: number,\n        columnDept: number,\n        columnKeyCreator: ColumnKeyCreator\n    ): IProvidedColumn[] {\n\n        const result: IProvidedColumn[] = [];\n\n        // go through each child, for groups, recurse a level deeper,\n        // for columns we need to pad\n        for (let i = 0; i < unbalancedTree.length; i++) {\n            const child = unbalancedTree[i];\n            if (child instanceof ProvidedColumnGroup) {\n                // child is a group, all we do is go to the next level of recursion\n                const originalGroup = child;\n                const newChildren = this.balanceColumnTree(originalGroup.getChildren(),\n                    currentDept + 1, columnDept, columnKeyCreator);\n                originalGroup.setChildren(newChildren);\n                result.push(originalGroup);\n            } else {\n                // child is a column - so here we add in the padded column groups if needed\n                let firstPaddedGroup: ProvidedColumnGroup | undefined;\n                let currentPaddedGroup: ProvidedColumnGroup | undefined;\n\n                // this for loop will NOT run any loops if no padded column groups are needed\n                for (let j = columnDept - 1; j >= currentDept; j--) {\n                    const newColId = columnKeyCreator.getUniqueKey(null, null);\n                    const colGroupDefMerged = this.createMergedColGroupDef(null);\n\n                    const paddedGroup = new ProvidedColumnGroup(colGroupDefMerged, newColId, true, currentDept);\n                    this.context.createBean(paddedGroup);\n\n                    if (currentPaddedGroup) {\n                        currentPaddedGroup.setChildren([paddedGroup]);\n                    }\n\n                    currentPaddedGroup = paddedGroup;\n\n                    if (!firstPaddedGroup) {\n                        firstPaddedGroup = currentPaddedGroup;\n                    }\n                }\n\n                // likewise this if statement will not run if no padded groups\n                if (firstPaddedGroup && currentPaddedGroup) {\n                    result.push(firstPaddedGroup);\n                    const hasGroups = unbalancedTree.some(leaf => leaf instanceof ProvidedColumnGroup);\n\n                    if (hasGroups) {\n                        currentPaddedGroup.setChildren([child]);\n                        continue;\n                    } else {\n                        currentPaddedGroup.setChildren(unbalancedTree);\n                        break;\n                    }\n                }\n\n                result.push(child);\n            }\n        }\n\n        return result;\n    }\n\n    private findMaxDept(treeChildren: IProvidedColumn[], dept: number): number {\n        let maxDeptThisLevel = dept;\n\n        for (let i = 0; i < treeChildren.length; i++) {\n            const abstractColumn = treeChildren[i];\n            if (abstractColumn instanceof ProvidedColumnGroup) {\n                const originalGroup = abstractColumn;\n                const newDept = this.findMaxDept(originalGroup.getChildren(), dept + 1);\n                if (maxDeptThisLevel < newDept) {\n                    maxDeptThisLevel = newDept;\n                }\n            }\n        }\n\n        return maxDeptThisLevel;\n    }\n\n    private recursivelyCreateColumns(\n        defs: (ColDef | ColGroupDef)[] | null,\n        level: number,\n        primaryColumns: boolean,\n        existingColsCopy: Column[],\n        columnKeyCreator: ColumnKeyCreator,\n        existingGroups: ProvidedColumnGroup[]\n    ): IProvidedColumn[] {\n        return (defs || []).map((def) => {\n            if (this.isColumnGroup(def)) {\n                return this.createColumnGroup(primaryColumns, def as ColGroupDef, level, existingColsCopy,\n                    columnKeyCreator, existingGroups);\n            } else {\n                return this.createColumn(primaryColumns, def as ColDef, existingColsCopy, columnKeyCreator);\n            }\n        });\n    }\n\n    private createColumnGroup(\n        primaryColumns: boolean,\n        colGroupDef: ColGroupDef,\n        level: number,\n        existingColumns: Column[],\n        columnKeyCreator: ColumnKeyCreator,\n        existingGroups: ProvidedColumnGroup[]\n    ): ProvidedColumnGroup {\n        const colGroupDefMerged = this.createMergedColGroupDef(colGroupDef);\n        const groupId = columnKeyCreator.getUniqueKey(colGroupDefMerged.groupId || null, null);\n        const providedGroup = new ProvidedColumnGroup(colGroupDefMerged, groupId, false, level);\n\n        this.context.createBean(providedGroup);\n\n        const existingGroup = this.findExistingGroup(colGroupDef, existingGroups);\n        // make sure we remove, so if user provided duplicate id, then we don't have more than\n        // one column instance for colDef with common id\n        if (existingGroup) {\n            removeFromArray(existingGroups, existingGroup);\n        }\n\n        if (existingGroup && existingGroup.isExpanded()) {\n            providedGroup.setExpanded(true);\n        }\n\n        const children = this.recursivelyCreateColumns(colGroupDefMerged.children,\n            level + 1, primaryColumns, existingColumns, columnKeyCreator, existingGroups);\n\n        providedGroup.setChildren(children);\n\n        return providedGroup;\n    }\n\n    private createMergedColGroupDef(colGroupDef: ColGroupDef | null): ColGroupDef {\n        const colGroupDefMerged: ColGroupDef = {} as ColGroupDef;\n        Object.assign(colGroupDefMerged, this.gridOptionsWrapper.getDefaultColGroupDef());\n        Object.assign(colGroupDefMerged, colGroupDef);\n        this.checkForDeprecatedItems(colGroupDefMerged);\n\n        return colGroupDefMerged;\n    }\n\n    private createColumn(\n        primaryColumns: boolean,\n        colDef: ColDef,\n        existingColsCopy: Column[] | null,\n        columnKeyCreator: ColumnKeyCreator\n    ): Column {\n        const colDefMerged = this.mergeColDefs(colDef);\n\n        this.checkForDeprecatedItems(colDefMerged);\n\n        // see if column already exists\n        let column = this.findExistingColumn(colDef, existingColsCopy);\n\n        // make sure we remove, so if user provided duplicate id, then we don't have more than\n        // one column instance for colDef with common id\n        if (existingColsCopy && column) {\n            removeFromArray(existingColsCopy, column);\n        }\n\n        if (!column) {\n            // no existing column, need to create one\n            const colId = columnKeyCreator.getUniqueKey(colDefMerged.colId, colDefMerged.field);\n            column = new Column(colDefMerged, colDef, colId, primaryColumns);\n            this.context.createBean(column);\n        } else {\n            column.setColDef(colDefMerged, colDef);\n            this.applyColumnState(column, colDefMerged);\n        }\n\n        return column;\n    }\n\n    public applyColumnState(column: Column, colDef: ColDef): void {\n        // flex\n        const flex = attrToNumber(colDef.flex);\n        if (flex !== undefined) {\n            column.setFlex(flex);\n        }\n\n        // width - we only set width if column is not flexing\n        const noFlexThisCol = column.getFlex() <= 0;\n        if (noFlexThisCol) {\n            // both null and undefined means we skip, as it's not possible to 'clear' width (a column must have a width)\n            const width = attrToNumber(colDef.width);\n            if (width != null) {\n                column.setActualWidth(width);\n            } else {\n                // otherwise set the width again, in case min or max width has changed,\n                // and width needs to be adjusted.\n                const widthBeforeUpdate = column.getActualWidth();\n                column.setActualWidth(widthBeforeUpdate);\n            }\n        }\n\n        // sort - anything but undefined will set sort, thus null or empty string will clear the sort\n        if (colDef.sort !== undefined) {\n            if (colDef.sort == Constants.SORT_ASC || colDef.sort == Constants.SORT_DESC) {\n                column.setSort(colDef.sort);\n            } else {\n                column.setSort(undefined);\n            }\n        }\n\n        // sorted at - anything but undefined, thus null will clear the sortIndex\n        const sortIndex = attrToNumber(colDef.sortIndex);\n        if (sortIndex !== undefined) {\n            column.setSortIndex(sortIndex);\n        }\n\n        // hide - anything but undefined, thus null will clear the hide\n        const hide = attrToBoolean(colDef.hide);\n        if (hide !== undefined) {\n            column.setVisible(!hide);\n        }\n\n        // pinned - anything but undefined, thus null or empty string will remove pinned\n        if (colDef.pinned !== undefined) {\n            column.setPinned(colDef.pinned);\n        }\n    }\n\n    private findExistingColumn(newColDef: ColDef, existingColsCopy: Column[] | null): Column | undefined {\n        return (existingColsCopy || []).find(existingCol => {\n\n            const existingColDef = existingCol.getUserProvidedColDef();\n            if (!existingColDef) { return false; }\n\n            const newHasId = newColDef.colId != null;\n            const newHasField = newColDef.field != null;\n\n            if (newHasId) {\n                return existingCol.getId() === newColDef.colId;\n            }\n\n            if (newHasField) {\n                return existingColDef.field === newColDef.field;\n            }\n\n            // if no id or field present, then try object equivalence.\n            if (existingColDef === newColDef) { return true; }\n\n            return false;\n        });\n    }\n\n    private findExistingGroup(newGroupDef: ColGroupDef, existingGroups: ProvidedColumnGroup[]): ProvidedColumnGroup | undefined {\n        return existingGroups.find(existingGroup => {\n\n            const existingDef = existingGroup.getColGroupDef();\n            if (!existingDef) { return false; }\n\n            const newHasId = newGroupDef.groupId != null;\n\n            if (newHasId) {\n                return existingGroup.getId() === newGroupDef.groupId;\n            }\n\n            return false;\n        });\n    }\n\n    public mergeColDefs(colDef: ColDef): ColDef {\n        // start with empty merged definition\n        const colDefMerged: ColDef = {} as ColDef;\n\n        // merge properties from default column definitions\n        const defaultColDef = this.gridOptionsWrapper.getDefaultColDef();\n        mergeDeep(colDefMerged, defaultColDef, false, true);\n\n        // merge properties from column type properties\n        let columnType = colDef.type;\n\n        if (!columnType) {\n            columnType = defaultColDef && defaultColDef.type;\n        }\n\n        // if type of both colDef and defaultColDef, then colDef gets preference\n        if (columnType) {\n            this.assignColumnTypes(columnType, colDefMerged);\n        }\n\n        // merge properties from column definitions\n        mergeDeep(colDefMerged, colDef, false, true);\n\n        return colDefMerged;\n    }\n\n    private assignColumnTypes(type: string | string[], colDefMerged: ColDef) {\n        let typeKeys: string[] = [];\n\n        if (type instanceof Array) {\n            const invalidArray = type.some(a => typeof a !== 'string');\n            if (invalidArray) {\n                console.warn(\"AG Grid: if colDef.type is supplied an array it should be of type 'string[]'\");\n            } else {\n                typeKeys = type;\n            }\n        } else if (typeof type === 'string') {\n            typeKeys = type.split(',');\n        } else {\n            console.warn(\"AG Grid: colDef.type should be of type 'string' | 'string[]'\");\n            return;\n        }\n\n        // merge user defined with default column types\n        const allColumnTypes = Object.assign({}, DefaultColumnTypes);\n        const userTypes = this.gridOptionsWrapper.getColumnTypes() || {};\n\n        iterateObject(userTypes, (key, value) => {\n            if (key in allColumnTypes) {\n                console.warn(`AG Grid: the column type '${key}' is a default column type and cannot be overridden.`);\n            } else {\n                allColumnTypes[key] = value;\n            }\n        });\n\n        typeKeys.forEach((t) => {\n            const typeColDef = allColumnTypes[t.trim()];\n            if (typeColDef) {\n                mergeDeep(colDefMerged, typeColDef, false, true);\n            } else {\n                console.warn(\"AG Grid: colDef.type '\" + t + \"' does not correspond to defined gridOptions.columnTypes\");\n            }\n        });\n    }\n\n    private checkForDeprecatedItems(colDef: AbstractColDef) {\n        if (colDef) {\n            const colDefNoType = colDef as any; // take out the type, so we can access attributes not defined in the type\n            if (colDefNoType.group !== undefined) {\n                console.warn('AG Grid: colDef.group is invalid, please check documentation on how to do grouping as it changed in version 3');\n            }\n            if (colDefNoType.headerGroup !== undefined) {\n                console.warn('AG Grid: colDef.headerGroup is invalid, please check documentation on how to do grouping as it changed in version 3');\n            }\n            if (colDefNoType.headerGroupShow !== undefined) {\n                console.warn('AG Grid: colDef.headerGroupShow is invalid, should be columnGroupShow, please check documentation on how to do grouping as it changed in version 3');\n            }\n\n            if (colDefNoType.suppressRowGroup !== undefined) {\n                console.warn('AG Grid: colDef.suppressRowGroup is deprecated, please use colDef.type instead');\n            }\n            if (colDefNoType.suppressAggregation !== undefined) {\n                console.warn('AG Grid: colDef.suppressAggregation is deprecated, please use colDef.type instead');\n            }\n\n            if (colDefNoType.suppressRowGroup || colDefNoType.suppressAggregation) {\n                console.warn('AG Grid: colDef.suppressAggregation and colDef.suppressRowGroup are deprecated, use allowRowGroup, allowPivot and allowValue instead');\n            }\n\n            if (colDefNoType.displayName) {\n                console.warn(\"AG Grid: Found displayName \" + colDefNoType.displayName + \", please use headerName instead, displayName is deprecated.\");\n                colDefNoType.headerName = colDefNoType.displayName;\n            }\n        }\n    }\n\n    // if object has children, we assume it's a group\n    private isColumnGroup(abstractColDef: ColDef | ColGroupDef): boolean {\n        return (abstractColDef as ColGroupDef).children !== undefined;\n    }\n}\n","export class Events {\n\n    /** Everything has changed with the columns. Either complete new set of columns set, or user called setState() */\n    /** @deprecated - grid no longer uses this, and setSate() also fires individual events */\n    public static EVENT_COLUMN_EVERYTHING_CHANGED = 'columnEverythingChanged';\n\n    /** User has set in new columns. */\n    public static EVENT_NEW_COLUMNS_LOADED = 'newColumnsLoaded';\n\n    /** The pivot mode flag was changed */\n    public static EVENT_COLUMN_PIVOT_MODE_CHANGED = 'columnPivotModeChanged';\n\n    /** A row group column was added, removed or order changed. */\n    public static EVENT_COLUMN_ROW_GROUP_CHANGED = 'columnRowGroupChanged';\n\n    /** expandAll / collapseAll was called from the api. */\n    public static EVENT_EXPAND_COLLAPSE_ALL = 'expandOrCollapseAll';\n\n    /** A pivot column was added, removed or order changed. */\n    public static EVENT_COLUMN_PIVOT_CHANGED = 'columnPivotChanged';\n\n    /** The list of grid columns has changed. */\n    public static EVENT_GRID_COLUMNS_CHANGED = 'gridColumnsChanged';\n\n    /** A value column was added, removed or agg function was changed. */\n    public static EVENT_COLUMN_VALUE_CHANGED = 'columnValueChanged';\n\n    /** A column was moved */\n    public static EVENT_COLUMN_MOVED = 'columnMoved';\n\n    /** One or more columns was shown / hidden */\n    public static EVENT_COLUMN_VISIBLE = 'columnVisible';\n\n    /** One or more columns was pinned / unpinned*/\n    public static EVENT_COLUMN_PINNED = 'columnPinned';\n\n    /** A column group was opened / closed */\n    public static EVENT_COLUMN_GROUP_OPENED = 'columnGroupOpened';\n\n    /** One or more columns was resized. If just one, the column in the event is set. */\n    public static EVENT_COLUMN_RESIZED = 'columnResized';\n\n    /** The list of displayed columns has changed, can result from columns open / close, column move, pivot, group, etc */\n    public static EVENT_DISPLAYED_COLUMNS_CHANGED = 'displayedColumnsChanged';\n\n    /** The list of virtual columns has changed, results from viewport changing */\n    public static EVENT_VIRTUAL_COLUMNS_CHANGED = 'virtualColumnsChanged';\n\n    /** Async Transactions Executed */\n    public static EVENT_ASYNC_TRANSACTIONS_FLUSHED = 'asyncTransactionsFlushed';\n\n    /** A row group was opened / closed */\n    public static EVENT_ROW_GROUP_OPENED = 'rowGroupOpened';\n\n    /** The client has set new data into the grid */\n    public static EVENT_ROW_DATA_CHANGED = 'rowDataChanged';\n\n    /** The client has updated data for the grid */\n    public static EVENT_ROW_DATA_UPDATED = 'rowDataUpdated';\n\n    /** The client has set new floating data into the grid */\n    public static EVENT_PINNED_ROW_DATA_CHANGED = 'pinnedRowDataChanged';\n\n    /** Range selection has changed */\n    public static EVENT_RANGE_SELECTION_CHANGED = 'rangeSelectionChanged';\n\n    /** Chart was created */\n    public static EVENT_CHART_CREATED = 'chartCreated';\n\n    /** Chart Range selection has changed */\n    public static EVENT_CHART_RANGE_SELECTION_CHANGED = 'chartRangeSelectionChanged';\n\n    /** Chart Options have changed */\n    public static EVENT_CHART_OPTIONS_CHANGED = 'chartOptionsChanged';\n\n    /** Chart was destroyed */\n    public static EVENT_CHART_DESTROYED = 'chartDestroyed';\n\n    /** For when the tool panel is shown / hidden */\n    public static EVENT_TOOL_PANEL_VISIBLE_CHANGED = 'toolPanelVisibleChanged';\n\n    public static EVENT_COLUMN_PANEL_ITEM_DRAG_START = 'columnPanelItemDragStart';\n    public static EVENT_COLUMN_PANEL_ITEM_DRAG_END = 'columnPanelItemDragEnd';\n\n    /** Model was updated - grid updates the drawn rows when this happens */\n    public static EVENT_MODEL_UPDATED = 'modelUpdated';\n\n    public static EVENT_PASTE_START = 'pasteStart';\n    public static EVENT_PASTE_END = 'pasteEnd';\n\n    public static EVENT_FILL_START = 'fillStart';\n    public static EVENT_FILL_END = 'fillEnd';\n\n    public static EVENT_CELL_CLICKED = 'cellClicked';\n    public static EVENT_CELL_DOUBLE_CLICKED = 'cellDoubleClicked';\n    public static EVENT_CELL_MOUSE_DOWN = 'cellMouseDown';\n    public static EVENT_CELL_CONTEXT_MENU = 'cellContextMenu';\n    public static EVENT_CELL_VALUE_CHANGED = 'cellValueChanged';\n    public static EVENT_CELL_EDIT_REQUEST = 'cellEditRequest';\n    public static EVENT_ROW_VALUE_CHANGED = 'rowValueChanged';\n    public static EVENT_CELL_FOCUSED = 'cellFocused';\n    public static EVENT_FULL_WIDTH_ROW_FOCUSED = 'fullWidthRowFocused';\n    public static EVENT_ROW_SELECTED = 'rowSelected';\n    public static EVENT_SELECTION_CHANGED = 'selectionChanged';\n\n    public static EVENT_CELL_KEY_DOWN = 'cellKeyDown';\n    public static EVENT_CELL_KEY_PRESS = 'cellKeyPress';\n\n    public static EVENT_CELL_MOUSE_OVER = 'cellMouseOver';\n    public static EVENT_CELL_MOUSE_OUT = 'cellMouseOut';\n\n    /** 2 events for filtering. The grid LISTENS for filterChanged and afterFilterChanged */\n    public static EVENT_FILTER_CHANGED = 'filterChanged';\n\n    /** Filter was change but not applied. Only useful if apply buttons are used in filters. */\n    public static EVENT_FILTER_MODIFIED = 'filterModified';\n    public static EVENT_FILTER_OPENED = 'filterOpened';\n\n    public static EVENT_SORT_CHANGED = 'sortChanged';\n\n    /** A row was removed from the dom, for any reason. Use to clean up resources (if any) used by the row. */\n    public static EVENT_VIRTUAL_ROW_REMOVED = 'virtualRowRemoved';\n\n    public static EVENT_ROW_CLICKED = 'rowClicked';\n    public static EVENT_ROW_DOUBLE_CLICKED = 'rowDoubleClicked';\n\n    /** Gets called once after the grid has finished initialising. */\n    public static EVENT_GRID_READY = 'gridReady';\n    /** Width of height of the main grid div has changed. Grid listens for this and does layout of grid if it's\n     * changed, so always filling the space it was given. */\n    public static EVENT_GRID_SIZE_CHANGED = 'gridSizeChanged';\n    /** The indexes of the rows rendered has changed, eg user has scrolled to a new vertical position. */\n    public static EVENT_VIEWPORT_CHANGED = 'viewportChanged';\n    /* The width of the scrollbar has been calculated */\n    public static EVENT_SCROLLBAR_WIDTH_CHANGED = 'scrollbarWidthChanged';\n    /** Rows were rendered for the first time (ie on async data load). */\n    public static EVENT_FIRST_DATA_RENDERED = 'firstDataRendered';\n    /** A column drag has started, either resizing a column or moving a column. */\n    public static EVENT_DRAG_STARTED = 'dragStarted';\n    /** A column drag has stopped */\n    public static EVENT_DRAG_STOPPED = 'dragStopped';\n\n    public static EVENT_CHECKBOX_CHANGED = 'checkboxChanged';\n\n    public static EVENT_ROW_EDITING_STARTED = 'rowEditingStarted';\n    public static EVENT_ROW_EDITING_STOPPED = 'rowEditingStopped';\n\n    public static EVENT_CELL_EDITING_STARTED = 'cellEditingStarted';\n    public static EVENT_CELL_EDITING_STOPPED = 'cellEditingStopped';\n\n    /** Main body of grid has scrolled, either horizontally or vertically */\n    public static EVENT_BODY_SCROLL = 'bodyScroll';\n\n    /** Main body of the grid has stopped scrolling, either horizontally or vertically */\n    public static EVENT_BODY_SCROLL_END = 'bodyScrollEnd';\n\n    public static EVENT_HEIGHT_SCALE_CHANGED = 'heightScaleChanged';\n\n    /** The displayed page for pagination has changed. For example the data was filtered or sorted,\n     * or the user has moved to a different page. */\n    public static EVENT_PAGINATION_CHANGED = 'paginationChanged';\n\n    /** Only used by React, Angular, Web Components and VueJS AG Grid components\n     * (not used if doing plain JavaScript). If the grid receives changes due\n     * to bound properties, this event fires after the grid has finished processing the change. */\n    public static EVENT_COMPONENT_STATE_CHANGED = 'componentStateChanged';\n\n    /*****************************  INTERNAL EVENTS: START ******************************************* */\n\n    /** Please remember to add to ComponentUtil.EXCLUDED_INTERNAL_EVENTS to not have these events exposed to framework components. */\n\n    /** All items from here down are used internally by the grid, not intended for external use. */\n    // not documented, either experimental, or we just don't want users using an depending on them\n    public static EVENT_BODY_HEIGHT_CHANGED = 'bodyHeightChanged';\n    public static EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED = 'displayedColumnsWidthChanged';\n    public static EVENT_SCROLL_VISIBILITY_CHANGED = 'scrollVisibilityChanged';\n    public static EVENT_COLUMN_HOVER_CHANGED = 'columnHoverChanged';\n    public static EVENT_FLASH_CELLS = 'flashCells';\n    public static EVENT_PAGINATION_PIXEL_OFFSET_CHANGED = 'paginationPixelOffsetChanged';\n    public static EVENT_DISPLAYED_ROWS_CHANGED = 'displayedRowsChanged';\n\n    public static EVENT_LEFT_PINNED_WIDTH_CHANGED = 'leftPinnedWidthChanged';\n    public static EVENT_RIGHT_PINNED_WIDTH_CHANGED = 'rightPinnedWidthChanged';\n\n    public static EVENT_ROW_CONTAINER_HEIGHT_CHANGED = 'rowContainerHeightChanged';\n\n    public static EVENT_ROW_DRAG_ENTER = 'rowDragEnter';\n    public static EVENT_ROW_DRAG_MOVE = 'rowDragMove';\n    public static EVENT_ROW_DRAG_LEAVE = 'rowDragLeave';\n    public static EVENT_ROW_DRAG_END = 'rowDragEnd';\n\n    // primarily for charts\n    public static EVENT_POPUP_TO_FRONT = 'popupToFront';\n\n    // these are used for server side group and agg - only used by CS with Viewport Row Model - intention is\n    // to design these better around server side functions and then release to general public when fully working with\n    // all the row models.\n    public static EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST = 'columnRowGroupChangeRequest';\n    public static EVENT_COLUMN_PIVOT_CHANGE_REQUEST = 'columnPivotChangeRequest';\n    public static EVENT_COLUMN_VALUE_CHANGE_REQUEST = 'columnValueChangeRequest';\n    public static EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST = 'columnAggFuncChangeRequest';\n\n    public static EVENT_KEYBOARD_FOCUS = 'keyboardFocus';\n    public static EVENT_MOUSE_FOCUS = 'mouseFocus';\n\n    public static EVENT_STORE_UPDATED = 'storeUpdated';\n\n    /*****************************  INTERNAL EVENTS: END ******************************************* */\n}\n","// class returns unique instance id's for columns.\n// eg, the following calls (in this order) will result in:\n//\n// getInstanceIdForKey('country') => 0\n// getInstanceIdForKey('country') => 1\n// getInstanceIdForKey('country') => 2\n// getInstanceIdForKey('country') => 3\n// getInstanceIdForKey('age') => 0\n// getInstanceIdForKey('age') => 1\n// getInstanceIdForKey('country') => 4\nexport class GroupInstanceIdCreator {\n\n    // this map contains keys to numbers, so we remember what the last call was\n    private existingIds: any = {};\n\n    public getInstanceIdForKey(key: string): number {\n        const lastResult = this.existingIds[key];\n        let result: number;\n        if (typeof lastResult !== 'number') {\n            // first time this key\n            result = 0;\n        } else {\n            result = lastResult + 1;\n        }\n\n        this.existingIds[key] = result;\n\n        return result;\n    }\n\n}","const reUnescapedHtml = /[&<>\"']/g;\n\n/**\n * HTML Escapes.\n */\nconst HTML_ESCAPES: { [id: string]: string; } = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\n\n/**\n * It encodes any string in UTF-8 format\n * taken from https://github.com/mathiasbynens/utf8.js\n * @param {string} s\n * @returns {string}\n */\nexport function utf8_encode(s: string | null): string {\n    const stringFromCharCode = String.fromCharCode;\n\n    function ucs2decode(string: string | null): number[] {\n        const output: number[] = [];\n\n        if (!string) { return []; }\n\n        const len = string.length;\n\n        let counter = 0;\n        let value;\n        let extra;\n\n        while (counter < len) {\n            value = string.charCodeAt(counter++);\n            if (value >= 0xD800 && value <= 0xDBFF && counter < len) {\n                // high surrogate, and there is a next character\n                extra = string.charCodeAt(counter++);\n                if ((extra & 0xFC00) == 0xDC00) { // low surrogate\n                    output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n                } else {\n                    // unmatched surrogate; only append this code unit, in case the next\n                    // code unit is the high surrogate of a surrogate pair\n                    output.push(value);\n                    counter--;\n                }\n            } else {\n                output.push(value);\n            }\n        }\n        return output;\n    }\n\n    function checkScalarValue(point: number) {\n        if (point >= 0xD800 && point <= 0xDFFF) {\n            throw Error(\n                'Lone surrogate U+' + point.toString(16).toUpperCase() +\n                ' is not a scalar value'\n            );\n        }\n    }\n\n    function createByte(point: number, shift: number) {\n        return stringFromCharCode(((point >> shift) & 0x3F) | 0x80);\n    }\n\n    function encodeCodePoint(point: number): string {\n        if ((point >= 0 && point <= 31 && point !== 10)) {\n            const convertedCode = point.toString(16).toUpperCase();\n            const paddedCode = convertedCode.padStart(4, '0');\n\n            return `_x${paddedCode}_`;\n        }\n\n        if ((point & 0xFFFFFF80) == 0) { // 1-byte sequence\n            return stringFromCharCode(point);\n        }\n\n        let symbol = '';\n\n        if ((point & 0xFFFFF800) == 0) { // 2-byte sequence\n            symbol = stringFromCharCode(((point >> 6) & 0x1F) | 0xC0);\n        } else if ((point & 0xFFFF0000) == 0) { // 3-byte sequence\n            checkScalarValue(point);\n            symbol = stringFromCharCode(((point >> 12) & 0x0F) | 0xE0);\n            symbol += createByte(point, 6);\n        } else if ((point & 0xFFE00000) == 0) { // 4-byte sequence\n            symbol = stringFromCharCode(((point >> 18) & 0x07) | 0xF0);\n            symbol += createByte(point, 12);\n            symbol += createByte(point, 6);\n        }\n        symbol += stringFromCharCode((point & 0x3F) | 0x80);\n        return symbol;\n    }\n\n    const codePoints = ucs2decode(s);\n    const length = codePoints.length;\n    let index = -1;\n    let codePoint;\n    let byteString = '';\n\n    while (++index < length) {\n        codePoint = codePoints[index];\n        byteString += encodeCodePoint(codePoint);\n    }\n\n    return byteString;\n}\n\n/**\n * Converts a camelCase string into hyphenated string\n * from https://gist.github.com/youssman/745578062609e8acac9f\n * @param {string} str\n * @return {string}\n */\nexport function camelCaseToHyphen(str: string): string | null {\n    if (str === null || str === undefined) { return null; }\n\n    return str.replace(/([A-Z])/g, (g) => '-' + g[0].toLowerCase());\n}\n\n/**\n * Converts a hyphenated string into camelCase string\n * from https://stackoverflow.com/questions/6660977/convert-hyphens-to-camel-case-camelcase\n * @param {string} str\n * @return {string}\n */\nexport function hyphenToCamelCase(str: string): string | null {\n    if (str === null || str === undefined) {\n        return null;\n    }\n    return str.replace(/-([a-z])/g, (g) => g[1].toUpperCase());\n}\n\nexport function capitalise(str: string): string {\n    return str[0].toUpperCase() + str.substr(1).toLowerCase();\n}\n\nexport function escapeString(toEscape?: string | null): string | null {\n    // we call toString() twice, in case value is an object, where user provides\n    // a toString() method, and first call to toString() returns back something other\n    // than a string (eg a number to render)\n    return toEscape == null ? null : toEscape.toString().toString().replace(reUnescapedHtml, chr => HTML_ESCAPES[chr]);\n}\n\n/**\n * Converts a camelCase string into regular text\n * from: https://stackoverflow.com/questions/15369566/putting-space-in-camel-case-string-using-regular-expression\n * @param {string} camelCase\n * @return {string}\n */\nexport function camelCaseToHumanText(camelCase: string | undefined): string | null {\n    if (!camelCase || camelCase == null) { return null; }\n\n    const rex = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g;\n    const words: string[] = camelCase.replace(rex, '$1$4 $2$3$5').replace('.', ' ').split(' ');\n\n    return words.map(word => word.substring(0, 1).toUpperCase() + ((word.length > 1) ? word.substring(1, word.length) : '')).join(' ');\n}","export function convertToMap<K, V>(arr: [K, V][]): Map<K, V> {\n    const map = new Map<K, V>();\n\n    arr.forEach(pair => map.set(pair[0], pair[1]));\n\n    return map;\n}\n\n// handy for organising a list into a map, where each item is mapped by an attribute, eg mapping Columns by ID\nexport function mapById<V>(arr: V[], callback: (obj: V) => string): Map<string, V> {\n    const map = new Map<string, V>();\n\n    arr.forEach(item => map.set(callback(item), item));\n\n    return map;\n}\n\nexport function keys<T>(map: Map<T, any>): T[] {\n    const arr: T[] = [];\n\n    map.forEach((_, key) => arr.push(key));\n\n    return arr;\n}","import { ColumnGroup } from '../entities/columnGroup';\nimport { Column } from '../entities/column';\nimport { AbstractColDef, ColDef, ColGroupDef, IAggFunc, HeaderValueGetterParams } from '../entities/colDef';\nimport { IHeaderColumn } from '../entities/iHeaderColumn';\nimport { ExpressionService } from '../valueService/expressionService';\nimport { ColumnFactory } from './columnFactory';\nimport { DisplayedGroupCreator } from './displayedGroupCreator';\nimport { AutoWidthCalculator } from '../rendering/autoWidthCalculator';\nimport { IProvidedColumn } from '../entities/iProvidedColumn';\nimport { ColumnUtils } from './columnUtils';\nimport { Logger, LoggerFactory } from '../logger';\nimport {\n    ColumnEvent,\n    ColumnEventType,\n    ColumnEverythingChangedEvent,\n    ColumnGroupOpenedEvent,\n    ColumnMovedEvent,\n    ColumnPinnedEvent,\n    ColumnPivotModeChangedEvent,\n    ColumnResizedEvent,\n    ColumnRowGroupChangedEvent,\n    ColumnValueChangedEvent,\n    ColumnVisibleEvent,\n    DisplayedColumnsChangedEvent,\n    DisplayedColumnsWidthChangedEvent,\n    Events,\n    GridColumnsChangedEvent,\n    NewColumnsLoadedEvent,\n    VirtualColumnsChangedEvent\n} from '../events';\nimport { BeanStub } from \"../context/beanStub\";\nimport { ProvidedColumnGroup } from '../entities/providedColumnGroup';\nimport { GroupInstanceIdCreator } from './groupInstanceIdCreator';\nimport { Autowired, Bean, Optional, PostConstruct, Qualifier } from '../context/context';\nimport { IAggFuncService } from '../interfaces/iAggFuncService';\nimport { ColumnAnimationService } from '../rendering/columnAnimationService';\nimport { AutoGroupColService } from './autoGroupColService';\nimport { RowNode } from '../entities/rowNode';\nimport { ValueCache } from '../valueService/valueCache';\nimport { GridApi } from '../gridApi';\nimport { ColumnApi } from './columnApi';\nimport { Constants } from '../constants/constants';\nimport { areEqual, last, removeFromArray, moveInArray, includes, insertIntoArray, removeAllFromArray } from '../utils/array';\nimport { AnimationFrameService } from \"../misc/animationFrameService\";\nimport { SortController } from \"../sortController\";\nimport { missingOrEmpty, exists, missing, attrToBoolean, attrToNumber } from '../utils/generic';\nimport { camelCaseToHumanText } from '../utils/string';\nimport { ColumnDefFactory } from \"./columnDefFactory\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { IClientSideRowModel } from \"../interfaces/iClientSideRowModel\";\nimport { convertToMap } from '../utils/map';\nimport { doOnce } from '../utils/function';\nimport { CtrlsService } from '../ctrlsService';\nimport { HeaderGroupCellCtrl } from '../headerRendering/cells/columnGroup/headerGroupCellCtrl';\n\nexport interface ColumnResizeSet {\n    columns: Column[];\n    ratios: number[];\n    width: number;\n}\n\nexport interface ColumnStateParams {\n    /** True if the column is hidden */\n    hide?: boolean | null;\n    /** Width of the column in pixels */\n    width?: number;\n    /** Column's flex if flex is set */\n    flex?: number | null;\n    /** Sort applied to the column */\n    sort?: 'asc' | 'desc' | null;\n    /** The order of the sort, if sorting by many columns */\n    sortIndex?: number | null;\n    /** The aggregation function applied */\n    aggFunc?: string | IAggFunc | null;\n    /** True if pivot active */\n    pivot?: boolean | null;\n    /** The order of the pivot, if pivoting by many columns */\n    pivotIndex?: number | null;\n    /** Set if column is pinned */\n    pinned?: boolean | string | 'left' | 'right' | null;\n    /** True if row group active */\n    rowGroup?: boolean | null;\n    /** The order of the row group, if grouping by many columns */\n    rowGroupIndex?: number | null;\n}\n\nexport interface ColumnState extends ColumnStateParams {\n    /** ID of the column */\n    colId: string;\n}\n\nexport interface ApplyColumnStateParams {\n    /** The state from `getColumnState` */\n    state?: ColumnState[];\n    /** Whether column order should be applied */\n    applyOrder?: boolean;\n    /** State to apply to columns where state is missing for those columns */\n    defaultState?: ColumnStateParams;\n}\n\n@Bean('columnModel')\nexport class ColumnModel extends BeanStub {\n\n    @Autowired('expressionService') private expressionService: ExpressionService;\n    @Autowired('columnFactory') private columnFactory: ColumnFactory;\n    @Autowired('displayedGroupCreator') private displayedGroupCreator: DisplayedGroupCreator;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('autoWidthCalculator') private autoWidthCalculator: AutoWidthCalculator;\n    @Autowired('columnUtils') private columnUtils: ColumnUtils;\n    @Autowired('columnAnimationService') private columnAnimationService: ColumnAnimationService;\n    @Autowired('autoGroupColService') private autoGroupColService: AutoGroupColService;\n    @Optional('aggFuncService') private aggFuncService: IAggFuncService;\n    @Optional('valueCache') private valueCache: ValueCache;\n    @Optional('animationFrameService') private animationFrameService: AnimationFrameService;\n\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('sortController') private sortController: SortController;\n    @Autowired('columnDefFactory') private columnDefFactory: ColumnDefFactory;\n\n    // these are the columns provided by the client. this doesn't change, even if the\n    // order or state of the columns and groups change. it will only change if the client\n    // provides a new set of column definitions. otherwise this tree is used to build up\n    // the groups for displaying.\n    private primaryColumnTree: IProvidedColumn[];\n    // header row count, based on user provided columns\n    private primaryHeaderRowCount = 0;\n    // all columns provided by the user. basically it's the leaf level nodes of the\n    // tree above (originalBalancedTree)\n    private primaryColumns: Column[] | undefined; // every column available\n    private primaryColumnsMap: { [id: string]: Column };\n\n    // if pivoting, these are the generated columns as a result of the pivot\n    private secondaryBalancedTree: IProvidedColumn[] | null;\n    private secondaryColumns: Column[] | null;\n    private secondaryColumnsMap: { [id: string]: Column };\n    private secondaryHeaderRowCount = 0;\n    // Saved when pivot is disabled, available to re-use when pivot is restored\n    private previousSecondaryColumns: IProvidedColumn[] | null;\n\n    // the columns the quick filter should use. this will be all primary columns\n    // plus the autoGroupColumns if any exist\n    private columnsForQuickFilter: Column[];\n\n    // these are all columns that are available to the grid for rendering after pivot\n    private gridBalancedTree: IProvidedColumn[];\n    private gridColumns: Column[];\n    private gridColumnsMap: { [id: string]: Column };\n\n    // header row count, either above, or based on pivoting if we are pivoting\n    private gridHeaderRowCount = 0;\n\n    private lastPrimaryOrder: Column[];\n    private lastSecondaryOrder: Column[];\n    private gridColsArePrimary: boolean;\n\n    // primary columns -> what the user provides\n    // secondary columns -> columns generated as a result of a pivot\n    // displayed columns -> columns that are 1) visible and 2) parent groups are opened. thus can be rendered\n    // viewport columns -> centre columns only, what columns are to be rendered due to column virtualisation\n\n    // tree of columns to be displayed for each section\n    private displayedTreeLeft: IHeaderColumn[];\n    private displayedTreeRight: IHeaderColumn[];\n    private displayedTreeCentre: IHeaderColumn[];\n\n    // leave level columns of the displayed trees\n    private displayedColumnsLeft: Column[] = [];\n    private displayedColumnsRight: Column[] = [];\n    private displayedColumnsCenter: Column[] = [];\n    // all three lists above combined\n    private displayedColumns: Column[] = [];\n\n    // for fast lookup, to see if a column or group is still displayed\n    private displayedColumnsAndGroupsMap: { [id: string]: IHeaderColumn } = {};\n\n    // all columns to be rendered\n    private viewportColumns: Column[] = [];\n    // all columns to be rendered in the centre\n    private viewportColumnsCenter: Column[] = [];\n\n    // all columns & groups to be rendered, index by row. used by header rows to get all items\n    // to render for that row.\n    private viewportRowLeft: { [row: number]: IHeaderColumn[]; };\n    private viewportRowRight: { [row: number]: IHeaderColumn[]; };\n    private viewportRowCenter: { [row: number]: IHeaderColumn[]; };\n\n    // true if we are doing column spanning\n    private colSpanActive: boolean;\n\n    // grid columns that have colDef.autoHeight set\n    private displayedAutoHeightCols: Column[];\n    private autoHeightActive: boolean;\n    private autoHeightActiveAtLeastOnce = false;\n\n    private suppressColumnVirtualisation: boolean;\n\n    private rowGroupColumns: Column[] = [];\n    private valueColumns: Column[] = [];\n    private pivotColumns: Column[] = [];\n\n    private groupAutoColumns: Column[] | null;\n\n    private groupDisplayColumns: Column[];\n\n    private ready = false;\n    private logger: Logger;\n\n    private autoGroupsNeedBuilding = false;\n    private forceRecreateAutoGroups = false;\n\n    private pivotMode = false;\n    private usingTreeData: boolean;\n\n    // for horizontal visualisation of columns\n    private scrollWidth: number;\n    private scrollPosition: number;\n\n    private bodyWidth = 0;\n    private leftWidth = 0;\n    private rightWidth = 0;\n\n    private bodyWidthDirty = true;\n\n    private viewportLeft: number;\n    private viewportRight: number;\n    private flexViewportWidth: number;\n\n    private columnDefs: (ColDef | ColGroupDef)[];\n\n    private colDefVersion = 0;\n\n    private flexColsCalculatedAtLestOnce = false;\n\n    @PostConstruct\n    public init(): void {\n        this.suppressColumnVirtualisation = this.gridOptionsWrapper.isSuppressColumnVirtualisation();\n\n        const pivotMode = this.gridOptionsWrapper.isPivotMode();\n\n        if (this.isPivotSettingAllowed(pivotMode)) {\n            this.pivotMode = pivotMode;\n        }\n\n        this.usingTreeData = this.gridOptionsWrapper.isTreeData();\n\n        this.addManagedListener(this.gridOptionsWrapper, 'autoGroupColumnDef', () => this.onAutoGroupColumnDefChanged());\n        this.addManagedListener(this.gridOptionsWrapper, 'defaultColDef', () => this.onDefaultColDefChanged());\n    }\n\n    public onAutoGroupColumnDefChanged() {\n        this.autoGroupsNeedBuilding = true;\n        this.forceRecreateAutoGroups = true;\n        this.updateGridColumns();\n        this.updateDisplayedColumns('gridOptionsChanged');\n    }\n\n    public onDefaultColDefChanged(): void {\n        // col def's should get revisited, even if specific column hasn't changed,\n        // as the defaultColDef impacts all columns, so each column should assume it's Col Def has changed.\n        this.colDefVersion++;\n        // likewise for autoGroupCol, the default col def impacts this\n        this.forceRecreateAutoGroups = true;\n        this.createColumnsFromColumnDefs(true);\n    }\n\n    public getColDefVersion(): number {\n        return this.colDefVersion;\n    }\n\n    public setColumnDefs(columnDefs: (ColDef | ColGroupDef)[], source: ColumnEventType = 'api') {\n        const colsPreviouslyExisted = !!this.columnDefs;\n        this.colDefVersion++;\n        this.columnDefs = columnDefs;\n        this.createColumnsFromColumnDefs(colsPreviouslyExisted, source);\n    }\n\n    private createColumnsFromColumnDefs(colsPreviouslyExisted: boolean, source: ColumnEventType = 'api'): void {\n\n        // only need to raise before/after events if updating columns, never if setting columns for first time\n        const raiseEventsFunc = colsPreviouslyExisted ? this.compareColumnStatesAndRaiseEvents(source) : undefined;\n\n        // always invalidate cache on changing columns, as the column id's for the new columns\n        // could overlap with the old id's, so the cache would return old values for new columns.\n        this.valueCache.expire();\n\n        // NOTE ==================\n        // we should be destroying the existing columns and groups if they exist, for example, the original column\n        // group adds a listener to the columns, it should be also removing the listeners\n        this.autoGroupsNeedBuilding = true;\n\n        const oldPrimaryColumns = this.primaryColumns;\n        const oldPrimaryTree = this.primaryColumnTree;\n        const balancedTreeResult = this.columnFactory.createColumnTree(this.columnDefs, true, oldPrimaryTree);\n\n        this.primaryColumnTree = balancedTreeResult.columnTree;\n        this.primaryHeaderRowCount = balancedTreeResult.treeDept + 1;\n\n        this.primaryColumns = this.getColumnsFromTree(this.primaryColumnTree);\n        this.primaryColumnsMap = {};\n        this.primaryColumns.forEach(col => this.primaryColumnsMap[col.getId()] = col);\n\n        this.extractRowGroupColumns(source, oldPrimaryColumns);\n        this.extractPivotColumns(source, oldPrimaryColumns);\n        this.extractValueColumns(source, oldPrimaryColumns);\n\n        this.ready = true;\n\n        // if we are showing secondary columns, then no need to update grid columns\n        // at this point, as it's the pivot service responsibility to change these\n        // if we are no longer pivoting (ie and need to revert back to primary, otherwise\n        // we shouldn't be touching the primary).\n        const gridColsNotProcessed = this.gridColsArePrimary === undefined;\n        const processGridCols = this.gridColsArePrimary || gridColsNotProcessed;\n\n        if (processGridCols) {\n            this.updateGridColumns();\n            if (colsPreviouslyExisted && !this.gridOptionsWrapper.isMaintainColumnOrder()) {\n                this.orderGridColumnsLikePrimary();\n            }\n            this.updateDisplayedColumns(source);\n            this.checkViewportColumns();\n        }\n\n        // this event is not used by AG Grid, but left here for backwards compatibility,\n        // in case applications use it\n        this.dispatchEverythingChanged(source);\n\n        raiseEventsFunc && raiseEventsFunc();\n\n        this.dispatchNewColumnsLoaded();\n    }\n\n    private dispatchNewColumnsLoaded(): void {\n        const newColumnsLoadedEvent: NewColumnsLoadedEvent = {\n            type: Events.EVENT_NEW_COLUMNS_LOADED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n\n        this.eventService.dispatchEvent(newColumnsLoadedEvent);\n    }\n\n    // this event is legacy, no grid code listens to it. instead the grid listens to New Columns Loaded\n    private dispatchEverythingChanged(source: ColumnEventType = 'api'): void {\n        const eventEverythingChanged: ColumnEverythingChangedEvent = {\n            type: Events.EVENT_COLUMN_EVERYTHING_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            source\n        };\n        this.eventService.dispatchEvent(eventEverythingChanged);\n    }\n\n    private orderGridColumnsLikePrimary(): void {\n        const primaryColumns = this.primaryColumns;\n\n        if (!primaryColumns) { return; }\n\n        this.gridColumns.sort((colA: Column, colB: Column) => {\n            const primaryIndexA = primaryColumns.indexOf(colA);\n            const primaryIndexB = primaryColumns.indexOf(colB);\n            // if both cols are present in primary, then we just return the position,\n            // so position is maintained.\n            const indexAPresent = primaryIndexA >= 0;\n            const indexBPresent = primaryIndexB >= 0;\n\n            if (indexAPresent && indexBPresent) {\n                return primaryIndexA - primaryIndexB;\n            }\n\n            if (indexAPresent) {\n                // B is auto group column, so put B first\n                return 1;\n            }\n\n            if (indexBPresent) {\n                // A is auto group column, so put A first\n                return -1;\n            }\n\n            // otherwise both A and B are auto-group columns. so we just keep the order\n            // as they were already in.\n            const gridIndexA = this.gridColumns.indexOf(colA);\n            const gridIndexB = this.gridColumns.indexOf(colB);\n            return gridIndexA - gridIndexB;\n        });\n    }\n\n    public getAllDisplayedAutoHeightCols(): Column[] {\n        return this.displayedAutoHeightCols;\n    }\n\n    private setViewport(): void {\n        if (this.gridOptionsWrapper.isEnableRtl()) {\n            this.viewportLeft = this.bodyWidth - this.scrollPosition - this.scrollWidth;\n            this.viewportRight = this.bodyWidth - this.scrollPosition;\n        } else {\n            this.viewportLeft = this.scrollPosition;\n            this.viewportRight = this.scrollWidth + this.scrollPosition;\n        }\n    }\n\n    // used by clipboard service, to know what columns to paste into\n    public getDisplayedColumnsStartingAt(column: Column): Column[] {\n        let currentColumn: Column | null = column;\n        const columns: Column[] = [];\n\n        while (currentColumn != null) {\n            columns.push(currentColumn);\n            currentColumn = this.getDisplayedColAfter(currentColumn);\n        }\n\n        return columns;\n    }\n\n    // checks what columns are currently displayed due to column virtualisation. fires an event\n    // if the list of columns has changed.\n    // + setColumnWidth(), setViewportPosition(), setColumnDefs(), sizeColumnsToFit()\n    private checkViewportColumns(): void {\n        // check displayCenterColumnTree exists first, as it won't exist when grid is initialising\n        if (this.displayedColumnsCenter == null) { return; }\n\n        const hashBefore = this.viewportColumns.map(column => column.getId()).join('#');\n\n        this.extractViewport();\n\n        const hashAfter = this.viewportColumns.map(column => column.getId()).join('#');\n\n        if (hashBefore !== hashAfter) {\n            const event: VirtualColumnsChangedEvent = {\n                type: Events.EVENT_VIRTUAL_COLUMNS_CHANGED,\n                api: this.gridApi,\n                columnApi: this.columnApi\n            };\n\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    public setViewportPosition(scrollWidth: number, scrollPosition: number): void {\n        if (scrollWidth !== this.scrollWidth || scrollPosition !== this.scrollPosition || this.bodyWidthDirty) {\n            this.scrollWidth = scrollWidth;\n            this.scrollPosition = scrollPosition;\n            // we need to call setVirtualViewportLeftAndRight() at least once after the body width changes,\n            // as the viewport can stay the same, but in RTL, if body width changes, we need to work out the\n            // virtual columns again\n            this.bodyWidthDirty = true;\n            this.setViewport();\n\n            if (this.ready) {\n                this.checkViewportColumns();\n            }\n        }\n    }\n\n    public isPivotMode(): boolean {\n        return this.pivotMode;\n    }\n\n    private isPivotSettingAllowed(pivot: boolean): boolean {\n        if (pivot && this.gridOptionsWrapper.isTreeData()) {\n            console.warn(\"AG Grid: Pivot mode not available in conjunction Tree Data i.e. 'gridOptions.treeData: true'\");\n            return false;\n        }\n\n        return true;\n    }\n\n    public setPivotMode(pivotMode: boolean, source: ColumnEventType = 'api'): void {\n        if (pivotMode === this.pivotMode || !this.isPivotSettingAllowed(this.pivotMode)) { return; }\n\n        this.pivotMode = pivotMode;\n\n        // we need to update grid columns to cover the scenario where user has groupSuppressAutoColumn=true, as\n        // this means we don't use auto group column UNLESS we are in pivot mode (it's mandatory in pivot mode),\n        // so need to updateGridColumn() to check it autoGroupCol needs to be added / removed\n        this.autoGroupsNeedBuilding = true;\n        this.updateGridColumns();\n        this.updateDisplayedColumns(source);\n\n        const event: ColumnPivotModeChangedEvent = {\n            type: Events.EVENT_COLUMN_PIVOT_MODE_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public getSecondaryPivotColumn(pivotKeys: string[], valueColKey: Column | string): Column | null {\n        if (missing(this.secondaryColumns)) { return null; }\n\n        const valueColumnToFind = this.getPrimaryColumn(valueColKey);\n\n        let foundColumn: Column | null = null;\n\n        this.secondaryColumns.forEach(column => {\n            const thisPivotKeys = column.getColDef().pivotKeys;\n            const pivotValueColumn = column.getColDef().pivotValueColumn;\n\n            const pivotKeyMatches = areEqual(thisPivotKeys, pivotKeys);\n            const pivotValueMatches = pivotValueColumn === valueColumnToFind;\n\n            if (pivotKeyMatches && pivotValueMatches) {\n                foundColumn = column;\n            }\n        });\n\n        return foundColumn;\n    }\n\n    private setBeans(@Qualifier('loggerFactory') loggerFactory: LoggerFactory) {\n        this.logger = loggerFactory.create('columnModel');\n    }\n\n    private setFirstRightAndLastLeftPinned(source: ColumnEventType): void {\n        let lastLeft: Column | null;\n        let firstRight: Column | null;\n\n        if (this.gridOptionsWrapper.isEnableRtl()) {\n            lastLeft = this.displayedColumnsLeft ? this.displayedColumnsLeft[0] : null;\n            firstRight = this.displayedColumnsRight ? last(this.displayedColumnsRight) : null;\n        } else {\n            lastLeft = this.displayedColumnsLeft ? last(this.displayedColumnsLeft) : null;\n            firstRight = this.displayedColumnsRight ? this.displayedColumnsRight[0] : null;\n        }\n\n        this.gridColumns.forEach((column: Column) => {\n            column.setLastLeftPinned(column === lastLeft, source);\n            column.setFirstRightPinned(column === firstRight, source);\n        });\n    }\n\n    public autoSizeColumns(params: {\n        columns: (string | Column)[];\n        skipHeader?: boolean;\n        skipHeaderGroups?: boolean;\n        stopAtGroup?: ColumnGroup;\n        source?: ColumnEventType;\n    }): void {\n        const { columns, skipHeader, skipHeaderGroups, stopAtGroup, source = 'api' } = params;\n        // because of column virtualisation, we can only do this function on columns that are\n        // actually rendered, as non-rendered columns (outside the viewport and not rendered\n        // due to column virtualisation) are not present. this can result in all rendered columns\n        // getting narrowed, which in turn introduces more rendered columns on the RHS which\n        // did not get autosized in the original run, leaving the visible grid with columns on\n        // the LHS sized, but RHS no. so we keep looping through the visible columns until\n        // no more cols are available (rendered) to be resized\n\n        // we autosize after animation frames finish in case any cell renderers need to complete first. this can\n        // happen eg if client code is calling api.autoSizeAllColumns() straight after grid is initialised, but grid\n        // hasn't fully drawn out all the cells yet (due to cell renderers in animation frames).\n        this.animationFrameService.flushAllFrames();\n\n        // keep track of which cols we have resized in here\n        const columnsAutosized: Column[] = [];\n        // initialise with anything except 0 so that while loop executes at least once\n        let changesThisTimeAround = -1;\n\n        const shouldSkipHeader = skipHeader != null ? skipHeader : this.gridOptionsWrapper.isSkipHeaderOnAutoSize();\n        const shouldSkipHeaderGroups = skipHeaderGroups != null ? skipHeaderGroups : shouldSkipHeader;\n\n        while (changesThisTimeAround !== 0) {\n            changesThisTimeAround = 0;\n            this.actionOnGridColumns(columns, (column: Column): boolean => {\n                // if already autosized, skip it\n                if (columnsAutosized.indexOf(column) >= 0) {\n                    return false;\n                }\n                // get how wide this col should be\n                const preferredWidth = this.autoWidthCalculator.getPreferredWidthForColumn(column, shouldSkipHeader);\n                // preferredWidth = -1 if this col is not on the screen\n                if (preferredWidth > 0) {\n                    const newWidth = this.normaliseColumnWidth(column, preferredWidth);\n                    column.setActualWidth(newWidth, source);\n                    columnsAutosized.push(column);\n                    changesThisTimeAround++;\n                }\n                return true;\n            }, source);\n        }\n\n        if (!shouldSkipHeaderGroups) {\n            this.autoSizeColumnGroupsByColumns(columns, stopAtGroup);\n        }\n\n        this.fireColumnResizedEvent(columnsAutosized, true, 'autosizeColumns');\n    }\n\n    public fireColumnResizedEvent(columns: Column[] | null, finished: boolean, source: ColumnEventType, flexColumns: Column[] | null = null): void {\n        if (columns && columns.length) {\n            const event: ColumnResizedEvent = {\n                type: Events.EVENT_COLUMN_RESIZED,\n                columns: columns,\n                column: columns.length === 1 ? columns[0] : null,\n                flexColumns: flexColumns,\n                finished: finished,\n                api: this.gridApi,\n                columnApi: this.columnApi,\n                source: source\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    public autoSizeColumn(key: string | Column | null, skipHeader?: boolean, source: ColumnEventType = \"api\"): void {\n        if (key) {\n            this.autoSizeColumns({ columns: [key], skipHeader, skipHeaderGroups: true, source });\n        }\n    }\n\n    private autoSizeColumnGroupsByColumns(keys: (string | Column)[], stopAtGroup?: ColumnGroup): Column[] {\n        const columnGroups: Set<ColumnGroup> = new Set();\n        const columns = this.getGridColumns(keys);\n\n        columns.forEach(col => {\n            let parent: ColumnGroup = col.getParent();\n            while (parent && parent != stopAtGroup) {\n                if (!parent.isPadding()) {\n                    columnGroups.add(parent);\n                }\n                parent = parent.getParent();\n            }\n        });\n\n        let headerGroupCtrl: HeaderGroupCellCtrl | undefined;\n\n        const resizedColumns: Column[] = [];\n\n        for (const columnGroup of columnGroups) {\n            for (const headerContainerCtrl of this.ctrlsService.getHeaderRowContainerCtrls()) {\n                headerGroupCtrl = headerContainerCtrl.getHeaderCtrlForColumn(columnGroup);\n                if (headerGroupCtrl) { break; }\n            }\n            if (headerGroupCtrl) {\n                headerGroupCtrl.resizeLeafColumnsToFit();\n            }\n        }\n\n        return resizedColumns;\n    }\n\n    public autoSizeAllColumns(skipHeader?: boolean, source: ColumnEventType = \"api\"): void {\n        const allDisplayedColumns = this.getAllDisplayedColumns();\n        this.autoSizeColumns({ columns: allDisplayedColumns, skipHeader, source });\n    }\n\n    // Possible candidate for reuse (alot of recursive traversal duplication)\n    private getColumnsFromTree(rootColumns: IProvidedColumn[]): Column[] {\n        const result: Column[] = [];\n\n        const recursiveFindColumns = (childColumns: IProvidedColumn[]): void => {\n            for (let i = 0; i < childColumns.length; i++) {\n                const child = childColumns[i];\n                if (child instanceof Column) {\n                    result.push(child);\n                } else if (child instanceof ProvidedColumnGroup) {\n                    recursiveFindColumns(child.getChildren());\n                }\n            }\n        };\n\n        recursiveFindColumns(rootColumns);\n\n        return result;\n    }\n\n    public getAllDisplayedTrees(): IHeaderColumn[] | null {\n        if (this.displayedTreeLeft && this.displayedTreeRight && this.displayedTreeCentre) {\n            return this.displayedTreeLeft\n                .concat(this.displayedTreeCentre)\n                .concat(this.displayedTreeRight);\n        }\n\n        return null;\n    }\n\n    // + columnSelectPanel\n    public getPrimaryColumnTree(): IProvidedColumn[] {\n        return this.primaryColumnTree;\n    }\n\n    // + gridPanel -> for resizing the body and setting top margin\n    public getHeaderRowCount(): number {\n        return this.gridHeaderRowCount;\n    }\n\n    // + headerRenderer -> setting pinned body width\n    public getDisplayedTreeLeft(): IHeaderColumn[] {\n        return this.displayedTreeLeft;\n    }\n\n    // + headerRenderer -> setting pinned body width\n    public getDisplayedTreeRight(): IHeaderColumn[] {\n        return this.displayedTreeRight;\n    }\n\n    // + headerRenderer -> setting pinned body width\n    public getDisplayedTreeCentre(): IHeaderColumn[] {\n        return this.displayedTreeCentre;\n    }\n\n    // gridPanel -> ensureColumnVisible\n    public isColumnDisplayed(column: Column): boolean {\n        return this.getAllDisplayedColumns().indexOf(column) >= 0;\n    }\n\n    // + csvCreator\n    public getAllDisplayedColumns(): Column[] {\n        return this.displayedColumns;\n    }\n\n    public getViewportColumns(): Column[] {\n        return this.viewportColumns;\n    }\n\n    public getDisplayedLeftColumnsForRow(rowNode: RowNode): Column[] {\n        if (!this.colSpanActive) {\n            return this.displayedColumnsLeft;\n        }\n\n        return this.getDisplayedColumnsForRow(rowNode, this.displayedColumnsLeft);\n    }\n\n    public getDisplayedRightColumnsForRow(rowNode: RowNode): Column[] {\n        if (!this.colSpanActive) {\n            return this.displayedColumnsRight;\n        }\n\n        return this.getDisplayedColumnsForRow(rowNode, this.displayedColumnsRight);\n    }\n\n    private getDisplayedColumnsForRow(\n        rowNode: RowNode, displayedColumns: Column[],\n        filterCallback?: (column: Column) => boolean,\n        emptySpaceBeforeColumn?: (column: Column) => boolean\n    ): Column[] {\n        const result: Column[] = [];\n        let lastConsideredCol: Column | null = null;\n\n        for (let i = 0; i < displayedColumns.length; i++) {\n            const col = displayedColumns[i];\n            const maxAllowedColSpan = displayedColumns.length - i;\n            const colSpan = Math.min(col.getColSpan(rowNode), maxAllowedColSpan);\n            const columnsToCheckFilter: Column[] = [col];\n\n            if (colSpan > 1) {\n                const colsToRemove = colSpan - 1;\n\n                for (let j = 1; j <= colsToRemove; j++) {\n                    columnsToCheckFilter.push(displayedColumns[i + j]);\n                }\n\n                i += colsToRemove;\n            }\n\n            // see which cols we should take out for column virtualisation\n            let filterPasses: boolean;\n\n            if (filterCallback) {\n                // if user provided a callback, means some columns may not be in the viewport.\n                // the user will NOT provide a callback if we are talking about pinned areas,\n                // as pinned areas have no horizontal scroll and do not virtualise the columns.\n                // if lots of columns, that means column spanning, and we set filterPasses = true\n                // if one or more of the columns spanned pass the filter.\n                filterPasses = false;\n                columnsToCheckFilter.forEach(colForFilter => {\n                    if (filterCallback(colForFilter)) { filterPasses = true; }\n                });\n            } else {\n                filterPasses = true;\n            }\n\n            if (filterPasses) {\n                if (result.length === 0 && lastConsideredCol) {\n                    const gapBeforeColumn = emptySpaceBeforeColumn ? emptySpaceBeforeColumn(col) : false;\n                    if (gapBeforeColumn) {\n                        result.push(lastConsideredCol);\n                    }\n                }\n                result.push(col);\n            }\n\n            lastConsideredCol = col;\n        }\n\n        return result;\n    }\n\n    // + rowRenderer\n    // if we are not column spanning, this just returns back the virtual centre columns,\n    // however if we are column spanning, then different rows can have different virtual\n    // columns, so we have to work out the list for each individual row.\n    public getViewportCenterColumnsForRow(rowNode: RowNode): Column[] {\n        if (!this.colSpanActive) {\n            return this.viewportColumnsCenter;\n        }\n\n        const emptySpaceBeforeColumn = (col: Column) => {\n            const left = col.getLeft();\n\n            return exists(left) && left > this.viewportLeft;\n        };\n\n        // if doing column virtualisation, then we filter based on the viewport.\n        const filterCallback = this.suppressColumnVirtualisation ? null : this.isColumnInViewport.bind(this);\n\n        return this.getDisplayedColumnsForRow(\n            rowNode,\n            this.displayedColumnsCenter,\n            filterCallback,\n            emptySpaceBeforeColumn\n        );\n    }\n\n    public getAriaColumnIndex(col: Column): number {\n        return this.getAllGridColumns().indexOf(col) + 1;\n    }\n\n    private isColumnInViewport(col: Column): boolean {\n        // we never filter out autoHeight columns, as we need them in the DOM for calculating Auto Height\n        if (col.isAutoHeight()) { return true; }\n\n        const columnLeft = col.getLeft() || 0;\n        const columnRight = columnLeft + col.getActualWidth();\n\n        // adding 200 for buffer size, so some cols off viewport are rendered.\n        // this helps horizontal scrolling so user rarely sees white space (unless\n        // they scroll horizontally fast). however we are conservative, as the more\n        // buffer the slower the vertical redraw speed\n        const leftBounds = this.viewportLeft - 200;\n        const rightBounds = this.viewportRight + 200;\n\n        const columnToMuchLeft = columnLeft < leftBounds && columnRight < leftBounds;\n        const columnToMuchRight = columnLeft > rightBounds && columnRight > rightBounds;\n\n        return !columnToMuchLeft && !columnToMuchRight;\n    }\n\n    // used by:\n    // + angularGrid -> setting pinned body width\n    // note: this should be cached\n    public getDisplayedColumnsLeftWidth() {\n        return this.getWidthOfColsInList(this.displayedColumnsLeft);\n    }\n\n    // note: this should be cached\n    public getDisplayedColumnsRightWidth() {\n        return this.getWidthOfColsInList(this.displayedColumnsRight);\n    }\n\n    public updatePrimaryColumnList(\n        keys: (string | Column)[] | null,\n        masterList: Column[],\n        actionIsAdd: boolean,\n        columnCallback: (column: Column) => void,\n        eventType: string,\n        source: ColumnEventType = \"api\"\n    ) {\n\n        if (!keys || missingOrEmpty(keys)) { return; }\n\n        let atLeastOne = false;\n\n        keys.forEach(key => {\n            const columnToAdd = this.getPrimaryColumn(key);\n            if (!columnToAdd) { return; }\n\n            if (actionIsAdd) {\n                if (masterList.indexOf(columnToAdd) >= 0) { return; }\n                masterList.push(columnToAdd);\n            } else {\n                if (masterList.indexOf(columnToAdd) < 0) { return; }\n                removeFromArray(masterList, columnToAdd);\n            }\n\n            columnCallback(columnToAdd);\n            atLeastOne = true;\n        });\n\n        if (!atLeastOne) { return; }\n\n        if (this.autoGroupsNeedBuilding) {\n            this.updateGridColumns();\n        }\n\n        this.updateDisplayedColumns(source);\n\n        const event: ColumnEvent = {\n            type: eventType,\n            columns: masterList,\n            column: masterList.length === 1 ? masterList[0] : null,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            source: source\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public setRowGroupColumns(colKeys: (string | Column)[], source: ColumnEventType = \"api\"): void {\n        this.autoGroupsNeedBuilding = true;\n        this.setPrimaryColumnList(colKeys, this.rowGroupColumns,\n            Events.EVENT_COLUMN_ROW_GROUP_CHANGED,\n            this.setRowGroupActive.bind(this),\n            source);\n    }\n\n    private setRowGroupActive(active: boolean, column: Column, source: ColumnEventType): void {\n        if (active === column.isRowGroupActive()) { return; }\n\n        column.setRowGroupActive(active, source);\n\n        if (!active && !this.gridOptionsWrapper.isSuppressMakeColumnVisibleAfterUnGroup()) {\n            column.setVisible(true, source);\n        }\n    }\n\n    public addRowGroupColumn(key: string | Column | null, source: ColumnEventType = \"api\"): void {\n        if (key) { this.addRowGroupColumns([key], source); }\n    }\n\n    public addRowGroupColumns(keys: (string | Column)[], source: ColumnEventType = \"api\"): void {\n        this.autoGroupsNeedBuilding = true;\n        this.updatePrimaryColumnList(keys, this.rowGroupColumns, true,\n            this.setRowGroupActive.bind(this, true),\n            Events.EVENT_COLUMN_ROW_GROUP_CHANGED,\n            source\n        );\n    }\n\n    public removeRowGroupColumns(keys: (string | Column)[] | null, source: ColumnEventType = \"api\"): void {\n        this.autoGroupsNeedBuilding = true;\n        this.updatePrimaryColumnList(keys, this.rowGroupColumns, false,\n            this.setRowGroupActive.bind(this, false),\n            Events.EVENT_COLUMN_ROW_GROUP_CHANGED,\n            source);\n    }\n\n    public removeRowGroupColumn(key: string | Column | null, source: ColumnEventType = \"api\"): void {\n        if (key) { this.removeRowGroupColumns([key], source); }\n    }\n\n    public addPivotColumns(keys: (string | Column)[], source: ColumnEventType = \"api\"): void {\n        this.updatePrimaryColumnList(keys, this.pivotColumns, true,\n            column => column.setPivotActive(true, source),\n            Events.EVENT_COLUMN_PIVOT_CHANGED, source);\n    }\n\n    public setPivotColumns(colKeys: (string | Column)[], source: ColumnEventType = \"api\"): void {\n        this.setPrimaryColumnList(colKeys, this.pivotColumns, Events.EVENT_COLUMN_PIVOT_CHANGED,\n            (added: boolean, column: Column) => {\n                column.setPivotActive(added, source);\n            }, source\n        );\n    }\n\n    public addPivotColumn(key: string | Column, source: ColumnEventType = \"api\"): void {\n        this.addPivotColumns([key], source);\n    }\n\n    public removePivotColumns(keys: (string | Column)[], source: ColumnEventType = \"api\"): void {\n        this.updatePrimaryColumnList(\n            keys,\n            this.pivotColumns,\n            false,\n            column => column.setPivotActive(false, source),\n            Events.EVENT_COLUMN_PIVOT_CHANGED,\n            source\n        );\n    }\n\n    public removePivotColumn(key: string | Column, source: ColumnEventType = \"api\"): void {\n        this.removePivotColumns([key], source);\n    }\n\n    private setPrimaryColumnList(\n        colKeys: (string | Column)[],\n        masterList: Column[],\n        eventName: string,\n        columnCallback: (added: boolean, column: Column) => void,\n        source: ColumnEventType\n    ): void {\n\n        masterList.length = 0;\n\n        if (exists(colKeys)) {\n            colKeys.forEach(key => {\n                const column = this.getPrimaryColumn(key);\n                if (column) {\n                    masterList.push(column);\n                }\n            });\n        }\n\n        (this.primaryColumns || []).forEach(column => {\n            const added = masterList.indexOf(column) >= 0;\n            columnCallback(added, column);\n        });\n\n        if (this.autoGroupsNeedBuilding) {\n            this.updateGridColumns();\n        }\n\n        this.updateDisplayedColumns(source);\n\n        this.fireColumnEvent(eventName, masterList, source);\n    }\n\n    public setValueColumns(colKeys: (string | Column)[], source: ColumnEventType = \"api\"): void {\n        this.setPrimaryColumnList(colKeys, this.valueColumns,\n            Events.EVENT_COLUMN_VALUE_CHANGED,\n            this.setValueActive.bind(this),\n            source\n        );\n    }\n\n    private setValueActive(active: boolean, column: Column, source: ColumnEventType): void {\n        if (active === column.isValueActive()) { return; }\n\n        column.setValueActive(active, source);\n\n        if (active && !column.getAggFunc()) {\n            const initialAggFunc = this.aggFuncService.getDefaultAggFunc(column);\n            column.setAggFunc(initialAggFunc);\n        }\n    }\n\n    public addValueColumns(keys: (string | Column)[], source: ColumnEventType = \"api\"): void {\n        this.updatePrimaryColumnList(keys, this.valueColumns, true,\n            this.setValueActive.bind(this, true),\n            Events.EVENT_COLUMN_VALUE_CHANGED,\n            source\n        );\n    }\n\n    public addValueColumn(colKey: (string | Column) | null | undefined, source: ColumnEventType = \"api\"): void {\n        if (colKey) { this.addValueColumns([colKey], source); }\n    }\n\n    public removeValueColumn(colKey: (string | Column), source: ColumnEventType = \"api\"): void {\n        this.removeValueColumns([colKey], source);\n    }\n\n    public removeValueColumns(keys: (string | Column)[], source: ColumnEventType = \"api\"): void {\n        this.updatePrimaryColumnList(keys, this.valueColumns, false,\n            this.setValueActive.bind(this, false),\n            Events.EVENT_COLUMN_VALUE_CHANGED,\n            source\n        );\n    }\n\n    // returns the width we can set to this col, taking into consideration min and max widths\n    private normaliseColumnWidth(column: Column, newWidth: number): number {\n        const minWidth = column.getMinWidth();\n\n        if (exists(minWidth) && newWidth < minWidth) {\n            newWidth = minWidth;\n        }\n\n        const maxWidth = column.getMaxWidth();\n        if (exists(maxWidth) && column.isGreaterThanMax(newWidth)) {\n            newWidth = maxWidth;\n        }\n\n        return newWidth;\n    }\n\n    private getPrimaryOrGridColumn(key: string | Column): Column | null {\n        const column = this.getPrimaryColumn(key);\n\n        return column || this.getGridColumn(key);\n    }\n\n    public setColumnWidths(\n        columnWidths: {\n            key: string | Column, // @key - the column who's size we want to change\n            newWidth: number; // @newWidth - width in pixels\n        }[],\n        shiftKey: boolean, // @takeFromAdjacent - if user has 'shift' pressed, then pixels are taken from adjacent column\n        finished: boolean, // @finished - ends up in the event, tells the user if more events are to come\n        source: ColumnEventType = \"api\"\n    ): void {\n        const sets: ColumnResizeSet[] = [];\n\n        columnWidths.forEach(columnWidth => {\n            const col = this.getPrimaryOrGridColumn(columnWidth.key);\n\n            if (!col) { return; }\n\n            sets.push({\n                width: columnWidth.newWidth,\n                ratios: [1],\n                columns: [col]\n            });\n\n            // if user wants to do shift resize by default, then we invert the shift operation\n            const defaultIsShift = this.gridOptionsWrapper.getColResizeDefault() === 'shift';\n\n            if (defaultIsShift) {\n                shiftKey = !shiftKey;\n            }\n\n            if (shiftKey) {\n                const otherCol = this.getDisplayedColAfter(col);\n                if (!otherCol) { return; }\n\n                const widthDiff = col.getActualWidth() - columnWidth.newWidth;\n                const otherColWidth = otherCol.getActualWidth() + widthDiff;\n\n                sets.push({\n                    width: otherColWidth,\n                    ratios: [1],\n                    columns: [otherCol]\n                });\n            }\n        });\n\n        if (sets.length === 0) { return; }\n\n        this.resizeColumnSets({\n            resizeSets: sets,\n            finished,\n            source\n        });\n\n    }\n\n    private checkMinAndMaxWidthsForSet(columnResizeSet: ColumnResizeSet): boolean {\n        const { columns, width } = columnResizeSet;\n\n        // every col has a min width, so sum them all up and see if we have enough room\n        // for all the min widths\n        let minWidthAccumulated = 0;\n        let maxWidthAccumulated = 0;\n        let maxWidthActive = true;\n\n        columns.forEach(col => {\n            const minWidth = col.getMinWidth();\n            minWidthAccumulated += minWidth || 0;\n\n            const maxWidth = col.getMaxWidth();\n            if (exists(maxWidth) && maxWidth > 0) {\n                maxWidthAccumulated += maxWidth;\n            } else {\n                // if at least one columns has no max width, it means the group of columns\n                // then has no max width, as at least one column can take as much width as possible\n                maxWidthActive = false;\n            }\n        });\n\n        const minWidthPasses = width >= minWidthAccumulated;\n        const maxWidthPasses = !maxWidthActive || (width <= maxWidthAccumulated);\n\n        return minWidthPasses && maxWidthPasses;\n    }\n\n    // method takes sets of columns and resizes them. either all sets will be resized, or nothing\n    // be resized. this is used for example when user tries to resize a group and holds shift key,\n    // then both the current group (grows), and the adjacent group (shrinks), will get resized,\n    // so that's two sets for this method.\n    public resizeColumnSets(params: {\n        resizeSets: ColumnResizeSet[],\n        finished: boolean,\n        source: ColumnEventType\n    }): void {\n        const { resizeSets, finished, source } = params;\n        const passMinMaxCheck = !resizeSets || resizeSets.every(columnResizeSet => this.checkMinAndMaxWidthsForSet(columnResizeSet));\n\n        if (!passMinMaxCheck) {\n            // even though we are not going to resize beyond min/max size, we still need to raise event when finished\n            if (finished) {\n                const columns = resizeSets && resizeSets.length > 0 ? resizeSets[0].columns : null;\n                this.fireColumnResizedEvent(columns, finished, source);\n            }\n\n            return; // don't resize!\n        }\n\n        const changedCols: Column[] = [];\n        const allResizedCols: Column[] = [];\n\n        resizeSets.forEach(set => {\n            const { width, columns, ratios } = set;\n\n            // keep track of pixels used, and last column gets the remaining,\n            // to cater for rounding errors, and min width adjustments\n            const newWidths: { [colId: string]: number; } = {};\n            const finishedCols: { [colId: string]: boolean; } = {};\n\n            columns.forEach(col => allResizedCols.push(col));\n\n            // the loop below goes through each col. if a col exceeds it's min/max width,\n            // it then gets set to its min/max width and the column is removed marked as 'finished'\n            // and the calculation is done again leaving this column out. take for example columns\n            // {A, width: 50, maxWidth: 100}\n            // {B, width: 50}\n            // {C, width: 50}\n            // and then the set is set to width 600 - on the first pass the grid tries to set each column\n            // to 200. it checks A and sees 200 > 100 and so sets the width to 100. col A is then marked\n            // as 'finished' and the calculation is done again with the remaining cols B and C, which end up\n            // splitting the remaining 500 pixels.\n            let finishedColsGrew = true;\n            let loopCount = 0;\n\n            while (finishedColsGrew) {\n                loopCount++;\n                if (loopCount > 1000) {\n                    // this should never happen, but in the future, someone might introduce a bug here,\n                    // so we stop the browser from hanging and report bug properly\n                    console.error('AG Grid: infinite loop in resizeColumnSets');\n                    break;\n                }\n\n                finishedColsGrew = false;\n\n                const subsetCols: Column[] = [];\n                let subsetRatioTotal = 0;\n                let pixelsToDistribute = width;\n\n                columns.forEach((col: Column, index: number) => {\n                    const thisColFinished = finishedCols[col.getId()];\n                    if (thisColFinished) {\n                        pixelsToDistribute -= newWidths[col.getId()];\n                    } else {\n                        subsetCols.push(col);\n                        const ratioThisCol = ratios[index];\n                        subsetRatioTotal += ratioThisCol;\n                    }\n                });\n\n                // because we are not using all of the ratios (cols can be missing),\n                // we scale the ratio. if all columns are included, then subsetRatioTotal=1,\n                // and so the ratioScale will be 1.\n                const ratioScale = 1 / subsetRatioTotal;\n\n                subsetCols.forEach((col: Column, index: number) => {\n                    const lastCol = index === (subsetCols.length - 1);\n                    let colNewWidth: number;\n\n                    if (lastCol) {\n                        colNewWidth = pixelsToDistribute;\n                    } else {\n                        colNewWidth = Math.round(ratios[index] * width * ratioScale);\n                        pixelsToDistribute -= colNewWidth;\n                    }\n\n                    const minWidth = col.getMinWidth();\n                    const maxWidth = col.getMaxWidth();\n\n                    if (exists(minWidth) && colNewWidth < minWidth) {\n                        colNewWidth = minWidth;\n                        finishedCols[col.getId()] = true;\n                        finishedColsGrew = true;\n                    } else if (exists(maxWidth) && maxWidth > 0 && colNewWidth > maxWidth) {\n                        colNewWidth = maxWidth;\n                        finishedCols[col.getId()] = true;\n                        finishedColsGrew = true;\n                    }\n\n                    newWidths[col.getId()] = colNewWidth;\n                });\n            }\n\n            columns.forEach(col => {\n                const newWidth = newWidths[col.getId()];\n                const actualWidth = col.getActualWidth();\n\n                if (actualWidth !== newWidth) {\n                    col.setActualWidth(newWidth, source);\n                    changedCols.push(col);\n                }\n            });\n        });\n\n        // if no cols changed, then no need to update more or send event.\n        const atLeastOneColChanged = changedCols.length > 0;\n\n        let flexedCols: Column[] = [];\n\n        if (atLeastOneColChanged) {\n            flexedCols = this.refreshFlexedColumns({ resizingCols: allResizedCols, skipSetLeft: true });\n            this.setLeftValues(source);\n            this.updateBodyWidths();\n            this.checkViewportColumns();\n        }\n\n        // check for change first, to avoid unnecessary firing of events\n        // however we always fire 'finished' events. this is important\n        // when groups are resized, as if the group is changing slowly,\n        // eg 1 pixel at a time, then each change will fire change events\n        // in all the columns in the group, but only one with get the pixel.\n        const colsForEvent = allResizedCols.concat(flexedCols);\n\n        if (atLeastOneColChanged || finished) {\n            this.fireColumnResizedEvent(colsForEvent, finished, source, flexedCols);\n        }\n    }\n\n    public setColumnAggFunc(key: string | Column | null | undefined, aggFunc: string, source: ColumnEventType = \"api\"): void {\n        if (!key) { return; }\n\n        const column = this.getPrimaryColumn(key);\n        if (!column) { return; }\n\n        column.setAggFunc(aggFunc);\n\n        this.fireColumnEvent(Events.EVENT_COLUMN_VALUE_CHANGED, [column], source);\n    }\n\n    private fireColumnEvent(type: string, columns: Column[], source: ColumnEventType): void {\n        const event: ColumnValueChangedEvent = {\n            type: type,\n            columns: columns,\n            column: (columns && columns.length == 1) ? columns[0] : null,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            source: source\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public moveRowGroupColumn(fromIndex: number, toIndex: number, source: ColumnEventType = \"api\"): void {\n        const column = this.rowGroupColumns[fromIndex];\n\n        this.rowGroupColumns.splice(fromIndex, 1);\n        this.rowGroupColumns.splice(toIndex, 0, column);\n\n        const event: ColumnRowGroupChangedEvent = {\n            type: Events.EVENT_COLUMN_ROW_GROUP_CHANGED,\n            columns: this.rowGroupColumns,\n            column: this.rowGroupColumns.length === 1 ? this.rowGroupColumns[0] : null,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            source: source\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public moveColumns(columnsToMoveKeys: (string | Column)[], toIndex: number, source: ColumnEventType = \"api\"): void {\n        this.columnAnimationService.start();\n\n        if (toIndex > this.gridColumns.length - columnsToMoveKeys.length) {\n            console.warn('AG Grid: tried to insert columns in invalid location, toIndex = ' + toIndex);\n            console.warn('AG Grid: remember that you should not count the moving columns when calculating the new index');\n            return;\n        }\n\n        // we want to pull all the columns out first and put them into an ordered list\n        const columnsToMove = this.getGridColumns(columnsToMoveKeys);\n        const failedRules = !this.doesMovePassRules(columnsToMove, toIndex);\n\n        if (failedRules) { return; }\n\n        moveInArray(this.gridColumns, columnsToMove, toIndex);\n        this.updateDisplayedColumns(source);\n\n        const event: ColumnMovedEvent = {\n            type: Events.EVENT_COLUMN_MOVED,\n            columns: columnsToMove,\n            column: columnsToMove.length === 1 ? columnsToMove[0] : null,\n            toIndex: toIndex,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            source: source\n        };\n\n        this.eventService.dispatchEvent(event);\n        this.columnAnimationService.finish();\n    }\n\n    public doesMovePassRules(columnsToMove: Column[], toIndex: number): boolean {\n        // make a copy of what the grid columns would look like after the move\n        const proposedColumnOrder = this.gridColumns.slice();\n        moveInArray(proposedColumnOrder, columnsToMove, toIndex);\n\n        // then check that the new proposed order of the columns passes all rules\n        if (!this.doesMovePassMarryChildren(proposedColumnOrder)) {\n            return false;\n        }\n\n        if (!this.doesMovePassLockedPositions(proposedColumnOrder)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    // returns the provided cols sorted in same order as they appear in grid columns. eg if grid columns\n    // contains [a,b,c,d,e] and col passed is [e,a] then the passed cols are sorted into [a,e]\n    public sortColumnsLikeGridColumns(cols: Column[]): void {\n        if (!cols || cols.length <= 1) { return; }\n\n        const notAllColsInGridColumns = cols.filter(c => this.gridColumns.indexOf(c) < 0).length > 0;\n        if (notAllColsInGridColumns) { return; }\n\n        cols.sort((a: Column, b: Column) => {\n            const indexA = this.gridColumns.indexOf(a);\n            const indexB = this.gridColumns.indexOf(b);\n            return indexA - indexB;\n        });\n    }\n\n    public doesMovePassLockedPositions(proposedColumnOrder: Column[]): boolean {\n         // Placement is a number indicating 'left' 'center' or 'right' as 0 1 2\n        let lastPlacement = 0;\n        let rulePassed = true;\n        const lockPositionToPlacement = (position: ColDef['lockPosition']) => {\n            if (!position) { // false or undefined\n                return 1;\n            }\n            if (position === true) {\n                return 0;\n            }\n            return position === 'left' ? 0 : 2; // Otherwise 'right'\n        };\n\n        proposedColumnOrder.forEach(col => {\n            const placement = lockPositionToPlacement(col.getColDef().lockPosition);\n            if (placement < lastPlacement) { // If placement goes down, we're not in the correct order\n                rulePassed = false;\n            }\n            lastPlacement = placement;\n        });\n\n        return rulePassed;\n    }\n\n    public doesMovePassMarryChildren(allColumnsCopy: Column[]): boolean {\n        let rulePassed = true;\n\n        this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, child => {\n            if (!(child instanceof ProvidedColumnGroup)) { return; }\n\n            const columnGroup = child;\n            const colGroupDef = columnGroup.getColGroupDef();\n            const marryChildren = colGroupDef && colGroupDef.marryChildren;\n\n            if (!marryChildren) { return; }\n\n            const newIndexes: number[] = [];\n            columnGroup.getLeafColumns().forEach(col => {\n                const newColIndex = allColumnsCopy.indexOf(col);\n                newIndexes.push(newColIndex);\n            });\n\n            const maxIndex = Math.max.apply(Math, newIndexes);\n            const minIndex = Math.min.apply(Math, newIndexes);\n\n            // spread is how far the first column in this group is away from the last column\n            const spread = maxIndex - minIndex;\n            const maxSpread = columnGroup.getLeafColumns().length - 1;\n\n            // if the columns\n            if (spread > maxSpread) {\n                rulePassed = false;\n            }\n\n            // console.log(`maxIndex = ${maxIndex}, minIndex = ${minIndex}, spread = ${spread}, maxSpread = ${maxSpread}, fail = ${spread > (count-1)}`)\n            // console.log(allColumnsCopy.map( col => col.getColDef().field).join(','));\n        });\n\n        return rulePassed;\n    }\n\n    public moveColumn(key: string | Column, toIndex: number, source: ColumnEventType = \"api\") {\n        this.moveColumns([key], toIndex, source);\n    }\n\n    public moveColumnByIndex(fromIndex: number, toIndex: number, source: ColumnEventType = \"api\"): void {\n        const column = this.gridColumns[fromIndex];\n        this.moveColumn(column, toIndex, source);\n    }\n\n    public getColumnDefs(): (ColDef | ColGroupDef)[] | undefined {\n        if (!this.primaryColumns) { return; }\n\n        const cols = this.primaryColumns.slice();\n\n        if (this.gridColsArePrimary) {\n            cols.sort((a: Column, b: Column) => this.gridColumns.indexOf(a) - this.gridColumns.indexOf(b));\n        } else if (this.lastPrimaryOrder) {\n            cols.sort((a: Column, b: Column) => this.lastPrimaryOrder.indexOf(a) - this.lastPrimaryOrder.indexOf(b));\n        }\n\n        return this.columnDefFactory.buildColumnDefs(cols, this.rowGroupColumns, this.pivotColumns);\n    }\n\n    // used by:\n    // + angularGrid -> for setting body width\n    // + rowController -> setting main row widths (when inserting and resizing)\n    // need to cache this\n    public getBodyContainerWidth(): number {\n        return this.bodyWidth;\n    }\n\n    public getContainerWidth(pinned: string | null): number {\n        switch (pinned) {\n            case Constants.PINNED_LEFT:\n                return this.leftWidth;\n            case Constants.PINNED_RIGHT:\n                return this.rightWidth;\n            default:\n                return this.bodyWidth;\n        }\n    }\n\n    // after setColumnWidth or updateGroupsAndDisplayedColumns\n    private updateBodyWidths(): void {\n        const newBodyWidth = this.getWidthOfColsInList(this.displayedColumnsCenter);\n        const newLeftWidth = this.getWidthOfColsInList(this.displayedColumnsLeft);\n        const newRightWidth = this.getWidthOfColsInList(this.displayedColumnsRight);\n\n        // this is used by virtual col calculation, for RTL only, as a change to body width can impact displayed\n        // columns, due to RTL inverting the y coordinates\n        this.bodyWidthDirty = this.bodyWidth !== newBodyWidth;\n\n        const atLeastOneChanged = this.bodyWidth !== newBodyWidth || this.leftWidth !== newLeftWidth || this.rightWidth !== newRightWidth;\n\n        if (atLeastOneChanged) {\n            this.bodyWidth = newBodyWidth;\n            this.leftWidth = newLeftWidth;\n            this.rightWidth = newRightWidth;\n            // when this fires, it is picked up by the gridPanel, which ends up in\n            // gridPanel calling setWidthAndScrollPosition(), which in turn calls setViewportPosition()\n            const event: DisplayedColumnsWidthChangedEvent = {\n                type: Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED,\n                api: this.gridApi,\n                columnApi: this.columnApi\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    // + rowController\n    public getValueColumns(): Column[] {\n        return this.valueColumns ? this.valueColumns : [];\n    }\n\n    // + rowController\n    public getPivotColumns(): Column[] {\n        return this.pivotColumns ? this.pivotColumns : [];\n    }\n\n    // + clientSideRowModel\n    public isPivotActive(): boolean {\n        return this.pivotColumns && this.pivotColumns.length > 0 && this.pivotMode;\n    }\n\n    // + toolPanel\n    public getRowGroupColumns(): Column[] {\n        return this.rowGroupColumns ? this.rowGroupColumns : [];\n    }\n\n    // + rowController -> while inserting rows\n    public getDisplayedCenterColumns(): Column[] {\n        return this.displayedColumnsCenter;\n    }\n\n    // + rowController -> while inserting rows\n    public getDisplayedLeftColumns(): Column[] {\n        return this.displayedColumnsLeft;\n    }\n\n    public getDisplayedRightColumns(): Column[] {\n        return this.displayedColumnsRight;\n    }\n\n    public getDisplayedColumns(type: string | null): Column[] {\n        switch (type) {\n            case Constants.PINNED_LEFT:\n                return this.getDisplayedLeftColumns();\n            case Constants.PINNED_RIGHT:\n                return this.getDisplayedRightColumns();\n            default:\n                return this.getDisplayedCenterColumns();\n        }\n    }\n\n    // used by:\n    // + clientSideRowController -> sorting, building quick filter text\n    // + headerRenderer -> sorting (clearing icon)\n    public getAllPrimaryColumns(): Column[] | null {\n        return this.primaryColumns ? this.primaryColumns.slice() : null;\n    }\n\n    public getSecondaryColumns(): Column[] | null {\n        return this.secondaryColumns ? this.secondaryColumns.slice() : null;\n    }\n\n    public getAllColumnsForQuickFilter(): Column[] {\n        return this.columnsForQuickFilter;\n    }\n\n    // + moveColumnController\n    public getAllGridColumns(): Column[] {\n        return this.gridColumns;\n    }\n\n    public isEmpty(): boolean {\n        return missingOrEmpty(this.gridColumns);\n    }\n\n    public isRowGroupEmpty(): boolean {\n        return missingOrEmpty(this.rowGroupColumns);\n    }\n\n    public setColumnVisible(key: string | Column, visible: boolean, source: ColumnEventType = \"api\"): void {\n        this.setColumnsVisible([key], visible, source);\n    }\n\n    public setColumnsVisible(keys: (string | Column)[], visible = false, source: ColumnEventType = \"api\"): void {\n        this.columnAnimationService.start();\n\n        this.actionOnGridColumns(keys, (column: Column): boolean => {\n            if (column.isVisible() !== visible) {\n                column.setVisible(visible, source);\n                return true;\n            }\n            return false;\n        }, source, () => {\n            const event: ColumnVisibleEvent = {\n                type: Events.EVENT_COLUMN_VISIBLE,\n                visible: visible,\n                column: null,\n                columns: null,\n                api: this.gridApi,\n                columnApi: this.columnApi,\n                source: source\n            };\n            return event;\n        });\n        this.columnAnimationService.finish();\n    }\n\n    public setColumnPinned(key: string | Column | null, pinned: string | boolean | null, source: ColumnEventType = \"api\"): void {\n        if (key) {\n            this.setColumnsPinned([key], pinned, source);\n        }\n    }\n\n    public setColumnsPinned(keys: (string | Column)[], pinned: string | boolean | null, source: ColumnEventType = \"api\"): void {\n        if (this.gridOptionsWrapper.getDomLayout() === 'print') {\n            console.warn(`Changing the column pinning status is not allowed with domLayout='print'`);\n            return;\n        }\n        this.columnAnimationService.start();\n\n        let actualPinned: string | null;\n        if (pinned === true || pinned === Constants.PINNED_LEFT) {\n            actualPinned = Constants.PINNED_LEFT;\n        } else if (pinned === Constants.PINNED_RIGHT) {\n            actualPinned = Constants.PINNED_RIGHT;\n        } else {\n            actualPinned = null;\n        }\n\n        this.actionOnGridColumns(keys, (col: Column): boolean => {\n            if (col.getPinned() !== actualPinned) {\n                col.setPinned(actualPinned);\n                return true;\n            }\n            return false;\n        }, source, () => {\n            const event: ColumnPinnedEvent = {\n                type: Events.EVENT_COLUMN_PINNED,\n                pinned: actualPinned,\n                column: null,\n                columns: null,\n                api: this.gridApi,\n                columnApi: this.columnApi,\n                source: source\n            };\n            return event;\n        });\n\n        this.columnAnimationService.finish();\n    }\n\n    // does an action on a set of columns. provides common functionality for looking up the\n    // columns based on key, getting a list of effected columns, and then updated the event\n    // with either one column (if it was just one col) or a list of columns\n    // used by: autoResize, setVisible, setPinned\n    private actionOnGridColumns(// the column keys this action will be on\n        keys: (string | Column)[],\n        // the action to do - if this returns false, the column was skipped\n        // and won't be included in the event\n        action: (column: Column) => boolean,\n        // should return back a column event of the right type\n        source: ColumnEventType,\n        createEvent?: () => ColumnEvent): void {\n\n        if (missingOrEmpty(keys)) { return; }\n\n        const updatedColumns: Column[] = [];\n\n        keys.forEach((key: string | Column) => {\n            const column = this.getGridColumn(key);\n            if (!column) { return; }\n\n            // need to check for false with type (ie !== instead of !=)\n            // as not returning anything (undefined) would also be false\n            const resultOfAction = action(column);\n            if (resultOfAction !== false) {\n                updatedColumns.push(column);\n            }\n        });\n\n        if (!updatedColumns.length) { return; }\n\n        this.updateDisplayedColumns(source);\n\n        if (exists(createEvent) && createEvent) {\n            const event = createEvent();\n\n            event.columns = updatedColumns;\n            event.column = updatedColumns.length === 1 ? updatedColumns[0] : null;\n\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    public getDisplayedColBefore(col: Column): Column | null {\n        const allDisplayedColumns = this.getAllDisplayedColumns();\n        const oldIndex = allDisplayedColumns.indexOf(col);\n\n        if (oldIndex > 0) {\n            return allDisplayedColumns[oldIndex - 1];\n        }\n\n        return null;\n    }\n\n    // used by:\n    // + rowRenderer -> for navigation\n    public getDisplayedColAfter(col: Column): Column | null {\n        const allDisplayedColumns = this.getAllDisplayedColumns();\n        const oldIndex = allDisplayedColumns.indexOf(col);\n\n        if (oldIndex < (allDisplayedColumns.length - 1)) {\n            return allDisplayedColumns[oldIndex + 1];\n        }\n\n        return null;\n    }\n\n    public getDisplayedGroupAfter(columnGroup: ColumnGroup): ColumnGroup | null {\n        return this.getDisplayedGroupAtDirection(columnGroup, 'After');\n    }\n\n    public getDisplayedGroupBefore(columnGroup: ColumnGroup): ColumnGroup | null {\n        return this.getDisplayedGroupAtDirection(columnGroup, 'Before');\n    }\n\n    public getDisplayedGroupAtDirection(columnGroup: ColumnGroup, direction: 'After' | 'Before'): ColumnGroup | null {\n        // pick the last displayed column in this group\n        const requiredLevel = columnGroup.getProvidedColumnGroup().getLevel() + columnGroup.getPaddingLevel();\n        const colGroupLeafColumns = columnGroup.getDisplayedLeafColumns();\n        const col: Column | null = direction === 'After' ? last(colGroupLeafColumns) : colGroupLeafColumns[0];\n        const getDisplayColMethod: 'getDisplayedColAfter' | 'getDisplayedColBefore' = `getDisplayedCol${direction}` as any;\n\n        while (true) {\n            // keep moving to the next col, until we get to another group\n            const column = this[getDisplayColMethod](col);\n\n            if (!column) { return null; }\n\n            const groupPointer = this.getColumnGroupAtLevel(column, requiredLevel);\n\n            if (groupPointer !== columnGroup) {\n                return groupPointer;\n            }\n        }\n    }\n\n    public getColumnGroupAtLevel(column: Column, level: number): ColumnGroup | null {\n        // get group at same level as the one we are looking for\n        let groupPointer: ColumnGroup = column.getParent();\n        let originalGroupLevel: number;\n        let groupPointerLevel: number;\n\n        while (true) {\n            const groupPointerProvidedColumnGroup = groupPointer.getProvidedColumnGroup();\n            originalGroupLevel = groupPointerProvidedColumnGroup.getLevel();\n            groupPointerLevel = groupPointer.getPaddingLevel();\n\n            if (originalGroupLevel + groupPointerLevel <= level) { break; }\n            groupPointer = groupPointer.getParent();\n        }\n\n        return groupPointer;\n    }\n\n    public isPinningLeft(): boolean {\n        return this.displayedColumnsLeft.length > 0;\n    }\n\n    public isPinningRight(): boolean {\n        return this.displayedColumnsRight.length > 0;\n    }\n\n    public getPrimaryAndSecondaryAndAutoColumns(): Column[] {\n        return ([] as Column[]).concat(...[\n            this.primaryColumns || [],\n            this.groupAutoColumns || [],\n            this.secondaryColumns || [],\n        ]);\n    }\n\n    private getPrimaryAndAutoGroupCols(): Column[] {\n        return ([] as Column[]).concat(...[\n            this.primaryColumns || [],\n            this.groupAutoColumns || [],\n        ]);\n    }\n\n    private getPrimaryAndSecondaryColumns(): Column[] {\n        return ([] as Column[]).concat(...[\n            this.primaryColumns || [],\n            this.secondaryColumns || [],\n        ]);\n    }\n\n    private createStateItemFromColumn(column: Column): ColumnState {\n        const rowGroupIndex = column.isRowGroupActive() ? this.rowGroupColumns.indexOf(column) : null;\n        const pivotIndex = column.isPivotActive() ? this.pivotColumns.indexOf(column) : null;\n        const aggFunc = column.isValueActive() ? column.getAggFunc() : null;\n        const sort = column.getSort() != null ? column.getSort() : null;\n        const sortIndex = column.getSortIndex() != null ? column.getSortIndex() : null;\n        const flex = column.getFlex() != null && column.getFlex() > 0 ? column.getFlex() : null;\n\n        const res: ColumnState = {\n            colId: column.getColId(),\n            width: column.getActualWidth(),\n            hide: !column.isVisible(),\n            pinned: column.getPinned(),\n            sort,\n            sortIndex,\n            aggFunc,\n            rowGroup: column.isRowGroupActive(),\n            rowGroupIndex,\n            pivot: column.isPivotActive(),\n            pivotIndex: pivotIndex,\n            flex\n        };\n\n        return res;\n    }\n\n    public getColumnState(): ColumnState[] {\n        if (missing(this.primaryColumns) || !this.isAlive()) { return []; }\n\n        const colsForState = this.getPrimaryAndSecondaryAndAutoColumns();\n        const res: ColumnState[] = colsForState.map(this.createStateItemFromColumn.bind(this));\n\n        this.orderColumnStateList(res);\n\n        return res;\n    }\n\n    private orderColumnStateList(columnStateList: any[]): void {\n        // for fast looking, store the index of each column\n        const colIdToGridIndexMap = convertToMap<string, number>(this.gridColumns.map((col, index) => [col.getColId(), index]));\n\n        columnStateList.sort((itemA: any, itemB: any) => {\n            const posA = colIdToGridIndexMap.has(itemA.colId) ? colIdToGridIndexMap.get(itemA.colId) : -1;\n            const posB = colIdToGridIndexMap.has(itemB.colId) ? colIdToGridIndexMap.get(itemB.colId) : -1;\n            return posA! - posB!;\n        });\n    }\n\n    public resetColumnState(source: ColumnEventType = \"api\"): void {\n        // NOTE = there is one bug here that no customer has noticed - if a column has colDef.lockPosition,\n        // this is ignored  below when ordering the cols. to work, we should always put lockPosition cols first.\n        // As a work around, developers should just put lockPosition columns first in their colDef list.\n\n        // we can't use 'allColumns' as the order might of messed up, so get the primary ordered list\n        const primaryColumns = this.getColumnsFromTree(this.primaryColumnTree);\n        const columnStates: ColumnState[] = [];\n\n        // we start at 1000, so if user has mix of rowGroup and group specified, it will work with both.\n        // eg IF user has ColA.rowGroupIndex=0, ColB.rowGroupIndex=1, ColC.rowGroup=true,\n        // THEN result will be ColA.rowGroupIndex=0, ColB.rowGroupIndex=1, ColC.rowGroup=1000\n        let letRowGroupIndex = 1000;\n        let letPivotIndex = 1000;\n\n        let colsToProcess: Column[] = [];\n        if (this.groupAutoColumns) {\n            colsToProcess = colsToProcess.concat(this.groupAutoColumns);\n        }\n\n        if (primaryColumns) {\n            colsToProcess = colsToProcess.concat(primaryColumns);\n        }\n\n        colsToProcess.forEach(column => {\n\n            const getValueOrNull = (a: any, b: any) => a != null ? a : b != null ? b : null;\n\n            const colDef = column.getColDef();\n            const sort = getValueOrNull(colDef.sort, colDef.initialSort);\n            const sortIndex = getValueOrNull(colDef.sortIndex, colDef.initialSortIndex);\n            const hide = getValueOrNull(colDef.hide, colDef.initialHide);\n            const pinned = getValueOrNull(colDef.pinned, colDef.initialPinned);\n\n            const width = getValueOrNull(colDef.width, colDef.initialWidth);\n            const flex = getValueOrNull(colDef.flex, colDef.initialFlex);\n\n            let rowGroupIndex: number | null | undefined = getValueOrNull(colDef.rowGroupIndex, colDef.initialRowGroupIndex);\n            let rowGroup: boolean | null | undefined = getValueOrNull(colDef.rowGroup, colDef.initialRowGroup);\n\n            if (rowGroupIndex == null && (rowGroup == null || rowGroup == false)) {\n                rowGroupIndex = null;\n                rowGroup = null;\n            }\n\n            let pivotIndex: number | null | undefined = getValueOrNull(colDef.pivotIndex, colDef.initialPivotIndex);\n            let pivot: boolean | null | undefined = getValueOrNull(colDef.pivot, colDef.initialPivot);\n\n            if (pivotIndex == null && (pivot == null || pivot == false)) {\n                pivotIndex = null;\n                pivot = null;\n            }\n\n            const aggFunc = getValueOrNull(colDef.aggFunc, colDef.initialAggFunc);\n\n            const stateItem = {\n                colId: column.getColId(),\n                sort,\n                sortIndex,\n                hide,\n                pinned,\n\n                width,\n                flex,\n\n                rowGroup,\n                rowGroupIndex,\n                pivot,\n                pivotIndex,\n                aggFunc,\n            };\n\n            if (missing(rowGroupIndex) && rowGroup) {\n                stateItem.rowGroupIndex = letRowGroupIndex++;\n            }\n\n            if (missing(pivotIndex) && pivot) {\n                stateItem.pivotIndex = letPivotIndex++;\n            }\n\n            columnStates.push(stateItem);\n        });\n\n        this.applyColumnState({ state: columnStates, applyOrder: true }, source);\n    }\n\n    public applyColumnState(params: ApplyColumnStateParams, source: ColumnEventType = \"api\"): boolean {\n        if (missingOrEmpty(this.primaryColumns)) { return false; }\n\n        if (params && params.state && !params.state.forEach) {\n            console.warn('AG Grid: applyColumnState() - the state attribute should be an array, however an array was not found. Please provide an array of items (one for each col you want to change) for state.');\n            return false;\n        }\n\n        const applyStates = (states: ColumnState[], existingColumns: Column[], getById: (id: string) => Column | null) => {\n            const raiseEventsFunc = this.compareColumnStatesAndRaiseEvents(source);\n            this.autoGroupsNeedBuilding = true;\n\n            // at the end below, this list will have all columns we got no state for\n            const columnsWithNoState = existingColumns.slice();\n\n            const rowGroupIndexes: { [key: string]: number; } = {};\n            const pivotIndexes: { [key: string]: number; } = {};\n            const autoGroupColumnStates: ColumnState[] = [];\n            // If pivoting is modified, these are the states we try to reapply after\n            // the secondary columns are re-generated\n            const unmatchedAndAutoStates: ColumnState[] = [];\n            let unmatchedCount = 0;\n\n            const previousRowGroupCols = this.rowGroupColumns.slice();\n            const previousPivotCols = this.pivotColumns.slice();\n\n            states.forEach((state: ColumnState) => {\n                const colId = state.colId || '';\n\n                // auto group columns are re-created so deferring syncing with ColumnState\n                const isAutoGroupColumn = colId.startsWith(Constants.GROUP_AUTO_COLUMN_ID);\n                if (isAutoGroupColumn) {\n                    autoGroupColumnStates.push(state);\n                    unmatchedAndAutoStates.push(state);\n                    return;\n                }\n\n                const column = getById(colId);\n\n                if (!column) {\n                    unmatchedAndAutoStates.push(state);\n                    unmatchedCount += 1;\n                } else {\n                    this.syncColumnWithStateItem(column, state, params.defaultState, rowGroupIndexes,\n                        pivotIndexes, false, source);\n                    removeFromArray(columnsWithNoState, column);\n                }\n            });\n\n            // anything left over, we got no data for, so add in the column as non-value, non-rowGroup and hidden\n            const applyDefaultsFunc = (col: Column) =>\n                this.syncColumnWithStateItem(col, null, params.defaultState, rowGroupIndexes,\n                    pivotIndexes, false, source);\n\n            columnsWithNoState.forEach(applyDefaultsFunc);\n\n            // sort the lists according to the indexes that were provided\n            const comparator = (indexes: { [key: string]: number; }, oldList: Column[], colA: Column, colB: Column) => {\n\n                const indexA = indexes[colA.getId()];\n                const indexB = indexes[colB.getId()];\n\n                const aHasIndex = indexA != null;\n                const bHasIndex = indexB != null;\n\n                if (aHasIndex && bHasIndex) {\n                    // both a and b are new cols with index, so sort on index\n                    return indexA - indexB;\n                }\n\n                if (aHasIndex) {\n                    // a has an index, so it should be before a\n                    return -1;\n                }\n\n                if (bHasIndex) {\n                    // b has an index, so it should be before a\n                    return 1;\n                }\n\n                const oldIndexA = oldList.indexOf(colA);\n                const oldIndexB = oldList.indexOf(colB);\n\n                const aHasOldIndex = oldIndexA >= 0;\n                const bHasOldIndex = oldIndexB >= 0;\n\n                if (aHasOldIndex && bHasOldIndex) {\n                    // both a and b are old cols, so sort based on last order\n                    return oldIndexA - oldIndexB;\n                }\n\n                if (aHasOldIndex) {\n                    // a is old, b is new, so b is first\n                    return -1;\n                }\n\n                // this bit does matter, means both are new cols\n                // but without index or that b is old and a is new\n                return 1;\n            };\n\n            this.rowGroupColumns.sort(comparator.bind(this, rowGroupIndexes, previousRowGroupCols));\n            this.pivotColumns.sort(comparator.bind(this, pivotIndexes, previousPivotCols));\n\n            this.updateGridColumns();\n\n            // sync newly created auto group columns with ColumnState\n            const autoGroupColsCopy = this.groupAutoColumns ? this.groupAutoColumns.slice() : [];\n            autoGroupColumnStates.forEach(stateItem => {\n                const autoCol = this.getAutoColumn(stateItem.colId!);\n                removeFromArray(autoGroupColsCopy, autoCol);\n                this.syncColumnWithStateItem(autoCol, stateItem, params.defaultState, null, null, true, source);\n            });\n            // autogroup cols with nothing else, apply the default\n            autoGroupColsCopy.forEach(applyDefaultsFunc);\n\n            this.applyOrderAfterApplyState(params);\n            this.updateDisplayedColumns(source);\n            this.dispatchEverythingChanged(source);\n\n            raiseEventsFunc(); // Will trigger secondary column changes if pivoting modified\n            return { unmatchedAndAutoStates, unmatchedCount };\n        }\n\n        this.columnAnimationService.start();\n\n        let {\n            unmatchedAndAutoStates,\n            unmatchedCount,\n        } = applyStates(params.state || [], this.primaryColumns || [], (id) => this.getPrimaryColumn(id));\n\n        // If there are still states left over, see if we can apply them to newly generated\n        // secondary or auto columns. Also if defaults exist, ensure they are applied to secondary cols\n        if (unmatchedAndAutoStates.length > 0 || exists(params.defaultState)) {\n            unmatchedCount = applyStates(\n                unmatchedAndAutoStates,\n                this.secondaryColumns || [],\n                (id) => this.getSecondaryColumn(id)\n            ).unmatchedCount;\n        }\n        this.columnAnimationService.finish();\n\n        return unmatchedCount === 0; // Successful if no states unaccounted for\n    }\n\n    private applyOrderAfterApplyState(params: ApplyColumnStateParams): void {\n        if (!params.applyOrder || !params.state) { return; }\n\n        let newOrder: Column[] = [];\n        const processedColIds: { [id: string]: boolean } = {};\n\n        params.state.forEach(item => {\n            if (!item.colId || processedColIds[item.colId]) { return; }\n            const col = this.gridColumnsMap[item.colId];\n            if (col) {\n                newOrder.push(col);\n                processedColIds[item.colId] = true;\n            }\n        });\n\n        // add in all other columns\n        let autoGroupInsertIndex = 0;\n        this.gridColumns.forEach(col => {\n            const colId = col.getColId();\n            const alreadyProcessed = processedColIds[colId] != null;\n            if (alreadyProcessed) { return; }\n\n            const isAutoGroupCol = colId.startsWith(Constants.GROUP_AUTO_COLUMN_ID);\n            if (isAutoGroupCol) {\n                // auto group columns, if missing from state list, are added to the start.\n                // it's common to have autoGroup missing, as grouping could be on by default\n                // on a column, but the user could of since removed the grouping via the UI.\n                // if we don't inc the insert index, autoGroups will be inserted in reverse order\n                insertIntoArray(newOrder, col, autoGroupInsertIndex++);\n            } else {\n                // normal columns, if missing from state list, are added at the end\n                newOrder.push(col);\n            }\n        });\n\n        // this is already done in updateGridColumns, however we changed the order above (to match the order of the state\n        // columns) so we need to do it again. we could of put logic into the order above to take into account fixed\n        // columns, however if we did then we would have logic for updating fixed columns twice. reusing the logic here\n        // is less sexy for the code here, but it keeps consistency.\n        newOrder = this.placeLockedColumns(newOrder);\n\n        if (!this.doesMovePassMarryChildren(newOrder)) {\n            console.warn('AG Grid: Applying column order broke a group where columns should be married together. Applying new order has been discarded.');\n            return;\n        }\n\n        this.gridColumns = newOrder;\n    }\n\n    private compareColumnStatesAndRaiseEvents(source: ColumnEventType): () => void {\n\n        const startState = {\n            rowGroupColumns: this.rowGroupColumns.slice(),\n            pivotColumns: this.pivotColumns.slice(),\n            valueColumns: this.valueColumns.slice()\n        };\n\n        const columnStateBefore = this.getColumnState();\n        const columnStateBeforeMap: { [colId: string]: ColumnState; } = {};\n\n        columnStateBefore.forEach(col => {\n            columnStateBeforeMap[col.colId!] = col;\n        });\n\n        return () => {\n            if (this.gridOptionsWrapper.isSuppressColumnStateEvents()) { return; }\n\n            const colsForState = this.getPrimaryAndSecondaryAndAutoColumns();\n\n            // raises generic ColumnEvents where all columns are returned rather than what has changed\n            const raiseWhenListsDifferent = (eventType: string, colsBefore: Column[], colsAfter: Column[], idMapper: (column: Column) => string) => {\n                const beforeList = colsBefore.map(idMapper);\n                const afterList = colsAfter.map(idMapper);\n                const unchanged = areEqual(beforeList, afterList);\n\n                if (unchanged) { return; }\n\n                // returning all columns rather than what has changed!\n                const event: ColumnEvent = {\n                    type: eventType,\n                    columns: colsAfter,\n                    column: colsAfter.length === 1 ? colsAfter[0] : null,\n                    api: this.gridApi,\n                    columnApi: this.columnApi,\n                    source: source\n                };\n\n                this.eventService.dispatchEvent(event);\n            };\n\n            // determines which columns have changed according to supplied predicate\n            const getChangedColumns = (changedPredicate: (cs: ColumnState, c: Column) => boolean): Column[] => {\n                const changedColumns: Column[] = [];\n\n                colsForState.forEach(column => {\n                    const colStateBefore = columnStateBeforeMap[column.getColId()];\n                    if (colStateBefore && changedPredicate(colStateBefore, column)) {\n                        changedColumns.push(column);\n                    }\n                });\n\n                return changedColumns;\n            };\n\n            const columnIdMapper = (c: Column) => c.getColId();\n\n            raiseWhenListsDifferent(Events.EVENT_COLUMN_ROW_GROUP_CHANGED,\n                startState.rowGroupColumns,\n                this.rowGroupColumns,\n                columnIdMapper\n            );\n\n            raiseWhenListsDifferent(Events.EVENT_COLUMN_PIVOT_CHANGED,\n                startState.pivotColumns,\n                this.pivotColumns,\n                columnIdMapper\n            );\n\n            const valueChangePredicate = (cs: ColumnState, c: Column) => {\n                const oldActive = cs.aggFunc != null;\n\n                const activeChanged = oldActive != c.isValueActive();\n                // we only check aggFunc if the agg is active\n                const aggFuncChanged = oldActive && cs.aggFunc != c.getAggFunc();\n\n                return activeChanged || aggFuncChanged;\n            };\n            const changedValues = getChangedColumns(valueChangePredicate);\n            if (changedValues.length > 0) {\n                // we pass all value columns, now the ones that changed. this is the same\n                // as pivot and rowGroup cols, but different to all other properties below.\n                // this is more for backwards compatibility, as it's always been this way.\n                // really it should be the other way, as the order of the cols makes no difference\n                // for valueColumns (apart from displaying them in the tool panel).\n                this.fireColumnEvent(Events.EVENT_COLUMN_VALUE_CHANGED, this.valueColumns, source);\n            }\n\n            const resizeChangePredicate = (cs: ColumnState, c: Column) => cs.width != c.getActualWidth();\n            this.fireColumnResizedEvent(getChangedColumns(resizeChangePredicate), true, source);\n\n            const pinnedChangePredicate = (cs: ColumnState, c: Column) => cs.pinned != c.getPinned();\n            this.raiseColumnPinnedEvent(getChangedColumns(pinnedChangePredicate), source);\n\n            const visibilityChangePredicate = (cs: ColumnState, c: Column) => cs.hide == c.isVisible();\n            this.raiseColumnVisibleEvent(getChangedColumns(visibilityChangePredicate), source);\n\n            const sortChangePredicate = (cs: ColumnState, c: Column) => cs.sort != c.getSort() || cs.sortIndex != c.getSortIndex();\n            if (getChangedColumns(sortChangePredicate).length > 0) {\n                this.sortController.dispatchSortChangedEvents(source);\n            }\n\n            // special handling for moved column events\n            this.raiseColumnMovedEvent(columnStateBefore, source);\n        };\n    }\n\n    private raiseColumnPinnedEvent(changedColumns: Column[], source: ColumnEventType) {\n        if (!changedColumns.length) { return; }\n\n        // if just one column, we use this, otherwise we don't include the col\n        const column: Column | null = changedColumns.length === 1 ? changedColumns[0] : null;\n\n        // only include visible if it's common in all columns\n        const pinned = this.getCommonValue(changedColumns, col => col.getPinned());\n\n        const event: ColumnPinnedEvent = {\n            type: Events.EVENT_COLUMN_PINNED,\n            // mistake in typing, 'undefined' should be allowed, as 'null' means 'not pinned'\n            pinned: pinned != null ? pinned : null,\n            columns: changedColumns,\n            column,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            source: source\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    private getCommonValue<T>(cols: Column[], valueGetter: ((col: Column) => T)): T | undefined {\n        if (!cols || cols.length == 0) { return undefined; }\n\n        // compare each value to the first value. if nothing differs, then value is common so return it.\n        const firstValue = valueGetter(cols[0]);\n        for (let i = 1; i < cols.length; i++) {\n            if (firstValue !== valueGetter(cols[i])) {\n                // values differ, no common value\n                return undefined;\n            }\n        }\n\n        return firstValue;\n    }\n\n    private raiseColumnVisibleEvent(changedColumns: Column[], source: ColumnEventType) {\n        if (!changedColumns.length) { return; }\n\n        // if just one column, we use this, otherwise we don't include the col\n        const column: Column | null = changedColumns.length === 1 ? changedColumns[0] : null;\n\n        // only include visible if it's common in all columns\n        const visible = this.getCommonValue(changedColumns, col => col.isVisible());\n\n        const event: ColumnVisibleEvent = {\n            type: Events.EVENT_COLUMN_VISIBLE,\n            visible,\n            columns: changedColumns,\n            column,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            source: source\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    private raiseColumnMovedEvent(colStateBefore: ColumnState[], source: ColumnEventType) {\n\n        // we are only interested in columns that were both present and visible before and after\n\n        const colStateAfter = this.getColumnState();\n\n        const colStateAfterMapped: { [id: string]: ColumnState; } = {};\n        colStateAfter.forEach(s => colStateAfterMapped[s.colId!] = s);\n\n        // get id's of cols in both before and after lists\n        const colsIntersectIds: { [id: string]: boolean; } = {};\n        colStateBefore.forEach(s => {\n            if (colStateAfterMapped[s.colId!]) {\n                colsIntersectIds[s.colId!] = true;\n            }\n        });\n\n        // filter state lists, so we only have cols that were present before and after\n        const beforeFiltered = colStateBefore.filter(c => colsIntersectIds[c.colId!]);\n        const afterFiltered = colStateAfter.filter(c => colsIntersectIds[c.colId!]);\n\n        // see if any cols are in a different location\n        const movedColumns: Column[] = [];\n\n        afterFiltered!.forEach((csAfter: ColumnState, index: number) => {\n            const csBefore = beforeFiltered && beforeFiltered[index];\n            if (csBefore && csBefore.colId !== csAfter.colId) {\n                const gridCol = this.getGridColumn(csBefore.colId!);\n                if (gridCol) {\n                    movedColumns.push(gridCol);\n                }\n            }\n        });\n\n        if (!movedColumns.length) { return; }\n\n        const event: ColumnMovedEvent = {\n            type: Events.EVENT_COLUMN_MOVED,\n            columns: movedColumns,\n            column: null,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            source: source\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    private syncColumnWithStateItem(\n        column: Column | null,\n        stateItem: ColumnState | null,\n        defaultState: ColumnStateParams | undefined,\n        rowGroupIndexes: { [key: string]: number; } | null,\n        pivotIndexes: { [key: string]: number; } | null,\n        autoCol: boolean,\n        source: ColumnEventType\n    ): void {\n\n        if (!column) { return; }\n\n        const getValue = <U extends keyof ColumnStateParams, S extends keyof ColumnStateParams>(key1: U, key2?: S): { value1: ColumnStateParams[U] | undefined, value2: ColumnStateParams[S] | undefined; } => {\n            const obj: { value1: ColumnStateParams[U] | undefined, value2: ColumnStateParams[S] | undefined; } = { value1: undefined, value2: undefined };\n            let calculated: boolean = false;\n\n            if (stateItem) {\n                if (stateItem[key1] !== undefined) {\n                    obj.value1 = stateItem[key1];\n                    calculated = true;\n                }\n                if (exists(key2) && stateItem[key2] !== undefined) {\n                    obj.value2 = stateItem[key2];\n                    calculated = true;\n                }\n            }\n\n            if (!calculated && defaultState) {\n                if (defaultState[key1] !== undefined) {\n                    obj.value1 = defaultState[key1];\n                }\n                if (exists(key2) && defaultState[key2] !== undefined) {\n                    obj.value2 = defaultState[key2];\n                }\n            }\n\n            return obj;\n        };\n\n        // following ensures we are left with boolean true or false, eg converts (null, undefined, 0) all to true\n        const hide = getValue('hide').value1;\n        if (hide !== undefined) {\n            column.setVisible(!hide, source);\n        }\n\n        // sets pinned to 'left' or 'right'\n        const pinned = getValue('pinned').value1;\n        if (pinned !== undefined) {\n            column.setPinned(pinned);\n        }\n\n        // if width provided and valid, use it, otherwise stick with the old width\n        const minColWidth = this.columnUtils.calculateColMinWidth(column.getColDef());\n\n        // flex\n        const flex = getValue('flex').value1;\n        if (flex !== undefined) {\n            column.setFlex(flex);\n        }\n\n        // width - we only set width if column is not flexing\n        const noFlexThisCol = column.getFlex() <= 0;\n        if (noFlexThisCol) {\n            // both null and undefined means we skip, as it's not possible to 'clear' width (a column must have a width)\n            const width = getValue('width').value1;\n            if (width != null) {\n                if (minColWidth != null && width >= minColWidth) {\n                    column.setActualWidth(width, source);\n                }\n            }\n        }\n\n        const sort = getValue('sort').value1;\n        if (sort !== undefined) {\n            if (sort === Constants.SORT_DESC || sort === Constants.SORT_ASC) {\n                column.setSort(sort, source);\n            } else {\n                column.setSort(undefined, source);\n            }\n        }\n\n        const sortIndex = getValue('sortIndex').value1;\n        if (sortIndex !== undefined) {\n            column.setSortIndex(sortIndex);\n        }\n\n        // we do not do aggFunc, rowGroup or pivot for auto cols or secondary cols\n        if (autoCol || !column.isPrimary()) {\n            return;\n        }\n\n        const aggFunc = getValue('aggFunc').value1;\n        if (aggFunc !== undefined) {\n            if (typeof aggFunc === 'string') {\n                column.setAggFunc(aggFunc);\n                if (!column.isValueActive()) {\n                    column.setValueActive(true, source);\n                    this.valueColumns.push(column);\n                }\n            } else {\n                if (exists(aggFunc)) {\n                    console.warn('AG Grid: stateItem.aggFunc must be a string. if using your own aggregation ' +\n                        'functions, register the functions first before using them in get/set state. This is because it is ' +\n                        'intended for the column state to be stored and retrieved as simple JSON.');\n                }\n                // Note: we do not call column.setAggFunc(null), so that next time we aggregate\n                // by this column (eg drag the column to the agg section int he toolpanel) it will\n                // default to the last aggregation function.\n\n                if (column.isValueActive()) {\n                    column.setValueActive(false, source);\n                    removeFromArray(this.valueColumns, column);\n                }\n            }\n        }\n\n        const { value1: rowGroup, value2: rowGroupIndex } = getValue('rowGroup', 'rowGroupIndex');\n        if (rowGroup !== undefined || rowGroupIndex !== undefined) {\n            if (typeof rowGroupIndex === 'number' || rowGroup) {\n                if (!column.isRowGroupActive()) {\n                    column.setRowGroupActive(true, source);\n                    this.rowGroupColumns.push(column);\n                }\n                if (rowGroupIndexes && typeof rowGroupIndex === 'number') {\n                    rowGroupIndexes[column.getId()] = rowGroupIndex;\n                }\n            } else {\n                if (column.isRowGroupActive()) {\n                    column.setRowGroupActive(false, source);\n                    removeFromArray(this.rowGroupColumns, column);\n                }\n            }\n        }\n\n        const { value1: pivot, value2: pivotIndex } = getValue('pivot', 'pivotIndex');\n        if (pivot !== undefined || pivotIndex !== undefined) {\n            if (typeof pivotIndex === 'number' || pivot) {\n                if (!column.isPivotActive()) {\n                    column.setPivotActive(true, source);\n                    this.pivotColumns.push(column);\n                }\n                if (pivotIndexes && typeof pivotIndex === 'number') {\n                    pivotIndexes[column.getId()] = pivotIndex;\n                }\n            } else {\n                if (column.isPivotActive()) {\n                    column.setPivotActive(false, source);\n                    removeFromArray(this.pivotColumns, column);\n                }\n            }\n        }\n    }\n\n    public getGridColumns(keys: (string | Column)[]): Column[] {\n        return this.getColumns(keys, this.getGridColumn.bind(this));\n    }\n\n    private getColumns(keys: (string | Column)[], columnLookupCallback: (key: string | Column) => Column): Column[] {\n        const foundColumns: Column[] = [];\n\n        if (keys) {\n            keys.forEach((key: (string | Column)) => {\n                const column = columnLookupCallback(key);\n                if (column) {\n                    foundColumns.push(column);\n                }\n            });\n        }\n\n        return foundColumns;\n    }\n\n    // used by growGroupPanel\n    public getColumnWithValidation(key: string | Column | undefined): Column | null {\n        if (key == null) { return null; }\n\n        const column = this.getGridColumn(key);\n\n        if (!column) {\n            console.warn('AG Grid: could not find column ' + key);\n        }\n\n        return column;\n    }\n\n    public getPrimaryColumn(key: string | Column): Column | null {\n        if (!this.primaryColumns) { return null; }\n\n        return this.getColumn(key, this.primaryColumns, this.primaryColumnsMap);\n    }\n\n    public getGridColumn(key: string | Column): Column | null {\n        return this.getColumn(key, this.gridColumns, this.gridColumnsMap);\n    }\n\n    private getSecondaryColumn(key: string | Column): Column | null {\n        if (!this.secondaryColumns) { return null; }\n        return this.getColumn(key, this.secondaryColumns, this.secondaryColumnsMap);\n    }\n\n    private getColumn(key: string | Column, columnList: Column[], columnMap: { [id: string]: Column }): Column | null {\n        if (!key) { return null; }\n\n        // most of the time this method gets called the key is a string, so we put this shortcut in\n        // for performance reasons, to see if we can match for ID (it doesn't do auto columns, that's done below)\n        if (typeof key == 'string' && columnMap[key]) {\n            return columnMap[key];\n        }\n\n        for (let i = 0; i < columnList.length; i++) {\n            if (this.columnsMatch(columnList[i], key)) {\n                return columnList[i];\n            }\n        }\n\n        return this.getAutoColumn(key);\n    }\n\n    private getAutoColumn(key: string | Column): Column | null {\n        if (\n            !this.groupAutoColumns ||\n            !exists(this.groupAutoColumns) ||\n            missing(this.groupAutoColumns)\n        ) { return null; }\n\n        return this.groupAutoColumns.find(groupCol => this.columnsMatch(groupCol, key)) || null;\n    }\n\n    private columnsMatch(column: Column, key: string | Column): boolean {\n        const columnMatches = column === key;\n        const colDefMatches = column.getColDef() === key;\n        const idMatches = column.getColId() == key;\n\n        return columnMatches || colDefMatches || idMatches;\n    }\n\n    public getDisplayNameForColumn(column: Column | null, location: string | null, includeAggFunc = false): string | null {\n        if (!column) { return null; }\n\n        const headerName: string | null = this.getHeaderName(column.getColDef(), column, null, null, location);\n\n        if (includeAggFunc) {\n            return this.wrapHeaderNameWithAggFunc(column, headerName);\n        }\n\n        return headerName;\n    }\n\n    public getDisplayNameForProvidedColumnGroup(\n        columnGroup: ColumnGroup | null,\n        providedColumnGroup: ProvidedColumnGroup | null,\n        location: string\n    ): string | null {\n        const colGroupDef = providedColumnGroup ? providedColumnGroup.getColGroupDef() : null;\n\n        if (colGroupDef) {\n            return this.getHeaderName(colGroupDef, null, columnGroup, providedColumnGroup, location);\n        }\n\n        return null;\n    }\n\n    public getDisplayNameForColumnGroup(columnGroup: ColumnGroup, location: string): string | null {\n        return this.getDisplayNameForProvidedColumnGroup(columnGroup, columnGroup.getProvidedColumnGroup(), location);\n    }\n\n    // location is where the column is going to appear, ie who is calling us\n    private getHeaderName(\n        colDef: AbstractColDef,\n        column: Column | null,\n        columnGroup: ColumnGroup | null,\n        providedColumnGroup: ProvidedColumnGroup | null,\n        location: string | null\n    ): string | null {\n        const headerValueGetter = colDef.headerValueGetter;\n\n        if (headerValueGetter) {\n            const params: HeaderValueGetterParams = {\n                colDef: colDef,\n                column: column,\n                columnGroup: columnGroup,\n                providedColumnGroup: providedColumnGroup,\n                location: location,\n                api: this.gridOptionsWrapper.getApi()!,\n                columnApi: this.gridOptionsWrapper.getColumnApi()!,\n                context: this.gridOptionsWrapper.getContext()\n            };\n\n            if (typeof headerValueGetter === 'function') {\n                // valueGetter is a function, so just call it\n                return headerValueGetter(params);\n            } else if (typeof headerValueGetter === 'string') {\n                // valueGetter is an expression, so execute the expression\n                return this.expressionService.evaluate(headerValueGetter, params);\n            }\n            console.warn('ag-grid: headerValueGetter must be a function or a string');\n            return '';\n        } else if (colDef.headerName != null) {\n            return colDef.headerName;\n        } else if ((colDef as ColDef).field) {\n            return camelCaseToHumanText((colDef as ColDef).field);\n        }\n\n        return '';\n    }\n\n    private wrapHeaderNameWithAggFunc(column: Column, headerName: string | null): string | null {\n        if (this.gridOptionsWrapper.isSuppressAggFuncInHeader()) { return headerName; }\n\n        // only columns with aggregation active can have aggregations\n        const pivotValueColumn = column.getColDef().pivotValueColumn;\n        const pivotActiveOnThisColumn = exists(pivotValueColumn);\n        let aggFunc: string | IAggFunc | null | undefined = null;\n        let aggFuncFound: boolean;\n\n        // otherwise we have a measure that is active, and we are doing aggregation on it\n        if (pivotActiveOnThisColumn) {\n            const isCollapsedHeaderEnabled = this.gridOptionsWrapper.isRemovePivotHeaderRowWhenSingleValueColumn() && this.valueColumns.length === 1;\n            const isTotalColumn = column.getColDef().pivotTotalColumnIds !== undefined;\n            if (isCollapsedHeaderEnabled && !isTotalColumn) {\n                return headerName; // Skip decorating the header - in this case the label is the pivot key, not the value col\n            }\n            aggFunc = pivotValueColumn ? pivotValueColumn.getAggFunc() : null;\n            aggFuncFound = true;\n        } else {\n            const measureActive = column.isValueActive();\n            const aggregationPresent = this.pivotMode || !this.isRowGroupEmpty();\n\n            if (measureActive && aggregationPresent) {\n                aggFunc = column.getAggFunc();\n                aggFuncFound = true;\n            } else {\n                aggFuncFound = false;\n            }\n        }\n\n        if (aggFuncFound) {\n            const aggFuncString = (typeof aggFunc === 'string') ? aggFunc : 'func';\n            const localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();\n            const aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);\n            return `${aggFuncStringTranslated}(${headerName})`;\n        }\n\n        return headerName;\n    }\n\n    // returns the group with matching colId and instanceId. If instanceId is missing,\n    // matches only on the colId.\n    public getColumnGroup(colId: string | ColumnGroup, instanceId?: number): ColumnGroup | null {\n        if (!colId) { return null; }\n        if (colId instanceof ColumnGroup) { return colId; }\n\n        const allColumnGroups = this.getAllDisplayedTrees();\n        const checkInstanceId = typeof instanceId === 'number';\n        let result: ColumnGroup | null = null;\n\n        this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, (child: IHeaderColumn) => {\n            if (child instanceof ColumnGroup) {\n                const columnGroup = child;\n                let matched: boolean;\n\n                if (checkInstanceId) {\n                    matched = colId === columnGroup.getGroupId() && instanceId === columnGroup.getInstanceId();\n                } else {\n                    matched = colId === columnGroup.getGroupId();\n                }\n\n                if (matched) {\n                    result = columnGroup;\n                }\n            }\n        });\n\n        return result;\n    }\n\n    public isReady(): boolean {\n        return this.ready;\n    }\n\n    private extractValueColumns(source: ColumnEventType, oldPrimaryColumns: Column[] | undefined): void {\n        this.valueColumns = this.extractColumns(\n            oldPrimaryColumns,\n            this.valueColumns,\n            (col: Column, flag: boolean) => col.setValueActive(flag, source),\n            // aggFunc doesn't have index variant, cos order of value cols doesn't matter, so always return null\n            () => undefined,\n            () => undefined,\n            // aggFunc is a string, so return it's existence\n            (colDef: ColDef) => {\n                const aggFunc = colDef.aggFunc;\n                // null or empty string means clear\n                if (aggFunc === null || aggFunc === '') {\n                    return null;\n                }\n                if (aggFunc === undefined) {\n                    return;\n                }\n\n                return !!aggFunc;\n            },\n            (colDef: ColDef) => {\n                // return false if any of the following: null, undefined, empty string\n                return colDef.initialAggFunc != null && colDef.initialAggFunc != '';\n            }\n        );\n\n        // all new columns added will have aggFunc missing, so set it to what is in the colDef\n        this.valueColumns.forEach(col => {\n            const colDef = col.getColDef();\n            // if aggFunc provided, we always override, as reactive property\n            if (colDef.aggFunc != null && colDef.aggFunc != '') {\n                col.setAggFunc(colDef.aggFunc);\n            } else {\n                // otherwise we use initialAggFunc only if no agg func set - which happens when new column only\n                if (!col.getAggFunc()) {\n                    col.setAggFunc(colDef.initialAggFunc);\n                }\n            }\n        });\n    }\n\n    private extractRowGroupColumns(source: ColumnEventType, oldPrimaryColumns: Column[] | undefined): void {\n        this.rowGroupColumns = this.extractColumns(oldPrimaryColumns, this.rowGroupColumns,\n            (col: Column, flag: boolean) => col.setRowGroupActive(flag, source),\n            (colDef: ColDef) => colDef.rowGroupIndex,\n            (colDef: ColDef) => colDef.initialRowGroupIndex,\n            (colDef: ColDef) => colDef.rowGroup,\n            (colDef: ColDef) => colDef.initialRowGroup,\n        );\n    }\n\n    private extractColumns(\n        oldPrimaryColumns: Column[] = [],\n        previousCols: Column[] = [],\n        setFlagFunc: (col: Column, flag: boolean) => void,\n        getIndexFunc: (colDef: ColDef) => number | null | undefined,\n        getInitialIndexFunc: (colDef: ColDef) => number | null | undefined,\n        getValueFunc: (colDef: ColDef) => boolean | null | undefined,\n        getInitialValueFunc: (colDef: ColDef) => boolean | undefined\n    ): Column[] {\n\n        const colsWithIndex: Column[] = [];\n        const colsWithValue: Column[] = [];\n\n        // go though all cols.\n        // if value, change\n        // if default only, change only if new\n        (this.primaryColumns || []).forEach(col => {\n            const colIsNew = oldPrimaryColumns.indexOf(col) < 0;\n            const colDef = col.getColDef();\n\n            const value = attrToBoolean(getValueFunc(colDef));\n            const initialValue = attrToBoolean(getInitialValueFunc(colDef));\n            const index = attrToNumber(getIndexFunc(colDef));\n            const initialIndex = attrToNumber(getInitialIndexFunc(colDef));\n\n            let include: boolean;\n\n            const valuePresent = value !== undefined;\n            const indexPresent = index !== undefined;\n            const initialValuePresent = initialValue !== undefined;\n            const initialIndexPresent = initialIndex !== undefined;\n\n            if (valuePresent) {\n                include = value!; // boolean value is guaranteed as attrToBoolean() is used above\n            } else if (indexPresent) {\n                if (index === null) {\n                    // if col is new we don't want to use the default / initial if index is set to null. Similarly,\n                    // we don't want to include the property for existing columns, i.e. we want to 'clear' it.\n                    include = false;\n                } else {\n                    // note that 'null >= 0' evaluates to true which means 'rowGroupIndex = null' would enable row\n                    // grouping if the null check didn't exist above.\n                    include = index! >= 0;\n                }\n            } else {\n                if (colIsNew) {\n                    // as no value or index is 'present' we use the default / initial when col is new\n                    if (initialValuePresent) {\n                        include = initialValue!;\n                    } else if (initialIndexPresent) {\n                        include = initialIndex != null && initialIndex >= 0;\n                    } else {\n                        include = false;\n                    }\n                } else {\n                    // otherwise include it if included last time, e.g. if we are extracting row group cols and this col\n                    // is an existing row group col (i.e. it exists in 'previousCols') then we should include it.\n                    include = previousCols.indexOf(col) >= 0;\n                }\n            }\n\n            if (include) {\n                const useIndex = colIsNew ? (index != null || initialIndex != null) : index != null;\n                useIndex ? colsWithIndex.push(col) : colsWithValue.push(col);\n            }\n        });\n\n        const getIndexForCol = (col: Column): number => {\n            const index = getIndexFunc(col.getColDef());\n            const defaultIndex = getInitialIndexFunc(col.getColDef());\n\n            return index != null ? index : defaultIndex!;\n        };\n\n        // sort cols with index, and add these first\n        colsWithIndex.sort((colA, colB) => {\n            const indexA = getIndexForCol(colA);\n            const indexB = getIndexForCol(colB);\n\n            if (indexA === indexB) { return 0; }\n            if (indexA < indexB) { return -1; }\n\n            return 1;\n        });\n\n        const res: Column[] = ([] as Column[]).concat(colsWithIndex);\n\n        // second add columns that were there before and in the same order as they were before,\n        // so we are preserving order of current grouping of columns that simply have rowGroup=true\n        previousCols.forEach(col => {\n            if (colsWithValue.indexOf(col) >= 0) {\n                res.push(col);\n            }\n        });\n\n        // lastly put in all remaining cols\n        colsWithValue.forEach(col => {\n            if (res.indexOf(col) < 0) {\n                res.push(col);\n            }\n        });\n\n        // set flag=false for removed cols\n        previousCols.forEach(col => {\n            if (res.indexOf(col) < 0) {\n                setFlagFunc(col, false);\n            }\n        });\n        // set flag=true for newly added cols\n        res.forEach(col => {\n            if (previousCols.indexOf(col) < 0) {\n                setFlagFunc(col, true);\n            }\n        });\n\n        return res;\n    }\n\n    private extractPivotColumns(source: ColumnEventType, oldPrimaryColumns: Column[] | undefined): void {\n        this.pivotColumns = this.extractColumns(\n            oldPrimaryColumns,\n            this.pivotColumns,\n            (col: Column, flag: boolean) => col.setPivotActive(flag, source),\n            (colDef: ColDef) => colDef.pivotIndex,\n            (colDef: ColDef) => colDef.initialPivotIndex,\n            (colDef: ColDef) => colDef.pivot,\n            (colDef: ColDef) => colDef.initialPivot,\n        );\n    }\n\n    public resetColumnGroupState(source: ColumnEventType = \"api\"): void {\n        const stateItems: { groupId: string, open: boolean | undefined; }[] = [];\n\n        this.columnUtils.depthFirstOriginalTreeSearch(null, this.primaryColumnTree, child => {\n            if (child instanceof ProvidedColumnGroup) {\n                const colGroupDef = child.getColGroupDef();\n                const groupState = {\n                    groupId: child.getGroupId(),\n                    open: !colGroupDef ? undefined : colGroupDef.openByDefault\n                };\n                stateItems.push(groupState);\n            }\n        });\n\n        this.setColumnGroupState(stateItems, source);\n    }\n\n    public getColumnGroupState(): { groupId: string, open: boolean; }[] {\n        const columnGroupState: { groupId: string, open: boolean; }[] = [];\n\n        this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, node => {\n            if (node instanceof ProvidedColumnGroup) {\n                columnGroupState.push({\n                    groupId: node.getGroupId(),\n                    open: node.isExpanded()\n                });\n            }\n        });\n\n        return columnGroupState;\n    }\n\n    public setColumnGroupState(stateItems: { groupId: string, open: boolean | undefined; }[], source: ColumnEventType = \"api\"): void {\n        this.columnAnimationService.start();\n\n        const impactedGroups: ProvidedColumnGroup[] = [];\n\n        stateItems.forEach(stateItem => {\n            const groupKey = stateItem.groupId;\n            const newValue = stateItem.open;\n            const providedColumnGroup: ProvidedColumnGroup | null = this.getProvidedColumnGroup(groupKey);\n\n            if (!providedColumnGroup) { return; }\n            if (providedColumnGroup.isExpanded() === newValue) { return; }\n\n            this.logger.log('columnGroupOpened(' + providedColumnGroup.getGroupId() + ',' + newValue + ')');\n            providedColumnGroup.setExpanded(newValue);\n            impactedGroups.push(providedColumnGroup);\n        });\n\n        this.updateGroupsAndDisplayedColumns(source);\n        this.setFirstRightAndLastLeftPinned(source);\n\n        impactedGroups.forEach(providedColumnGroup => {\n            const event: ColumnGroupOpenedEvent = {\n                type: Events.EVENT_COLUMN_GROUP_OPENED,\n                columnGroup: providedColumnGroup,\n                api: this.gridApi,\n                columnApi: this.columnApi\n            };\n            this.eventService.dispatchEvent(event);\n        });\n\n        this.columnAnimationService.finish();\n    }\n\n    // called by headerRenderer - when a header is opened or closed\n    public setColumnGroupOpened(key: ProvidedColumnGroup | string | null, newValue: boolean, source: ColumnEventType = \"api\"): void {\n        let keyAsString: string;\n\n        if (key instanceof ProvidedColumnGroup) {\n            keyAsString = key.getId();\n        } else {\n            keyAsString = key || '';\n        }\n        this.setColumnGroupState([{ groupId: keyAsString, open: newValue }], source);\n    }\n\n    public getProvidedColumnGroup(key: string): ProvidedColumnGroup | null {\n        // if (key instanceof ProvidedColumnGroup) { return key; }\n\n        if (typeof key !== 'string') {\n            console.error('AG Grid: group key must be a string');\n        }\n\n        // otherwise, search for the column group by id\n        let res: ProvidedColumnGroup | null = null;\n\n        this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, node => {\n            if (node instanceof ProvidedColumnGroup) {\n                if (node.getId() === key) {\n                    res = node;\n                }\n            }\n        });\n\n        return res;\n    }\n\n    private calculateColumnsForDisplay(): Column[] {\n        let columnsForDisplay: Column[];\n\n        if (this.pivotMode && missing(this.secondaryColumns)) {\n            // pivot mode is on, but we are not pivoting, so we only\n            // show columns we are aggregating on\n            columnsForDisplay = this.gridColumns.filter(column => {\n                const isAutoGroupCol = this.groupAutoColumns && includes(this.groupAutoColumns, column);\n                const isValueCol = this.valueColumns && includes(this.valueColumns, column);\n                return isAutoGroupCol || isValueCol;\n            });\n\n        } else {\n            // otherwise continue as normal. this can be working on the primary\n            // or secondary columns, whatever the gridColumns are set to\n            columnsForDisplay = this.gridColumns.filter(column => {\n                // keep col if a) it's auto-group or b) it's visible\n                const isAutoGroupCol = this.groupAutoColumns && includes(this.groupAutoColumns, column);\n                return isAutoGroupCol || column.isVisible();\n            });\n        }\n\n        return columnsForDisplay;\n    }\n\n    private checkColSpanActiveInCols(columns: Column[]): boolean {\n        let result = false;\n\n        columns.forEach(col => {\n            if (exists(col.getColDef().colSpan)) {\n                result = true;\n            }\n        });\n\n        return result;\n    }\n\n    private calculateColumnsForGroupDisplay(): void {\n        this.groupDisplayColumns = [];\n\n        const checkFunc = (col: Column) => {\n            const colDef = col.getColDef();\n            if (colDef && exists(colDef.showRowGroup)) {\n                this.groupDisplayColumns.push(col);\n            }\n        };\n\n        this.gridColumns.forEach(checkFunc);\n\n        if (this.groupAutoColumns) {\n            this.groupAutoColumns.forEach(checkFunc);\n        }\n    }\n\n    public getGroupDisplayColumns(): Column[] {\n        return this.groupDisplayColumns;\n    }\n\n    private updateDisplayedColumns(source: ColumnEventType): void {\n        const columnsForDisplay = this.calculateColumnsForDisplay();\n\n        this.buildDisplayedTrees(columnsForDisplay);\n        this.calculateColumnsForGroupDisplay();\n\n        // also called when group opened/closed\n        this.updateGroupsAndDisplayedColumns(source);\n\n        // also called when group opened/closed\n        this.setFirstRightAndLastLeftPinned(source);\n    }\n\n    public isSecondaryColumnsPresent(): boolean {\n        return exists(this.secondaryColumns);\n    }\n\n    public setSecondaryColumns(colDefs: (ColDef | ColGroupDef)[] | null, source: ColumnEventType = \"api\"): void {\n        const newColsPresent = colDefs && colDefs.length > 0;\n\n        // if not cols passed, and we had no cols anyway, then do nothing\n        if (!newColsPresent && missing(this.secondaryColumns)) { return; }\n\n        if (newColsPresent) {\n            this.processSecondaryColumnDefinitions(colDefs);\n            const balancedTreeResult = this.columnFactory.createColumnTree(\n                colDefs,\n                false,\n                this.secondaryBalancedTree || this.previousSecondaryColumns || undefined,\n            );\n            this.secondaryBalancedTree = balancedTreeResult.columnTree;\n            this.secondaryHeaderRowCount = balancedTreeResult.treeDept + 1;\n            this.secondaryColumns = this.getColumnsFromTree(this.secondaryBalancedTree);\n\n            this.secondaryColumnsMap = {};\n            this.secondaryColumns.forEach(col => this.secondaryColumnsMap[col.getId()] = col);\n            this.previousSecondaryColumns = null;\n        } else {\n            this.previousSecondaryColumns = this.secondaryBalancedTree;\n            this.secondaryBalancedTree = null;\n            this.secondaryHeaderRowCount = -1;\n            this.secondaryColumns = null;\n            this.secondaryColumnsMap = {};\n        }\n\n        this.updateGridColumns();\n        this.updateDisplayedColumns(source);\n    }\n\n    private processSecondaryColumnDefinitions(colDefs: (ColDef | ColGroupDef)[] | null): (ColDef | ColGroupDef)[] | undefined {\n\n        const columnCallback = this.gridOptionsWrapper.getProcessSecondaryColDefFunc();\n        const groupCallback = this.gridOptionsWrapper.getProcessSecondaryColGroupDefFunc();\n\n        if (!columnCallback && !groupCallback) { return undefined; }\n\n        const searchForColDefs = (colDefs2: (ColDef | ColGroupDef)[]): void => {\n            colDefs2.forEach((abstractColDef: AbstractColDef) => {\n                const isGroup = exists((abstractColDef as any).children);\n                if (isGroup) {\n                    const colGroupDef = abstractColDef as ColGroupDef;\n                    if (groupCallback) {\n                        groupCallback(colGroupDef);\n                    }\n                    searchForColDefs(colGroupDef.children);\n                } else {\n                    const colDef = abstractColDef as ColDef;\n                    if (columnCallback) {\n                        columnCallback(colDef);\n                    }\n                }\n            });\n        };\n\n        if (colDefs) {\n            searchForColDefs(colDefs);\n        }\n    }\n\n    // called from: setColumnState, setColumnDefs, setSecondaryColumns\n    private updateGridColumns(): void {\n        if (this.gridColsArePrimary) {\n            this.lastPrimaryOrder = this.gridColumns;\n        } else {\n            this.lastSecondaryOrder = this.gridColumns;\n        }\n\n        if (this.secondaryColumns && this.secondaryBalancedTree) {\n            const hasSameColumns = this.secondaryColumns.every((col) => {\n                return this.gridColumnsMap[col.getColId()] !== undefined;\n            });\n            this.gridBalancedTree = this.secondaryBalancedTree.slice();\n            this.gridHeaderRowCount = this.secondaryHeaderRowCount;\n            this.gridColumns = this.secondaryColumns.slice();\n            this.gridColsArePrimary = false;\n            // If the current columns are the same or a subset of the previous\n            // we keep the previous order, otherwise we go back to the order the pivot\n            // cols are generated in\n            if (hasSameColumns) {\n                this.orderGridColsLike(this.lastSecondaryOrder);\n            }\n        } else if (this.primaryColumns) {\n            this.gridBalancedTree = this.primaryColumnTree.slice();\n            this.gridHeaderRowCount = this.primaryHeaderRowCount;\n            this.gridColumns = this.primaryColumns.slice();\n            this.gridColsArePrimary = true;\n\n            // updateGridColumns gets called after user adds a row group. we want to maintain the order of the columns\n            // when this happens (eg if user moved a column) rather than revert back to the original column order.\n            // likewise if changing in/out of pivot mode, we want to maintain the order of the cols\n            this.orderGridColsLike(this.lastPrimaryOrder);\n        }\n\n        this.addAutoGroupToGridColumns();\n\n        this.gridColumns = this.placeLockedColumns(this.gridColumns);\n        this.setupQuickFilterColumns();\n        this.clearDisplayedAndViewportColumns();\n\n        this.colSpanActive = this.checkColSpanActiveInCols(this.gridColumns);\n\n        this.gridColumnsMap = {};\n        this.gridColumns.forEach(col => this.gridColumnsMap[col.getId()] = col);\n\n        this.setAutoHeightActive();\n\n        const event: GridColumnsChangedEvent = {\n            type: Events.EVENT_GRID_COLUMNS_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    private setAutoHeightActive(): void {\n        this.autoHeightActive = this.gridColumns.filter(col => col.isAutoHeight()).length > 0;\n\n        if (this.autoHeightActive) {\n            this.autoHeightActiveAtLeastOnce = true;\n\n            const rowModelType = this.rowModel.getType();\n            const supportedRowModel = rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE || rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE;\n            if (!supportedRowModel) {\n                const message = 'AG Grid - autoHeight columns only work with Client Side Row Model and Server Side Row Model.';\n                doOnce(() => console.warn(message), 'autoHeightActive.wrongRowModel');\n            }\n        }\n    }\n\n    private orderGridColsLike(colsOrder: Column[] | undefined): void {\n        if (missing(colsOrder)) { return; }\n\n        const lastOrderMapped = convertToMap<Column, number>(colsOrder.map((col, index) => [col, index]));\n\n        // only do the sort if at least one column is accounted for. columns will be not accounted for\n        // if changing from secondary to primary columns\n        let noColsFound = true;\n        this.gridColumns.forEach(col => {\n            if (lastOrderMapped.has(col)) {\n                noColsFound = false;\n            }\n        });\n\n        if (noColsFound) { return; }\n\n        // order cols in the same order as before. we need to make sure that all\n        // cols still exists, so filter out any that no longer exist.\n        const gridColsMap = convertToMap<Column, boolean>(this.gridColumns.map(col => [col, true]));\n        const oldColsOrdered = colsOrder.filter(col => gridColsMap.has(col));\n        const oldColsMap = convertToMap<Column, boolean>(oldColsOrdered.map(col => [col, true]));\n        const newColsOrdered = this.gridColumns.filter(col => !oldColsMap.has(col));\n\n        // add in the new columns, at the end (if no group), or at the end of the group (if a group)\n        const newGridColumns = oldColsOrdered.slice();\n\n        newColsOrdered.forEach(newCol => {\n            let parent = newCol.getOriginalParent();\n\n            // if no parent, means we are not grouping, so just add the column to the end\n            if (!parent) {\n                newGridColumns.push(newCol);\n                return;\n            }\n\n            // find the group the column belongs to. if no siblings at the current level (eg col in group on it's\n            // own) then go up one level and look for siblings there.\n            const siblings: Column[] = [];\n            while (!siblings.length && parent) {\n                const leafCols = parent.getLeafColumns();\n                leafCols.forEach(leafCol => {\n                    const presentInNewGriColumns = newGridColumns.indexOf(leafCol) >= 0;\n                    const noYetInSiblings = siblings.indexOf(leafCol) < 0;\n                    if (presentInNewGriColumns && noYetInSiblings) {\n                        siblings.push(leafCol);\n                    }\n                });\n                parent = parent.getOriginalParent();\n            }\n\n            // if no siblings exist at any level, this means the col is in a group (or parent groups) on it's own\n            if (!siblings.length) {\n                newGridColumns.push(newCol);\n                return;\n            }\n\n            // find index of last column in the group\n            const indexes = siblings.map(col => newGridColumns.indexOf(col));\n            const lastIndex = Math.max(...indexes);\n\n            insertIntoArray(newGridColumns, newCol, lastIndex + 1);\n        });\n\n        this.gridColumns = newGridColumns;\n    }\n\n    public isPrimaryColumnGroupsPresent(): boolean {\n        return this.primaryHeaderRowCount > 1;\n    }\n\n    // if we are using autoGroupCols, then they should be included for quick filter. this covers the\n    // following scenarios:\n    // a) user provides 'field' into autoGroupCol of normal grid, so now because a valid col to filter leafs on\n    // b) using tree data and user depends on autoGroupCol for first col, and we also want to filter on this\n    //    (tree data is a bit different, as parent rows can be filtered on, unlike row grouping)\n    private setupQuickFilterColumns(): void {\n        if (this.groupAutoColumns) {\n            this.columnsForQuickFilter = (this.primaryColumns || []).concat(this.groupAutoColumns);\n        } else if (this.primaryColumns) {\n            this.columnsForQuickFilter = this.primaryColumns;\n        }\n    }\n\n    private placeLockedColumns(cols: Column[]): Column[] {\n        const left: Column[] = [];\n        const normal: Column[] = [];\n        const right: Column[] = [];\n        cols.forEach((col) => {\n            const position = col.getColDef().lockPosition;\n            if (position === 'right') {\n                right.push(col);\n            } else if (position === 'left' || position === true) {\n                left.push(col);\n            } else {\n                normal.push(col);\n            }\n        });\n        return [...left, ...normal, ...right];\n    }\n\n    private addAutoGroupToGridColumns(): void {\n        // add in auto-group here\n        this.createGroupAutoColumnsIfNeeded();\n\n        if (missing(this.groupAutoColumns)) { return; }\n\n        this.gridColumns = this.groupAutoColumns ? this.groupAutoColumns.concat(this.gridColumns) : this.gridColumns;\n\n        const autoColBalancedTree = this.columnFactory.createForAutoGroups(this.groupAutoColumns, this.gridBalancedTree);\n\n        this.gridBalancedTree = autoColBalancedTree.concat(this.gridBalancedTree);\n    }\n\n    // gets called after we copy down grid columns, to make sure any part of the gui\n    // that tries to draw, eg the header, it will get empty lists of columns rather\n    // than stale columns. for example, the header will received gridColumnsChanged\n    // event, so will try and draw, but it will draw successfully when it acts on the\n    // virtualColumnsChanged event\n    private clearDisplayedAndViewportColumns(): void {\n        this.displayedTreeLeft = [];\n        this.displayedTreeRight = [];\n        this.displayedTreeCentre = [];\n\n        this.viewportRowLeft = {};\n        this.viewportRowRight = {};\n        this.viewportRowCenter = {};\n\n        this.displayedColumnsLeft = [];\n        this.displayedColumnsRight = [];\n        this.displayedColumnsCenter = [];\n        this.displayedColumns = [];\n        this.viewportColumns = [];\n    }\n\n    private updateGroupsAndDisplayedColumns(source: ColumnEventType) {\n\n        this.updateOpenClosedVisibilityInColumnGroups();\n        this.deriveDisplayedColumns(source);\n        this.refreshFlexedColumns();\n        this.extractViewport();\n        this.updateBodyWidths();\n        // this event is picked up by the gui, headerRenderer and rowRenderer, to recalculate what columns to display\n\n        const event: DisplayedColumnsChangedEvent = {\n            type: Events.EVENT_DISPLAYED_COLUMNS_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private deriveDisplayedColumns(source: ColumnEventType): void {\n        this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeLeft, this.displayedColumnsLeft);\n        this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeCentre, this.displayedColumnsCenter);\n        this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeRight, this.displayedColumnsRight);\n        this.joinDisplayedColumns();\n        this.setLeftValues(source);\n        this.displayedAutoHeightCols = this.displayedColumns.filter(col => col.isAutoHeight());\n    }\n\n    public isAutoRowHeightActive(): boolean {\n        return this.autoHeightActive;\n    }\n\n    public wasAutoRowHeightEverActive(): boolean {\n        return this.autoHeightActiveAtLeastOnce;\n    }\n\n    private joinDisplayedColumns(): void {\n        if (this.gridOptionsWrapper.isEnableRtl()) {\n            this.displayedColumns = this.displayedColumnsRight\n                .concat(this.displayedColumnsCenter)\n                .concat(this.displayedColumnsLeft);\n        } else {\n            this.displayedColumns = this.displayedColumnsLeft\n                .concat(this.displayedColumnsCenter)\n                .concat(this.displayedColumnsRight);\n        }\n    }\n\n    // sets the left pixel position of each column\n    private setLeftValues(source: ColumnEventType): void {\n        this.setLeftValuesOfColumns(source);\n        this.setLeftValuesOfGroups();\n    }\n\n    private setLeftValuesOfColumns(source: ColumnEventType): void {\n        if (!this.primaryColumns) { return; }\n\n        // go through each list of displayed columns\n        const allColumns = this.primaryColumns.slice(0);\n\n        // let totalColumnWidth = this.getWidthOfColsInList()\n        const doingRtl = this.gridOptionsWrapper.isEnableRtl();\n\n        [\n            this.displayedColumnsLeft,\n            this.displayedColumnsRight,\n            this.displayedColumnsCenter\n        ].forEach(columns => {\n            if (doingRtl) {\n                // when doing RTL, we start at the top most pixel (ie RHS) and work backwards\n                let left = this.getWidthOfColsInList(columns);\n                columns.forEach(column => {\n                    left -= column.getActualWidth();\n                    column.setLeft(left, source);\n                });\n            } else {\n                // otherwise normal LTR, we start at zero\n                let left = 0;\n                columns.forEach(column => {\n                    column.setLeft(left, source);\n                    left += column.getActualWidth();\n                });\n            }\n            removeAllFromArray(allColumns, columns);\n        });\n\n        // items left in allColumns are columns not displayed, so remove the left position. this is\n        // important for the rows, as if a col is made visible, then taken out, then made visible again,\n        // we don't want the animation of the cell floating in from the old position, whatever that was.\n        allColumns.forEach((column: Column) => {\n            column.setLeft(null, source);\n        });\n    }\n\n    private setLeftValuesOfGroups(): void {\n        // a groups left value is the lest left value of it's children\n        [\n            this.displayedTreeLeft,\n            this.displayedTreeRight,\n            this.displayedTreeCentre\n        ].forEach(columns => {\n            columns.forEach(column => {\n                if (column instanceof ColumnGroup) {\n                    const columnGroup = column;\n                    columnGroup.checkLeft();\n                }\n            });\n        });\n    }\n\n    private derivedDisplayedColumnsFromDisplayedTree(tree: IHeaderColumn[], columns: Column[]): void {\n        columns.length = 0;\n        this.columnUtils.depthFirstDisplayedColumnTreeSearch(tree, (child: IHeaderColumn) => {\n            if (child instanceof Column) {\n                columns.push(child);\n            }\n        });\n    }\n\n    private extractViewportColumns(): void {\n        if (this.suppressColumnVirtualisation) {\n            // no virtualisation, so don't filter\n            this.viewportColumnsCenter = this.displayedColumnsCenter;\n        } else {\n            // filter out what should be visible\n            this.viewportColumnsCenter = this.filterOutColumnsWithinViewport();\n        }\n\n        this.viewportColumns = this.viewportColumnsCenter\n            .concat(this.displayedColumnsLeft)\n            .concat(this.displayedColumnsRight);\n    }\n\n    public getVirtualHeaderGroupRow(type: string | null, dept: number): IHeaderColumn[] {\n        let result: IHeaderColumn[];\n\n        switch (type) {\n            case Constants.PINNED_LEFT:\n                result = this.viewportRowLeft[dept];\n                break;\n            case Constants.PINNED_RIGHT:\n                result = this.viewportRowRight[dept];\n                break;\n            default:\n                result = this.viewportRowCenter[dept];\n                break;\n        }\n\n        if (missing(result)) {\n            result = [];\n        }\n\n        return result;\n    }\n\n    private extractViewportRows(): void {\n\n        // go through each group, see if any of it's cols are displayed, and if yes,\n        // then this group is included\n        this.viewportRowLeft = {};\n        this.viewportRowRight = {};\n        this.viewportRowCenter = {};\n\n        // for easy lookup when building the groups.\n        const virtualColIds: { [key: string]: boolean; } = {};\n        this.viewportColumns.forEach(col => virtualColIds[col.getId()] = true);\n\n        const testGroup = (\n            children: IHeaderColumn[],\n            result: { [row: number]: IHeaderColumn[]; },\n            dept: number): boolean => {\n\n            let returnValue = false;\n\n            for (let i = 0; i < children.length; i++) {\n                // see if this item is within viewport\n                const child = children[i];\n                let addThisItem = false;\n\n                if (child instanceof Column) {\n                    // for column, test if column is included\n                    addThisItem = virtualColIds[child.getId()] === true;\n                } else {\n                    // if group, base decision on children\n                    const columnGroup = child as ColumnGroup;\n                    const displayedChildren = columnGroup.getDisplayedChildren();\n\n                    if (displayedChildren) {\n                        addThisItem = testGroup(displayedChildren, result, dept + 1);\n                    }\n                }\n\n                if (addThisItem) {\n                    returnValue = true;\n                    if (!result[dept]) {\n                        result[dept] = [];\n                    }\n                    result[dept].push(child);\n                }\n            }\n            return returnValue;\n        };\n\n        testGroup(this.displayedTreeLeft, this.viewportRowLeft, 0);\n        testGroup(this.displayedTreeRight, this.viewportRowRight, 0);\n        testGroup(this.displayedTreeCentre, this.viewportRowCenter, 0);\n    }\n\n    private extractViewport(): void {\n        this.extractViewportColumns();\n        this.extractViewportRows();\n    }\n\n    private filterOutColumnsWithinViewport(): Column[] {\n        return this.displayedColumnsCenter.filter(this.isColumnInViewport.bind(this));\n    }\n\n    public refreshFlexedColumns(params: { resizingCols?: Column[], skipSetLeft?: boolean, viewportWidth?: number, source?: ColumnEventType, fireResizedEvent?: boolean, updateBodyWidths?: boolean; } = {}): Column[] {\n        const source = params.source ? params.source : 'flex';\n\n        if (params.viewportWidth != null) {\n            this.flexViewportWidth = params.viewportWidth;\n        }\n\n        if (!this.flexViewportWidth) { return []; }\n\n        // If the grid has left-over space, divide it between flexing columns in proportion to their flex value.\n        // A \"flexing column\" is one that has a 'flex' value set and is not currently being constrained by its\n        // minWidth or maxWidth rules.\n\n        let flexAfterDisplayIndex = -1;\n        if (params.resizingCols) {\n            params.resizingCols.forEach(col => {\n                const indexOfCol = this.displayedColumnsCenter.indexOf(col);\n                if (flexAfterDisplayIndex < indexOfCol) {\n                    flexAfterDisplayIndex = indexOfCol;\n                }\n            });\n        }\n\n        const isColFlex = (col: Column) => {\n            const afterResizingCols = this.displayedColumnsCenter.indexOf(col) > flexAfterDisplayIndex;\n            return col.getFlex() && afterResizingCols;\n        };\n        const knownWidthColumns = this.displayedColumnsCenter.filter(col => !isColFlex(col));\n        const flexingColumns = this.displayedColumnsCenter.filter(col => isColFlex(col));\n        const changedColumns: Column[] = [];\n\n        if (!flexingColumns.length) {\n            return [];\n        }\n\n        const flexingColumnSizes: number[] = [];\n        let spaceForFlexingColumns: number;\n\n        outer: while (true) {\n            const totalFlex = flexingColumns.reduce((count, col) => count + col.getFlex(), 0);\n            spaceForFlexingColumns = this.flexViewportWidth - this.getWidthOfColsInList(knownWidthColumns);\n            for (let i = 0; i < flexingColumns.length; i++) {\n                const col = flexingColumns[i];\n                const widthByFlexRule = spaceForFlexingColumns * col.getFlex() / totalFlex;\n                let constrainedWidth = 0;\n\n                const minWidth = col.getMinWidth();\n                const maxWidth = col.getMaxWidth();\n\n                if (exists(minWidth) && widthByFlexRule < minWidth) {\n                    constrainedWidth = minWidth;\n                } else if (exists(maxWidth) && widthByFlexRule > maxWidth) {\n                    constrainedWidth = maxWidth;\n                }\n\n                if (constrainedWidth) {\n                    // This column is not in fact flexing as it is being constrained to a specific size\n                    // so remove it from the list of flexing columns and start again\n                    col.setActualWidth(constrainedWidth, source);\n                    removeFromArray(flexingColumns, col);\n                    changedColumns.push(col);\n                    knownWidthColumns.push(col);\n                    continue outer;\n                }\n\n                flexingColumnSizes[i] = Math.round(widthByFlexRule);\n            }\n            break;\n        }\n\n        let remainingSpace = spaceForFlexingColumns;\n        flexingColumns.forEach((col, i) => {\n            col.setActualWidth(Math.min(flexingColumnSizes[i], remainingSpace), source);\n            changedColumns.push(col);\n            remainingSpace -= flexingColumnSizes[i];\n        });\n\n        if (!params.skipSetLeft) {\n            this.setLeftValues(source);\n        }\n\n        if (params.updateBodyWidths) {\n            this.updateBodyWidths();\n        }\n\n        if (params.fireResizedEvent) {\n            this.fireColumnResizedEvent(changedColumns, true, source, flexingColumns);\n        }\n\n        // if the user sets rowData directly into GridOptions, then the row data is set before\n        // grid is attached to the DOM. this means the columns are not flexed, and then the rows\n        // have the wrong height (as they depend on column widths). so once the columns have\n        // been flexed for the first time (only happens once grid is attached to DOM, as dependency\n        // on getting the grid width, which only happens after attached after ResizeObserver fires)\n        // we get get rows to re-calc their heights.\n        if (!this.flexColsCalculatedAtLestOnce) {\n            if (this.gridOptionsWrapper.isRowModelDefault()) {\n                (this.rowModel as IClientSideRowModel).resetRowHeights();\n            }\n            this.flexColsCalculatedAtLestOnce = true;\n        }\n\n        return flexingColumns;\n    }\n\n    // called from api\n    public sizeColumnsToFit(gridWidth: any, source: ColumnEventType = \"sizeColumnsToFit\", silent?: boolean): void {\n        // avoid divide by zero\n        const allDisplayedColumns = this.getAllDisplayedColumns();\n\n        if (gridWidth <= 0 || !allDisplayedColumns.length) { return; }\n\n        const colsToSpread: Column[] = [];\n        const colsToNotSpread: Column[] = [];\n\n        allDisplayedColumns.forEach(column => {\n            if (column.getColDef().suppressSizeToFit === true) {\n                colsToNotSpread.push(column);\n            } else {\n                colsToSpread.push(column);\n            }\n        });\n\n        // make a copy of the cols that are going to be resized\n        const colsToFireEventFor = colsToSpread.slice(0);\n        let finishedResizing = false;\n\n        const moveToNotSpread = (column: Column) => {\n            removeFromArray(colsToSpread, column);\n            colsToNotSpread.push(column);\n        };\n\n        // resetting cols to their original width makes the sizeColumnsToFit more deterministic,\n        // rather than depending on the current size of the columns. most users call sizeColumnsToFit\n        // immediately after grid is created, so will make no difference. however if application is calling\n        // sizeColumnsToFit repeatedly (eg after column group is opened / closed repeatedly) we don't want\n        // the columns to start shrinking / growing over time.\n        //\n        // NOTE: the process below will assign values to `this.actualWidth` of each column without firing events\n        // for this reason we need to manually fire resize events after the resize has been done for each column.\n        colsToSpread.forEach(column => column.resetActualWidth(source));\n\n        while (!finishedResizing) {\n            finishedResizing = true;\n            const availablePixels = gridWidth - this.getWidthOfColsInList(colsToNotSpread);\n            if (availablePixels <= 0) {\n                // no width, set everything to minimum\n                colsToSpread.forEach((column: Column) => {\n                    column.setMinimum(source);\n                });\n            } else {\n                const scale = availablePixels / this.getWidthOfColsInList(colsToSpread);\n                // we set the pixels for the last col based on what's left, as otherwise\n                // we could be a pixel or two short or extra because of rounding errors.\n                let pixelsForLastCol = availablePixels;\n                // backwards through loop, as we are removing items as we go\n                for (let i = colsToSpread.length - 1; i >= 0; i--) {\n                    const column = colsToSpread[i];\n                    const minWidth = column.getMinWidth();\n                    const maxWidth = column.getMaxWidth();\n                    let newWidth = Math.round(column.getActualWidth() * scale);\n\n                    if (exists(minWidth) && newWidth < minWidth) {\n                        newWidth = minWidth;\n                        moveToNotSpread(column);\n                        finishedResizing = false;\n                    } else if (exists(maxWidth) && column.isGreaterThanMax(newWidth)) {\n                        newWidth = maxWidth;\n                        moveToNotSpread(column);\n                        finishedResizing = false;\n                    } else if (i === 0) { // if this is the last column\n                        newWidth = pixelsForLastCol;\n                    }\n\n                    column.setActualWidth(newWidth, source, true);\n                    pixelsForLastCol -= newWidth;\n                }\n            }\n        }\n\n        // see notes above\n        colsToFireEventFor.forEach(col => {\n            col.fireColumnWidthChangedEvent(source);\n        });\n\n        this.setLeftValues(source);\n        this.updateBodyWidths();\n\n        if (silent) { return; }\n\n        this.fireColumnResizedEvent(colsToFireEventFor, true, source);\n    }\n\n    private buildDisplayedTrees(visibleColumns: Column[]) {\n        const leftVisibleColumns: Column[] = [];\n        const rightVisibleColumns: Column[] = [];\n        const centerVisibleColumns: Column[] = [];\n\n        visibleColumns.forEach(column => {\n            switch (column.getPinned()) {\n                case \"left\":\n                    leftVisibleColumns.push(column);\n                    break;\n                case \"right\":\n                    rightVisibleColumns.push(column);\n                    break;\n                default:\n                    centerVisibleColumns.push(column);\n                    break;\n            }\n        });\n\n        const groupInstanceIdCreator = new GroupInstanceIdCreator();\n\n        this.displayedTreeLeft = this.displayedGroupCreator.createDisplayedGroups(\n            leftVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, Constants.PINNED_LEFT, this.displayedTreeLeft);\n        this.displayedTreeRight = this.displayedGroupCreator.createDisplayedGroups(\n            rightVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, Constants.PINNED_RIGHT, this.displayedTreeRight);\n        this.displayedTreeCentre = this.displayedGroupCreator.createDisplayedGroups(\n            centerVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, null, this.displayedTreeCentre);\n\n        this.updateDisplayedMap();\n    }\n\n    private updateDisplayedMap(): void {\n        this.displayedColumnsAndGroupsMap = {};\n\n        const func = (child: IHeaderColumn) => {\n            this.displayedColumnsAndGroupsMap[child.getUniqueId()] = child;\n        };\n\n        this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeCentre, func);\n        this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeLeft, func);\n        this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeRight, func);\n    }\n\n    public isDisplayed(item: IHeaderColumn): boolean {\n        const fromMap = this.displayedColumnsAndGroupsMap[item.getUniqueId()];\n        // check for reference, in case new column / group with same id is now present\n        return fromMap === item;\n    }\n\n    private updateOpenClosedVisibilityInColumnGroups(): void {\n        const allColumnGroups = this.getAllDisplayedTrees();\n\n        this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, child => {\n            if (child instanceof ColumnGroup) {\n                const columnGroup = child;\n                columnGroup.calculateDisplayedColumns();\n            }\n        });\n    }\n\n    public getGroupAutoColumns(): Column[] | null {\n        return this.groupAutoColumns;\n    }\n\n    private createGroupAutoColumnsIfNeeded(): void {\n        if (!this.autoGroupsNeedBuilding) { return; }\n\n        this.autoGroupsNeedBuilding = false;\n\n        const groupFullWidthRow = this.gridOptionsWrapper.isGroupUseEntireRow(this.pivotMode);\n        // we need to allow suppressing auto-column separately for group and pivot as the normal situation\n        // is CSRM and user provides group column themselves for normal view, but when they go into pivot the\n        // columns are generated by the grid so no opportunity for user to provide group column. so need a way\n        // to suppress auto-col for grouping only, and not pivot.\n        // however if using Viewport RM or SSRM and user is providing the columns, the user may wish full control\n        // of the group column in this instance.\n        const suppressAutoColumn = this.pivotMode ?\n            this.gridOptionsWrapper.isPivotSuppressAutoColumn() : this.gridOptionsWrapper.isGroupSuppressAutoColumn();\n\n        const groupingActive = this.rowGroupColumns.length > 0 || this.usingTreeData;\n        const needAutoColumns = groupingActive && !suppressAutoColumn && !groupFullWidthRow;\n\n        if (needAutoColumns) {\n            const existingCols = this.groupAutoColumns || [];\n            const newAutoGroupCols = this.autoGroupColService.createAutoGroupColumns(existingCols, this.rowGroupColumns);\n            const autoColsDifferent = !this.autoColsEqual(newAutoGroupCols, this.groupAutoColumns);\n            // we force recreate when suppressColumnStateEvents changes, so new group cols pick up the new\n            // definitions. otherwise we could ignore the new cols because they appear to be the same.\n            if (autoColsDifferent || this.forceRecreateAutoGroups) {\n                this.groupAutoColumns = newAutoGroupCols;\n            }\n        } else {\n            this.groupAutoColumns = null;\n        }\n    }\n\n    private autoColsEqual(colsA: Column[] | null, colsB: Column[] | null): boolean {\n        return areEqual(colsA, colsB, (a, b) => a.getColId() === b.getColId());\n    }\n\n    private getWidthOfColsInList(columnList: Column[]) {\n        return columnList.reduce((width, col) => width + col.getActualWidth(), 0);\n    }\n\n    public getGridBalancedTree(): IProvidedColumn[] {\n        return this.gridBalancedTree;\n    }\n\n    public hasFloatingFilters(): boolean {\n        if (!this.gridColumns) { return false; }\n        const res = this.gridColumns.some(col => col.getColDef().floatingFilter);\n        return res;\n    }\n\n    public getFirstDisplayedColumn(): Column | null {\n        const isRtl = this.gridOptionsWrapper.isEnableRtl();\n        const queryOrder: ('getDisplayedLeftColumns' | 'getDisplayedCenterColumns' | 'getDisplayedRightColumns')[] = [\n            'getDisplayedLeftColumns',\n            'getDisplayedCenterColumns',\n            'getDisplayedRightColumns'\n        ];\n\n        if (isRtl) {\n            queryOrder.reverse();\n        }\n\n        for (let i = 0; i < queryOrder.length; i++) {\n            const container = this[queryOrder[i]]();\n            if (container.length) {\n                return isRtl ? last(container) : container[0];\n            }\n        }\n\n        return null;\n    }\n}\n","import { IHeaderColumn } from \"../entities/iHeaderColumn\";\nimport { ColumnGroup } from \"../entities/columnGroup\";\nimport { IProvidedColumn } from \"../entities/iProvidedColumn\";\nimport { ProvidedColumnGroup } from \"../entities/providedColumnGroup\";\nimport { Column } from \"../entities/column\";\nimport { Bean } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { attrToNumber } from \"../utils/generic\";\nimport { ColDef } from \"../entities/colDef\";\n\n// takes in a list of columns, as specified by the column definitions, and returns column groups\n@Bean('columnUtils')\nexport class ColumnUtils extends BeanStub {\n\n    public calculateColMinWidth(colDef: ColDef): number {\n        return colDef.minWidth != null ? colDef.minWidth : this.gridOptionsWrapper.getMinColWidth();\n    }\n\n    public calculateColMaxWidth(colDef: ColDef): number {\n        return colDef.maxWidth != null ? colDef.maxWidth : (this.gridOptionsWrapper.getMaxColWidth() || Number.MAX_SAFE_INTEGER);\n    }\n\n    public calculateColInitialWidth(colDef: ColDef): number {\n        const minColWidth = this.calculateColMinWidth(colDef);\n        const maxColWidth = this.calculateColMaxWidth(colDef);\n\n        let width : number;\n        const colDefWidth = attrToNumber(colDef.width);\n        const colDefInitialWidth = attrToNumber(colDef.initialWidth);\n\n        if (colDefWidth != null) {\n            width = colDefWidth;\n        } else if (colDefInitialWidth != null) {\n            width = colDefInitialWidth;\n        } else {\n            width = this.gridOptionsWrapper.getColWidth();\n        }\n\n        return Math.max(Math.min(width, maxColWidth), minColWidth);\n    }\n\n    public getOriginalPathForColumn(column: Column, originalBalancedTree: IProvidedColumn[]): ProvidedColumnGroup[] | null {\n        const result: ProvidedColumnGroup[] = [];\n        let found = false;\n\n        const recursePath = (balancedColumnTree: IProvidedColumn[], dept: number): void => {\n            for (let i = 0; i < balancedColumnTree.length; i++) {\n                if (found) { return; }\n                    // quit the search, so 'result' is kept with the found result\n\n                const node = balancedColumnTree[i];\n                if (node instanceof ProvidedColumnGroup) {\n                    const nextNode = node;\n                    recursePath(nextNode.getChildren(), dept + 1);\n                    result[dept] = node;\n                } else if (node === column) {\n                    found = true;\n                }\n            }\n        };\n\n        recursePath(originalBalancedTree, 0);\n\n        // we should always find the path, but in case there is a bug somewhere, returning null\n        // will make it fail rather than provide a 'hard to track down' bug\n        return found ? result : null;\n    }\n\n    public depthFirstOriginalTreeSearch(parent: ProvidedColumnGroup | null, tree: IProvidedColumn[], callback: (treeNode: IProvidedColumn, parent: ProvidedColumnGroup | null) => void): void {\n        if (!tree) { return; }\n\n        tree.forEach((child: IProvidedColumn) => {\n            if (child instanceof ProvidedColumnGroup) {\n                this.depthFirstOriginalTreeSearch(child, child.getChildren(), callback);\n            }\n            callback(child, parent);\n        });\n\n    }\n\n    public depthFirstAllColumnTreeSearch(tree: IHeaderColumn[] | null, callback: (treeNode: IHeaderColumn) => void): void {\n        if (!tree) { return; }\n\n        tree.forEach((child: IHeaderColumn) => {\n            if (child instanceof ColumnGroup) {\n                this.depthFirstAllColumnTreeSearch(child.getChildren(), callback);\n            }\n            callback(child);\n        });\n\n    }\n\n    public depthFirstDisplayedColumnTreeSearch(tree: IHeaderColumn[] | null, callback: (treeNode: IHeaderColumn) => void): void {\n        if (!tree) { return; }\n\n        tree.forEach((child: IHeaderColumn) => {\n            if (child instanceof ColumnGroup) {\n                this.depthFirstDisplayedColumnTreeSearch(child.getDisplayedChildren(), callback);\n            }\n            callback(child);\n        });\n    }\n}\n","import { Column } from \"../entities/column\";\nimport { IProvidedColumn } from \"../entities/iProvidedColumn\";\nimport { GroupInstanceIdCreator } from \"./groupInstanceIdCreator\";\nimport { IHeaderColumn } from \"../entities/iHeaderColumn\";\nimport { ColumnGroup } from \"../entities/columnGroup\";\nimport { ProvidedColumnGroup } from \"../entities/providedColumnGroup\";\nimport { Bean } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { last } from \"../utils/array\";\nimport { exists } from \"../utils/generic\";\n\n// takes in a list of columns, as specified by the column definitions, and returns column groups\n@Bean('displayedGroupCreator')\nexport class DisplayedGroupCreator extends BeanStub {\n\n    public createDisplayedGroups(\n        // all displayed columns sorted - this is the columns the grid should show\n        sortedVisibleColumns: Column[],\n        // the tree of columns, as provided by the users, used to know what groups columns roll up into\n        balancedColumnTree: IProvidedColumn[],\n        // creates unique id's for the group\n        groupInstanceIdCreator: GroupInstanceIdCreator,\n        // whether it's left, right or center col\n        pinned: 'left' | 'right' | null,\n        // we try to reuse old groups if we can, to allow gui to do animation\n        oldDisplayedGroups?: IHeaderColumn[]): IHeaderColumn[] {\n\n        const result: IHeaderColumn[] = [];\n\n        let previousRealPath: ColumnGroup[];\n        let previousOriginalPath: ProvidedColumnGroup[];\n\n        const oldColumnsMapped = this.mapOldGroupsById(oldDisplayedGroups!);\n\n        // go through each column, then do a bottom up comparison to the previous column, and start\n        // to share groups if they converge at any point.\n        sortedVisibleColumns.forEach((currentColumn: Column) => {\n\n            const currentOriginalPath = this.getOriginalPathForColumn(balancedColumnTree, currentColumn)!;\n            const currentRealPath: ColumnGroup[] = [];\n            const firstColumn = !previousOriginalPath;\n\n            for (let i = 0; i < currentOriginalPath.length; i++) {\n                if (firstColumn || currentOriginalPath[i] !== previousOriginalPath[i]) {\n                    // new group needed\n                    const newGroup = this.createColumnGroup(\n                        currentOriginalPath[i],\n                        groupInstanceIdCreator,\n                        oldColumnsMapped,\n                        pinned);\n\n                    currentRealPath[i] = newGroup;\n                    // if top level, add to result, otherwise add to parent\n                    if (i == 0) {\n                        result.push(newGroup);\n                    } else {\n                        currentRealPath[i - 1].addChild(newGroup);\n                    }\n                } else {\n                    // reuse old group\n                    currentRealPath[i] = previousRealPath[i];\n                }\n            }\n\n            const noColumnGroups = currentRealPath.length === 0;\n            if (noColumnGroups) {\n                // if we are not grouping, then the result of the above is an empty\n                // path (no groups), and we just add the column to the root list.\n                result.push(currentColumn);\n            } else {\n                const leafGroup = last(currentRealPath);\n                leafGroup.addChild(currentColumn);\n            }\n\n            previousRealPath = currentRealPath;\n            previousOriginalPath = currentOriginalPath;\n        });\n\n        this.setupParentsIntoColumns(result, null);\n\n        return result;\n    }\n\n    private createColumnGroup(\n            providedGroup: ProvidedColumnGroup,\n            groupInstanceIdCreator: GroupInstanceIdCreator,\n            oldColumnsMapped: {[key: string]: ColumnGroup},\n            pinned: 'left' | 'right' | null\n        ): ColumnGroup {\n\n        const groupId = providedGroup.getGroupId();\n        const instanceId = groupInstanceIdCreator.getInstanceIdForKey(groupId);\n        const uniqueId = ColumnGroup.createUniqueId(groupId, instanceId);\n\n        let columnGroup: ColumnGroup | null = oldColumnsMapped[uniqueId];\n\n        // if the user is setting new colDefs, it is possible that the id's overlap, and we\n        // would have a false match from above. so we double check we are talking about the\n        // same original column group.\n        if (columnGroup && columnGroup.getProvidedColumnGroup() !== providedGroup) {\n            columnGroup = null;\n        }\n\n        if (exists(columnGroup)) {\n            // clean out the old column group here, as we will be adding children into it again\n            columnGroup.reset();\n        } else {\n            columnGroup = new ColumnGroup(providedGroup, groupId, instanceId, pinned);\n            this.context.createBean(columnGroup);\n        }\n\n        return columnGroup;\n    }\n\n    // returns back a 2d map of ColumnGroup as follows: groupId -> instanceId -> ColumnGroup\n    private mapOldGroupsById(displayedGroups: IHeaderColumn[]): {[uniqueId: string]: ColumnGroup} {\n        const result: {[uniqueId: string]: ColumnGroup} = {};\n\n        const recursive = (columnsOrGroups: IHeaderColumn[] | null) => {\n            columnsOrGroups!.forEach(columnOrGroup => {\n                if (columnOrGroup instanceof ColumnGroup) {\n                    const columnGroup = columnOrGroup;\n                    result[columnOrGroup.getUniqueId()] = columnGroup;\n                    recursive(columnGroup.getChildren());\n                }\n            });\n        };\n\n        if (displayedGroups) {\n            recursive(displayedGroups);\n        }\n\n        return result;\n    }\n\n    private setupParentsIntoColumns(columnsOrGroups: IHeaderColumn[] | null, parent: ColumnGroup | null): void {\n        columnsOrGroups!.forEach(columnsOrGroup => {\n            columnsOrGroup.setParent(parent);\n            if (columnsOrGroup instanceof ColumnGroup) {\n                const columnGroup = columnsOrGroup;\n                this.setupParentsIntoColumns(columnGroup.getChildren(), columnGroup);\n            }\n        });\n    }\n\n    private getOriginalPathForColumn(balancedColumnTree: IProvidedColumn[], column: Column): ProvidedColumnGroup[] | null {\n        const result: ProvidedColumnGroup[] = [];\n        let found = false;\n\n        const recursePath = (columnTree: IProvidedColumn[], dept: number): void => {\n            for (let i = 0; i < columnTree.length; i++) {\n                // quit the search, so 'result' is kept with the found result\n                if (found) { return; }\n\n                const node = columnTree[i];\n\n                if (node instanceof ProvidedColumnGroup) {\n                    recursePath(node.getChildren(), dept + 1);\n                    result[dept] = node;\n                } else if (node === column) {\n                    found = true;\n                }\n            }\n        };\n\n        recursePath(balancedColumnTree, 0);\n\n        // it's possible we didn't find a path. this happens if the column is generated\n        // by the grid (auto-group), in that the definition didn't come from the client. in this case,\n        // we create a fake original path.\n        if (found) { return result; }\n\n        console.warn('AG Grid: could not get path');\n\n        return null;\n    }\n}\n","/**\n * These keys are used for validating properties supplied on a gridOptions object, and for code generation.\n * If you change the properties on the gridOptions interface, you *must* update this file as well to be consistent.\n */\nexport class PropertyKeys {\n    public static STRING_PROPERTIES = [\n        'sortingOrder', 'rowClass', 'rowSelection', 'overlayLoadingTemplate', 'overlayNoRowsTemplate',\n        'quickFilterText', 'rowModelType', 'editType', 'domLayout', 'clipboardDelimiter', 'rowGroupPanelShow',\n        'multiSortKey', 'pivotColumnGroupTotals', 'pivotRowTotals', 'pivotPanelShow', 'fillHandleDirection',\n        'serverSideStoreType', 'groupDisplayType', 'treeDataDisplayType'\n    ];\n\n    public static OBJECT_PROPERTIES = [\n        'components', 'frameworkComponents', 'rowStyle', 'context', 'autoGroupColumnDef', 'localeText', 'icons',\n        'datasource', 'serverSideDatasource', 'viewportDatasource', 'groupRowRendererParams', 'aggFuncs', 'fullWidthCellRendererParams',\n        'defaultColGroupDef', 'defaultColDef', 'defaultExportParams', 'defaultCsvExportParams', 'defaultExcelExportParams', 'columnTypes',\n        'rowClassRules', 'detailCellRendererParams', 'loadingCellRendererParams', 'loadingOverlayComponentParams',\n        'noRowsOverlayComponentParams', 'popupParent', 'colResizeDefault', 'statusBar', 'sideBar', 'chartThemeOverrides',\n        'customChartThemes'\n    ];\n\n    public static ARRAY_PROPERTIES = [\n        'alignedGrids', 'rowData', 'columnDefs', 'excelStyles', 'pinnedTopRowData', 'pinnedBottomRowData', 'chartThemes'\n    ];\n\n    public static NUMBER_PROPERTIES = [\n        'rowHeight', 'detailRowHeight', 'rowBuffer', 'colWidth', 'headerHeight', 'groupHeaderHeight', 'floatingFiltersHeight',\n        'pivotHeaderHeight', 'pivotGroupHeaderHeight', 'groupDefaultExpanded', 'minColWidth', 'maxColWidth', 'viewportRowModelPageSize',\n        'viewportRowModelBufferSize', 'autoSizePadding', 'maxBlocksInCache', 'maxConcurrentDatasourceRequests', 'tooltipShowDelay',\n        'tooltipHideDelay', 'cacheOverflowSize', 'paginationPageSize', 'cacheBlockSize', 'infiniteInitialRowCount', 'scrollbarWidth',\n        'batchUpdateWaitMillis', 'asyncTransactionWaitMillis', 'blockLoadDebounceMillis', 'keepDetailRowsCount',\n        'undoRedoCellEditingLimit', 'cellFlashDelay', 'cellFadeDelay', 'tabIndex'\n    ];\n\n    public static BOOLEAN_PROPERTIES = [\n        'suppressMakeColumnVisibleAfterUnGroup', 'suppressRowClickSelection', 'suppressCellSelection', 'suppressCellFocus', 'suppressHorizontalScroll',\n        'alwaysShowHorizontalScroll', 'alwaysShowVerticalScroll', 'debug', 'enableBrowserTooltips', 'enableCellExpressions',\n        'angularCompileRows', 'angularCompileFilters', 'groupSuppressAutoColumn', 'groupSelectsChildren', 'groupIncludeFooter',\n        'groupIncludeTotalFooter', 'groupUseEntireRow', 'groupSuppressBlankHeader', 'suppressMenuHide', 'suppressRowDeselection',\n        'unSortIcon', 'suppressMultiSort', 'alwaysMultiSort', 'singleClickEdit', 'suppressLoadingOverlay', 'suppressNoRowsOverlay', 'suppressAutoSize',\n        'skipHeaderOnAutoSize', 'suppressParentsInRowNodes', 'suppressColumnMoveAnimation', 'suppressMovableColumns',\n        'suppressFieldDotNotation', 'enableRangeSelection', 'enableRangeHandle', 'enableFillHandle', 'suppressClearOnFillReduction',\n        'deltaSort', 'suppressTouch', 'suppressAsyncEvents', 'allowContextMenuWithControlKey', 'suppressContextMenu',\n        'rememberGroupStateWhenNewData', 'enableCellChangeFlash', 'suppressDragLeaveHidesColumns', 'suppressMiddleClickScrolls',\n        'suppressPreventDefaultOnMouseWheel', 'suppressCopyRowsToClipboard', 'copyHeadersToClipboard', 'copyGroupHeadersToClipboard',\n        'pivotMode', 'suppressAggFuncInHeader', 'suppressColumnVirtualisation', 'suppressAggAtRootLevel', 'suppressFocusAfterRefresh',\n        'functionsPassive', 'functionsReadOnly', 'animateRows', 'groupSelectsFiltered', 'groupRemoveSingleChildren',\n        'groupRemoveLowestSingleChildren', 'enableRtl', 'suppressClickEdit', 'rowDragEntireRow', 'rowDragManaged', 'suppressRowDrag',\n        'suppressMoveWhenRowDragging', 'rowDragMultiRow', 'enableGroupEdit', 'embedFullWidthRows', 'deprecatedEmbedFullWidthRows',\n        'suppressPaginationPanel', 'groupHideOpenParents', 'groupMultiAutoColumn', 'pagination',\n        'stopEditingWhenGridLosesFocus', 'paginationAutoPageSize', 'suppressScrollOnNewData', 'suppressScrollWhenPopupsAreOpen',\n        'purgeClosedRowNodes', 'cacheQuickFilter', 'deltaRowDataMode', 'ensureDomOrder', 'accentedSort', 'suppressChangeDetection',\n        'valueCache', 'valueCacheNeverExpires', 'aggregateOnlyChangedColumns', 'suppressAnimationFrame', 'suppressExcelExport',\n        'suppressCsvExport', 'treeData', 'masterDetail', 'suppressMultiRangeSelection', 'enterMovesDownAfterEdit', 'enterMovesDown',\n        'suppressPropertyNamesCheck', 'rowMultiSelectWithClick', 'suppressEnterpriseResetOnNewColumns',\n        'suppressRowHoverHighlight', 'suppressRowTransform', 'suppressClipboardPaste', 'suppressLastEmptyLineOnPaste',\n        'serverSideSortingAlwaysResets', 'suppressSetColumnStateEvents', 'suppressColumnStateEvents', 'enableCharts', 'deltaColumnMode',\n        'suppressMaintainUnsortedOrder', 'enableCellTextSelection', 'suppressBrowserResizeObserver', 'suppressMaxRenderedRowRestriction',\n        'excludeChildrenWhenTreeDataFiltering', 'tooltipMouseTrack', 'keepDetailRows', 'paginateChildRows', 'preventDefaultOnContextMenu',\n        'undoRedoCellEditing', 'allowDragFromColumnsToolPanel', 'immutableData', 'immutableColumns', 'pivotSuppressAutoColumn',\n        'suppressExpandablePivotGroups', 'applyColumnDefOrder', 'debounceVerticalScrollbar', 'detailRowAutoHeight',\n        'serverSideFilteringAlwaysResets', 'suppressAggFilteredOnly', 'showOpenedGroup', 'suppressClipboardApi',\n        'suppressModelUpdateAfterUpdateTransaction', 'stopEditingWhenCellsLoseFocus', 'maintainColumnOrder', 'groupMaintainOrder',\n        'columnHoverHighlight', 'reactUi', 'suppressReactUi', 'readOnlyEdit', 'suppressRowVirtualisation',\n        'resetRowDataOnUpdate', 'removePivotHeaderRowWhenSingleValueColumn', 'suppressCopySingleCellRanges'\n    ];\n\n    /** You do not need to include event callbacks in this list, as they are generated automatically. */\n    public static FUNCTION_PROPERTIES = [\n        'localeTextFunc', 'getLocaleText', 'groupRowInnerRenderer', 'groupRowInnerRendererFramework',\n        'groupRowRenderer', 'groupRowRendererFramework', 'isExternalFilterPresent', 'getRowHeight', 'doesExternalFilterPass',\n        'getRowClass', 'getRowStyle', 'getContextMenuItems', 'getMainMenuItems', 'processRowPostCreate', 'processCellForClipboard',\n        'groupRowAggNodes', 'getGroupRowAgg', 'getRowNodeId', 'isFullWidthCell', 'isFullWidthRow', 'fullWidthCellRenderer', 'fullWidthCellRendererFramework',\n        'processSecondaryColDef', 'processSecondaryColGroupDef',\n        'getBusinessKeyForNode', 'sendToClipboard', 'navigateToNextHeader',\n        'tabToNextHeader', 'navigateToNextCell', 'tabToNextCell', 'processCellFromClipboard', 'getDocument', 'postProcessPopup',\n        'getChildCount', 'getDataPath', 'loadingCellRenderer', 'loadingCellRendererFramework', 'loadingOverlayComponent',\n        'loadingOverlayComponentFramework', 'noRowsOverlayComponent', 'noRowsOverlayComponentFramework', 'detailCellRenderer',\n        'detailCellRendererFramework', 'isRowMaster', 'isRowSelectable', 'postSort', 'postSortRows', 'processHeaderForClipboard', 'processGroupHeaderForClipboard',\n        'paginationNumberFormatter', 'processDataFromClipboard', 'getServerSideGroupKey', 'isServerSideGroup', 'suppressKeyboardEvent',\n        'createChartContainer', 'getChartToolbarItems', 'fillOperation', 'isApplyServerSideTransaction', 'getServerSideStoreParams',\n        'isServerSideGroupOpenByDefault', 'isGroupOpenByDefault', 'defaultGroupSortComparator', 'defaultGroupOrderComparator', 'initialGroupOrderComparator',\n        'loadingCellRendererSelector', 'getRowId', 'groupAggFiltering'\n    ];\n\n    public static ALL_PROPERTIES = [\n        ...PropertyKeys.ARRAY_PROPERTIES,\n        ...PropertyKeys.OBJECT_PROPERTIES,\n        ...PropertyKeys.STRING_PROPERTIES,\n        ...PropertyKeys.NUMBER_PROPERTIES,\n        ...PropertyKeys.FUNCTION_PROPERTIES,\n        ...PropertyKeys.BOOLEAN_PROPERTIES\n    ];\n\n    /**\n     * Used when performing property checks. This avoids noise caused when using frameworks, which can add their own\n     * framework-specific properties to colDefs, gridOptions etc.\n     */\n    public static FRAMEWORK_PROPERTIES = [\n        '__ob__', '__v_skip', '__metadata__', 'mappedColumnProperties', 'hasChildColumns', 'toColDef', 'createColDefFromGridColumn'\n    ];\n}\n","import { GridOptions } from '../entities/gridOptions';\nimport { GridApi } from '../gridApi';\nimport { ComponentStateChangedEvent, Events } from '../events';\nimport { PropertyKeys } from '../propertyKeys';\nimport { ColumnApi } from '../columns/columnApi';\nimport { iterateObject } from '../utils/object';\nimport { includes } from '../utils/array';\nimport { values } from '../utils/generic';\n\nexport class ComponentUtil {\n\n    // all the events are populated in here AFTER this class (at the bottom of the file).\n    public static EVENTS: string[] = [];\n\n    // events that are available for use by users of AG Grid and so should be documented\n    public static PUBLIC_EVENTS: string[] = [];\n\n    // events that are internal to AG Grid and should not be exposed to users via documentation or generated framework components\n    public static EXCLUDED_INTERNAL_EVENTS: string[] = [];\n\n    // function below fills this with onXXX methods, based on the above events\n    private static EVENT_CALLBACKS: string[];\n\n    public static STRING_PROPERTIES = PropertyKeys.STRING_PROPERTIES;\n    public static OBJECT_PROPERTIES = PropertyKeys.OBJECT_PROPERTIES;\n    public static ARRAY_PROPERTIES = PropertyKeys.ARRAY_PROPERTIES;\n    public static NUMBER_PROPERTIES = PropertyKeys.NUMBER_PROPERTIES;\n    public static BOOLEAN_PROPERTIES = PropertyKeys.BOOLEAN_PROPERTIES;\n    public static FUNCTION_PROPERTIES = PropertyKeys.FUNCTION_PROPERTIES;\n    public static ALL_PROPERTIES = PropertyKeys.ALL_PROPERTIES;\n\n    public static getEventCallbacks(): string[] {\n        if (!ComponentUtil.EVENT_CALLBACKS) {\n            ComponentUtil.EVENT_CALLBACKS = ComponentUtil.EVENTS.map(event => ComponentUtil.getCallbackForEvent(event));\n        }\n\n        return ComponentUtil.EVENT_CALLBACKS;\n    }\n\n    public static copyAttributesToGridOptions(gridOptions: GridOptions | undefined, component: any, skipEventDeprecationCheck: boolean = false): GridOptions {\n\n        // create empty grid options if none were passed\n        if (typeof gridOptions !== 'object') {\n            gridOptions = {} as GridOptions;\n        }\n\n        // to allow array style lookup in TypeScript, take type away from 'this' and 'gridOptions'\n        const pGridOptions = gridOptions as any;\n        const keyExists = (key: string) => typeof component[key] !== 'undefined';\n\n        // if groupAggFiltering exists and isn't a function, handle as a boolean.\n        if (keyExists('groupAggFiltering') && typeof component.groupAggFiltering !== 'function') {\n            pGridOptions.groupAggFiltering = ComponentUtil.toBoolean(component.groupAggFiltering);\n            delete component.groupAggFiltering;\n        }\n\n        // add in all the simple properties\n        [\n            ...ComponentUtil.ARRAY_PROPERTIES,\n            ...ComponentUtil.STRING_PROPERTIES,\n            ...ComponentUtil.OBJECT_PROPERTIES,\n            ...ComponentUtil.FUNCTION_PROPERTIES,\n            ...ComponentUtil.getEventCallbacks(),\n        ]\n            .filter(keyExists)\n            .forEach(key => pGridOptions[key] = component[key]);\n\n        ComponentUtil.BOOLEAN_PROPERTIES\n            .filter(keyExists)\n            .forEach(key => pGridOptions[key] = ComponentUtil.toBoolean(component[key]));\n\n        ComponentUtil.NUMBER_PROPERTIES\n            .filter(keyExists)\n            .forEach(key => pGridOptions[key] = ComponentUtil.toNumber(component[key]));\n\n        return gridOptions;\n    }\n\n    public static getCallbackForEvent(eventName: string): string {\n        if (!eventName || eventName.length < 2) {\n            return eventName;\n        }\n\n        return 'on' + eventName[0].toUpperCase() + eventName.substr(1);\n    }\n\n    public static processOnChange(changes: any, gridOptions: GridOptions, api: GridApi, columnApi: ColumnApi): void {\n        if (!changes) {\n            return;\n        }\n\n        const changesToApply = { ...changes };\n\n        // to allow array style lookup in TypeScript, take type away from 'this' and 'gridOptions'\n        const pGridOptions = gridOptions as any;\n        const keyExists = (key: string) => changesToApply[key];\n\n        // if groupAggFiltering exists and isn't a function, handle as a boolean.\n        if (keyExists('groupAggFiltering')) {\n            if (typeof changesToApply.groupAggFiltering === 'function') {\n                pGridOptions.groupAggFiltering = changesToApply.groupAggFiltering;\n            } else {\n                pGridOptions.groupAggFiltering = ComponentUtil.toBoolean(changesToApply.groupAggFiltering);\n            }\n            delete changesToApply.groupAggFiltering;\n        }\n\n        // we need to do this before the generic handling, otherwise value gets set before we\n        // try to set it, and the grid then doesn't refresh the rows as it doesn't see any change.\n        // also it's possible we use the generic code setXXX below and put it up there instead,\n        // cover all cases.\n        if (changesToApply.rowClass) {\n            api.setRowClass(changesToApply.rowClass.currentValue);\n            delete changesToApply.rowClass;\n        }\n\n        // check if any change for the simple types, and if so, then just copy in the new value\n        [\n            ...ComponentUtil.ARRAY_PROPERTIES,\n            ...ComponentUtil.OBJECT_PROPERTIES,\n            ...ComponentUtil.STRING_PROPERTIES,\n            ...ComponentUtil.getEventCallbacks(),\n        ]\n            .filter(keyExists)\n            .forEach(key => pGridOptions[key] = changesToApply[key].currentValue);\n\n        ComponentUtil.BOOLEAN_PROPERTIES\n            .filter(keyExists)\n            .forEach(key => pGridOptions[key] = ComponentUtil.toBoolean(changesToApply[key].currentValue));\n\n        ComponentUtil.NUMBER_PROPERTIES\n            .filter(keyExists)\n            .forEach(key => pGridOptions[key] = ComponentUtil.toNumber(changesToApply[key].currentValue));\n\n        if (changesToApply.enableCellTextSelection) {\n            api.setEnableCellTextSelection(ComponentUtil.toBoolean(changesToApply.enableCellTextSelection.currentValue));\n            delete changesToApply.enableCellTextSelection;\n        }\n\n        if (changesToApply.quickFilterText) {\n            api.setQuickFilter(changesToApply.quickFilterText.currentValue);\n            delete changesToApply.quickFilterText;\n        }\n\n        if (changesToApply.autoGroupColumnDef) {\n            api.setAutoGroupColumnDef(changesToApply.autoGroupColumnDef.currentValue, \"gridOptionsChanged\");\n            delete changesToApply.autoGroupColumnDef;\n        }\n\n        if (changesToApply.columnDefs) {\n            api.setColumnDefs(changesToApply.columnDefs.currentValue, \"gridOptionsChanged\");\n            delete changesToApply.columnDefs;\n        }\n\n        if (changesToApply.defaultColDef) {\n            api.setDefaultColDef(changesToApply.defaultColDef.currentValue, \"gridOptionsChanged\");\n            delete changesToApply.defaultColDef;\n        }\n\n        if (changesToApply.paginationPageSize) {\n            api.paginationSetPageSize(ComponentUtil.toNumber(changesToApply.paginationPageSize.currentValue));\n            delete changesToApply.paginationPageSize;\n        }\n\n        if (changesToApply.pivotMode) {\n            columnApi.setPivotMode(ComponentUtil.toBoolean(changesToApply.pivotMode.currentValue));\n            delete changesToApply.pivotMode;\n        }\n\n        if (changesToApply.groupRemoveSingleChildren) {\n            api.setGroupRemoveSingleChildren(ComponentUtil.toBoolean(changesToApply.groupRemoveSingleChildren.currentValue));\n            delete changesToApply.groupRemoveSingleChildren;\n        }\n\n        if (changesToApply.suppressRowDrag) {\n            api.setSuppressRowDrag(ComponentUtil.toBoolean(changesToApply.suppressRowDrag.currentValue));\n            delete changesToApply.suppressRowDrag;\n        }\n\n        if (changesToApply.suppressMoveWhenRowDragging) {\n            api.setSuppressMoveWhenRowDragging(ComponentUtil.toBoolean(changesToApply.suppressMoveWhenRowDragging.currentValue));\n            delete changesToApply.suppressMoveWhenRowDragging;\n        }\n\n        if (changesToApply.suppressRowClickSelection) {\n            api.setSuppressRowClickSelection(ComponentUtil.toBoolean(changesToApply.suppressRowClickSelection.currentValue));\n            delete changesToApply.suppressRowClickSelection;\n        }\n\n        if (changesToApply.suppressClipboardPaste) {\n            api.setSuppressClipboardPaste(ComponentUtil.toBoolean(changesToApply.suppressClipboardPaste.currentValue));\n            delete changesToApply.suppressClipboardPaste;\n        }\n\n        if (changesToApply.headerHeight) {\n            api.setHeaderHeight(ComponentUtil.toNumber(changesToApply.headerHeight.currentValue));\n            delete changesToApply.headerHeight;\n        }\n\n        // any remaining properties can be set in a generic way\n        // ie the setter takes the form of setXXX and the argument requires no formatting/translation first\n        const dynamicApi = (api as any);\n        Object.keys(changesToApply)\n            .forEach(property => {\n                const setterName = `set${property.charAt(0).toUpperCase()}${property.substring(1)}`;\n\n                if (dynamicApi[setterName]) {\n                    dynamicApi[setterName](changes[property].currentValue);\n                }\n            });\n\n        // copy changes into an event for dispatch\n        const event: ComponentStateChangedEvent = {\n            type: Events.EVENT_COMPONENT_STATE_CHANGED,\n            api: gridOptions.api!,\n            columnApi: gridOptions.columnApi!\n        };\n\n        iterateObject(changes, (key: string, value: any) => {\n            (event as any)[key] = value;\n        });\n\n        api.dispatchEvent(event);\n    }\n\n    public static toBoolean(value: any): boolean {\n        if (typeof value === 'boolean') {\n            return value;\n        }\n\n        if (typeof value === 'string') {\n            // for boolean, compare to empty String to allow attributes appearing with\n            // no value to be treated as 'true'\n            return value.toUpperCase() === 'TRUE' || value == '';\n        }\n\n        return false;\n    }\n\n    public static toNumber(value: any): number | undefined {\n        if (typeof value === 'number') {\n            return value;\n        }\n\n        if (typeof value === 'string') {\n            return Number(value);\n        }\n    }\n}\n\nComponentUtil.EVENTS = values<any>(Events);\n\n/** Exclude the following internal events from code generation to prevent exposing these events via framework components */\nComponentUtil.EXCLUDED_INTERNAL_EVENTS = [\n    Events.EVENT_SCROLLBAR_WIDTH_CHANGED,\n    Events.EVENT_CHECKBOX_CHANGED,\n    Events.EVENT_HEIGHT_SCALE_CHANGED,\n    Events.EVENT_BODY_HEIGHT_CHANGED,\n    Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED,\n    Events.EVENT_SCROLL_VISIBILITY_CHANGED,\n    Events.EVENT_COLUMN_HOVER_CHANGED,\n    Events.EVENT_FLASH_CELLS,\n    Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED,\n    Events.EVENT_DISPLAYED_ROWS_CHANGED,\n    Events.EVENT_LEFT_PINNED_WIDTH_CHANGED,\n    Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED,\n    Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED,\n    Events.EVENT_POPUP_TO_FRONT,\n    Events.EVENT_KEYBOARD_FOCUS,\n    Events.EVENT_MOUSE_FOCUS,\n    Events.EVENT_STORE_UPDATED,\n    Events.EVENT_COLUMN_PANEL_ITEM_DRAG_START,\n    Events.EVENT_COLUMN_PANEL_ITEM_DRAG_END,\n    Events.EVENT_FILL_START,\n    Events.EVENT_FILL_END,\n    Events.EVENT_FULL_WIDTH_ROW_FOCUSED\n];\n\n/** EVENTS that should be exposed via code generation for the framework components.  */\nComponentUtil.PUBLIC_EVENTS = ComponentUtil.EVENTS.filter(e => !includes(ComponentUtil.EXCLUDED_INTERNAL_EVENTS, e));\n","import { Bean, ComponentMeta } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\n\n@Bean('agStackComponentsRegistry')\nexport class AgStackComponentsRegistry extends BeanStub {\n\n    private componentsMappedByName: { [key: string]: any } = {};\n\n    public setupComponents(components: ComponentMeta[]): void {\n        if (components) {\n            components.forEach(componentMeta => this.addComponent(componentMeta));\n        }\n    }\n\n    private addComponent(componentMeta: ComponentMeta): void {\n        // get name of the class as a string\n        // let className = getNameOfClass(ComponentClass);\n        // insert a dash after every capital letter\n        // let classEscaped = className.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n        const classEscaped = componentMeta.componentName.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n        // put all to upper case\n        const classUpperCase = classEscaped.toUpperCase();\n        // finally store\n        this.componentsMappedByName[classUpperCase] = componentMeta.componentClass;\n    }\n\n    public getComponentClass(htmlTag: string): any {\n        return this.componentsMappedByName[htmlTag];\n    }\n\n}\n","export class ColDefUtil {\n    public static STRING_PROPERTIES = [\n        'headerName',\n        'columnGroupShow',\n        'headerClass',\n        'toolPanelClass',\n        'headerValueGetter',\n        'pivotKeys',\n        'groupId',\n        'colId',\n        'sort',\n        'initialSort',\n        'field',\n        'type',\n        'tooltipComponent',\n        'tooltipField',\n        'headerTooltip',\n        'cellClass',\n        'showRowGroup',\n        'filter',\n        'initialAggFunc',\n        'defaultAggFunc',\n        'aggFunc',\n        'pinned',\n        'initialPinned',\n        'chartDataType',\n        'cellEditorPopupPosition'\n    ];\n\n    public static OBJECT_PROPERTIES = [\n        'headerGroupComponent',\n        'headerGroupComponentFramework',\n        'headerGroupComponentParams',\n        'cellStyle',\n        'cellRenderer',\n        'cellRendererParams',\n        'cellRendererFramework',\n        'cellEditor',\n        'cellEditorFramework',\n        'cellEditorParams',\n        'pinnedRowCellRendererFramework',\n        'pinnedRowCellRendererParams',\n        'filterFramework',\n        'filterParams',\n        'pivotValueColumn',\n        'headerComponent',\n        'headerComponentFramework',\n        'headerComponentParams',\n        'floatingFilterComponent',\n        'floatingFilterComponentParams',\n        'floatingFilterComponentFramework',\n        'floatingFilterFramework',\n        'tooltipComponent',\n        'tooltipComponentParams',\n        'tooltipComponentFramework',\n        'refData',\n        'columnsMenuParams'\n    ];\n\n    public static ARRAY_PROPERTIES = [\n        'children',\n        'sortingOrder',\n        'allowedAggFuncs',\n        'menuTabs',\n        'pivotTotalColumnIds',\n        'cellClassRules',\n        'icons'];\n\n    public static NUMBER_PROPERTIES = [\n        'sortedAt',\n        'sortIndex',\n        'initialSortIndex',\n        'flex',\n        'initialFlex',\n        'width',\n        'initialWidth',\n        'minWidth',\n        'maxWidth',\n        'rowGroupIndex',\n        'initialRowGroupIndex',\n        'pivotIndex',\n        'initialPivotIndex'];\n\n    public static BOOLEAN_PROPERTIES = [\n        'suppressCellFlash',\n        'suppressColumnsToolPanel',\n        'suppressFiltersToolPanel',\n        'openByDefault',\n        'marryChildren',\n        'hide',\n        'initialHide',\n        'rowGroup',\n        'initialRowGroup',\n        'pivot',\n        'initialPivot',\n        'checkboxSelection',\n        'headerCheckboxSelection',\n        'headerCheckboxSelectionFilteredOnly',\n        'suppressMenu',\n        'suppressMovable',\n        'lockPosition',\n        'lockVisible',\n        'lockPinned',\n        'unSortIcon',\n        'suppressSizeToFit',\n        'suppressAutoSize',\n        'enableRowGroup',\n        'enablePivot',\n        'enableValue',\n        'editable',\n        'suppressPaste',\n        'suppressNavigable',\n        'enableCellChangeFlash',\n        'rowDrag',\n        'dndSource',\n        'autoHeight',\n        'wrapText',\n        'sortable',\n        'resizable',\n        'singleClickEdit',\n        'floatingFilter',\n        'cellEditorPopup',\n        'suppressFillHandle'\n    ];\n\n    public static FUNCTION_PROPERTIES = [\n        'dndSourceOnRowDrag',\n        'valueGetter',\n        'valueSetter',\n        'filterValueGetter',\n        'keyCreator',\n        'pinnedRowCellRenderer',\n        'valueFormatter',\n        'pinnedRowValueFormatter',\n        'valueParser',\n        'comparator',\n        'equals',\n        'pivotComparator',\n        'suppressKeyboardEvent',\n        'suppressHeaderKeyboardEvent',\n        'colSpan',\n        'rowSpan',\n        'getQuickFilterText',\n        'newValueHandler',\n        'onCellValueChanged',\n        'onCellClicked',\n        'onCellDoubleClicked',\n        'onCellContextMenu',\n        'rowDragText',\n        'tooltipValueGetter',\n        'tooltipComponent',\n        'tooltipComponentFramework',\n        'cellRendererSelector',\n        'cellEditorSelector'\n    ];\n\n    public static ALL_PROPERTIES = [\n        ...ColDefUtil.ARRAY_PROPERTIES,\n        ...ColDefUtil.OBJECT_PROPERTIES,\n        ...ColDefUtil.STRING_PROPERTIES,\n        ...ColDefUtil.NUMBER_PROPERTIES,\n        ...ColDefUtil.FUNCTION_PROPERTIES,\n        ...ColDefUtil.BOOLEAN_PROPERTIES\n    ];\n\n    // used when doing property checks - this causes noise when using frameworks which can add their own fw specific\n    // properties to colDefs, gridOptions etc\n    public static FRAMEWORK_PROPERTIES = [\n        '__ob__',\n        '__v_skip',\n        '__metadata__',\n        'mappedColumnProperties',\n        'hasChildColumns',\n        'toColDef',\n        'createColDefFromGridColumn'\n    ];\n}\n","export class Color {\n\n    readonly r: number;\n    readonly g: number;\n    readonly b: number;\n    readonly a: number;\n\n    /**\n     * Every color component should be in the [0, 1] range.\n     * Some easing functions (such as elastic easing) can overshoot the target value by some amount.\n     * So, when animating colors, if the source or target color components are already near\n     * or at the edge of the allowed [0, 1] range, it is possible for the intermediate color\n     * component value to end up outside of that range mid-animation. For this reason the constructor\n     * performs range checking/constraining.\n     * @param r Red component.\n     * @param g Green component.\n     * @param b Blue component.\n     * @param a Alpha (opacity) component.\n     */\n    constructor(r: number, g: number, b: number, a: number = 1) {\n        // NaN is treated as 0.\n        this.r = Math.min(1, Math.max(0, r || 0));\n        this.g = Math.min(1, Math.max(0, g || 0));\n        this.b = Math.min(1, Math.max(0, b || 0));\n        this.a = Math.min(1, Math.max(0, a || 0));\n    }\n\n    /**\n     * The given string can be in one of the following formats:\n     * - #rgb\n     * - #rrggbb\n     * - rgb(r, g, b)\n     * - rgba(r, g, b, a)\n     * - CSS color name such as 'white', 'orange', 'cyan', etc.\n     * @param str\n     */\n    static fromString(str: string): Color {\n        // hexadecimal notation\n        if (str.indexOf('#') >= 0) { // there can be some leading whitespace\n            return Color.fromHexString(str);\n        }\n\n        // color name\n        const hex = Color.nameToHex[str];\n        if (hex) {\n            return Color.fromHexString(hex);\n        }\n\n        // rgb(a) notation\n        if (str.indexOf('rgb') >= 0) {\n            return Color.fromRgbaString(str);\n        }\n\n        throw new Error(`Invalid color string: '${str}'`);\n    }\n\n    // See https://drafts.csswg.org/css-color/#hex-notation\n    static parseHex(input: string): [number, number, number, number] | undefined {\n        input = input.replace(/ /g, '').slice(1);\n        let parts: any;\n\n        switch (input.length) {\n            case 6:\n            case 8:\n                parts = [];\n                for (let i = 0; i < input.length; i += 2) {\n                    parts.push(parseInt(`${input[i]}${input[i + 1]}`, 16));\n                }\n                break;\n            case 3:\n            case 4:\n                parts = input.split('').map(p => parseInt(p, 16)).map(p => p + p * 16);\n                break;\n        }\n\n        if (parts.length >= 3) {\n            if (parts.every((p: number) => p >= 0)) {\n                if (parts.length === 3) {\n                    parts.push(255);\n                }\n                return parts;\n            }\n        }\n    }\n\n    static fromHexString(str: string): Color {\n        const values = Color.parseHex(str);\n        if (values) {\n            const [r, g, b, a] = values;\n            return new Color(r / 255, g / 255, b / 255, a / 255);\n        }\n\n        throw new Error(`Malformed hexadecimal color string: '${str}'`);\n    }\n\n    private static stringToRgba(str: string): number[] | undefined {\n        // Find positions of opening and closing parentheses.\n        let [po, pc] = [NaN, NaN];\n        for (let i = 0; i < str.length; i++) {\n            const c = str[i];\n            if (!po && c === '(') {\n                po = i;\n            } else if (c === ')') {\n                pc = i;\n                break;\n            }\n        }\n\n        const contents = po && pc && str.substring(po + 1, pc);\n        if (!contents) {\n            return;\n        }\n\n        const parts = contents.split(',');\n        const rgba: number[] = [];\n\n        for (let i = 0; i < parts.length; i++) {\n            const part = parts[i];\n            let value = parseFloat(part);\n            if (isNaN(value)) {\n                return;\n            }\n            if (part.indexOf('%') >= 0) { // percentage r, g, or b value\n                value = Math.max(0, Math.min(100, value));\n                value /= 100;\n            } else {\n                if (i === 3) { // alpha component\n                    value = Math.max(0, Math.min(1, value));\n                } else { // absolute r, g, or b value\n                    value = Math.max(0, Math.min(255, value));\n                    value /= 255;\n                }\n            }\n            rgba.push(value);\n        }\n\n        return rgba;\n    }\n\n    static fromRgbaString(str: string): Color {\n        const rgba = Color.stringToRgba(str);\n\n        if (rgba) {\n            if (rgba.length === 3) {\n                return new Color(rgba[0], rgba[1], rgba[2]);\n            } else if (rgba.length === 4) {\n                return new Color(rgba[0], rgba[1], rgba[2], rgba[3]);\n            }\n        }\n\n        throw new Error(`Malformed rgb/rgba color string: '${str}'`);\n    }\n\n    static fromArray(arr: [number, number, number] | [number, number, number, number]): Color {\n        if (arr.length === 4) {\n            return new Color(arr[0], arr[1], arr[2], arr[3]);\n        }\n        if (arr.length === 3) {\n            return new Color(arr[0], arr[1], arr[2]);\n        }\n        throw new Error('The given array should contain 3 or 4 color components (numbers).');\n    }\n\n    static fromHSB(h: number, s: number, b: number, alpha = 1): Color {\n        const rgb = Color.HSBtoRGB(h, s, b);\n        return new Color(rgb[0], rgb[1], rgb[2], alpha);\n    }\n\n    private static padHex(str: string): string {\n        // Can't use `padStart(2, '0')` here because of IE.\n        return str.length === 1 ? '0' + str : str;\n    }\n\n    toHexString(): string {\n        let hex = '#'\n            + Color.padHex(Math.round(this.r * 255).toString(16))\n            + Color.padHex(Math.round(this.g * 255).toString(16))\n            + Color.padHex(Math.round(this.b * 255).toString(16));\n\n        if (this.a < 1) {\n            hex += Color.padHex(Math.round(this.a * 255).toString(16));\n        }\n\n        return hex;\n    }\n\n    toRgbaString(fractionDigits = 3): string {\n        const components: number[] = [\n            Math.round(this.r * 255),\n            Math.round(this.g * 255),\n            Math.round(this.b * 255)\n        ];\n\n        const k = Math.pow(10, fractionDigits);\n\n        if (this.a !== 1) {\n            components.push(Math.round(this.a * k) / k);\n            return `rgba(${components.join(', ')})`;\n        }\n\n        return `rgb(${components.join(', ')})`;\n    }\n\n    toString(): string {\n        if (this.a === 1) {\n            return this.toHexString();\n        }\n        return this.toRgbaString();\n    }\n\n    toHSB(): [number, number, number] {\n        return Color.RGBtoHSB(this.r, this.g, this.b);\n    }\n\n    /**\n     * Converts the given RGB triple to an array of HSB (HSV) components.\n     * The hue component will be `NaN` for achromatic colors.\n     */\n    static RGBtoHSB(r: number, g: number, b: number): [number, number, number] {\n        const min = Math.min(r, g, b);\n        const max = Math.max(r, g, b);\n\n        const S = max !== 0 ? (max - min) / max : 0;\n        let H = NaN;\n\n        // min == max, means all components are the same\n        // and the color is a shade of gray with no hue (H is NaN)\n        if (min !== max) {\n            const delta = max - min;\n            const rc = (max - r) / delta;\n            const gc = (max - g) / delta;\n            const bc = (max - b) / delta;\n            if (r === max) {\n                H = bc - gc;\n            } else if (g === max) {\n                H = 2.0 + rc - bc;\n            } else {\n                H = 4.0 + gc - rc;\n            }\n            H /= 6.0;\n            if (H < 0) {\n                H = H + 1.0;\n            }\n        }\n\n        return [H * 360, S, max];\n    }\n\n    /**\n     * Converts the given HSB (HSV) triple to an array of RGB components.\n     */\n    static HSBtoRGB(H: number, S: number, B: number): [number, number, number] {\n        if (isNaN(H)) {\n            H = 0;\n        }\n        H = (((H % 360) + 360) % 360) / 360; // normalize hue to [0, 360] interval, then scale to [0, 1]\n\n        let r = 0;\n        let g = 0;\n        let b = 0;\n\n        if (S === 0) {\n            r = g = b = B;\n        } else {\n            const h = (H - Math.floor(H)) * 6;\n            const f = h - Math.floor(h);\n            const p = B * (1 - S);\n            const q = B * (1 - S * f);\n            const t = B * (1 - (S * (1 - f)));\n            switch (h >> 0) { // discard the floating point part of the number\n                case 0:\n                    r = B;\n                    g = t;\n                    b = p;\n                    break;\n                case 1:\n                    r = q;\n                    g = B;\n                    b = p;\n                    break;\n                case 2:\n                    r = p;\n                    g = B;\n                    b = t;\n                    break;\n                case 3:\n                    r = p;\n                    g = q;\n                    b = B;\n                    break;\n                case 4:\n                    r = t;\n                    g = p;\n                    b = B;\n                    break;\n                case 5:\n                    r = B;\n                    g = p;\n                    b = q;\n                    break;\n            }\n        }\n        return [r, g, b];\n    }\n\n    private derive(hueShift: number, saturationFactor: number, brightnessFactor: number, opacityFactor: number): Color {\n        const hsb = Color.RGBtoHSB(this.r, this.g, this.b);\n\n        let b = hsb[2];\n        if (b == 0 && brightnessFactor > 1.0) {\n            b = 0.05;\n        }\n\n        const h = (((hsb[0] + hueShift) % 360) + 360) % 360;\n        const s = Math.max(Math.min(hsb[1] * saturationFactor, 1.0), 0.0);\n        b = Math.max(Math.min(b * brightnessFactor, 1.0), 0.0);\n        const a = Math.max(Math.min(this.a * opacityFactor, 1.0), 0.0);\n        const rgba = Color.HSBtoRGB(h, s, b);\n        rgba.push(a);\n        return Color.fromArray(rgba);\n    }\n\n    brighter(): Color {\n        return this.derive(0, 1.0, 1.0 / 0.7, 1.0);\n    }\n\n    darker(): Color {\n        return this.derive(0, 1.0, 0.7, 1.0);\n    }\n\n    /**\n     * CSS Color Module Level 4:\n     * https://drafts.csswg.org/css-color/#named-colors\n     */\n    private static nameToHex: { [key: string]: string } = Object.freeze({\n        aliceblue: '#F0F8FF',\n        antiquewhite: '#FAEBD7',\n        aqua: '#00FFFF',\n        aquamarine: '#7FFFD4',\n        azure: '#F0FFFF',\n        beige: '#F5F5DC',\n        bisque: '#FFE4C4',\n        black: '#000000',\n        blanchedalmond: '#FFEBCD',\n        blue: '#0000FF',\n        blueviolet: '#8A2BE2',\n        brown: '#A52A2A',\n        burlywood: '#DEB887',\n        cadetblue: '#5F9EA0',\n        chartreuse: '#7FFF00',\n        chocolate: '#D2691E',\n        coral: '#FF7F50',\n        cornflowerblue: '#6495ED',\n        cornsilk: '#FFF8DC',\n        crimson: '#DC143C',\n        cyan: '#00FFFF',\n        darkblue: '#00008B',\n        darkcyan: '#008B8B',\n        darkgoldenrod: '#B8860B',\n        darkgray: '#A9A9A9',\n        darkgreen: '#006400',\n        darkgrey: '#A9A9A9',\n        darkkhaki: '#BDB76B',\n        darkmagenta: '#8B008B',\n        darkolivegreen: '#556B2F',\n        darkorange: '#FF8C00',\n        darkorchid: '#9932CC',\n        darkred: '#8B0000',\n        darksalmon: '#E9967A',\n        darkseagreen: '#8FBC8F',\n        darkslateblue: '#483D8B',\n        darkslategray: '#2F4F4F',\n        darkslategrey: '#2F4F4F',\n        darkturquoise: '#00CED1',\n        darkviolet: '#9400D3',\n        deeppink: '#FF1493',\n        deepskyblue: '#00BFFF',\n        dimgray: '#696969',\n        dimgrey: '#696969',\n        dodgerblue: '#1E90FF',\n        firebrick: '#B22222',\n        floralwhite: '#FFFAF0',\n        forestgreen: '#228B22',\n        fuchsia: '#FF00FF',\n        gainsboro: '#DCDCDC',\n        ghostwhite: '#F8F8FF',\n        gold: '#FFD700',\n        goldenrod: '#DAA520',\n        gray: '#808080',\n        green: '#008000',\n        greenyellow: '#ADFF2F',\n        grey: '#808080',\n        honeydew: '#F0FFF0',\n        hotpink: '#FF69B4',\n        indianred: '#CD5C5C',\n        indigo: '#4B0082',\n        ivory: '#FFFFF0',\n        khaki: '#F0E68C',\n        lavender: '#E6E6FA',\n        lavenderblush: '#FFF0F5',\n        lawngreen: '#7CFC00',\n        lemonchiffon: '#FFFACD',\n        lightblue: '#ADD8E6',\n        lightcoral: '#F08080',\n        lightcyan: '#E0FFFF',\n        lightgoldenrodyellow: '#FAFAD2',\n        lightgray: '#D3D3D3',\n        lightgreen: '#90EE90',\n        lightgrey: '#D3D3D3',\n        lightpink: '#FFB6C1',\n        lightsalmon: '#FFA07A',\n        lightseagreen: '#20B2AA',\n        lightskyblue: '#87CEFA',\n        lightslategray: '#778899',\n        lightslategrey: '#778899',\n        lightsteelblue: '#B0C4DE',\n        lightyellow: '#FFFFE0',\n        lime: '#00FF00',\n        limegreen: '#32CD32',\n        linen: '#FAF0E6',\n        magenta: '#FF00FF',\n        maroon: '#800000',\n        mediumaquamarine: '#66CDAA',\n        mediumblue: '#0000CD',\n        mediumorchid: '#BA55D3',\n        mediumpurple: '#9370DB',\n        mediumseagreen: '#3CB371',\n        mediumslateblue: '#7B68EE',\n        mediumspringgreen: '#00FA9A',\n        mediumturquoise: '#48D1CC',\n        mediumvioletred: '#C71585',\n        midnightblue: '#191970',\n        mintcream: '#F5FFFA',\n        mistyrose: '#FFE4E1',\n        moccasin: '#FFE4B5',\n        navajowhite: '#FFDEAD',\n        navy: '#000080',\n        oldlace: '#FDF5E6',\n        olive: '#808000',\n        olivedrab: '#6B8E23',\n        orange: '#FFA500',\n        orangered: '#FF4500',\n        orchid: '#DA70D6',\n        palegoldenrod: '#EEE8AA',\n        palegreen: '#98FB98',\n        paleturquoise: '#AFEEEE',\n        palevioletred: '#DB7093',\n        papayawhip: '#FFEFD5',\n        peachpuff: '#FFDAB9',\n        peru: '#CD853F',\n        pink: '#FFC0CB',\n        plum: '#DDA0DD',\n        powderblue: '#B0E0E6',\n        purple: '#800080',\n        rebeccapurple: '#663399',\n        red: '#FF0000',\n        rosybrown: '#BC8F8F',\n        royalblue: '#4169E1',\n        saddlebrown: '#8B4513',\n        salmon: '#FA8072',\n        sandybrown: '#F4A460',\n        seagreen: '#2E8B57',\n        seashell: '#FFF5EE',\n        sienna: '#A0522D',\n        silver: '#C0C0C0',\n        skyblue: '#87CEEB',\n        slateblue: '#6A5ACD',\n        slategray: '#708090',\n        slategrey: '#708090',\n        snow: '#FFFAFA',\n        springgreen: '#00FF7F',\n        steelblue: '#4682B4',\n        tan: '#D2B48C',\n        teal: '#008080',\n        thistle: '#D8BFD8',\n        tomato: '#FF6347',\n        turquoise: '#40E0D0',\n        violet: '#EE82EE',\n        wheat: '#F5DEB3',\n        white: '#FFFFFF',\n        whitesmoke: '#F5F5F5',\n        yellow: '#FFFF00',\n        yellowgreen: '#9ACD32'\n    });\n}","// Based on https://stackoverflow.com/a/14991797\n// This will parse a delimited string into an array of arrays.\nexport function stringToArray(strData: string, delimiter = ','): string[][] {\n    const data: any[][] = [];\n    const isNewline = (char: string) => char === '\\r' || char === '\\n';\n\n    let insideQuotedField = false;\n\n    if (strData === '') { return [['']]; }\n\n    // iterate over each character, keep track of current row and column (of the returned array)\n    for (let row = 0, column = 0, position = 0; position < strData.length; position++) {\n        const previousChar = strData[position - 1];\n        const currentChar = strData[position];\n        const nextChar = strData[position + 1];\n        const ensureDataExists = () => {\n            if (!data[row]) {\n                // create row if it doesn't exist\n                data[row] = [];\n            }\n\n            if (!data[row][column]) {\n                // create column if it doesn't exist\n                data[row][column] = '';\n            }\n        };\n\n        ensureDataExists();\n\n        if (currentChar === '\"') {\n            if (insideQuotedField) {\n                if (nextChar === '\"') {\n                    // unescape double quote\n                    data[row][column] += '\"';\n                    position++;\n                } else {\n                    // exit quoted field\n                    insideQuotedField = false;\n                }\n\n                continue;\n            } else if (previousChar === undefined || previousChar === delimiter || isNewline(previousChar)) {\n                // enter quoted field\n                insideQuotedField = true;\n                continue;\n            }\n        }\n\n        if (!insideQuotedField) {\n            if (currentChar === delimiter) {\n                // move to next column\n                column++;\n                ensureDataExists();\n\n                continue;\n            } else if (isNewline(currentChar)) {\n                // move to next row\n                column = 0;\n                row++;\n                ensureDataExists();\n\n                if (currentChar === '\\r' && nextChar === '\\n') {\n                    // skip over second newline character if it exists\n                    position++;\n                }\n\n                continue;\n            }\n        }\n\n        // add current character to current column\n        data[row][column] += currentChar;\n    }\n\n    return data;\n}\n","/**\n * These variables are lazy loaded, as otherwise they try and get initialised when we are loading\n * unit tests and we don't have references to window or document in the unit tests\n * from http://stackoverflow.com/questions/9847580/how-to-detect-safari-chrome-ie-firefox-and-opera-browser\n */\nlet isSafari: boolean;\nlet isIE: boolean;\nlet isEdge: boolean;\nlet isChrome: boolean;\nlet isFirefox: boolean;\nlet isIOS: boolean;\nlet invisibleScrollbar: boolean;\nlet browserScrollbarWidth: number;\n\nfunction isBrowserIE(): boolean {\n    if (isIE === undefined) {\n        isIE = /*@cc_on!@*/false || !!(document as any).documentMode; // At least IE6\n    }\n\n    return isIE;\n}\n\nexport function isBrowserEdge(): boolean {\n    if (isEdge === undefined) {\n        isEdge = !isBrowserIE() && !!(window as any).StyleMedia;\n    }\n\n    return isEdge;\n}\n\nexport function isBrowserSafari(): boolean {\n    if (isSafari === undefined) {\n        // taken from https://stackoverflow.com/a/23522755/1388233\n        isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n    }\n\n    return isSafari;\n}\n\nexport function isBrowserChrome(): boolean {\n    if (isChrome === undefined) {\n        const win = window as any;\n        isChrome = (!!win.chrome && (!!win.chrome.webstore || !!win.chrome.runtime)) ||\n            (/Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));\n    }\n\n    return isChrome;\n}\n\nexport function isBrowserFirefox(): boolean {\n    if (isFirefox === undefined) {\n        const win = window as any;\n\n        isFirefox = typeof win.InstallTrigger !== 'undefined';\n    }\n\n    return isFirefox;\n}\n\nexport function isIOSUserAgent(): boolean {\n    if (isIOS === undefined) {\n        // taken from https://stackoverflow.com/a/58064481/1388233\n        isIOS = (/iPad|iPhone|iPod/.test(navigator.platform) ||\n            // eslint-disable-next-line\n            (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1)) &&\n            // @ts-ignore\n            !window.MSStream;\n    }\n\n    return isIOS;\n}\n\nexport function getTabIndex(el: HTMLElement | null): string | null {\n    if (!el) { return null; }\n\n    const numberTabIndex = el.tabIndex;\n    const tabIndex = el.getAttribute('tabIndex');\n\n    if (numberTabIndex === -1 && (tabIndex === null || (tabIndex === '' && !isBrowserFirefox()))) {\n        return null;\n    }\n\n    return numberTabIndex.toString();\n}\n\nexport function getMaxDivHeight(): number {\n    if (!document.body) { return -1; }\n\n    let res = 1000000;\n    // FF reports the height back but still renders blank after ~6M px\n    const testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? 6000000 : 1000000000;\n    const div = document.createElement('div');\n    document.body.appendChild(div);\n\n    while (true) {\n        const test = res * 2;\n        div.style.height = test + 'px';\n\n        if (test > testUpTo || div.clientHeight !== test) {\n            break;\n        } else {\n            res = test;\n        }\n    }\n\n    document.body.removeChild(div);\n\n    return res;\n}\n\nexport function getScrollbarWidth(): number | null {\n    if (browserScrollbarWidth == null) {\n        initScrollbarWidthAndVisibility();\n    }\n    return browserScrollbarWidth;\n}\n\nfunction initScrollbarWidthAndVisibility(): void {\n\n    const body = document.body;\n    const div = document.createElement('div');\n\n    div.style.width = div.style.height = '100px';\n    div.style.opacity = '0';\n    div.style.overflow = 'scroll';\n    (div.style as any).msOverflowStyle = 'scrollbar'; // needed for WinJS apps\n    div.style.position = 'absolute';\n\n    body.appendChild(div);\n\n    let width: number | null = div.offsetWidth - div.clientWidth;\n\n    // if width is 0 and client width is 0, means the DOM isn't ready\n    if (width === 0 && div.clientWidth === 0) { width = null; }\n\n    // remove div\n    if (div.parentNode) {\n        div.parentNode.removeChild(div);\n    }\n\n    if (width != null) {\n        browserScrollbarWidth = width;\n        invisibleScrollbar = width === 0;\n    }\n}\n\nexport function isInvisibleScrollbar(): boolean {\n    if (invisibleScrollbar == null) {\n        initScrollbarWidthAndVisibility();\n    }\n    return invisibleScrollbar;\n}\n\n/** @deprecated */\nexport function hasOverflowScrolling(): boolean {\n    const prefixes: string[] = ['webkit', 'moz', 'o', 'ms'];\n    const div: HTMLElement = document.createElement('div');\n    const body: HTMLBodyElement = document.getElementsByTagName('body')[0];\n    let found: boolean = false;\n    let p: string;\n\n    body.appendChild(div);\n    div.setAttribute('style', prefixes.map(prefix => `-${prefix}-overflow-scrolling: touch`).concat('overflow-scrolling: touch').join(';'));\n\n    const computedStyle: CSSStyleDeclaration = window.getComputedStyle(div);\n\n    if ((computedStyle as any).overflowScrolling === 'touch') {\n        found = true;\n    }\n\n    if (!found) {\n        for (p of prefixes) {\n            if ((computedStyle as any)[`${p}OverflowScrolling`] === 'touch') {\n                found = true;\n                break;\n            }\n        }\n    }\n\n    if (div.parentNode) {\n        div.parentNode.removeChild(div);\n    }\n\n    return found;\n}\n\n/**\n * Gets the document body width\n * from: http://stackoverflow.com/questions/1038727/how-to-get-browser-width-using-javascript-code\n * @returns {number}\n */\nexport function getBodyWidth(): number {\n    if (document.body) {\n        return document.body.clientWidth;\n    }\n\n    if (window.innerHeight) {\n        return window.innerWidth;\n    }\n\n    if (document.documentElement && document.documentElement.clientWidth) {\n        return document.documentElement.clientWidth;\n    }\n\n    return -1;\n}\n\n/**\n * Gets the body height\n * from: http://stackoverflow.com/questions/1038727/how-to-get-browser-width-using-javascript-code\n * @returns {number}\n */\nexport function getBodyHeight(): number {\n    if (document.body) {\n        return document.body.clientHeight;\n    }\n\n    if (window.innerHeight) {\n        return window.innerHeight;\n    }\n\n    if (document.documentElement && document.documentElement.clientHeight) {\n        return document.documentElement.clientHeight;\n    }\n\n    return -1;\n}\n","import { isBrowserChrome, isBrowserSafari } from './browser';\nimport { exists } from './generic';\nimport { isNonNullObject } from './object';\nimport { hyphenToCamelCase } from './string';\nimport { Constants } from '../constants/constants';\n\nlet rtlNegativeScroll: boolean;\n\n/**\n * This method adds a class to an element and remove that class from all siblings.\n * Useful for toggling state.\n * @param {HTMLElement} element The element to receive the class\n * @param {string} elementClass The class to be assigned to the element\n * @param {boolean} otherElementClass The class to be assigned to siblings of the element, but not the element itself\n */\nexport function radioCssClass(element: HTMLElement, elementClass: string | null, otherElementClass?: string | null) {\n    const parent = element.parentElement;\n    let sibling = parent && parent.firstChild as HTMLElement;\n\n    while (sibling) {\n        if (elementClass) {\n            sibling.classList.toggle(elementClass, sibling === element);\n        }\n        if (otherElementClass) {\n            sibling.classList.toggle(otherElementClass, sibling !== element);\n        }\n        sibling = sibling.nextSibling as HTMLElement;\n    }\n}\n\nexport function isFocusableFormField(element: HTMLElement): boolean {\n    const matches: (str: string) => boolean =\n        Element.prototype.matches || (Element as any).prototype.msMatchesSelector;\n\n    const isFocusable = matches.call(element, Constants.INPUT_SELECTOR);\n    const isNotFocusable = matches.call(element, Constants.FOCUSABLE_EXCLUDE);\n    const isElementVisible = isVisible(element);\n\n    const focusable = isFocusable && !isNotFocusable && isElementVisible;\n\n    return focusable;\n}\n\nexport function setDisplayed(element: HTMLElement, displayed: boolean) {\n    element.classList.toggle('ag-hidden', !displayed);\n}\n\nexport function setVisible(element: HTMLElement, visible: boolean) {\n    element.classList.toggle('ag-invisible', !visible);\n}\n\nexport function setDisabled(element: HTMLElement, disabled: boolean) {\n    const attributeName = 'disabled';\n    const addOrRemoveDisabledAttribute = disabled ?\n        (e: HTMLElement) => e.setAttribute(attributeName, '') :\n        (e: HTMLElement) => e.removeAttribute(attributeName);\n\n    addOrRemoveDisabledAttribute(element);\n\n    nodeListForEach(element.querySelectorAll('input'), input => addOrRemoveDisabledAttribute(input));\n}\n\nexport function isElementChildOfClass(element: HTMLElement | null, cls: string, maxNest?: number): boolean {\n    let counter = 0;\n\n    while (element) {\n        if (element.classList.contains(cls)) {\n            return true;\n        }\n\n        element = element.parentElement;\n\n        if (maxNest && ++counter > maxNest) { break; }\n    }\n\n    return false;\n}\n\n// returns back sizes as doubles instead of strings. similar to\n// getBoundingClientRect, however getBoundingClientRect does not:\n// a) work with fractions (eg browser is zooming)\n// b) has CSS transitions applied (eg CSS scale, browser zoom), which we don't want, we want the un-transitioned values\nexport function getElementSize(el: HTMLElement): {\n    height: number,\n    width: number,\n    paddingTop: number,\n    paddingRight: number,\n    paddingBottom: number,\n    paddingLeft: number,\n    marginTop: number,\n    marginRight: number,\n    marginBottom: number,\n    marginLeft: number,\n    boxSizing: string;\n} {\n    const {\n        height,\n        width,\n        paddingTop,\n        paddingRight,\n        paddingBottom,\n        paddingLeft,\n        marginTop,\n        marginRight,\n        marginBottom,\n        marginLeft,\n        boxSizing\n    } = window.getComputedStyle(el);\n\n    return {\n        height: parseFloat(height!),\n        width: parseFloat(width!),\n        paddingTop: parseFloat(paddingTop!),\n        paddingRight: parseFloat(paddingRight!),\n        paddingBottom: parseFloat(paddingBottom!),\n        paddingLeft: parseFloat(paddingLeft!),\n        marginTop: parseFloat(marginTop!),\n        marginRight: parseFloat(marginRight!),\n        marginBottom: parseFloat(marginBottom!),\n        marginLeft: parseFloat(marginLeft!),\n        boxSizing\n    };\n}\n\nexport function getInnerHeight(el: HTMLElement): number {\n    const size = getElementSize(el);\n\n    if (size.boxSizing === 'border-box') {\n        return size.height - size.paddingTop - size.paddingBottom;\n    }\n\n    return size.height;\n}\n\nexport function getInnerWidth(el: HTMLElement): number {\n    const size = getElementSize(el);\n\n    if (size.boxSizing === 'border-box') {\n        return size.width - size.paddingLeft - size.paddingRight;\n    }\n\n    return size.width;\n}\n\nexport function getAbsoluteHeight(el: HTMLElement): number {\n    const size = getElementSize(el);\n    const marginRight = size.marginBottom + size.marginTop;\n\n    return Math.ceil(el.offsetHeight + marginRight);\n}\n\nexport function getAbsoluteWidth(el: HTMLElement): number {\n    const size = getElementSize(el);\n    const marginWidth = size.marginLeft + size.marginRight;\n\n    return Math.ceil(el.offsetWidth + marginWidth);\n}\n\nexport function isRtlNegativeScroll(): boolean {\n    if (typeof rtlNegativeScroll === \"boolean\") {\n        return rtlNegativeScroll;\n    }\n\n    const template = document.createElement('div');\n    template.style.direction = 'rtl';\n    template.style.width = '1px';\n    template.style.height = '1px';\n    template.style.position = 'fixed';\n    template.style.top = '0px';\n    template.style.overflow = 'hidden';\n    template.dir = 'rtl';\n    template.innerHTML = /* html */\n        `<div style=\"width: 2px\">\n            <span style=\"display: inline-block; width: 1px\"></span>\n            <span style=\"display: inline-block; width: 1px\"></span>\n        </div>`;\n\n    document.body.appendChild(template);\n\n    template.scrollLeft = 1;\n    rtlNegativeScroll = Math.floor(template.scrollLeft) === 0;\n    document.body.removeChild(template);\n\n    return rtlNegativeScroll;\n}\n\nexport function getScrollLeft(element: HTMLElement, rtl: boolean): number {\n    let scrollLeft = element.scrollLeft;\n\n    if (rtl) {\n        // Absolute value - for FF that reports RTL scrolls in negative numbers\n        scrollLeft = Math.abs(scrollLeft);\n\n        if (isBrowserChrome() && !isRtlNegativeScroll()) {\n            scrollLeft = element.scrollWidth - element.clientWidth - scrollLeft;\n        }\n    }\n\n    return scrollLeft;\n}\n\nexport function setScrollLeft(element: HTMLElement, value: number, rtl: boolean): void {\n    if (rtl) {\n        // Chrome and Safari when doing RTL have the END position of the scroll as zero, not the start\n        if (isRtlNegativeScroll()) {\n            value *= -1;\n        } else if (isBrowserSafari() || isBrowserChrome()) {\n            value = element.scrollWidth - element.clientWidth - value;\n        }\n    }\n    element.scrollLeft = value;\n}\n\nexport function clearElement(el: HTMLElement): void {\n    while (el && el.firstChild) { el.removeChild(el.firstChild); }\n}\n\n/** @deprecated */\nexport function removeElement(parent: HTMLElement, cssSelector: string) {\n    removeFromParent(parent.querySelector(cssSelector));\n}\n\nexport function removeFromParent(node: Element | null) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n\nexport function isVisible(element: HTMLElement) {\n    return element.offsetParent !== null;\n}\n\n/**\n * Loads the template and returns it as an element. makes up for no simple way in\n * the dom api to load html directly, eg we cannot do this: document.createElement(template)\n * @param {string} template\n * @returns {HTMLElement}\n */\nexport function loadTemplate(template: string): HTMLElement {\n    // we try the DOMParser first, as SalesForce doesn't like using innerHTML on a div\n    if (DOMParser !== null) {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(template, \"text/html\");\n        return doc.body.firstChild as HTMLElement;\n    }\n\n    const tempDiv = document.createElement('div');\n    tempDiv.innerHTML = (template || '').trim();\n    return tempDiv.firstChild as HTMLElement;\n}\n\nexport function appendHtml(eContainer: HTMLElement, htmlTemplate: string) {\n    if (eContainer.lastChild) {\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML\n        // we put the items at the start, so new items appear underneath old items,\n        // so when expanding/collapsing groups, the new rows don't go on top of the\n        // rows below that are moving our of the way\n        eContainer.insertAdjacentHTML('afterbegin', htmlTemplate);\n    } else {\n        eContainer.innerHTML = htmlTemplate;\n    }\n}\n\n/** @deprecated */\nexport function getElementAttribute(element: any, attributeName: string): string | null {\n    if (element.attributes && element.attributes[attributeName]) {\n        const attribute = element.attributes[attributeName];\n\n        return attribute.value;\n    }\n\n    return null;\n}\n\nexport function offsetHeight(element: HTMLElement) {\n    return element && element.clientHeight ? element.clientHeight : 0;\n}\n\nexport function offsetWidth(element: HTMLElement) {\n    return element && element.clientWidth ? element.clientWidth : 0;\n}\n\nexport function ensureDomOrder(eContainer: HTMLElement, eChild: HTMLElement, eChildBefore?: HTMLElement | null): void {\n    // if already in right order, do nothing\n    if (eChildBefore && eChildBefore.nextSibling === eChild) {\n        return;\n    }\n\n    if (eChildBefore) {\n        if (eChildBefore.nextSibling) {\n            // insert between the eRowBefore and the row after it\n            eContainer.insertBefore(eChild, eChildBefore.nextSibling);\n        } else {\n            // if nextSibling is missing, means other row is at end, so just append new row at the end\n            eContainer.appendChild(eChild);\n        }\n    } else {\n        // otherwise put at start\n        if (eContainer.firstChild && eContainer.firstChild !== eChild) {\n            // insert it at the first location\n            eContainer.insertAdjacentElement('afterbegin', eChild);\n        }\n    }\n}\n\nexport function setDomChildOrder(eContainer: HTMLElement, orderedChildren: (HTMLElement | null)[]): void {\n    for (let i = 0; i < orderedChildren.length; i++) {\n        const correctCellAtIndex = orderedChildren[i];\n        const actualCellAtIndex = eContainer.children[i];\n\n        if (actualCellAtIndex !== correctCellAtIndex) {\n            eContainer.insertBefore(correctCellAtIndex!, actualCellAtIndex);\n        }\n    }\n}\n\nexport function insertWithDomOrder(\n    eContainer: HTMLElement,\n    eToInsert: HTMLElement,\n    eChildBefore: HTMLElement | null\n): void {\n    if (eChildBefore) {\n        // if previous element exists, just slot in after the previous element\n        eChildBefore.insertAdjacentElement('afterend', eToInsert);\n    } else {\n        if (eContainer.firstChild) {\n            // insert it at the first location\n            eContainer.insertAdjacentElement('afterbegin', eToInsert);\n        } else {\n            // otherwise eContainer is empty, so just append it\n            eContainer.appendChild(eToInsert);\n        }\n    }\n}\n\n/** @deprecated */\nexport function prependDC(parent: HTMLElement, documentFragment: DocumentFragment): void {\n    if (exists(parent.firstChild)) {\n        parent.insertBefore(documentFragment, parent.firstChild);\n    } else {\n        parent.appendChild(documentFragment);\n    }\n}\n\nexport function addStylesToElement(eElement: any, styles: any) {\n    if (!styles) { return; }\n\n    Object.keys(styles).forEach((key) => {\n        const keyCamelCase = hyphenToCamelCase(key);\n        if (keyCamelCase) {\n            eElement.style[keyCamelCase] = styles[key];\n        }\n    });\n}\n\nexport function isHorizontalScrollShowing(element: HTMLElement): boolean {\n    return element.clientWidth < element.scrollWidth;\n}\n\nexport function isVerticalScrollShowing(element: HTMLElement): boolean {\n    return element.clientHeight < element.scrollHeight;\n}\n\nexport function setElementWidth(element: HTMLElement, width: string | number) {\n    if (width === 'flex') {\n        element.style.removeProperty('width');\n        element.style.removeProperty('minWidth');\n        element.style.removeProperty('maxWidth');\n        element.style.flex = '1 1 auto';\n    } else {\n        setFixedWidth(element, width);\n    }\n}\n\nexport function setFixedWidth(element: HTMLElement, width: string | number) {\n    width = formatSize(width);\n    element.style.width = width.toString();\n    element.style.maxWidth = width.toString();\n    element.style.minWidth = width.toString();\n}\n\nexport function setElementHeight(element: HTMLElement, height: string | number) {\n    if (height === 'flex') {\n        element.style.removeProperty('height');\n        element.style.removeProperty('minHeight');\n        element.style.removeProperty('maxHeight');\n        element.style.flex = '1 1 auto';\n    } else {\n        setFixedHeight(element, height);\n    }\n}\n\nexport function setFixedHeight(element: HTMLElement, height: string | number) {\n    height = formatSize(height);\n    element.style.height = height.toString();\n    element.style.maxHeight = height.toString();\n    element.style.minHeight = height.toString();\n}\n\nexport function formatSize(size: number | string) {\n    if (typeof size === 'number') {\n        return `${size}px`;\n    }\n\n    return size;\n}\n\n/**\n * Returns true if it is a DOM node\n * taken from: http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object\n * @param {any} o\n * @return {boolean}\n */\nexport function isNode(o: any): boolean {\n    return (\n        typeof Node === 'function'\n            ? o instanceof Node\n            : o && typeof o === 'object' && typeof o.nodeType === 'number' && typeof o.nodeName === 'string'\n    );\n}\n\n//\n/**\n * Returns true if it is a DOM element\n * taken from: http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object\n * @param {any} o\n * @returns {boolean}\n */\nexport function isElement(o: any): boolean {\n    return (\n        typeof HTMLElement === 'function'\n            ? o instanceof HTMLElement //DOM2\n            : o && isNonNullObject(o) && o.nodeType === 1 && typeof o.nodeName === 'string'\n    );\n}\n\nexport function isNodeOrElement(o: any) {\n    return isNode(o) || isElement(o);\n}\n\n/**\n * Makes a copy of a node list into a list\n * @param {NodeList} nodeList\n * @returns {Node[]}\n */\nexport function copyNodeList(nodeList: NodeListOf<Node> | null): Node[] {\n    if (nodeList == null) { return []; }\n\n    const result: Node[] = [];\n\n    nodeListForEach(nodeList, node => result.push(node));\n\n    return result;\n}\n\nexport function iterateNamedNodeMap(map: NamedNodeMap, callback: (key: string, value: string) => void): void {\n    if (!map) { return; }\n\n    for (let i = 0; i < map.length; i++) {\n        const attr = map[i];\n        callback(attr.name, attr.value);\n    }\n}\n\n/** @deprecated */\nexport function setCheckboxState(eCheckbox: HTMLInputElement, state: any) {\n    if (typeof state === 'boolean') {\n        eCheckbox.checked = state;\n        eCheckbox.indeterminate = false;\n    } else {\n        // isNodeSelected returns back undefined if it's a group and the children\n        // are a mix of selected and unselected\n        eCheckbox.indeterminate = true;\n    }\n}\n\nexport function addOrRemoveAttribute(element: HTMLElement, name: string, value: any) {\n    if (value == null) {\n        element.removeAttribute(name);\n    } else {\n        element.setAttribute(name, value.toString());\n    }\n}\n\nexport function nodeListForEach<T extends Node>(nodeList: NodeListOf<T> | null, action: (value: T) => void): void {\n    if (nodeList == null) { return; }\n\n    for (let i = 0; i < nodeList.length; i++) {\n        action(nodeList[i]);\n    }\n}","import { ICellRendererComp } from '../rendering/cellRenderers/iCellRenderer';\nimport { AgPromise } from './promise';\nimport { loadTemplate } from './dom';\nimport { camelCaseToHyphen } from './string';\nimport { iterateObject } from './object';\n\n/** @deprecated */\nexport function getNameOfClass(theClass: any) {\n    const funcNameRegex = /function (.{1,})\\(/;\n    const funcAsString = theClass.toString();\n    const results = funcNameRegex.exec(funcAsString);\n\n    return results && results.length > 1 ? results[1] : \"\";\n}\n\nexport function findLineByLeastSquares(values: number[]) {\n    const len = values.length;\n    let maxDecimals = 0;\n\n    if (len <= 1) { return values; }\n\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        const splitExponent = value.toString().split('e-');\n\n        if (splitExponent.length > 1) {\n            maxDecimals = Math.max(maxDecimals, parseInt(splitExponent[1], 10));\n            continue;\n        }\n\n        if (Math.floor(value) === value) { continue; }\n\n        maxDecimals = Math.max(maxDecimals, value.toString().split('.')[1].length);\n    }\n\n    let sum_x = 0;\n    let sum_y = 0;\n    let sum_xy = 0;\n    let sum_xx = 0;\n\n    let y = 0;\n\n    for (let x = 0; x < len; x++) {\n        y = values[x];\n        sum_x += x;\n        sum_y += y;\n        sum_xx += x * x;\n        sum_xy += x * y;\n    }\n\n    const m = (len * sum_xy - sum_x * sum_y) / (len * sum_xx - sum_x * sum_x);\n    const b = (sum_y / len) - (m * sum_x) / len;\n\n    const result: number[] = [];\n\n    for (let x = 0; x <= len; x++) {\n        result.push(parseFloat((x * m + b).toFixed(maxDecimals)));\n    }\n\n    return result;\n}\n\n/**\n * Converts a CSS object into string\n * @param {Object} stylesToUse an object eg: {color: 'black', top: '25px'}\n * @return {string} A string like \"color: black; top: 25px;\" for html\n */\nexport function cssStyleObjectToMarkup(stylesToUse: any): string {\n    if (!stylesToUse) { return ''; }\n\n    const resParts: string[] = [];\n\n    iterateObject(stylesToUse, (styleKey: string, styleValue: string) => {\n        const styleKeyDashed = camelCaseToHyphen(styleKey);\n        resParts.push(`${styleKeyDashed}: ${styleValue};`);\n    });\n\n    return resParts.join(' ');\n}\n\n/**\n * Displays a message to the browser. this is useful in iPad, where you can't easily see the console.\n * so the javascript code can use this to give feedback. this is NOT intended to be called in production.\n * it is intended the AG Grid developer calls this to troubleshoot, but then takes out the calls before\n * checking in.\n * @param {string} msg\n */\nexport function message(msg: string): void {\n    const eMessage = document.createElement('div');\n    let eBox = document.querySelector('#__ag__message');\n\n    eMessage.innerHTML = msg;\n\n    if (!eBox) {\n        const template = `<div id=\"__ag__message\" style=\"display: inline-block; position: absolute; top: 0px; left: 0px; color: white; background-color: black; z-index: 20; padding: 2px; border: 1px solid darkred; height: 200px; overflow-y: auto;\"></div>`;\n\n        eBox = loadTemplate(template);\n\n        if (document.body) {\n            document.body.appendChild(eBox);\n        }\n    }\n\n    eBox.insertBefore(eMessage, eBox.children[0]);\n}\n\n/**\n * cell renderers are used in a few places. they bind to dom slightly differently to other cell renderes as they\n * can return back strings (instead of html elemnt) in the getGui() method. common code placed here to handle that.\n * @param {AgPromise<ICellRendererComp>} cellRendererPromise\n * @param {HTMLElement} eTarget\n */\nexport function bindCellRendererToHtmlElement(cellRendererPromise: AgPromise<ICellRendererComp>, eTarget: HTMLElement) {\n    cellRendererPromise.then(cellRenderer => {\n        const gui: HTMLElement | string = cellRenderer!.getGui();\n\n        if (gui != null) {\n            if (typeof gui === 'object') {\n                eTarget.appendChild(gui);\n            } else {\n                eTarget.innerHTML = gui;\n            }\n        }\n    });\n}\n","import { Column } from '../entities/column';\n\nexport type ColumnSortState = 'ascending' | 'descending' | 'none';\n\n// ARIA HELPER FUNCTIONS\nfunction setAriaAttribute(element: HTMLElement, attribute: string, value: number | boolean | string): void {\n    element.setAttribute(ariaAttributeName(attribute), value.toString());\n}\n\nfunction removeAriaAttribute(element: HTMLElement, attribute: string): void {\n    element.removeAttribute(ariaAttributeName(attribute));\n}\n\nfunction ariaAttributeName(attribute: string) {\n    return `aria-${attribute}`;\n}\n\nexport function setAriaRole(element: HTMLElement, role?: string | null) {\n    if (role) {\n        element.setAttribute('role', role);\n    } else {\n        element.removeAttribute('role');\n    }\n}\n\nexport function getAriaSortState(column: Column): ColumnSortState {\n    let sort: ColumnSortState;\n\n    if (column.isSortAscending()) {\n        sort = 'ascending';\n    } else if (column.isSortDescending()) {\n        sort = 'descending';\n    } else {\n        sort = 'none';\n    }\n\n    return sort;\n}\n\n// ARIA ATTRIBUTE GETTERS\nexport function getAriaLevel(element: HTMLElement): number {\n    return parseInt(element.getAttribute('aria-level')!, 10);\n}\n\nexport function getAriaPosInSet(element: HTMLElement): number {\n    return parseInt(element.getAttribute('aria-posinset')!, 10);\n}\n\nexport function getAriaDescribedBy(element: HTMLElement): string {\n    return element.getAttribute('aria-describedby') || '';\n}\n\n// ARIA ATTRIBUTE SETTERS\nexport function setAriaLabel(element: HTMLElement, label?: string): void {\n    const key = 'label';\n    if (label) {\n        setAriaAttribute(element, key, label);\n    } else {\n        removeAriaAttribute(element, key);\n    }\n}\n\nexport function setAriaLabelledBy(element: HTMLElement, labelledBy: string): void {\n    const key = 'labelledby';\n    if (labelledBy) {\n        setAriaAttribute(element, key, labelledBy);\n    } else {\n        removeAriaAttribute(element, key);\n    }\n}\n\nexport function setAriaDescription(element: HTMLElement, description?: string) {\n    const key = 'description';\n\n    if (description) {\n        setAriaAttribute(element, key, description);\n    } else {\n        removeAriaAttribute(element, key);\n    }\n}\n\nexport function setAriaDescribedBy(element: HTMLElement, describedby: string | undefined): void {\n    const key = 'describedby';\n    if (describedby) {\n        setAriaAttribute(element, key, describedby);\n    } else {\n        removeAriaAttribute(element, key);\n    }\n}\n\nexport function setAriaLevel(element: HTMLElement, level: number): void {\n    setAriaAttribute(element, 'level', level);\n}\n\nexport function setAriaDisabled(element: HTMLElement, disabled: boolean): void {\n    setAriaAttribute(element, 'disabled', disabled);\n}\n\nexport function setAriaExpanded(element: HTMLElement, expanded: boolean): void {\n    setAriaAttribute(element, 'expanded', expanded);\n}\n\nexport function removeAriaExpanded(element: HTMLElement): void {\n    removeAriaAttribute(element, 'expanded');\n}\n\nexport function setAriaSetSize(element: HTMLElement, setsize: number): void {\n    setAriaAttribute(element, 'setsize', setsize);\n}\n\nexport function setAriaPosInSet(element: HTMLElement, position: number): void {\n    setAriaAttribute(element, 'posinset', position);\n}\n\nexport function setAriaMultiSelectable(element: HTMLElement, multiSelectable: boolean): void {\n    setAriaAttribute(element, 'multiselectable', multiSelectable);\n}\n\nexport function setAriaRowCount(element: HTMLElement, rowCount: number): void {\n    setAriaAttribute(element, 'rowcount', rowCount);\n}\n\nexport function setAriaRowIndex(element: HTMLElement, rowIndex: number): void {\n    setAriaAttribute(element, 'rowindex', rowIndex);\n}\n\nexport function setAriaColCount(element: HTMLElement, colCount: number): void {\n    setAriaAttribute(element, 'colcount', colCount);\n}\n\nexport function setAriaColIndex(element: HTMLElement, colIndex: number): void {\n    setAriaAttribute(element, 'colindex', colIndex);\n}\n\nexport function setAriaColSpan(element: HTMLElement, colSpan: number): void {\n    setAriaAttribute(element, 'colspan', colSpan);\n}\n\nexport function setAriaSort(element: HTMLElement, sort: ColumnSortState): void {\n    setAriaAttribute(element, 'sort', sort);\n}\n\nexport function removeAriaSort(element: HTMLElement): void {\n    removeAriaAttribute(element, 'sort');\n}\n\nexport function setAriaSelected(element: HTMLElement, selected: boolean | undefined): void {\n    const attributeName = 'selected';\n\n    if (selected) {\n        setAriaAttribute(element, attributeName, selected);\n    } else {\n        removeAriaAttribute(element, attributeName);\n    }\n}\n\nexport function setAriaChecked(element: HTMLElement, checked?: boolean) {\n    setAriaAttribute(element, 'checked', checked === undefined ? 'mixed' : checked);\n}","export function padStartWidthZeros(value: number, totalStringSize: number): string {\n    return value.toString().padStart(totalStringSize, '0');\n}\n\nexport function createArrayOfNumbers(first: number, last: number): number[] {\n    const result: number[] = [];\n\n    for (let i = first; i <= last; i++) {\n        result.push(i);\n    }\n\n    return result;\n}\n\n/**\n * Check if a value is numeric\n * from http://stackoverflow.com/questions/9716468/is-there-any-function-like-isnumeric-in-javascript-to-validate-numbers\n * @param {any} value\n * @return {boolean}\n */\nexport function isNumeric(value: any): boolean {\n    return value !== '' && !isNaN(parseFloat(value)) && isFinite(value);\n}\n\nexport function cleanNumber(value: any): number | null {\n    if (typeof value === 'string') {\n        value = parseInt(value, 10);\n    }\n\n    if (typeof value === 'number') {\n        return Math.floor(value);\n    }\n\n    return null;\n}\n\nexport function decToHex(number: number, bytes: number): string {\n    let hex = '';\n\n    for (let i = 0; i < bytes; i++) {\n        hex += String.fromCharCode(number & 0xff);\n        number >>>= 8;\n    }\n\n    return hex;\n}\n\nexport function formatNumberTwoDecimalPlacesAndCommas(value: number, thousandSeparator: string, decimalSeparator: string): string {\n    if (typeof value !== 'number') { return ''; }\n\n    return formatNumberCommas(Math.round(value * 100) / 100, thousandSeparator, decimalSeparator);\n}\n\n/**\n * the native method number.toLocaleString(undefined, {minimumFractionDigits: 0})\n * puts in decimal places in IE, so we use this method instead\n * from: http://blog.tompawlak.org/number-currency-formatting-javascript\n * @param {number} value\n * @returns {string}\n */\nexport function formatNumberCommas(value: number, thousandSeparator: string, decimalSeparator: string): string {\n    if (typeof value !== 'number') { return ''; }\n\n    return value.toString().replace('.', decimalSeparator).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, `$1${thousandSeparator}`);\n}\n\nexport function sum(values: number[] | null) {\n    return values == null ? null : values.reduce((total, value) => total + value, 0);\n}\n","import { padStartWidthZeros } from './number';\n\n/**\n * Serialises a Date to a string of format `yyyy-MM-dd HH:mm:ss`.\n * An alternative separator can be provided to be used instead of hyphens.\n * @param date The date to serialise\n * @param includeTime Whether to include the time in the serialised string\n * @param separator The separator to use between date parts\n */\nexport function serialiseDate(date: Date | null, includeTime = true, separator = '-'): string | null {\n    if (!date) { return null; }\n\n    let serialised = [date.getFullYear(), date.getMonth() + 1, date.getDate()].map(part => padStartWidthZeros(part, 2)).join(separator);\n\n    if (includeTime) {\n        serialised += ' ' + [date.getHours(), date.getMinutes(), date.getSeconds()].map(part => padStartWidthZeros(part, 2)).join(':');\n    }\n\n    return serialised;\n}\n\n/**\n * Parses a date and time from a string in the format `yyyy-MM-dd HH:mm:ss`\n */\nexport function parseDateTimeFromString(value?: string | null): Date | null {\n    if (!value) { return null; }\n\n    const [dateStr, timeStr] = value.split(' ');\n\n    if (!dateStr) { return null; }\n\n    const fields = dateStr.split('-').map(f => parseInt(f, 10));\n\n    if (fields.filter(f => !isNaN(f)).length !== 3) { return null; }\n\n    const [year, month, day] = fields;\n    const date = new Date(year, month - 1, day);\n\n    if (date.getFullYear() !== year ||\n        date.getMonth() !== month - 1 ||\n        date.getDate() !== day) {\n        // date was not parsed as expected so must have been invalid\n        return null;\n    }\n\n    if (!timeStr || timeStr === '00:00:00') {\n        return date;\n    }\n\n    const [hours, minutes, seconds] = timeStr.split(':').map(part => parseInt(part, 10));\n\n    if (hours >= 0 && hours < 24) {\n        date.setHours(hours);\n    }\n\n    if (minutes >= 0 && minutes < 60) {\n        date.setMinutes(minutes);\n    }\n\n    if (seconds >= 0 && seconds < 60) {\n        date.setSeconds(seconds);\n    }\n\n    return date;\n}\n","export function fuzzyCheckStrings(\n    inputValues: string[],\n    validValues: string[],\n    allSuggestions: string[]\n): { [p: string]: string[]; } {\n    const fuzzyMatches: { [p: string]: string[]; } = {};\n    const invalidInputs: string[] = inputValues.filter(inputValue =>\n        !validValues.some(\n            (validValue) => validValue === inputValue\n        )\n    );\n\n    if (invalidInputs.length > 0) {\n        invalidInputs.forEach(invalidInput =>\n            fuzzyMatches[invalidInput] = fuzzySuggestions(invalidInput, allSuggestions)\n        );\n    }\n\n    return fuzzyMatches;\n}\n\n/**\n *\n * @param {String} inputValue The value to be compared against a list of strings\n * @param allSuggestions The list of strings to be compared against\n * @param hideIrrelevant By default, fuzzy suggestions will just sort the allSuggestions list, set this to true\n *        to filter out the irrelevant values\n * @param weighted Set this to true, to make letters matched in the order they were typed have priority in the results.\n */\nexport function fuzzySuggestions(\n    inputValue: string,\n    allSuggestions: string[],\n    hideIrrelevant?: boolean,\n    weighted?: boolean\n): string[] {\n    const search = weighted ? string_weighted_distances : string_distances;\n    let thisSuggestions: { value: string, relevance: number; }[] = allSuggestions.map((text) => ({\n        value: text,\n        relevance: search(inputValue.toLowerCase(), text.toLocaleLowerCase())\n    }));\n\n    thisSuggestions.sort((a, b) => b.relevance - a.relevance);\n\n    if (hideIrrelevant) {\n        thisSuggestions = thisSuggestions.filter(suggestion => suggestion.relevance !== 0);\n    }\n\n    return thisSuggestions.map(suggestion => suggestion.value);\n}\n\n/**\n * Algorithm to do fuzzy search\n * from https://stackoverflow.com/questions/23305000/javascript-fuzzy-search-that-makes-sense\n * @param {string} from\n * @return {[]}\n */\nexport function get_bigrams(from: string) {\n    const s = from.toLowerCase();\n    const v = new Array(s.length - 1);\n    let i;\n    let j;\n    let ref;\n\n    for (i = j = 0, ref = v.length; j <= ref; i = j += 1) {\n        v[i] = s.slice(i, i + 2);\n\n    }\n\n    return v;\n}\n\nexport function string_distances(str1: string, str2: string): number {\n    if (str1.length === 0 && str2.length === 0) { return 0; }\n\n    const pairs1 = get_bigrams(str1);\n    const pairs2 = get_bigrams(str2);\n    const union = pairs1.length + pairs2.length;\n    let hit_count = 0;\n    let j;\n    let len;\n\n    for (j = 0, len = pairs1.length; j < len; j++) {\n        const x = pairs1[j];\n        let k;\n        let len1;\n\n        for (k = 0, len1 = pairs2.length; k < len1; k++) {\n            const y = pairs2[k];\n            if (x === y) {\n                hit_count++;\n            }\n        }\n    }\n\n    return hit_count > 0 ? (2 * hit_count) / union : 0;\n}\n\nexport function string_weighted_distances(str1: string, str2: string): number {\n    const a = str1.replace(/\\s/g, '');\n    const b = str2.replace(/\\s/g, '');\n\n    let weight = 0;\n    let lastIndex = 0;\n\n    for (let i = 0; i < a.length; i++) {\n        const idx = b.indexOf(a[i], lastIndex);\n        if (idx === -1) { continue; }\n\n        lastIndex = idx;\n        weight += (100 - (lastIndex * 100 / 10000) * 100);\n    }\n\n    return weight;\n}","import { GridOptionsWrapper } from '../gridOptionsWrapper';\nimport { Column } from '../entities/column';\nimport { loadTemplate, isNodeOrElement } from './dom';\nimport { setAriaRole } from './aria';\n\n//\n// IMPORTANT NOTE!\n//\n// If you change the list below, copy/paste the new content into the docs page javascript-grid-icons\n//\nexport const iconNameClassMap: { [key: string]: string; } = {\n    // header column group shown when expanded (click to contract)\n    columnGroupOpened: 'expanded',\n    // header column group shown when contracted (click to expand)\n    columnGroupClosed: 'contracted',\n    // tool panel column group contracted (click to expand)\n    columnSelectClosed: 'tree-closed',\n    // tool panel column group expanded (click to contract)\n    columnSelectOpen: 'tree-open',\n    // column tool panel header expand/collapse all button, shown when some children are expanded and\n    //     others are collapsed\n    columnSelectIndeterminate: 'tree-indeterminate',\n    // shown on ghost icon while dragging column to the side of the grid to pin\n    columnMovePin: 'pin',\n    // shown on ghost icon while dragging over part of the page that is not a drop zone\n    columnMoveHide: 'eye-slash',\n    // shown on ghost icon while dragging columns to reorder\n    columnMoveMove: 'arrows',\n    // animating icon shown when dragging a column to the right of the grid causes horizontal scrolling\n    columnMoveLeft: 'left',\n    // animating icon shown when dragging a column to the left of the grid causes horizontal scrolling\n    columnMoveRight: 'right',\n    // shown on ghost icon while dragging over Row Groups drop zone\n    columnMoveGroup: 'group',\n    // shown on ghost icon while dragging over Values drop zone\n    columnMoveValue: 'aggregation',\n    // shown on ghost icon while dragging over pivot drop zone\n    columnMovePivot: 'pivot',\n    // shown on ghost icon while dragging over drop zone that doesn't support it, e.g.\n    //     string column over aggregation drop zone\n    dropNotAllowed: 'not-allowed',\n    // shown on row group when contracted (click to expand)\n    groupContracted: 'tree-closed',\n    // shown on row group when expanded (click to contract)\n    groupExpanded: 'tree-open',\n    // context menu chart item\n    chart: 'chart',\n    // chart window title bar\n    close: 'cross',\n    // X (remove) on column 'pill' after adding it to a drop zone list\n    cancel: 'cancel',\n    // indicates the currently active pin state in the \"Pin column\" sub-menu of the column menu\n    check: 'tick',\n    // \"go to first\" button in pagination controls\n    first: 'first',\n    // \"go to previous\" button in pagination controls\n    previous: 'previous',\n    // \"go to next\" button in pagination controls\n    next: 'next',\n    // \"go to last\" button in pagination controls\n    last: 'last',\n    // shown on top right of chart when chart is linked to range data (click to unlink)\n    linked: 'linked',\n    // shown on top right of chart when chart is not linked to range data (click to link)\n    unlinked: 'unlinked',\n    // \"Choose colour\" button on chart settings tab\n    colorPicker: 'color-picker',\n    // rotating spinner shown by the loading cell renderer\n    groupLoading: 'loading',\n    // button to launch enterprise column menu\n    menu: 'menu',\n    // filter tool panel tab\n    filter: 'filter',\n    // column tool panel tab\n    columns: 'columns',\n    // button in chart regular size window title bar (click to maximise)\n    maximize: 'maximize',\n    // button in chart maximised window title bar (click to make regular size)\n    minimize: 'minimize',\n    // \"Pin column\" item in column header menu\n    menuPin: 'pin',\n    // \"Value aggregation\" column menu item (shown on numeric columns when grouping is active)\"\n    menuValue: 'aggregation',\n    // \"Group by {column-name}\" item in column header menu\n    menuAddRowGroup: 'group',\n    // \"Un-Group by {column-name}\" item in column header menu\n    menuRemoveRowGroup: 'group',\n    // context menu copy item\n    clipboardCopy: 'copy',\n    // context menu paste item\n    clipboardPaste: 'paste',\n    // identifies the pivot drop zone\n    pivotPanel: 'pivot',\n    // \"Row groups\" drop zone in column tool panel\n    rowGroupPanel: 'group',\n    // columns tool panel Values drop zone\n    valuePanel: 'aggregation',\n    // drag handle used to pick up draggable columns\n    columnDrag: 'grip',\n    // drag handle used to pick up draggable rows\n    rowDrag: 'grip',\n    // context menu export item\n    save: 'save',\n    // csv export\n    csvExport: 'csv',\n    // excel export,\n    excelExport: 'excel',\n    // icon on dropdown editors\n    smallDown: 'small-down',\n    // version of small-right used in RTL mode\n    smallLeft: 'small-left',\n    // separater between column 'pills' when you add multiple columns to the header drop zone\n    smallRight: 'small-right',\n    smallUp: 'small-up',\n    // show on column header when column is sorted ascending\n    sortAscending: 'asc',\n    // show on column header when column is sorted descending\n    sortDescending: 'desc',\n    // show on column header when column has no sort, only when enabled with gridOptions.unSortIcon=true\n    sortUnSort: 'none'\n};\n\n/**\n * If icon provided, use this (either a string, or a function callback).\n * if not, then use the default icon from the theme\n * @param {string} iconName\n * @param {GridOptionsWrapper} gridOptionsWrapper\n * @param {Column | null} [column]\n * @returns {HTMLElement}\n */\nexport function createIcon(iconName: string, gridOptionsWrapper: GridOptionsWrapper, column: Column | null): HTMLElement {\n    const iconContents = createIconNoSpan(iconName, gridOptionsWrapper, column);\n\n    if (iconContents && iconContents.className.indexOf('ag-icon') > -1) {\n        return iconContents;\n    }\n\n    const eResult = document.createElement('span');\n    eResult.appendChild(iconContents!);\n    return eResult;\n}\n\nexport function createIconNoSpan(iconName: string, gridOptionsWrapper: GridOptionsWrapper, column?: Column | null, forceCreate?: boolean): HTMLElement | undefined {\n    let userProvidedIcon: Function | string | null = null;\n\n    // check col for icon first\n    const icons: any = column && column.getColDef().icons;\n\n    if (icons) {\n        userProvidedIcon = icons[iconName];\n    }\n\n    // if not in col, try grid options\n    if (gridOptionsWrapper && !userProvidedIcon) {\n        const optionsIcons = gridOptionsWrapper.getIcons();\n        if (optionsIcons) {\n            userProvidedIcon = optionsIcons[iconName];\n        }\n    }\n\n    // now if user provided, use it\n    if (userProvidedIcon) {\n        let rendererResult: any;\n\n        if (typeof userProvidedIcon === 'function') {\n            rendererResult = userProvidedIcon();\n        } else if (typeof userProvidedIcon === 'string') {\n            rendererResult = userProvidedIcon;\n        } else {\n            throw new Error('icon from grid options needs to be a string or a function');\n        }\n\n        if (typeof rendererResult === 'string') {\n            return loadTemplate(rendererResult);\n        }\n\n        if (isNodeOrElement(rendererResult)) {\n            return rendererResult as HTMLElement;\n        }\n\n        console.warn('AG Grid: iconRenderer should return back a string or a dom object');\n    } else {\n        const span = document.createElement('span');\n        let cssClass = iconNameClassMap[iconName];\n\n        if (!cssClass) {\n            if (!forceCreate) {\n                console.warn(`AG Grid: Did not find icon ${iconName}`);\n                cssClass = '';\n            } else {\n                cssClass = iconName;\n            }\n        }\n\n        span.setAttribute('class', `ag-icon ag-icon-${cssClass}`);\n        span.setAttribute('unselectable', 'on');\n        setAriaRole(span, 'presentation');\n\n        return span;\n    }\n}\n","import { GridOptionsWrapper } from '../gridOptionsWrapper';\nimport { RowNode } from '../entities/rowNode';\nimport { Column } from '../entities/column';\nimport { SuppressHeaderKeyboardEventParams, SuppressKeyboardEventParams } from '../entities/colDef';\nimport { isBrowserEdge } from './browser';\nimport { ColumnGroup } from '../entities/columnGroup';\nimport { exists } from './generic';\n\nconst NUMPAD_DEL_NUMLOCK_ON_KEY = 'Del';\nconst NUMPAD_DEL_NUMLOCK_ON_CHARCODE = 46;\n\nexport function isEventFromPrintableCharacter(event: KeyboardEvent): boolean {\n    // no allowed printable chars have alt or ctrl key combinations\n    if (event.altKey || event.ctrlKey || event.metaKey) { return false; }\n\n    // if key is length 1, eg if it is 'a' for the a key, or '2' for the '2' key.\n    // non-printable characters have names, eg 'Enter' or 'Backspace'.\n    const printableCharacter = event.key.length === 1;\n\n    // IE11 & Edge treat the numpad del key differently - with numlock on we get \"Del\" for key,\n    // so this addition checks if its IE11/Edge and handles that specific case the same was as all other browsers\n    const numpadDelWithNumlockOnForEdgeOrIe = isNumpadDelWithNumLockOnForEdge(event);\n\n    return printableCharacter || numpadDelWithNumlockOnForEdgeOrIe;\n}\n\n/**\n * Allows user to tell the grid to skip specific keyboard events\n * @param {GridOptionsWrapper} gridOptionsWrapper\n * @param {KeyboardEvent} keyboardEvent\n * @param {RowNode} rowNode\n * @param {Column} column\n * @param {boolean} editing\n * @returns {boolean}\n */\nexport function isUserSuppressingKeyboardEvent(\n    gridOptionsWrapper: GridOptionsWrapper,\n    keyboardEvent: KeyboardEvent,\n    rowNode: RowNode,\n    column: Column,\n    editing: boolean\n): boolean {\n    const gridOptionsFunc = gridOptionsWrapper.getSuppressKeyboardEventFunc();\n    const colDefFunc = column ? column.getColDef().suppressKeyboardEvent : undefined;\n\n    // if no callbacks provided by user, then do nothing\n    if (!gridOptionsFunc && !colDefFunc) { return false; }\n\n    const params: SuppressKeyboardEventParams = {\n        event: keyboardEvent,\n        editing,\n        column,\n        api: gridOptionsWrapper.getApi()!,\n        node: rowNode,\n        data: rowNode.data,\n        colDef: column.getColDef(),\n        context: gridOptionsWrapper.getContext(),\n        columnApi: gridOptionsWrapper.getColumnApi()!\n    };\n\n    // colDef get first preference on suppressing events\n    if (colDefFunc) {\n        const colDefFuncResult = colDefFunc(params);\n        // if colDef func suppressed, then return now, no need to call gridOption func\n        if (colDefFuncResult) { return true; }\n    }\n\n    if (gridOptionsFunc) {\n        // if gridOption func, return the result\n        return gridOptionsFunc(params);\n    }\n\n    // otherwise return false, don't suppress, as colDef didn't suppress and no func on gridOptions\n    return false;\n}\n\nexport function isUserSuppressingHeaderKeyboardEvent(\n    gridOptionsWrapper: GridOptionsWrapper,\n    keyboardEvent: KeyboardEvent,\n    headerRowIndex: number,\n    column: Column | ColumnGroup\n): boolean {\n    const colDef = column.getDefinition();\n    const colDefFunc = colDef && colDef.suppressHeaderKeyboardEvent;\n\n    if (!exists(colDefFunc)) { return false; }\n\n    const params: SuppressHeaderKeyboardEventParams = {\n        api: gridOptionsWrapper.getApi()!,\n        columnApi: gridOptionsWrapper.getColumnApi()!,\n        context: gridOptionsWrapper.getContext(),\n        colDef: colDef,\n        column,\n        headerRowIndex,\n        event: keyboardEvent\n    };\n\n    return !!colDefFunc(params);\n}\n\nfunction isNumpadDelWithNumLockOnForEdge(event: KeyboardEvent) {\n    return (isBrowserEdge()) &&\n        event.key === NUMPAD_DEL_NUMLOCK_ON_KEY &&\n        event.charCode === NUMPAD_DEL_NUMLOCK_ON_CHARCODE;\n}\n","/**\n * `True` if the event is close to the original event by X pixels either vertically or horizontally.\n * we only start dragging after X pixels so this allows us to know if we should start dragging yet.\n * @param {MouseEvent | TouchEvent} e1\n * @param {MouseEvent | TouchEvent} e2\n * @param {number} pixelCount\n * @returns {boolean}\n */\nexport function areEventsNear(e1: MouseEvent | Touch, e2: MouseEvent | Touch, pixelCount: number): boolean {\n    // by default, we wait 4 pixels before starting the drag\n    if (pixelCount === 0) { return false; }\n\n    const diffX = Math.abs(e1.clientX - e2.clientX);\n    const diffY = Math.abs(e1.clientY - e2.clientY);\n\n    return Math.max(diffX, diffY) <= pixelCount;\n}\n","import { RowNode } from '../entities/rowNode';\n\n/**\n * Gets called by: a) ClientSideNodeManager and b) GroupStage to do sorting.\n * when in ClientSideNodeManager we always have indexes (as this sorts the items the\n * user provided) but when in GroupStage, the nodes can contain filler nodes that\n * don't have order id's\n * @param {RowNode[]} rowNodes\n * @param {Object} rowNodeOrder\n */\nexport function sortRowNodesByOrder(rowNodes: RowNode[], rowNodeOrder: { [id: string]: number; }): void {\n    if (!rowNodes) { return; }\n\n    const comparator = (nodeA: RowNode, nodeB: RowNode) => {\n        const positionA = rowNodeOrder[nodeA.id!];\n        const positionB = rowNodeOrder[nodeB.id!];\n\n        const aHasIndex = positionA !== undefined;\n        const bHasIndex = positionB !== undefined;\n\n        const bothNodesAreUserNodes = aHasIndex && bHasIndex;\n        const bothNodesAreFillerNodes = !aHasIndex && !bHasIndex;\n\n        if (bothNodesAreUserNodes) {\n            // when comparing two nodes the user has provided, they always\n            // have indexes\n            return positionA - positionB;\n        }\n\n        if (bothNodesAreFillerNodes) {\n            // when comparing two filler nodes, we have no index to compare them\n            // against, however we want this sorting to be deterministic, so that\n            // the rows don't jump around as the user does delta updates. so we\n            // want the same sort result. so we use the __objectId - which doesn't make sense\n            // from a sorting point of view, but does give consistent behaviour between\n            // calls. otherwise groups jump around as delta updates are done.\n            // note: previously here we used nodeId, however this gave a strange order\n            // as string ordering of numbers is wrong, so using id based on creation order\n            // as least gives better looking order.\n            return nodeA.__objectId - nodeB.__objectId;\n        }\n\n        if (aHasIndex) {\n            return 1;\n        }\n\n        return -1;\n    };\n\n    // check if the list first needs sorting\n    let rowNodeA: RowNode;\n    let rowNodeB: RowNode;\n    let atLeastOneOutOfOrder = false;\n\n    for (let i = 0; i < rowNodes.length - 1; i++) {\n        rowNodeA = rowNodes[i];\n        rowNodeB = rowNodes[i + 1];\n\n        if (comparator(rowNodeA, rowNodeB) > 0) {\n            atLeastOneOutOfOrder = true;\n            break;\n        }\n    }\n\n    if (atLeastOneOutOfOrder) {\n        rowNodes.sort(comparator);\n    }\n}\n\nexport function traverseNodesWithKey(nodes: RowNode[] | null, callback: (node: RowNode, key: string) => void): void {\n    const keyParts: any[] = [];\n\n    recursiveSearchNodes(nodes);\n\n    function recursiveSearchNodes(currentNodes: RowNode[] | null): void {\n        if (!currentNodes) { return; }\n\n        currentNodes.forEach((node: RowNode) => {\n\n            // also checking for children for tree data\n            if (node.group || node.hasChildren()) {\n                keyParts.push(node.key);\n                const key = keyParts.join('|');\n                callback(node, key);\n                recursiveSearchNodes(node.childrenAfterGroup);\n                keyParts.pop();\n            }\n        });\n    }\n}\n","export function convertToSet<T>(list: T[]): Set<T> {\n    const set = new Set<T>();\n\n    list.forEach(x => set.add(x));\n\n    return set;\n}\n","export type ResolveAndRejectCallback<T> = (resolve: (value: T | null) => void, reject: (params: any) => void) => void;\n\nexport enum AgPromiseStatus {\n    IN_PROGRESS, RESOLVED\n}\n\nexport class AgPromise<T> {\n    private status: AgPromiseStatus = AgPromiseStatus.IN_PROGRESS;\n    private resolution: T | null = null;\n    private waiters: ((value: T | null) => void)[] = [];\n\n    static all<T>(promises: AgPromise<T | null>[]): AgPromise<(T | null)[]> {\n        return new AgPromise(resolve => {\n            let remainingToResolve = promises.length;\n            const combinedValues = new Array<T | null>(remainingToResolve);\n\n            promises.forEach((promise, index) => {\n                promise.then(value => {\n                    combinedValues[index] = value;\n                    remainingToResolve--;\n\n                    if (remainingToResolve === 0) {\n                        resolve(combinedValues);\n                    }\n                });\n            });\n        });\n    }\n\n    static resolve<T>(value: T | null = null): AgPromise<T> {\n        return new AgPromise<T>(resolve => resolve(value));\n    }\n\n    constructor(callback: ResolveAndRejectCallback<T>) {\n        callback(value => this.onDone(value), params => this.onReject(params));\n    }\n\n    public then<V>(func: (result: T | null) => V): AgPromise<V> {\n        return new AgPromise(resolve => {\n            if (this.status === AgPromiseStatus.RESOLVED) {\n                resolve(func(this.resolution));\n            } else {\n                this.waiters.push(value => resolve(func(value)));\n            }\n        });\n    }\n\n    public resolveNow<Z>(ifNotResolvedValue: Z, ifResolved: (current: T | null) => Z): Z {\n        return this.status === AgPromiseStatus.RESOLVED ? ifResolved(this.resolution) : ifNotResolvedValue;\n    }\n\n    private onDone(value: T | null): void {\n        this.status = AgPromiseStatus.RESOLVED;\n        this.resolution = value;\n\n        this.waiters.forEach(waiter => waiter(value));\n    }\n\n    private onReject(params: any): void {\n        console.warn('TBI');\n    }\n}\n","import * as GeneralUtils from './general';\nimport * as AriaUtils from './aria';\nimport * as ArrayUtils from './array';\nimport * as BrowserUtils from './browser';\nimport * as CsvUtils from './csv';\nimport * as DateUtils from './date';\nimport * as DomUtils from './dom';\nimport * as EventUtils from './event';\nimport * as FunctionUtils from './function';\nimport * as FuzzyMatchUtils from './fuzzyMatch';\nimport * as GenericUtils from './generic';\nimport * as IconUtils from './icon';\nimport * as KeyboardUtils from './keyboard';\nimport * as MapUtils from './map';\nimport * as MouseUtils from './mouse';\nimport * as NumberUtils from './number';\nimport * as ObjectUtils from './object';\nimport * as RowNodeUtils from './rowNode';\nimport * as SetUtils from './set';\nimport * as StringUtils from './string';\n\nconst utils = {\n    ...GeneralUtils,\n    ...AriaUtils,\n    ...ArrayUtils,\n    ...BrowserUtils,\n    ...CsvUtils,\n    ...DateUtils,\n    ...DomUtils,\n    ...EventUtils,\n    ...FunctionUtils,\n    ...FuzzyMatchUtils,\n    ...GenericUtils,\n    ...IconUtils,\n    ...KeyboardUtils,\n    ...MapUtils,\n    ...MouseUtils,\n    ...NumberUtils,\n    ...ObjectUtils,\n    ...RowNodeUtils,\n    ...SetUtils,\n    ...StringUtils,\n};\n\nexport const _ = utils;","export class NumberSequence {\n    private nextValue: number;\n    private step: number;\n\n    constructor(initValue = 0, step = 1) {\n        this.nextValue = initValue;\n        this.step = step;\n    }\n\n    public next(): number {\n        const valToReturn = this.nextValue;\n        this.nextValue += this.step;\n        return valToReturn;\n    }\n\n    public peek(): number {\n        return this.nextValue;\n    }\n\n    public skip(count: number): void {\n        this.nextValue += count;\n    }\n}\n","import { Autowired, PostConstruct } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { ColumnApi } from \"../columns/columnApi\";\nimport { GridApi } from \"../gridApi\";\nimport { ITooltipComp, ITooltipParams } from \"../rendering/tooltipComponent\";\nimport { PopupService } from \"./popupService\";\nimport { UserComponentFactory } from \"../components/framework/userComponentFactory\";\nimport { exists } from \"../utils/generic\";\nimport { isIOSUserAgent } from \"../utils/browser\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\n\nexport interface TooltipParentComp {\n    getTooltipParams(): WithoutGridCommon<ITooltipParams>;\n    getGui(): HTMLElement;\n}\n\nenum TooltipStates { NOTHING, WAITING_TO_SHOW, SHOWING }\n\nexport class CustomTooltipFeature extends BeanStub {\n\n    private readonly DEFAULT_SHOW_TOOLTIP_DELAY = 2000;\n    private readonly DEFAULT_HIDE_TOOLTIP_DELAY = 10000;\n    private readonly SHOW_QUICK_TOOLTIP_DIFF = 1000;\n    private readonly FADE_OUT_TOOLTIP_TIMEOUT = 1000;\n\n    // different instances of tooltipFeature use this to see when the\n    // last tooltip was hidden.\n    private static lastTooltipHideTime: number;\n\n    @Autowired('popupService') private popupService: PopupService;\n    @Autowired('userComponentFactory') private userComponentFactory: UserComponentFactory;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    private tooltipShowDelay: number;\n    private tooltipHideDelay: number;\n\n    private parentComp: TooltipParentComp;\n\n    private showTooltipTimeoutId: number | undefined;\n    private hideTooltipTimeoutId: number | undefined;\n\n    private state = TooltipStates.NOTHING;\n\n    private lastMouseEvent: MouseEvent;\n\n    private tooltipComp: ITooltipComp | undefined;\n    private tooltipPopupDestroyFunc: (() => void) | undefined;\n    // when showing the tooltip, we need to make sure it's the most recent instance we request, as due to\n    // async we could request two tooltips before the first instance returns, in which case we should\n    // disregard the second instance.\n    private tooltipInstanceCount = 0;\n\n    private tooltipMouseTrack: boolean = false;\n\n    constructor(parentComp: TooltipParentComp) {\n        super();\n        this.parentComp = parentComp;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.tooltipShowDelay = this.gridOptionsWrapper.getTooltipDelay('show') || this.DEFAULT_SHOW_TOOLTIP_DELAY;\n        this.tooltipHideDelay = this.gridOptionsWrapper.getTooltipDelay('hide') || this.DEFAULT_HIDE_TOOLTIP_DELAY;\n        this.tooltipMouseTrack = this.gridOptionsWrapper.isTooltipMouseTrack();\n\n        const el = this.parentComp.getGui();\n\n        this.addManagedListener(el, 'mouseenter', this.onMouseEnter.bind(this));\n        this.addManagedListener(el, 'mouseleave', this.onMouseLeave.bind(this));\n        this.addManagedListener(el, 'mousemove', this.onMouseMove.bind(this));\n        this.addManagedListener(el, 'mousedown', this.onMouseDown.bind(this));\n        this.addManagedListener(el, 'keydown', this.onKeyDown.bind(this));\n    }\n\n    protected destroy(): void {\n        // if this component gets destroyed while tooltip is showing, need to make sure\n        // we don't end with no mouseLeave event resulting in zombie tooltip\n        this.setToDoNothing();\n        super.destroy();\n    }\n\n    public onMouseEnter(e: MouseEvent): void {\n        if (isIOSUserAgent()) { return; }\n        // every mouseenter should be following by a mouseleave, however for some unkonwn, it's possible for\n        // mouseenter to be called twice in a row, which can happen if editing the cell. this was reported\n        // in https://ag-grid.atlassian.net/browse/AG-4422. to get around this, we check the state, and if\n        // state is !=nothing, then we know mouseenter was already received.\n        if (this.state != TooltipStates.NOTHING) { return; }\n\n        // if another tooltip was hidden very recently, we only wait 200ms to show, not the normal waiting time\n        const delay = this.isLastTooltipHiddenRecently() ? 200 : this.tooltipShowDelay;\n\n        this.showTooltipTimeoutId = window.setTimeout(this.showTooltip.bind(this), delay);\n        this.lastMouseEvent = e;\n        this.state = TooltipStates.WAITING_TO_SHOW;\n    }\n\n    public onMouseLeave(): void {\n        this.setToDoNothing();\n    }\n\n    private onKeyDown(): void {\n        this.setToDoNothing();\n    }\n\n    private setToDoNothing(): void {\n        if (this.state === TooltipStates.SHOWING) {\n            this.hideTooltip();\n        }\n\n        this.clearTimeouts();\n\n        this.state = TooltipStates.NOTHING;\n    }\n\n    public onMouseMove(e: MouseEvent): void {\n        // there is a delay from the time we mouseOver a component and the time the\n        // tooltip is displayed, so we need to track mousemove to be able to correctly\n        // position the tooltip when showTooltip is called.\n        this.lastMouseEvent = e;\n\n        if (\n            this.tooltipMouseTrack &&\n            this.state === TooltipStates.SHOWING &&\n            this.tooltipComp\n        ) {\n            this.positionTooltipUnderLastMouseEvent();\n        }\n    }\n\n    public onMouseDown(): void {\n        this.setToDoNothing();\n    }\n\n    private hideTooltip(): void {\n        // check if comp exists - due to async, although we asked for\n        // one, the instance may not be back yet\n        if (this.tooltipComp) {\n            this.destroyTooltipComp();\n            CustomTooltipFeature.lastTooltipHideTime = new Date().getTime();\n        }\n\n        this.state = TooltipStates.NOTHING;\n    }\n\n    private destroyTooltipComp(): void {\n        // add class to fade out the tooltip\n        this.tooltipComp!.getGui().classList.add('ag-tooltip-hiding');\n\n        // make local copies of these variables, as we use them in the async function below,\n        // and we clear then to 'undefined' later, so need to take a copy before they are undefined.\n        const tooltipPopupDestroyFunc = this.tooltipPopupDestroyFunc;\n        const tooltipComp = this.tooltipComp;\n\n        window.setTimeout(() => {\n            tooltipPopupDestroyFunc!();\n            this.getContext().destroyBean(tooltipComp);\n        }, this.FADE_OUT_TOOLTIP_TIMEOUT);\n\n        this.tooltipPopupDestroyFunc = undefined;\n        this.tooltipComp = undefined;\n    }\n\n    private isLastTooltipHiddenRecently(): boolean {\n        // return true if <1000ms since last time we hid a tooltip\n        const now = new Date().getTime();\n        const then = CustomTooltipFeature.lastTooltipHideTime;\n\n        return (now - then) < this.SHOW_QUICK_TOOLTIP_DIFF;\n    }\n\n    private showTooltip(): void {\n        const params: WithoutGridCommon<ITooltipParams> = {\n            ...this.parentComp.getTooltipParams()\n        };\n\n        if (!exists(params.value)) {\n            this.setToDoNothing();\n            return;\n        }\n\n        this.state = TooltipStates.SHOWING;\n        this.tooltipInstanceCount++;\n\n        // we pass in tooltipInstanceCount so the callback knows what the count was when\n        // we requested the tooltip, so if another tooltip was requested in the mean time\n        // we disregard it\n        const callback = this.newTooltipComponentCallback.bind(this, this.tooltipInstanceCount);\n\n        const userDetails = this.userComponentFactory.getTooltipCompDetails(params);\n        userDetails.newAgStackInstance()!.then(callback);\n    }\n\n    private newTooltipComponentCallback(tooltipInstanceCopy: number, tooltipComp: ITooltipComp): void {\n        const compNoLongerNeeded = this.state !== TooltipStates.SHOWING || this.tooltipInstanceCount !== tooltipInstanceCopy;\n\n        if (compNoLongerNeeded) {\n            this.getContext().destroyBean(tooltipComp);\n            return;\n        }\n\n        const eGui = tooltipComp.getGui();\n\n        this.tooltipComp = tooltipComp;\n\n        if (!eGui.classList.contains('ag-tooltip')) {\n            eGui.classList.add('ag-tooltip-custom');\n        }\n\n        const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n\n        const addPopupRes = this.popupService.addPopup({\n            eChild: eGui,\n            ariaLabel: translate('ariaLabelTooltip', 'Tooltip')\n        });\n        if (addPopupRes) {\n            this.tooltipPopupDestroyFunc = addPopupRes.hideFunc;\n        }\n        // this.tooltipPopupDestroyFunc = this.popupService.addPopup(false, eGui, false);\n\n        this.positionTooltipUnderLastMouseEvent();\n        this.hideTooltipTimeoutId = window.setTimeout(this.hideTooltip.bind(this), this.tooltipHideDelay);\n    }\n\n    private positionTooltipUnderLastMouseEvent(): void {\n        this.popupService.positionPopupUnderMouseEvent({\n            type: 'tooltip',\n            mouseEvent: this.lastMouseEvent,\n            ePopup: this.tooltipComp!.getGui(),\n            nudgeY: 18\n        });\n    }\n\n    private clearTimeouts(): void {\n        if (this.showTooltipTimeoutId) {\n            window.clearTimeout(this.showTooltipTimeoutId);\n            this.showTooltipTimeoutId = undefined;\n        }\n\n        if (this.hideTooltipTimeoutId) {\n            window.clearTimeout(this.hideTooltipTimeoutId);\n            this.hideTooltipTimeoutId = undefined;\n        }\n    }\n}\n","/**\n * A Util Class only used when debugging for printing time to console\n */\nexport class Timer {\n    private timestamp = new Date().getTime();\n\n    public print(msg: string) {\n        const duration = (new Date().getTime()) - this.timestamp;\n        console.info(`${msg} = ${duration}`);\n        this.timestamp = new Date().getTime();\n    }\n}","import { AgEvent } from \"../events\";\nimport { Autowired, PostConstruct, PreConstruct } from \"../context/context\";\nimport { AgStackComponentsRegistry } from \"../components/agStackComponentsRegistry\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { NumberSequence } from \"../utils\";\nimport {\n    isNodeOrElement,\n    copyNodeList,\n    iterateNamedNodeMap,\n    loadTemplate,\n    setVisible,\n    setDisplayed\n} from '../utils/dom';\nimport { getFunctionName } from '../utils/function';\nimport { CustomTooltipFeature } from \"./customTooltipFeature\";\nimport { ITooltipParams } from \"../rendering/tooltipComponent\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\n\nconst compIdSequence = new NumberSequence();\n\nexport interface VisibleChangedEvent extends AgEvent {\n    visible: boolean;\n}\n\nexport class CssClassManager {\n\n    private getGui: () => HTMLElement;\n\n    // to minimise DOM hits, we only apply CSS classes if they have changed. as adding a CSS class that is already\n    // there, or removing one that wasn't present, all takes CPU.\n    private cssClassStates: { [cssClass: string]: boolean } = {};\n\n    constructor(getGui: () => HTMLElement) {\n        this.getGui = getGui;\n    }\n\n    public addCssClass(className: string): void {\n        const list = (className || '').split(' ');\n\n        if (list.length > 1) {\n            list.forEach(cls => this.addCssClass(cls));\n            return;\n        }\n\n        const updateNeeded = this.cssClassStates[className] !== true;\n        if (updateNeeded && className.length) {\n            this.getGui().classList.add(className);\n            this.cssClassStates[className] = true;\n        }\n    }\n\n    public removeCssClass(className: string): void {\n        const list = (className || '').split(' ');\n\n        if (list.length > 1) {\n            list.forEach(cls => this.removeCssClass(cls));\n            return;\n        }\n\n        const updateNeeded = this.cssClassStates[className] !== false;\n        if (updateNeeded && className.length) {\n            this.getGui().classList.remove(className);\n            this.cssClassStates[className] = false;\n        }\n    }\n\n    public containsCssClass(className: string): boolean {\n        return this.getGui().classList.contains(className);\n    }\n\n    public addOrRemoveCssClass(className: string, addOrRemove: boolean): void {\n        const list = (className || '').split(' ');\n\n        if (list.length > 1) {\n            list.forEach(cls => this.addOrRemoveCssClass(cls, addOrRemove));\n            return;\n        }\n\n        const updateNeeded = this.cssClassStates[className] !== addOrRemove;\n        if (updateNeeded && className.length) {\n            this.getGui().classList.toggle(className, addOrRemove);\n            this.cssClassStates[className] = addOrRemove;\n        }\n    }\n}\n\nexport class Component extends BeanStub {\n\n    public static elementGettingCreated: any;\n\n    public static EVENT_DISPLAYED_CHANGED = 'displayedChanged';\n    private eGui: HTMLElement;\n\n    @Autowired('agStackComponentsRegistry') protected readonly agStackComponentsRegistry: AgStackComponentsRegistry;\n\n    // if false, then CSS class \"ag-hidden\" is applied, which sets \"display: none\"\n    private displayed = true;\n\n    // if false, then CSS class \"ag-invisible\" is applied, which sets \"visibility: hidden\"\n    private visible = true;\n\n    protected parentComponent: Component | undefined;\n\n    // unique id for this row component. this is used for getting a reference to the HTML dom.\n    // we cannot use the RowNode id as this is not unique (due to animation, old rows can be lying\n    // around as we create a new rowComp instance for the same row node).\n    private compId = compIdSequence.next();\n\n    private cssClassManager: CssClassManager;\n\n    protected usingBrowserTooltips: boolean;\n    private tooltipText: string | undefined;\n    private tooltipFeature: CustomTooltipFeature | undefined;\n\n    constructor(template?: string) {\n        super();\n\n        this.cssClassManager = new CssClassManager(() => this.eGui);\n\n        if (template) {\n            this.setTemplate(template);\n        }\n    }\n\n    @PreConstruct\n    private preConstructOnComponent(): void {\n        this.usingBrowserTooltips = this.gridOptionsWrapper.isEnableBrowserTooltips();\n    }\n\n    public getCompId(): number {\n        return this.compId;\n    }\n\n    public getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        return {\n            value: this.tooltipText,\n            location: 'UNKNOWN'\n        };\n    }\n\n    public setTooltip(newTooltipText?: string | null): void {\n\n        const removeTooltip = () => {\n            if (this.usingBrowserTooltips) {\n                this.getGui().removeAttribute('title');\n            } else {\n                this.tooltipFeature = this.destroyBean(this.tooltipFeature);\n            }\n        };\n\n        const addTooltip = () => {\n            if (this.usingBrowserTooltips) {\n                this.getGui().setAttribute('title', this.tooltipText!);\n            } else {\n                this.tooltipFeature = this.createBean(new CustomTooltipFeature(this));\n            }\n        };\n\n        if (this.tooltipText != newTooltipText) {\n            if (this.tooltipText) {\n                removeTooltip();\n            }\n\n            if (newTooltipText != null) {\n                this.tooltipText = newTooltipText;\n\n                if (this.tooltipText) {\n                    addTooltip();\n                }\n            }\n        }\n    }\n\n    // for registered components only, eg creates AgCheckbox instance from ag-checkbox HTML tag\n    private createChildComponentsFromTags(parentNode: Element, paramsMap?: { [key: string]: any; }): void {\n        // we MUST take a copy of the list first, as the 'swapComponentForNode' adds comments into the DOM\n        // which messes up the traversal order of the children.\n        const childNodeList: Node[] = copyNodeList(parentNode.childNodes);\n\n        childNodeList.forEach(childNode => {\n            if (!(childNode instanceof HTMLElement)) {\n                return;\n            }\n\n            const childComp = this.createComponentFromElement(childNode, childComp => {\n                // copy over all attributes, including css classes, so any attributes user put on the tag\n                // wll be carried across\n                const childGui = childComp.getGui();\n                if (childGui) {\n                    this.copyAttributesFromNode(childNode, childComp.getGui());\n                }\n            }, paramsMap);\n\n            if (childComp) {\n                if ((childComp as any).addItems && childNode.children.length) {\n                    this.createChildComponentsFromTags(childNode, paramsMap);\n\n                    // converting from HTMLCollection to Array\n                    const items = Array.prototype.slice.call(childNode.children);\n\n                    (childComp as any).addItems(items);\n                }\n                // replace the tag (eg ag-checkbox) with the proper HTMLElement (eg 'div') in the dom\n                this.swapComponentForNode(childComp, parentNode, childNode);\n            } else if (childNode.childNodes) {\n                this.createChildComponentsFromTags(childNode, paramsMap);\n            }\n        });\n    }\n\n    public createComponentFromElement(\n        element: HTMLElement,\n        afterPreCreateCallback?: (comp: Component) => void,\n        paramsMap?: { [key: string]: any; }\n    ): Component | null {\n        const key = element.nodeName;\n        const componentParams = paramsMap ? paramsMap[element.getAttribute('ref')!] : undefined;\n        const ComponentClass = this.agStackComponentsRegistry.getComponentClass(key);\n\n        if (ComponentClass) {\n            Component.elementGettingCreated = element;\n            const newComponent = new ComponentClass(componentParams) as Component;\n            newComponent.setParentComponent(this);\n\n            this.createBean(newComponent, null, afterPreCreateCallback);\n            return newComponent;\n        }\n        return null;\n    }\n\n    private copyAttributesFromNode(source: Element, dest: Element): void {\n        iterateNamedNodeMap(source.attributes, (name, value) => dest.setAttribute(name, value));\n    }\n\n    private swapComponentForNode(newComponent: Component, parentNode: Element, childNode: Node): void {\n        const eComponent = newComponent.getGui();\n        parentNode.replaceChild(eComponent, childNode);\n        parentNode.insertBefore(document.createComment(childNode.nodeName), eComponent);\n        this.addDestroyFunc(this.destroyBean.bind(this, newComponent));\n        this.swapInComponentForQuerySelectors(newComponent, childNode);\n    }\n\n    private swapInComponentForQuerySelectors(newComponent: Component, childNode: Node): void {\n        const thisNoType = this as any;\n\n        this.iterateOverQuerySelectors((querySelector: any) => {\n            if (thisNoType[querySelector.attributeName] === childNode) {\n                thisNoType[querySelector.attributeName] = newComponent;\n            }\n        });\n    }\n\n    private iterateOverQuerySelectors(action: (querySelector: any) => void): void {\n        let thisPrototype: any = Object.getPrototypeOf(this);\n\n        while (thisPrototype != null) {\n            const metaData = thisPrototype.__agComponentMetaData;\n            const currentProtoName = getFunctionName(thisPrototype.constructor);\n\n            if (metaData && metaData[currentProtoName] && metaData[currentProtoName].querySelectors) {\n                metaData[currentProtoName].querySelectors.forEach((querySelector: any) => action(querySelector));\n            }\n\n            thisPrototype = Object.getPrototypeOf(thisPrototype);\n        }\n    }\n\n    public setTemplate(template: string | null | undefined, paramsMap?: { [key: string]: any; }): void {\n        const eGui = loadTemplate(template as string);\n        this.setTemplateFromElement(eGui, paramsMap);\n    }\n\n    public setTemplateFromElement(element: HTMLElement, paramsMap?: { [key: string]: any; }): void {\n        this.eGui = element;\n        (this.eGui as any).__agComponent = this;\n        this.wireQuerySelectors();\n\n        // context will not be available when user sets template in constructor\n        if (!!this.getContext()) {\n            this.createChildComponentsFromTags(this.getGui(), paramsMap);\n        }\n    }\n\n    @PreConstruct\n    private createChildComponentsPreConstruct(): void {\n        // ui exists if user sets template in constructor. when this happens, we have to wait for the context\n        // to be autoWired first before we can create child components.\n        if (!!this.getGui()) {\n            this.createChildComponentsFromTags(this.getGui());\n        }\n    }\n\n    protected wireQuerySelectors(): void {\n        if (!this.eGui) {\n            return;\n        }\n\n        const thisNoType = this as any;\n\n        this.iterateOverQuerySelectors((querySelector: any) => {\n            const setResult = (result: any) => thisNoType[querySelector.attributeName] = result;\n\n            // if it's a ref selector, and match is on top level component, we return\n            // the element. otherwise no way of components putting ref=xxx on the top\n            // level element as querySelector only looks at children.\n            const topLevelRefMatch = querySelector.refSelector\n                && this.eGui.getAttribute('ref') === querySelector.refSelector;\n            if (topLevelRefMatch) {\n                setResult(this.eGui);\n            } else {\n                // otherwise use querySelector, which looks at children\n                const resultOfQuery = this.eGui.querySelector(querySelector.querySelector);\n                if (resultOfQuery) {\n                    setResult(resultOfQuery.__agComponent || resultOfQuery);\n                }\n            }\n\n        });\n    }\n\n    public getGui(): HTMLElement {\n        return this.eGui;\n    }\n\n    public getFocusableElement(): HTMLElement {\n        return this.eGui;\n    }\n\n    public setParentComponent(component: Component) {\n        this.parentComponent = component;\n    }\n\n    public getParentComponent(): Component | undefined {\n        return this.parentComponent;\n    }\n\n    // this method is for older code, that wants to provide the gui element,\n    // it is not intended for this to be in ag-Stack\n    protected setGui(eGui: HTMLElement): void {\n        this.eGui = eGui;\n    }\n\n    protected queryForHtmlElement(cssSelector: string): HTMLElement {\n        return this.eGui.querySelector(cssSelector) as HTMLElement;\n    }\n\n    protected queryForHtmlInputElement(cssSelector: string): HTMLInputElement {\n        return this.eGui.querySelector(cssSelector) as HTMLInputElement;\n    }\n\n    public appendChild(newChild: HTMLElement | Component, container?: HTMLElement): void {\n        if (!container) {\n            container = this.eGui;\n        }\n\n        if (newChild == null) { return; }\n\n        if (isNodeOrElement(newChild)) {\n            container.appendChild(newChild as HTMLElement);\n        } else {\n            const childComponent = newChild as Component;\n            container.appendChild(childComponent.getGui());\n            this.addDestroyFunc(this.destroyBean.bind(this, childComponent));\n        }\n    }\n\n    public isDisplayed(): boolean {\n        return this.displayed;\n    }\n\n    public setVisible(visible: boolean): void {\n        if (visible !== this.visible) {\n            this.visible = visible;\n\n            setVisible(this.eGui, visible);\n        }\n    }\n\n    public setDisplayed(displayed: boolean): void {\n        if (displayed !== this.displayed) {\n            this.displayed = displayed;\n\n            setDisplayed(this.eGui, displayed);\n\n            const event: VisibleChangedEvent = {\n                type: Component.EVENT_DISPLAYED_CHANGED,\n                visible: this.displayed\n            };\n\n            this.dispatchEvent(event);\n        }\n    }\n\n    protected destroy(): void {\n        if (this.tooltipFeature) {\n            this.tooltipFeature = this.destroyBean(this.tooltipFeature);\n        }\n        super.destroy();\n    }\n\n    public addGuiEventListener(event: string, listener: (event: any) => void): void {\n        this.eGui.addEventListener(event, listener);\n        this.addDestroyFunc(() => this.eGui.removeEventListener(event, listener));\n    }\n\n    public addCssClass(className: string): void {\n        this.cssClassManager.addCssClass(className);\n    }\n\n    public removeCssClass(className: string): void {\n        this.cssClassManager.removeCssClass(className);\n    }\n\n    public containsCssClass(className: string): boolean {\n        return this.cssClassManager.containsCssClass(className);\n    }\n\n    public addOrRemoveCssClass(className: string, addOrRemove: boolean): void {\n        this.cssClassManager.addOrRemoveCssClass(className, addOrRemove);\n    }\n\n    public getAttribute(key: string): string | null {\n        const { eGui } = this;\n        return eGui ? eGui.getAttribute(key) : null;\n    }\n\n    public getRefElement(refName: string): HTMLElement {\n        return this.queryForHtmlElement(`[ref=\"${refName}\"]`);\n    }\n}\n","import { getFunctionName } from '../utils/function';\n\nexport function QuerySelector(selector?: string): Function {\n    return querySelectorFunc.bind(this, selector, undefined);\n}\n\nexport function RefSelector(ref: string): Function {\n    return querySelectorFunc.bind(this, `[ref=${ref}]`, ref);\n}\n\nfunction querySelectorFunc(selector: string, refSelector: string, classPrototype: any, methodOrAttributeName: string, index: number) {\n    if (selector === null) {\n        console.error('AG Grid: QuerySelector selector should not be null');\n        return;\n    }\n\n    if (typeof index === 'number') {\n        console.error('AG Grid: QuerySelector should be on an attribute');\n        return;\n    }\n\n    addToObjectProps(classPrototype, 'querySelectors', {\n        attributeName: methodOrAttributeName,\n        querySelector: selector,\n        refSelector: refSelector\n    });\n}\n\n// // think we should take this out, put property bindings on the\n// export function Method(eventName?: string): Function {\n//     return methodFunc.bind(this, eventName);\n// }\n//\n// function methodFunc(alias: string, target: Object, methodName: string) {\n//     if (alias === null) {\n//         console.error(\"AG Grid: EventListener eventName should not be null\");\n//         return;\n//     }\n//\n//     addToObjectProps(target, 'methods', {\n//         methodName: methodName,\n//         alias: alias\n//     });\n// }\n\nfunction addToObjectProps(target: Object, key: string, value: any): void {\n    // it's an attribute on the class\n    const props = getOrCreateProps(target, getFunctionName(target.constructor));\n\n    if (!props[key]) {\n        props[key] = [];\n    }\n\n    props[key].push(value);\n}\n\nfunction getOrCreateProps(target: any, instanceName: string): any {\n    if (!target.__agComponentMetaData) {\n        target.__agComponentMetaData = {};\n    }\n\n    if (!target.__agComponentMetaData[instanceName]) {\n        target.__agComponentMetaData[instanceName] = {};\n    }\n\n    return target.__agComponentMetaData[instanceName];\n}\n","import { IDoesFilterPassParams, IFilterOptionDef, ProvidedFilterModel } from '../../interfaces/iFilter';\nimport { RefSelector } from '../../widgets/componentAnnotations';\nimport { OptionsFactory } from './optionsFactory';\nimport { IProvidedFilter, IProvidedFilterParams, ProvidedFilter } from './providedFilter';\nimport { AgPromise, _ } from '../../utils';\nimport { AgSelect } from '../../widgets/agSelect';\nimport { AgRadioButton } from '../../widgets/agRadioButton';\nimport { includes } from '../../utils/array';\nimport { setDisplayed, setDisabled } from '../../utils/dom';\nimport { IFilterLocaleText } from '../filterLocaleText';\nimport { AgInputTextField } from '../../widgets/agInputTextField';\nimport { Component } from '../../widgets/component';\nimport { AgAbstractInputField } from '../../widgets/agAbstractInputField';\nimport { IAfterGuiAttachedParams } from '../../interfaces/iAfterGuiAttachedParams';\nimport { ListOption } from '../../widgets/agList';\nimport { IFloatingFilterParent } from '../floating/floatingFilter';\n\nexport type JoinOperator = 'AND' | 'OR';\n\n/** Interface contract for the public aspects of the SimpleFilter implementation(s). */\nexport interface ISimpleFilter extends IProvidedFilter, IFloatingFilterParent {\n}\n\nexport interface ISimpleFilterParams extends IProvidedFilterParams {\n    /**\n     * Array of filter options to present to the user.\n     */\n    filterOptions?: (IFilterOptionDef | ISimpleFilterModelType)[];\n    /** The default filter option to be selected. */\n    defaultOption?: string;\n    /**\n     * By default, the two conditions are combined using `AND`.\n     * You can change this default by setting this property.\n     * Options: `AND`, `OR`\n     */\n    defaultJoinOperator?: JoinOperator;\n    /**\n     * If `true`, the filter will only allow one condition.\n     * Default: `false`\n     */\n    suppressAndOrCondition?: boolean;\n    /**\n     * By default, only one condition is shown, and a second is made visible once a first condition has been entered.\n     * Set this to `true` to always show both conditions.\n     * In this case the second condition will be disabled until a first condition has been entered.\n     * Default: `false`\n     */\n    alwaysShowBothConditions?: boolean;\n}\n\nexport type ISimpleFilterModelType =\n    'empty'\n    | 'equals'\n    | 'notEqual'\n    | 'lessThan'\n    | 'lessThanOrEqual'\n    | 'greaterThan'\n    | 'greaterThanOrEqual'\n    | 'inRange'\n    | 'contains'\n    | 'notContains'\n    | 'startsWith'\n    | 'endsWith'\n    | 'blank'\n    | 'notBlank';\nexport interface ISimpleFilterModel extends ProvidedFilterModel {\n    /** One of the filter options, e.g. `'equals'` */\n    type?: ISimpleFilterModelType | null;\n}\n\nexport interface ICombinedSimpleModel<M extends ISimpleFilterModel> extends ProvidedFilterModel {\n    operator: JoinOperator;\n    condition1: M;\n    condition2: M;\n}\n\nexport enum ConditionPosition { One, Two }\n\nexport type Tuple<T> = (T | null)[];\n\n/**\n * Every filter with a dropdown where the user can specify a comparing type against the filter values.\n *\n * @param M type of filter-model managed by the concrete sub-class that extends this type\n * @param V type of value managed by the concrete sub-class that extends this type\n * @param E type of UI element used for collecting user-input\n */\nexport abstract class SimpleFilter<M extends ISimpleFilterModel, V, E = AgInputTextField> extends ProvidedFilter<M | ICombinedSimpleModel<M>, V> implements ISimpleFilter {\n\n    public static EMPTY: ISimpleFilterModelType = 'empty';\n    public static BLANK: ISimpleFilterModelType = 'blank';\n    public static NOT_BLANK: ISimpleFilterModelType = 'notBlank';\n    public static EQUALS: ISimpleFilterModelType = 'equals';\n    public static NOT_EQUAL: ISimpleFilterModelType = 'notEqual';\n    public static LESS_THAN: ISimpleFilterModelType = 'lessThan';\n    public static LESS_THAN_OR_EQUAL: ISimpleFilterModelType = 'lessThanOrEqual';\n    public static GREATER_THAN: ISimpleFilterModelType = 'greaterThan';\n    public static GREATER_THAN_OR_EQUAL: ISimpleFilterModelType = 'greaterThanOrEqual';\n    public static IN_RANGE: ISimpleFilterModelType = 'inRange';\n    public static CONTAINS: ISimpleFilterModelType = 'contains';\n    public static NOT_CONTAINS: ISimpleFilterModelType = 'notContains';\n    public static STARTS_WITH: ISimpleFilterModelType = 'startsWith';\n    public static ENDS_WITH: ISimpleFilterModelType = 'endsWith';\n\n    @RefSelector('eOptions1') protected readonly eType1: AgSelect;\n    @RefSelector('eOptions2') protected readonly eType2: AgSelect;\n    @RefSelector('eJoinOperatorPanel') protected readonly eJoinOperatorPanel: HTMLElement;\n    @RefSelector('eJoinOperatorAnd') protected readonly eJoinOperatorAnd: AgRadioButton;\n    @RefSelector('eJoinOperatorOr') protected readonly eJoinOperatorOr: AgRadioButton;\n    @RefSelector('eCondition1Body') protected readonly eCondition1Body: HTMLElement;\n    @RefSelector('eCondition2Body') protected readonly eCondition2Body: HTMLElement;\n\n    private allowTwoConditions: boolean;\n    private alwaysShowBothConditions: boolean;\n    private defaultJoinOperator: JoinOperator | undefined;\n\n    protected optionsFactory: OptionsFactory;\n    protected abstract getDefaultFilterOptions(): string[];\n\n    // gets called once during initialisation, to build up the html template\n    protected abstract createValueTemplate(position: ConditionPosition): string;\n\n    // filter uses this to know if new model is different from previous model, ie if filter has changed\n    protected abstract areSimpleModelsEqual(a: ISimpleFilterModel, b: ISimpleFilterModel): boolean;\n\n    // getModel() calls this to create the two conditions. if only one condition,\n    // the result is returned by getModel(), otherwise is called twice and both results\n    // returned in a CombinedFilter object.\n    protected abstract createCondition(position: ConditionPosition): M;\n\n    // because the sub-class filter models have different attribute names, we have to map\n    protected abstract mapValuesFromModel(filterModel: ISimpleFilterModel | null): Tuple<V>;\n\n    // allow value-type specific handling of null cell values.\n    protected abstract evaluateNullValue(filterType?: ISimpleFilterModelType | null): boolean;\n\n    // allow value-type specific handling of non-null cell values.\n    protected abstract evaluateNonNullValue(range: Tuple<V>, cellValue: V, filterModel: M, params: IDoesFilterPassParams): boolean;\n\n    // allow iteration of all condition inputs managed by sub-classes.\n    protected abstract getInputs(): Tuple<E>[];\n\n    // allow retrieval of all condition input values.\n    protected abstract getValues(position: ConditionPosition): Tuple<V>;\n\n    protected getNumberOfInputs(type?: ISimpleFilterModelType | null): number {\n        const customOpts = this.optionsFactory.getCustomOption(type);\n        if (customOpts) {\n            const { numberOfInputs } = customOpts;\n            return numberOfInputs != null ? numberOfInputs : 1;\n        }\n\n        const zeroInputTypes = [\n            SimpleFilter.EMPTY, SimpleFilter.NOT_BLANK, SimpleFilter.BLANK,\n        ];\n\n        if (type && zeroInputTypes.indexOf(type) >= 0) {\n            return 0;\n        } else if (type === SimpleFilter.IN_RANGE) {\n            return 2;\n        }\n\n        return 1;\n    }\n\n    // floating filter calls this when user applies filter from floating filter\n    public onFloatingFilterChanged(type: string | null | undefined, value: V | null): void {\n        this.setTypeFromFloatingFilter(type);\n        this.setValueFromFloatingFilter(value);\n        this.onUiChanged(true);\n    }\n\n    protected setTypeFromFloatingFilter(type?: string | null): void {\n        this.eType1.setValue(type);\n        this.eType2.setValue(this.optionsFactory.getDefaultOption());\n        (this.isDefaultOperator('AND') ? this.eJoinOperatorAnd : this.eJoinOperatorOr).setValue(true);\n    }\n\n    public getModelFromUi(): M | ICombinedSimpleModel<M> | null {\n        if (!this.isConditionUiComplete(ConditionPosition.One)) {\n            return null;\n        }\n\n        if (this.isAllowTwoConditions() && this.isConditionUiComplete(ConditionPosition.Two)) {\n            return {\n                filterType: this.getFilterType(),\n                operator: this.getJoinOperator(),\n                condition1: this.createCondition(ConditionPosition.One),\n                condition2: this.createCondition(ConditionPosition.Two)\n            };\n        }\n\n        return this.createCondition(ConditionPosition.One);\n    }\n\n    protected getConditionTypes(): Tuple<ISimpleFilterModelType> {\n        return [\n            this.eType1.getValue() as ISimpleFilterModelType,\n            this.eType2.getValue() as ISimpleFilterModelType,\n        ];\n    }\n\n    protected getJoinOperator(): JoinOperator {\n        return this.eJoinOperatorOr.getValue() === true ? 'OR' : 'AND';\n    }\n\n    protected areModelsEqual(a: M | ICombinedSimpleModel<M>, b: M | ICombinedSimpleModel<M>): boolean {\n        // both are missing\n        if (!a && !b) { return true; }\n\n        // one is missing, other present\n        if ((!a && b) || (a && !b)) { return false; }\n\n        // one is combined, the other is not\n        const aIsSimple = !(a as any).operator;\n        const bIsSimple = !(b as any).operator;\n        const oneSimpleOneCombined = (!aIsSimple && bIsSimple) || (aIsSimple && !bIsSimple);\n        if (oneSimpleOneCombined) { return false; }\n\n        let res: boolean;\n\n        // otherwise both present, so compare\n        if (aIsSimple) {\n            const aSimple = a as M;\n            const bSimple = b as M;\n\n            res = this.areSimpleModelsEqual(aSimple, bSimple);\n        } else {\n            const aCombined = a as ICombinedSimpleModel<M>;\n            const bCombined = b as ICombinedSimpleModel<M>;\n\n            res = aCombined.operator === bCombined.operator\n                && this.areSimpleModelsEqual(aCombined.condition1, bCombined.condition1)\n                && this.areSimpleModelsEqual(aCombined.condition2, bCombined.condition2);\n        }\n\n        return res;\n    }\n\n    protected setModelIntoUi(model: ISimpleFilterModel | ICombinedSimpleModel<M>): AgPromise<void> {\n        const isCombined = (model as any).operator;\n\n        if (isCombined) {\n            const combinedModel = model as ICombinedSimpleModel<M>;\n\n            const orChecked = combinedModel.operator === 'OR';\n            this.eJoinOperatorAnd.setValue(!orChecked);\n            this.eJoinOperatorOr.setValue(orChecked);\n\n            this.eType1.setValue(combinedModel.condition1.type);\n            this.eType2.setValue(combinedModel.condition2.type);\n\n            this.setConditionIntoUi(combinedModel.condition1, ConditionPosition.One);\n            this.setConditionIntoUi(combinedModel.condition2, ConditionPosition.Two);\n        } else {\n            const simpleModel = model as ISimpleFilterModel;\n\n            this.eJoinOperatorAnd.setValue(this.isDefaultOperator('AND'));\n            this.eJoinOperatorOr.setValue(this.isDefaultOperator('OR'));\n\n            this.eType1.setValue(simpleModel.type);\n            this.eType2.setValue(this.optionsFactory.getDefaultOption());\n\n            this.setConditionIntoUi(simpleModel as M, ConditionPosition.One);\n            this.setConditionIntoUi(null, ConditionPosition.Two);\n        }\n\n        return AgPromise.resolve();\n    }\n\n    public doesFilterPass(params: IDoesFilterPassParams): boolean {\n        const model = this.getModel();\n\n        if (model == null) { return true; }\n\n        const { operator } = model as ICombinedSimpleModel<M>;\n        const models: M[] = [];\n\n        if (operator) {\n            const combinedModel = model as ICombinedSimpleModel<M>;\n\n            models.push(combinedModel.condition1, combinedModel.condition2);\n        } else {\n            models.push(model as M);\n        }\n\n        const combineFunction = operator && operator === 'OR' ? 'some' : 'every';\n\n        return models[combineFunction](m => this.individualConditionPasses(params, m));\n    }\n\n    protected setParams(params: ISimpleFilterParams): void {\n        super.setParams(params);\n\n        this.optionsFactory = new OptionsFactory();\n        this.optionsFactory.init(params, this.getDefaultFilterOptions());\n\n        this.allowTwoConditions = !params.suppressAndOrCondition;\n        this.alwaysShowBothConditions = !!params.alwaysShowBothConditions;\n        this.defaultJoinOperator = this.getDefaultJoinOperator(params.defaultJoinOperator);\n\n        this.putOptionsIntoDropdown();\n        this.addChangedListeners();\n    }\n\n    private getDefaultJoinOperator(defaultJoinOperator?: JoinOperator): JoinOperator | undefined {\n        return includes(['AND', 'OR'], defaultJoinOperator) ? defaultJoinOperator : 'AND';\n    }\n\n    private putOptionsIntoDropdown(): void {\n        const filterOptions = this.optionsFactory.getFilterOptions();\n        const eTypes = [this.eType1, this.eType2];\n\n        // Add specified options to all condition drop-downs.\n        filterOptions.forEach(option => {\n            const listOption = typeof option === 'string' ?\n                this.createBoilerplateListOption(option) :\n                this.createCustomListOption(option);\n\n            eTypes.forEach(eType => eType.addOption(listOption));\n        });\n\n        // Make drop-downs read-only if there is only one option.\n        eTypes.forEach(eType => eType.setDisabled(filterOptions.length <= 1));\n    }\n\n    private createBoilerplateListOption(option: string): ListOption {\n        return { value: option, text: this.translate(option as keyof IFilterLocaleText) };\n    }\n\n    private createCustomListOption(option: IFilterOptionDef): ListOption {\n        const { displayKey } = option;\n        const customOption = this.optionsFactory.getCustomOption(option.displayKey);\n        return {\n            value: displayKey,\n            text: customOption ?\n                this.gridOptionsWrapper.getLocaleTextFunc()(customOption.displayKey, customOption.displayName) :\n                this.translate(displayKey as keyof IFilterLocaleText),\n        };\n    }\n\n    public isAllowTwoConditions(): boolean {\n        return this.allowTwoConditions;\n    }\n\n    protected createBodyTemplate(): string {\n        return /* html */`\n            <ag-select class=\"ag-filter-select\" ref=\"eOptions1\"></ag-select>\n            ${this.createValueTemplate(ConditionPosition.One)}\n            <div class=\"ag-filter-condition\" ref=\"eJoinOperatorPanel\">\n               <ag-radio-button ref=\"eJoinOperatorAnd\" class=\"ag-filter-condition-operator ag-filter-condition-operator-and\"></ag-radio-button>\n               <ag-radio-button ref=\"eJoinOperatorOr\" class=\"ag-filter-condition-operator ag-filter-condition-operator-or\"></ag-radio-button>\n            </div>\n            <ag-select class=\"ag-filter-select\" ref=\"eOptions2\"></ag-select>\n            ${this.createValueTemplate(ConditionPosition.Two)}`;\n    }\n\n    protected getCssIdentifier() {\n        return 'simple-filter';\n    }\n\n    protected updateUiVisibility(): void {\n        const elementConditionGroups = [\n            [this.eType1],\n            [this.eType2, this.eJoinOperatorPanel, this.eJoinOperatorAnd, this.eJoinOperatorOr],\n        ];\n        const elementBodies = [this.eCondition1Body, this.eCondition2Body];\n\n        elementConditionGroups.forEach((group, position) => {\n            const visible = this.isConditionVisible(position);\n            const disabled = this.isConditionDisabled(position);\n\n            group.forEach(element => {\n                if (element instanceof AgAbstractInputField || element instanceof AgSelect) {\n                    element.setDisabled(disabled);\n                    element.setDisplayed(visible);\n                } else {\n                    setDisabled(element, disabled);\n                    setDisplayed(element, visible);\n                }\n            });\n        });\n\n        elementBodies.forEach((element, index) => {\n            setDisplayed(element, this.isConditionBodyVisible(index));\n        });\n\n        this.forEachInput((element, index, position, numberOfInputs) => {\n            this.setElementDisplayed(element, index < numberOfInputs);\n            this.setElementDisabled(element, this.isConditionDisabled(position));\n        });\n\n        this.resetPlaceholder();\n    }\n\n    public afterGuiAttached(params?: IAfterGuiAttachedParams) {\n        super.afterGuiAttached(params);\n\n        this.resetPlaceholder();\n\n        if (!params || (!params.suppressFocus && !this.isReadOnly())) {\n            const firstInput = this.getInputs()[0][0];\n            if (!firstInput) { return; }\n\n            if (firstInput instanceof AgAbstractInputField) {\n                firstInput.getInputElement().focus();\n            }\n        }\n    }\n\n    // allow sub-classes to reset HTML placeholders after UI update.\n    protected resetPlaceholder(): void {\n        const globalTranslate = this.gridOptionsWrapper.getLocaleTextFunc();\n\n        this.forEachInput((element, index, _, numberOfInputs) => {\n            if (!(element instanceof AgAbstractInputField)) {\n                return;\n            }\n\n            const placeholder =\n                index === 0 && numberOfInputs > 1 ? 'inRangeStart' :\n                index === 0 ? 'filterOoo' :\n                'inRangeEnd';\n            const ariaLabel =\n                index === 0 && numberOfInputs > 1 ? globalTranslate('ariaFilterFromValue', 'Filter from value') :\n                index === 0 ? globalTranslate('ariaFilterValue', 'Filter Value') :\n                globalTranslate('ariaFilterToValue', 'Filter to Value');\n\n            element.setInputPlaceholder(this.translate(placeholder));\n            element.setInputAriaLabel(ariaLabel);\n        });\n    }\n\n    protected setElementValue(element: E, value: V | null, silent?: boolean): void {\n        if (element instanceof AgAbstractInputField) {\n            element.setValue(value != null ? String(value) : null, silent);\n        }\n    }\n\n    protected setElementDisplayed(element: E, displayed: boolean): void {\n        if (element instanceof Component) {\n            setDisplayed(element.getGui(), displayed);\n        }\n    }\n\n    protected setElementDisabled(element: E, disabled: boolean): void {\n        if (element instanceof Component) {\n            setDisabled(element.getGui(), disabled);\n        }\n    }\n\n    protected attachElementOnChange(element: E, listener: () => void): void {\n        if (element instanceof AgAbstractInputField) {\n            element.onValueChange(listener);\n        }\n    }\n\n    protected forEachInput(cb: (element: E, index: number, position: number, numberOfInputs: number) => void): void {\n        const inputs = this.getInputs();\n        this.getConditionTypes().forEach((type, position) => {\n            const numberOfInputs = this.getNumberOfInputs(type);\n            for (let index = 0; index < inputs[position].length; index++) {\n                const input = inputs[position][index];\n                if (input != null) {\n                    cb(input, index, position, numberOfInputs);\n                }\n            }\n        });\n    }\n\n    protected isConditionVisible(position: ConditionPosition): boolean {\n        if (position === 0) { return true; } // Position 0 should always be visible.\n        if (!this.allowTwoConditions) { return false; } // Short-circuit if no tail conditions.\n\n        if (this.isReadOnly()) {\n            // Only display a condition when read-only if the condition is complete.\n            return this.isConditionUiComplete(position);\n        }\n\n        if (this.alwaysShowBothConditions) { return true; }\n\n        // Only display a 2nd or later condition when the previous condition is complete.\n        return this.isConditionUiComplete(position - 1);\n    }\n\n    protected isConditionDisabled(position: ConditionPosition): boolean {\n        if (this.isReadOnly()) { return true; } // Read-only mode trumps everything.\n        if (!this.isConditionVisible(position)) { return true; } // Invisible implies disabled.\n        if (position === 0) { return false; } // Position 0 should typically be editable.\n\n        // Only allow editing of a 2nd or later condition if the previous condition is complete.\n        return !this.isConditionUiComplete(position - 1);\n    }\n\n    protected isConditionBodyVisible(position: ConditionPosition): boolean {\n        if (!this.isConditionVisible(position)) { return false; }\n\n        // Check that the condition needs inputs.\n        const type = this.getConditionTypes()[position];\n        const numberOfInputs = this.getNumberOfInputs(type);\n        return numberOfInputs > 0;\n    }\n\n    // returns true if the UI represents a working filter, eg all parts are filled out.\n    // eg if text filter and textfield blank then returns false.\n    protected isConditionUiComplete(position: ConditionPosition): boolean {\n        const type = this.getConditionTypes()[position];\n\n        if (type === SimpleFilter.EMPTY) { return false; }\n\n        if (this.getValues(position).some(v => v == null)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    protected resetUiToDefaults(silent?: boolean): AgPromise<void> {\n        const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n        const filteringLabel = translate('ariaFilteringOperator', 'Filtering operator');\n        const uniqueGroupId = 'ag-simple-filter-and-or-' + this.getCompId();\n        const defaultOption = this.optionsFactory.getDefaultOption();\n\n        this.eType1\n            .setValue(defaultOption, silent)\n            .setAriaLabel(filteringLabel)\n            .setDisabled(this.isReadOnly());\n        this.eType2\n            .setValue(this.optionsFactory.getDefaultOption(), silent)\n            .setAriaLabel(filteringLabel)\n            .setDisabled(this.isReadOnly());\n\n        this.eJoinOperatorAnd\n            .setValue(this.isDefaultOperator('AND'), silent)\n            .setName(uniqueGroupId)\n            .setLabel(this.translate('andCondition'))\n            .setDisabled(this.isReadOnly());\n\n        this.eJoinOperatorOr\n            .setValue(this.isDefaultOperator('OR'), silent)\n            .setName(uniqueGroupId)\n            .setLabel(this.translate('orCondition'))\n            .setDisabled(this.isReadOnly());\n\n        this.forEachInput((element) => {\n            this.setElementValue(element, null, silent);\n            this.setElementDisabled(element, this.isReadOnly());\n        });\n\n        this.resetPlaceholder();\n\n        return AgPromise.resolve();\n    }\n\n    // puts model values into the UI\n    protected setConditionIntoUi(model: M | null, position: ConditionPosition): void {\n        const values = this.mapValuesFromModel(model);\n        this.forEachInput((element, index, elPosition, _) => {\n            if (elPosition !== position) { return; }\n\n            this.setElementValue(element, values[index] != null ? values[index] : null);\n        });\n    }\n\n    // after floating filter changes, this sets the 'value' section. this is implemented by the base class\n    // (as that's where value is controlled), the 'type' part from the floating filter is dealt with in this class.\n    protected setValueFromFloatingFilter(value: V | null): void {\n        this.forEachInput((element, index, position, _) => {\n            this.setElementValue(element, index === 0 && position === 0 ? value : null);\n        });\n    }\n\n    private isDefaultOperator(operator: JoinOperator): boolean {\n        return operator === this.defaultJoinOperator;\n    }\n\n    private addChangedListeners() {\n        if (this.isReadOnly()) {\n            return;\n        }\n\n        const listener = () => this.onUiChanged();\n        this.eType1.onValueChange(listener);\n        this.eType2.onValueChange(listener);\n        this.eJoinOperatorOr.onValueChange(listener);\n        this.eJoinOperatorAnd.onValueChange(listener);\n\n        this.forEachInput((element) => {\n            this.attachElementOnChange(element, listener);\n        });\n    }\n\n    /** returns true if the row passes the said condition */\n    protected individualConditionPasses(params: IDoesFilterPassParams, filterModel: M) {\n        const cellValue = this.getCellValue(params.node);\n        const values = this.mapValuesFromModel(filterModel);\n        const customFilterOption = this.optionsFactory.getCustomOption(filterModel.type);\n\n        const customFilterResult = this.evaluateCustomFilter(customFilterOption, values, cellValue);\n        if (customFilterResult != null) {\n            return customFilterResult;\n        }\n\n        if (cellValue == null) {\n            return this.evaluateNullValue(filterModel.type);\n        }\n\n        return this.evaluateNonNullValue(values, cellValue, filterModel, params);\n    }\n\n    protected evaluateCustomFilter(\n        customFilterOption: IFilterOptionDef | undefined,\n        values: Tuple<V>,\n        cellValue: V,\n    ): boolean | undefined {\n        if (customFilterOption == null) {\n            return;\n        }\n\n        const { predicate } = customFilterOption;\n        // only execute the custom filter if a value exists or a value isn't required, i.e. input is hidden\n        if (predicate != null && !values.some(v => v == null)) {\n            return predicate(values, cellValue);\n        }\n\n        // No custom filter invocation, indicate that to the caller.\n        return;\n    }\n\n    protected isBlank(cellValue: V) {\n        return cellValue == null ||\n            (typeof cellValue === 'string' && cellValue.trim().length === 0);\n    }\n}\n","import { IFloatingFilterComp, IFloatingFilterParams, IFloatingFilterParent } from '../floatingFilter';\nimport { Component } from '../../../widgets/component';\nimport { RefSelector } from '../../../widgets/componentAnnotations';\nimport { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { Autowired } from '../../../context/context';\nimport { ColumnModel } from '../../../columns/columnModel';\nimport { IFilter } from '../../../interfaces/iFilter';\n\n// optional floating filter for user provided filters - instead of providing a floating filter,\n// they can provide a getModelAsString() method on the filter instead. this class just displays\n// the string returned from getModelAsString()\nexport class ReadOnlyFloatingFilter extends Component implements IFloatingFilterComp<IFilter & IFloatingFilterParent> {\n\n    @RefSelector('eFloatingFilterText') private eFloatingFilterText: AgInputTextField;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    private params: IFloatingFilterParams;\n\n    constructor() {\n        super(/* html */`\n            <div class=\"ag-floating-filter-input\" role=\"presentation\">\n                <ag-input-text-field ref=\"eFloatingFilterText\"></ag-input-text-field>\n            </div>`);\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n    public init(params: IFloatingFilterParams): void {\n        this.params = params;\n        const displayName = this.columnModel.getDisplayNameForColumn(params.column, 'header', true);\n        const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n        this.eFloatingFilterText\n            .setDisabled(true)\n            .setInputAriaLabel(`${displayName} ${translate('ariaFilterInput', 'Filter Input')}`);\n    }\n\n    public onParentModelChanged(parentModel: any): void {\n        if (!parentModel) {\n            this.eFloatingFilterText.setValue('');\n            return;\n        }\n\n        this.params.parentFilterInstance(filterInstance => {\n            // it would be nice to check if getModelAsString was present before creating this component,\n            // however that is not possible, as React Hooks and VueJS don't attached the methods to the Filter until\n            // AFTER the filter is created, not allowing inspection before this (we create floating filters as columns\n            // are drawn, but the parent filters are only created when needed).\n            if (filterInstance.getModelAsString) {\n                const modelAsString = filterInstance.getModelAsString(parentModel);\n                this.eFloatingFilterText.setValue(modelAsString);\n            }\n        });\n    }\n}\n","import { IDateComp, IDateParams } from '../../../rendering/dateComponent';\nimport { UserComponentFactory } from '../../../components/framework/userComponentFactory';\nimport { Context } from '../../../context/context';\nimport { IAfterGuiAttachedParams } from '../../../interfaces/iAfterGuiAttachedParams';\nimport { setDisplayed } from '../../../utils/dom';\nimport { WithoutGridCommon } from '../../../interfaces/iCommon';\n\n/** Provides sync access to async component. Date component can be lazy created - this class encapsulates\n * this by keeping value locally until DateComp has loaded, then passing DateComp the value. */\nexport class DateCompWrapper {\n    private dateComp: IDateComp | null | undefined;\n    private tempValue: Date | null;\n    private disabled: boolean | null;\n    private displayed: boolean | null;\n    private alive = true;\n    private context: Context;\n    private eParent: HTMLElement;\n\n    constructor(context: Context, userComponentFactory: UserComponentFactory, dateComponentParams: WithoutGridCommon<IDateParams>, eParent: HTMLElement) {\n        this.context = context;\n        this.eParent = eParent;\n\n        const compDetails = userComponentFactory.getDateCompDetails(dateComponentParams);\n        const promise = compDetails.newAgStackInstance();\n\n        promise!.then(dateComp => {\n            // because async, check the filter still exists after component comes back\n            if (!this.alive) {\n                context.destroyBean(dateComp);\n                return;\n            }\n\n            this.dateComp = dateComp;\n\n            if (!dateComp) { return; }\n\n            eParent.appendChild(dateComp.getGui());\n\n            if (dateComp.afterGuiAttached) {\n                dateComp.afterGuiAttached();\n            }\n\n            if (this.tempValue) {\n                dateComp.setDate(this.tempValue);\n            }\n            if (this.disabled != null) {\n                this.setDateCompDisabled(this.disabled);\n            }\n        });\n    }\n\n    public destroy(): void {\n        this.alive = false;\n        this.dateComp = this.context.destroyBean(this.dateComp);\n    }\n\n    public getDate(): Date | null {\n        return this.dateComp ? this.dateComp.getDate() : this.tempValue;\n    }\n\n    public setDate(value: Date | null): void {\n        if (this.dateComp) {\n            this.dateComp.setDate(value);\n        } else {\n            this.tempValue = value;\n        }\n    }\n\n    public setDisabled(disabled: boolean): void {\n        if (this.dateComp) {\n            this.setDateCompDisabled(disabled);\n        } else {\n            this.disabled = disabled;\n        }\n    }\n\n    public setDisplayed(displayed: boolean) {\n        setDisplayed(this.eParent, displayed);\n    }\n\n    public setInputPlaceholder(placeholder: string): void {\n        if (this.dateComp && this.dateComp.setInputPlaceholder) {\n            this.dateComp.setInputPlaceholder(placeholder);\n        }\n    }\n\n    public setInputAriaLabel(label: string): void {\n        if (this.dateComp && this.dateComp.setInputAriaLabel) {\n            this.dateComp.setInputAriaLabel(label);\n        }\n    }\n\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\n        if (this.dateComp && typeof this.dateComp.afterGuiAttached === 'function') {\n            this.dateComp.afterGuiAttached(params);\n        }\n    }\n\n    private setDateCompDisabled(disabled: boolean): void {\n        if (this.dateComp == null) { return; }\n        if (this.dateComp.setDisabled == null) { return; }\n\n        this.dateComp.setDisabled(disabled);\n    }\n\n}\n","import { IFilterOptionDef } from '../../interfaces/iFilter';\nimport { IScalarFilterParams } from './scalarFilter';\nimport { ISimpleFilterParams } from './simpleFilter';\nimport { _ } from '../../utils';\n\n/* Common logic for options, used by both filters and floating filters. */\nexport class OptionsFactory {\n    protected customFilterOptions: { [name: string]: IFilterOptionDef; } = {};\n    protected filterOptions: (IFilterOptionDef | string)[];\n    protected defaultOption: string;\n\n    public init(params: IScalarFilterParams, defaultOptions: string[]): void {\n        this.filterOptions = params.filterOptions || defaultOptions;\n        this.mapCustomOptions();\n        this.selectDefaultItem(params);\n\n        this.checkForDeprecatedParams();\n    }\n\n    private checkForDeprecatedParams(): void {\n        if (this.filterOptions.some(opt => typeof opt != 'string' && opt.test != null)) {\n            console.warn(`AG Grid: [IFilterOptionDef] since v26.2.0, test() has been replaced with predicate().`);\n        }\n        if (this.filterOptions.some(opt => typeof opt != 'string' && opt.hideFilterInput != null)) {\n            console.warn(`AG Grid: [IFilterOptionDef] since v26.2.0, useOfHideFilterInput has been replaced with numberOfInputs.`);\n        }\n    }\n\n    public getFilterOptions(): (IFilterOptionDef | string)[] {\n        return this.filterOptions;\n    }\n\n    private mapCustomOptions(): void {\n        if (!this.filterOptions) { return; }\n\n        this.filterOptions.forEach(filterOption => {\n            if (typeof filterOption === 'string') { return; }\n\n            const requiredProperties = [['displayKey'], ['displayName'], ['predicate', 'test']];\n            const propertyCheck = (keys: [keyof IFilterOptionDef]) => {\n                if (!keys.some(key => filterOption[key] != null)) {\n                    console.warn(`AG Grid: ignoring FilterOptionDef as it doesn't contain one of '${keys}'`);\n                    return false;\n                }\n\n                return true;\n            };\n\n            if (!requiredProperties.every(propertyCheck)) {\n                this.filterOptions = this.filterOptions.filter(v => v === filterOption) || [];\n                return;\n            }\n\n            const { test } = filterOption;\n            const mutatedFilterOptions = { ...filterOption };\n            if (test != null && filterOption.predicate == null) {\n                mutatedFilterOptions.predicate = (v: any[], cv: any) => test(v[0], cv);\n                delete mutatedFilterOptions.test;\n            }\n            if (mutatedFilterOptions.hideFilterInput && mutatedFilterOptions.numberOfInputs == null) {\n                mutatedFilterOptions.numberOfInputs = 0;\n                delete mutatedFilterOptions.hideFilterInput;\n            }\n\n            this.customFilterOptions[filterOption.displayKey] = mutatedFilterOptions;\n        });\n    }\n\n    private selectDefaultItem(params: ISimpleFilterParams): void {\n        if (params.defaultOption) {\n            this.defaultOption = params.defaultOption;\n        } else if (this.filterOptions.length >= 1) {\n            const firstFilterOption = this.filterOptions[0];\n\n            if (typeof firstFilterOption === 'string') {\n                this.defaultOption = firstFilterOption;\n            } else if (firstFilterOption.displayKey) {\n                this.defaultOption = firstFilterOption.displayKey;\n            } else {\n                console.warn(`AG Grid: invalid FilterOptionDef supplied as it doesn't contain a 'displayKey'`);\n            }\n        } else {\n            console.warn('AG Grid: no filter options for filter');\n        }\n    }\n\n    public getDefaultOption(): string {\n        return this.defaultOption;\n    }\n\n    public getCustomOption(name?: string | null): IFilterOptionDef | undefined {\n        return this.customFilterOptions[name!];\n    }\n}\n","export interface IFilterLocaleText {\n    applyFilter: string;\n    clearFilter: string;\n    resetFilter: string;\n    cancelFilter: string;\n    filterOoo: string;\n    empty: string;\n    equals: string;\n    notEqual: string;\n    lessThan: string;\n    greaterThan: string;\n    inRange: string;\n    inRangeStart: string;\n    inRangeEnd: string;\n    lessThanOrEqual: string;\n    greaterThanOrEqual: string;\n    contains: string;\n    notContains: string;\n    startsWith: string;\n    endsWith: string;\n    blank: string;\n    notBlank: string;\n    andCondition: string;\n    orCondition: string;\n    dateFormatOoo: string;\n}\n\nexport interface IFilterTitleLocaleText {\n    textFilter: string;\n    numberFilter: string;\n    dateFilter: string;\n    setFilter: string;\n}\n\nexport const DEFAULT_FILTER_LOCALE_TEXT: IFilterLocaleText & IFilterTitleLocaleText = {\n    applyFilter: 'Apply',\n    clearFilter: 'Clear',\n    resetFilter: 'Reset',\n    cancelFilter: 'Cancel',\n    textFilter: 'Text Filter',\n    numberFilter: 'Number Filter',\n    dateFilter: 'Date Filter',\n    setFilter: 'Set Filter',\n    filterOoo: 'Filter...',\n    empty: 'Choose One',\n    equals: 'Equals',\n    notEqual: 'Not equal',\n    lessThan: 'Less than',\n    greaterThan: 'Greater than',\n    inRange: 'In range',\n    inRangeStart: 'From',\n    inRangeEnd: 'To',\n    lessThanOrEqual: 'Less than or equals',\n    greaterThanOrEqual: 'Greater than or equals',\n    contains: 'Contains',\n    notContains: 'Not contains',\n    startsWith: 'Starts with',\n    endsWith: 'Ends with',\n    blank: 'Blank',\n    notBlank: 'Not blank',\n    andCondition: 'AND',\n    orCondition: 'OR',\n    dateFormatOoo: 'yyyy-mm-dd',\n};","export class KeyCode {\n    static BACKSPACE = 'Backspace';\n    static TAB = 'Tab';\n    static ENTER = 'Enter';\n    static ESCAPE = 'Escape';\n    static SPACE = ' ';\n    static LEFT = 'ArrowLeft';\n    static UP = 'ArrowUp';\n    static RIGHT = 'ArrowRight';\n    static DOWN = 'ArrowDown';\n    static DELETE = 'Delete';\n\n    static F2 = 'F2';\n\n    static PAGE_UP = 'PageUp';\n    static PAGE_DOWN = 'PageDown';\n    static PAGE_HOME = 'Home';\n    static PAGE_END = 'End';\n\n    // these should be used with `event.code` instead of `event.key`\n    // as `event.key` changes when non-latin keyboards are used\n    static A = 'KeyA';\n    static C = 'KeyC';\n    static V = 'KeyV';\n    static D = 'KeyD';\n    static Z = 'KeyZ';\n    static Y = 'KeyY';\n}\n","import { PostConstruct, Autowired } from '../context/context';\nimport { FocusService } from '../focusService';\nimport { KeyCode } from '../constants/keyCode';\nimport { isStopPropagationForAgGrid, stopPropagationForAgGrid } from '../utils/event';\nimport { BeanStub } from '../context/beanStub';\n\nexport interface ManagedFocusCallbacks {\n    shouldStopEventPropagation?: (e: KeyboardEvent) => boolean;\n    onTabKeyDown?: (e: KeyboardEvent) => void;\n    handleKeyDown?: (e: KeyboardEvent) => void;\n    onFocusIn?: (e: FocusEvent) => void;\n    onFocusOut?: (e: FocusEvent) => void;\n}\n\nexport class ManagedFocusFeature extends BeanStub {\n\n    public static FOCUS_MANAGED_CLASS = 'ag-focus-managed';\n\n    @Autowired('focusService') private readonly focusService: FocusService;\n\n    constructor(\n        private readonly eFocusableElement: HTMLElement,\n        private callbacks: ManagedFocusCallbacks = {}\n    ) {\n        super();\n        this.callbacks = {\n            shouldStopEventPropagation: () => false,\n            onTabKeyDown: (e: KeyboardEvent) => {\n                if (e.defaultPrevented) { return; }\n\n                const nextRoot = this.focusService.findNextFocusableElement(this.eFocusableElement, false, e.shiftKey);\n\n                if (!nextRoot) { return; }\n\n                nextRoot.focus();\n                e.preventDefault();\n            },\n            ...callbacks\n        };\n    }\n\n    @PostConstruct\n    protected postConstruct(): void {\n        this.eFocusableElement.classList.add(ManagedFocusFeature.FOCUS_MANAGED_CLASS);\n\n        this.addKeyDownListeners(this.eFocusableElement);\n\n        if (this.callbacks.onFocusIn) {\n            this.addManagedListener(this.eFocusableElement, 'focusin', this.callbacks.onFocusIn);\n        }\n\n        if (this.callbacks.onFocusOut) {\n            this.addManagedListener(this.eFocusableElement, 'focusout', this.callbacks.onFocusOut);\n        }\n    }\n\n    private addKeyDownListeners(eGui: HTMLElement): void {\n        this.addManagedListener(eGui, 'keydown', (e: KeyboardEvent) => {\n            if (e.defaultPrevented || isStopPropagationForAgGrid(e)) { return; }\n\n            if (this.callbacks.shouldStopEventPropagation!(e)) {\n                stopPropagationForAgGrid(e);\n                return;\n            }\n\n            if (e.key === KeyCode.TAB) {\n                this.callbacks.onTabKeyDown!(e);\n            } else if (this.callbacks.handleKeyDown) {\n                this.callbacks.handleKeyDown(e);\n            }\n        });\n    }\n}\n","import { IDoesFilterPassParams, IFilter, IFilterComp, IFilterParams } from '../../interfaces/iFilter';\nimport { Autowired, PostConstruct } from '../../context/context';\nimport { IRowModel } from '../../interfaces/iRowModel';\nimport { IAfterGuiAttachedParams } from '../../interfaces/iAfterGuiAttachedParams';\nimport { loadTemplate, setDisabled } from '../../utils/dom';\nimport { debounce } from '../../utils/function';\nimport { AgPromise } from '../../utils/promise';\nimport { PopupEventParams } from '../../widgets/popupService';\nimport { IFilterLocaleText, IFilterTitleLocaleText, DEFAULT_FILTER_LOCALE_TEXT } from '../filterLocaleText';\nimport { ManagedFocusFeature } from '../../widgets/managedFocusFeature';\nimport { convertToSet } from '../../utils/set';\nimport { Component } from '../../widgets/component';\nimport { RowNode } from '../../entities/rowNode';\nimport { ValueService } from '../../valueService/valueService';\nimport { _ } from '../../utils';\n\ntype FilterButtonType = 'apply' | 'clear' | 'reset' | 'cancel';\n\nexport interface IProvidedFilterParams extends IFilterParams {\n    /**\n     * Specifies the buttons to be shown in the filter, in the order they should be displayed in.\n     * The options are:\n     * \n     *  - `'apply'`: If the Apply button is present, the filter is only applied after the user hits the Apply button.\n     *  - `'clear'`: The Clear button will clear the (form) details of the filter without removing any active filters on the column.\n     *  - `'reset'`: The Reset button will clear the details of the filter and any active filters on that column.\n     *  - `'cancel'`: The Cancel button will discard any changes that have been made to the filter in the UI, restoring the applied model.\n     */\n    buttons?: FilterButtonType[];\n    /**\n     * If the Apply button is present, the filter popup will be closed immediately when the Apply\n     * or Reset button is clicked if this is set to `true`.\n     * \n     * Default: `false`\n     */\n    closeOnApply?: boolean;\n    /**\n     * Overrides the default debounce time in milliseconds for the filter. Defaults are:\n     * - `TextFilter` and `NumberFilter`: 500ms. (These filters have text field inputs, so a short delay before the input is formatted and the filtering applied is usually appropriate).\n     * - `DateFilter` and `SetFilter`: 0ms\n     */\n    debounceMs?: number;\n    /**\n     * If set to `true`, disables controls in the filter to mutate its state. Normally this would\n     * be used in conjunction with the Filter API.\n     * \n     * Default: `false`\n     */\n    readOnly?: boolean;\n}\n\n/** Interface contract for the public aspects of the ProvidedFilter implementation(s). */\nexport interface IProvidedFilter extends IFilter {\n    /**\n     * Applies the model shown in the UI (so that `getModel()` will now return what was in the UI\n     * when `applyModel()` was called).\n     */\n    applyModel(): boolean;\n    /**\n     * Returns the filter model from the UI. If changes have been made to the UI but not yet\n     * applied, this model will reflect those changes.\n     */\n    getModelFromUi(): any;\n}\n\n/**\n * Contains common logic to all provided filters (apply button, clear button, etc).\n * All the filters that come with AG Grid extend this class. User filters do not\n * extend this class.\n *\n * @param M type of filter-model managed by the concrete sub-class that extends this type\n * @param V type of value managed by the concrete sub-class that extends this type\n */\nexport abstract class ProvidedFilter<M, V> extends Component implements IProvidedFilter, IFilterComp {\n    // each level in the hierarchy will save params with the appropriate type for that level.\n    private providedFilterParams: IProvidedFilterParams;\n\n    private applyActive = false;\n    private hidePopup: ((params: PopupEventParams) => void) | null | undefined = null;\n    // a debounce of the onBtApply method\n    private onBtApplyDebounce: () => void;\n\n    // after the user hits 'apply' the model gets copied to here. this is then the model that we use for\n    // all filtering. so if user changes UI but doesn't hit apply, then the UI will be out of sync with this model.\n    // this is what we want, as the UI should only become the 'active' filter once it's applied. when apply is\n    // inactive, this model will be in sync (following the debounce ms). if the UI is not a valid filter\n    // (eg the value is missing so nothing to filter on, or for set filter all checkboxes are checked so filter\n    // not active) then this appliedModel will be null/undefined.\n    private appliedModel: M | null = null;\n\n    @Autowired('rowModel') protected readonly rowModel: IRowModel;\n    @Autowired('valueService') private valueService: ValueService;\n\n    constructor(private readonly filterNameKey: keyof IFilterTitleLocaleText) {\n        super();\n    }\n\n    public abstract doesFilterPass(params: IDoesFilterPassParams): boolean;\n\n    protected abstract updateUiVisibility(): void;\n\n    protected abstract createBodyTemplate(): string;\n    protected abstract getCssIdentifier(): string;\n    protected abstract resetUiToDefaults(silent?: boolean): AgPromise<void>;\n\n    protected abstract setModelIntoUi(model: M): AgPromise<void>;\n    protected abstract areModelsEqual(a: M, b: M): boolean;\n\n    /** Used to get the filter type for filter models. */\n    protected abstract getFilterType(): string;\n\n    @PostConstruct\n    protected postConstruct(): void {\n        this.resetTemplate(); // do this first to create the DOM\n        this.createManagedBean(new ManagedFocusFeature(\n            this.getFocusableElement(),\n            {\n                handleKeyDown: this.handleKeyDown.bind(this)\n            }\n        ));\n    }\n\n    // override\n    protected handleKeyDown(e: KeyboardEvent): void { }\n\n    public abstract getModelFromUi(): M | null;\n\n    public getFilterTitle(): string {\n        return this.translate(this.filterNameKey);\n    }\n\n    public isFilterActive(): boolean {\n        // filter is active if we have a valid applied model\n        return !!this.appliedModel;\n    }\n\n    protected resetTemplate(paramsMap?: any) {\n        const templateString = /* html */`\n            <div class=\"ag-filter-wrapper\">\n                <div class=\"ag-filter-body-wrapper ag-${this.getCssIdentifier()}-body-wrapper\">\n                    ${this.createBodyTemplate()}\n                </div>\n            </div>`;\n\n        this.setTemplate(templateString, paramsMap);\n    }\n\n    protected isReadOnly(): boolean {\n        return !!this.providedFilterParams.readOnly;\n    }\n\n    public init(params: IProvidedFilterParams): void {\n        this.setParams(params);\n\n        this.resetUiToDefaults(true).then(() => {\n            this.updateUiVisibility();\n            this.setupOnBtApplyDebounce();\n        });\n    }\n\n    protected setParams(params: IProvidedFilterParams): void {\n        this.providedFilterParams = params;\n\n        this.applyActive = ProvidedFilter.isUseApplyButton(params);\n\n        this.createButtonPanel();\n    }\n\n    private createButtonPanel(): void {\n        const { buttons } = this.providedFilterParams;\n\n        if (!buttons || buttons.length < 1 || this.isReadOnly()) {\n            return;\n        }\n\n        const eButtonsPanel = document.createElement('div');\n\n        eButtonsPanel.classList.add('ag-filter-apply-panel');\n\n        const addButton = (type: FilterButtonType): void => {\n            let text;\n            let clickListener: (e?: Event) => void;\n\n            switch (type) {\n                case 'apply':\n                    text = this.translate('applyFilter');\n                    clickListener = (e) => this.onBtApply(false, false, e);\n                    break;\n                case 'clear':\n                    text = this.translate('clearFilter');\n                    clickListener = () => this.onBtClear();\n                    break;\n                case 'reset':\n                    text = this.translate('resetFilter');\n                    clickListener = () => this.onBtReset();\n                    break;\n                case 'cancel':\n                    text = this.translate('cancelFilter');\n                    clickListener = (e) => { this.onBtCancel(e!); };\n                    break;\n                default:\n                    console.warn('AG Grid: Unknown button type specified');\n                    return;\n            }\n\n            const button = loadTemplate(\n                /* html */\n                `<button\n                    type=\"button\"\n                    ref=\"${type}FilterButton\"\n                    class=\"ag-standard-button ag-filter-apply-panel-button\"\n                >${text}\n                </button>`\n            );\n\n            eButtonsPanel.appendChild(button);\n            this.addManagedListener(button, 'click', clickListener);\n        };\n\n        convertToSet(buttons).forEach(type => addButton(type));\n\n        this.getGui().appendChild(eButtonsPanel);\n    }\n\n    // subclasses can override this to provide alternative debounce defaults\n    protected getDefaultDebounceMs(): number {\n        return 0;\n    }\n\n    private setupOnBtApplyDebounce(): void {\n        const debounceMs = ProvidedFilter.getDebounceMs(this.providedFilterParams, this.getDefaultDebounceMs());\n        this.onBtApplyDebounce = debounce(this.onBtApply.bind(this), debounceMs);\n    }\n\n    public getModel(): M | null {\n        return this.appliedModel ? this.appliedModel : null;\n    }\n\n    public setModel(model: M | null): AgPromise<void> {\n        const promise = model != null ? this.setModelIntoUi(model) : this.resetUiToDefaults();\n\n        return promise.then(() => {\n            this.updateUiVisibility();\n\n            // we set the model from the GUI, rather than the provided model,\n            // so the model is consistent, e.g. handling of null/undefined will be the same,\n            // or if model is case insensitive, then casing is removed.\n            this.applyModel();\n        });\n    }\n\n    private onBtCancel(e: Event): void {\n        const currentModel = this.getModel();\n\n        const afterAppliedFunc = () => {\n            this.onUiChanged(false, 'prevent');\n\n            if (this.providedFilterParams.closeOnApply) {\n                this.close(e);\n            }\n        };\n\n        if (currentModel != null) {\n            this.setModelIntoUi(currentModel).then(afterAppliedFunc);\n        } else {\n            this.resetUiToDefaults().then(afterAppliedFunc);\n        }\n    }\n\n    private onBtClear(): void {\n        this.resetUiToDefaults().then(() => this.onUiChanged());\n    }\n\n    private onBtReset(): void {\n        this.onBtClear();\n        this.onBtApply();\n    }\n\n    /**\n     * Applies changes made in the UI to the filter, and returns true if the model has changed.\n     */\n    public applyModel(): boolean {\n        const newModel = this.getModelFromUi();\n\n        if (!this.isModelValid(newModel!)) { return false; }\n\n        const previousModel = this.appliedModel;\n\n        this.appliedModel = newModel;\n\n        // models can be same if user pasted same content into text field, or maybe just changed the case\n        // and it's a case insensitive filter\n        return !this.areModelsEqual(previousModel!, newModel!);\n    }\n\n    protected isModelValid(model: M): boolean {\n        return true;\n    }\n\n    protected onBtApply(afterFloatingFilter = false, afterDataChange = false, e?: Event): void {\n        if (this.applyModel()) {\n            // the floating filter uses 'afterFloatingFilter' info, so it doesn't refresh after filter changed if change\n            // came from floating filter\n            this.providedFilterParams.filterChangedCallback({ afterFloatingFilter, afterDataChange });\n        }\n\n        const { closeOnApply } = this.providedFilterParams;\n\n        // only close if an apply button is visible, otherwise we'd be closing every time a change was made!\n        if (closeOnApply && this.applyActive && !afterFloatingFilter && !afterDataChange) {\n            this.close(e);\n        }\n    }\n\n    public onNewRowsLoaded(): void {\n    }\n\n    public close(e?: Event): void {\n        if (!this.hidePopup) { return; }\n\n        const keyboardEvent = e as KeyboardEvent;\n        const key = keyboardEvent && keyboardEvent.key;\n        let params: PopupEventParams;\n\n        if (key === 'Enter' || key === 'Space') {\n            params = { keyboardEvent };\n        }\n\n        this.hidePopup(params!);\n        this.hidePopup = null;\n    }\n\n    /**\n     * By default, if the change came from a floating filter it will be applied immediately, otherwise if there is no\n     * apply button it will be applied after a debounce, otherwise it will not be applied at all. This behaviour can\n     * be adjusted by using the apply parameter.\n     */\n    protected onUiChanged(fromFloatingFilter = false, apply?: 'immediately' | 'debounce' | 'prevent'): void {\n        this.updateUiVisibility();\n        this.providedFilterParams.filterModifiedCallback();\n\n        if (this.applyActive && !this.isReadOnly) {\n            const isValid = this.isModelValid(this.getModelFromUi()!);\n\n            setDisabled(this.getRefElement('applyFilterButton'), !isValid);\n        }\n\n        if ((fromFloatingFilter && !apply) || apply === 'immediately') {\n            this.onBtApply(fromFloatingFilter);\n        } else if ((!this.applyActive && !apply) || apply === 'debounce') {\n            this.onBtApplyDebounce();\n        }\n    }\n\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\n        if (params == null) { return; }\n\n        this.hidePopup = params.hidePopup;\n    }\n\n    // static, as used by floating filter also\n    public static getDebounceMs(params: IProvidedFilterParams, debounceDefault: number): number {\n        if (ProvidedFilter.isUseApplyButton(params)) {\n            if (params.debounceMs != null) {\n                console.warn('AG Grid: debounceMs is ignored when apply button is present');\n            }\n\n            return 0;\n        }\n\n        return params.debounceMs != null ? params.debounceMs : debounceDefault;\n    }\n\n    // static, as used by floating filter also\n    public static isUseApplyButton(params: IProvidedFilterParams): boolean {\n        return !!params.buttons && params.buttons.indexOf('apply') >= 0;\n    }\n\n    public destroy(): void {\n        this.hidePopup = null;\n\n        super.destroy();\n    }\n\n    protected translate(key: keyof IFilterLocaleText | keyof IFilterTitleLocaleText): string {\n        const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n\n        return translate(key, DEFAULT_FILTER_LOCALE_TEXT[key]);\n    }\n\n    protected getCellValue(rowNode: RowNode): V {\n        const { api, colDef, column, columnApi, context } = this.providedFilterParams;\n        return this.providedFilterParams.valueGetter({\n            api,\n            colDef,\n            column,\n            columnApi,\n            context,\n            data: rowNode.data,\n            getValue: (field) => rowNode.data[field],\n            node: rowNode,\n        });\n    }\n}\n","import { Component } from \"./component\";\nimport { PostConstruct } from \"../context/context\";\nimport { clearElement, setElementWidth } from \"../utils/dom\";\nimport { setAriaRole } from \"../utils/aria\";\n\nexport type LabelAlignment = 'left' | 'right' | 'top';\n\nexport interface IAgLabel {\n    label?: HTMLElement | string;\n    labelWidth?: number | 'flex';\n    labelSeparator?: string;\n    labelAlignment?: LabelAlignment;\n}\n\nexport abstract class AgAbstractLabel<TConfig extends IAgLabel = IAgLabel> extends Component {\n    protected abstract eLabel: HTMLElement;\n\n    protected readonly config: TConfig;\n    protected labelSeparator: string = '';\n    protected labelAlignment: LabelAlignment = 'left';\n    private label: HTMLElement | string = '';\n\n    constructor(config?: TConfig, template?: string) {\n        super(template);\n\n        this.config = config || {} as any;\n    }\n\n    @PostConstruct\n    protected postConstruct() {\n        this.addCssClass('ag-labeled');\n        this.eLabel.classList.add('ag-label');\n\n        const { labelSeparator, label, labelWidth, labelAlignment } = this.config;\n\n        if (labelSeparator != null) {\n            this.setLabelSeparator(labelSeparator);\n        }\n\n        if (label != null) {\n            this.setLabel(label);\n        }\n\n        if (labelWidth != null) {\n            this.setLabelWidth(labelWidth);\n        }\n\n        this.setLabelAlignment(labelAlignment || this.labelAlignment);\n        this.refreshLabel();\n    }\n\n    protected refreshLabel() {\n        clearElement(this.eLabel);\n\n        if (typeof this.label === 'string') {\n            this.eLabel.innerText = this.label + this.labelSeparator;\n        } else if (this.label) {\n            this.eLabel.appendChild(this.label);\n        }\n\n        if (this.label === '') {\n            this.eLabel.classList.add('ag-hidden');\n            setAriaRole(this.eLabel, 'presentation');\n        } else {\n            this.eLabel.classList.remove('ag-hidden');\n            setAriaRole(this.eLabel, null);\n        }\n    }\n\n    public setLabelSeparator(labelSeparator: string): this {\n        if (this.labelSeparator === labelSeparator) {\n            return this;\n        }\n\n        this.labelSeparator = labelSeparator;\n\n        if (this.label != null) {\n            this.refreshLabel();\n        }\n\n        return this;\n    }\n\n    public getLabelId(): string {\n        this.eLabel.id = this.eLabel.id || `ag-${this.getCompId()}-label`;\n\n        return this.eLabel.id;\n    }\n\n    public getLabel(): HTMLElement | string {\n        return this.label;\n    }\n\n    public setLabel(label: HTMLElement | string): this {\n        if (this.label === label) {\n            return this;\n        }\n\n        this.label = label;\n\n        this.refreshLabel();\n\n        return this;\n    }\n\n    public setLabelAlignment(alignment: LabelAlignment): this {\n        const eGui = this.getGui();\n        const eGuiClassList = eGui.classList;\n\n        eGuiClassList.toggle('ag-label-align-left', alignment === 'left');\n        eGuiClassList.toggle('ag-label-align-right', alignment === 'right');\n        eGuiClassList.toggle('ag-label-align-top', alignment === 'top');\n\n        return this;\n    }\n\n    public setLabelWidth(width: number | 'flex'): this {\n        if (this.label == null) {\n            return this;\n        }\n\n        setElementWidth(this.eLabel, width);\n\n        return this;\n    }\n}","import { AgAbstractLabel, IAgLabel } from './agAbstractLabel';\nimport { setDisabled, setFixedWidth } from '../utils/dom';\n\nexport type FieldElement = HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;\nexport abstract class AgAbstractField<TValue, TConfig extends IAgLabel = IAgLabel> extends AgAbstractLabel<TConfig> {\n    public static EVENT_CHANGED = 'valueChange';\n\n    protected previousValue: TValue | null | undefined;\n    protected value: TValue | null | undefined;\n    protected disabled: boolean = false;\n\n    constructor(config?: TConfig, template?: string, protected readonly className?: string) {\n        super(config, template);\n    }\n\n    protected postConstruct(): void {\n        super.postConstruct();\n\n        if (this.className) {\n            this.addCssClass(this.className);\n        }\n    }\n\n    public onValueChange(callbackFn: (newValue?: TValue | null) => void) {\n        this.addManagedListener(this, AgAbstractField.EVENT_CHANGED, () => callbackFn(this.getValue()));\n\n        return this;\n    }\n\n    public getWidth(): number {\n        return this.getGui().clientWidth;\n    }\n\n    public setWidth(width: number): this {\n        setFixedWidth(this.getGui(), width);\n\n        return this;\n    }\n\n    public getPreviousValue(): TValue | null | undefined {\n        return this.previousValue;\n    }\n\n    public getValue(): TValue | null | undefined {\n        return this.value;\n    }\n\n    public setValue(value?: TValue | null, silent?: boolean): this {\n        if (this.value === value) {\n            return this;\n        }\n\n        this.previousValue = this.value;\n        this.value = value;\n\n        if (!silent) {\n            this.dispatchEvent({ type: AgAbstractField.EVENT_CHANGED });\n        }\n\n        return this;\n    }\n\n    public setDisabled(disabled: boolean): this {\n        disabled = !!disabled;\n\n        const element = this.getGui();\n\n        setDisabled(element, disabled);\n        element.classList.toggle('ag-disabled', disabled);\n\n        this.disabled = disabled;\n\n        return this;\n    }\n\n    public isDisabled(): boolean {\n        return !!this.disabled;\n    }\n}\n","import { AgAbstractField } from \"./agAbstractField\";\nimport { Component } from \"./component\";\nimport { RefSelector } from \"./componentAnnotations\";\nimport { setAriaLabelledBy, setAriaLabel, setAriaDescribedBy } from \"../utils/aria\";\nimport { createIconNoSpan } from \"../utils/icon\";\nimport { exists } from \"../utils/generic\";\nimport { setElementWidth, isVisible } from \"../utils/dom\";\nimport { KeyCode } from '../constants/keyCode';\nimport { IAgLabel } from './agAbstractLabel';\n\nexport abstract class AgPickerField<TElement extends HTMLElement, TValue> extends AgAbstractField<TValue> {\n    public abstract showPicker(): Component;\n    protected value: TValue;\n    protected isPickerDisplayed: boolean = false;\n    protected isDestroyingPicker: boolean = false;\n    private skipClick: boolean = false;\n    private pickerComponent: Component;\n\n    @RefSelector('eLabel') protected readonly eLabel: HTMLElement;\n    @RefSelector('eWrapper') protected readonly eWrapper: HTMLElement;\n    @RefSelector('eDisplayField') protected readonly eDisplayField: TElement;\n    @RefSelector('eIcon') private readonly eIcon: HTMLButtonElement;\n\n    constructor(config?: IAgLabel, className?: string, private readonly pickerIcon?: string, ariaRole?: string) {\n        super(config,\n            /* html */ `<div class=\"ag-picker-field\" role=\"presentation\">\n                <div ref=\"eLabel\"></div>\n                <div ref=\"eWrapper\"\n                    class=\"ag-wrapper ag-picker-field-wrapper\"\n                    tabIndex=\"-1\"\n                    aria-expanded=\"false\"\n                    ${ariaRole ? `role=\"${ariaRole}\"` : ''}\n                >\n                    <div ref=\"eDisplayField\" class=\"ag-picker-field-display\"></div>\n                    <div ref=\"eIcon\" class=\"ag-picker-field-icon\" aria-hidden=\"true\"></div>\n                </div>\n            </div>`, className);\n    }\n\n    protected postConstruct() {\n        super.postConstruct();\n\n        const displayId = `${this.getCompId()}-display`;\n\n        this.eDisplayField.setAttribute('id', displayId);\n        setAriaDescribedBy(this.eWrapper, displayId);\n\n        const clickHandler = () => {\n            if (this.skipClick) {\n                this.skipClick = false;\n                return;\n            }\n\n            if (this.isDisabled()) { return; }\n\n            this.pickerComponent = this.showPicker();\n        };\n\n        const eGui = this.getGui();\n\n        this.addManagedListener(eGui, 'mousedown', (e: MouseEvent) => {\n            if (\n                !this.skipClick &&\n                this.pickerComponent &&\n                this.pickerComponent.isAlive() &&\n                isVisible(this.pickerComponent.getGui()) &&\n                eGui.contains(e.target as HTMLElement)\n            ) {\n                this.skipClick = true;\n            }\n        });\n\n        this.addManagedListener(eGui, 'keydown', (e: KeyboardEvent) => {\n            switch (e.key) {\n                case KeyCode.UP:\n                case KeyCode.DOWN:\n                case KeyCode.ENTER:\n                case KeyCode.SPACE:\n                    clickHandler();\n                case KeyCode.ESCAPE:\n                    if (this.isPickerDisplayed) {\n                        e.preventDefault();\n                    }\n                    break;\n            }\n        });\n\n        this.addManagedListener(this.eWrapper, 'click', clickHandler);\n        this.addManagedListener(this.eLabel, 'click', clickHandler);\n\n        if (this.pickerIcon) {\n            const icon = createIconNoSpan(this.pickerIcon, this.gridOptionsWrapper);\n            if (icon) {\n                this.eIcon.appendChild(icon);\n            }\n        }\n    }\n\n    protected refreshLabel() {\n        if (exists(this.getLabel())) {\n            setAriaLabelledBy(this.eWrapper, this.getLabelId());\n        } else {\n            this.eWrapper.removeAttribute('aria-labelledby');\n        }\n\n        super.refreshLabel();\n    }\n\n    public setAriaLabel(label: string): this {\n        setAriaLabel(this.eWrapper, label);\n\n        return this;\n    }\n\n    public setInputWidth(width: number | 'flex'): this {\n        setElementWidth(this.eWrapper, width);\n        return this;\n    }\n\n    public getFocusableElement(): HTMLElement {\n        return this.eWrapper;\n    }\n}\n","import { AgAbstractField } from \"./agAbstractField\";\nimport { Component } from \"./component\";\nimport { PostConstruct } from \"../context/context\";\nimport { escapeString } from \"../utils/string\";\nimport { KeyCode } from '../constants/keyCode';\nimport { setAriaPosInSet, setAriaRole, setAriaSelected, setAriaSetSize } from '../utils/aria';\n\nexport interface ListOption {\n    value: string;\n    text?: string;\n}\n\nexport class AgList extends Component {\n    public static EVENT_ITEM_SELECTED = 'selectedItem';\n    private static ACTIVE_CLASS = 'ag-active-item';\n\n    private options: ListOption[] = [];\n    private itemEls: HTMLElement[] = [];\n    private highlightedEl: HTMLElement | null;\n    private value: string | null;\n    private displayValue: string | null;\n\n    constructor(private readonly cssIdentifier = 'default') {\n        super(/* html */`<div class=\"ag-list ag-${cssIdentifier}-list\" role=\"listbox\"></div>`);\n    }\n\n    @PostConstruct\n    private init(): void {\n        this.addManagedListener(this.getGui(), 'keydown', this.handleKeyDown.bind(this));\n    }\n\n    private handleKeyDown(e: KeyboardEvent): void {\n        const key = e.key;\n        switch (key) {\n            case KeyCode.ENTER:\n                if (!this.highlightedEl) {\n                    this.setValue(this.getValue());\n                } else {\n                    const pos = this.itemEls.indexOf(this.highlightedEl);\n                    this.setValueByIndex(pos);\n                }\n                break;\n            case KeyCode.DOWN:\n            case KeyCode.UP:\n                const isDown = key === KeyCode.DOWN;\n                let itemToHighlight: HTMLElement;\n\n                e.preventDefault();\n\n                if (!this.highlightedEl) {\n                    itemToHighlight = this.itemEls[isDown ? 0 : this.itemEls.length - 1];\n                } else {\n                    const currentIdx = this.itemEls.indexOf(this.highlightedEl);\n                    let nextPos = currentIdx + (isDown ? 1 : -1);\n                    nextPos = Math.min(Math.max(nextPos, 0), this.itemEls.length - 1);\n                    itemToHighlight = this.itemEls[nextPos];\n                }\n                this.highlightItem(itemToHighlight);\n                break;\n        }\n    }\n\n    public addOptions(listOptions: ListOption[]): this {\n        listOptions.forEach(listOption => this.addOption(listOption));\n        return this;\n    }\n\n    public addOption(listOption: ListOption): this {\n        const { value, text } = listOption;\n        const sanitisedText = escapeString(text || value);\n\n        this.options.push({ value, text: sanitisedText! });\n        this.renderOption(value, sanitisedText!);\n\n        this.updateIndices();\n\n        return this;\n    }\n\n    private updateIndices(): void {\n        const options = this.getGui().querySelectorAll('.ag-list-item');\n        options.forEach((option: HTMLElement, idx) => {\n            setAriaPosInSet(option, idx + 1);\n            setAriaSetSize(option, options.length);\n        });\n    }\n\n    private renderOption(value: string, text: string): void {\n        const itemEl = document.createElement('div');\n\n        setAriaRole(itemEl, 'option');\n        itemEl.classList.add('ag-list-item', `ag-${this.cssIdentifier}-list-item`);\n        itemEl.innerHTML = `<span>${text}</span>`;\n        itemEl.tabIndex = -1;\n\n        this.itemEls.push(itemEl);\n\n        this.addManagedListener(itemEl, 'mouseover', () => this.highlightItem(itemEl));\n        this.addManagedListener(itemEl, 'mouseleave', () => this.clearHighlighted());\n        this.addManagedListener(itemEl, 'click', () => this.setValue(value));\n\n        this.getGui().appendChild(itemEl);\n    }\n\n    public setValue(value?: string | null, silent?: boolean): this {\n        if (this.value === value) {\n            this.fireItemSelected();\n            return this;\n        }\n\n        if (value == null) {\n            this.reset();\n            return this;\n        }\n\n        const idx = this.options.findIndex(option => option.value === value);\n\n        if (idx !== -1) {\n            const option = this.options[idx];\n\n            this.value = option.value;\n            this.displayValue = option.text != null ? option.text : option.value;\n            this.highlightItem(this.itemEls[idx]);\n\n            if (!silent) {\n                this.fireChangeEvent();\n            }\n        }\n\n        return this;\n    }\n\n    public setValueByIndex(idx: number): this {\n        return this.setValue(this.options[idx].value);\n    }\n\n    public getValue(): string | null {\n        return this.value;\n    }\n\n    public getDisplayValue(): string | null {\n        return this.displayValue;\n    }\n\n    public refreshHighlighted(): void {\n        this.clearHighlighted();\n        const idx = this.options.findIndex(option => option.value === this.value);\n\n        if (idx !== -1) {\n            this.highlightItem(this.itemEls[idx]);\n        }\n    }\n\n    private reset(): void {\n        this.value = null;\n        this.displayValue = null;\n        this.clearHighlighted();\n        this.fireChangeEvent();\n    }\n\n    private highlightItem(el: HTMLElement): void {\n        if (!el.offsetParent) { return; }\n\n        this.clearHighlighted();\n        this.highlightedEl = el;\n\n        this.highlightedEl.classList.add(AgList.ACTIVE_CLASS);\n        setAriaSelected(this.highlightedEl, true);\n\n        this.highlightedEl.focus();\n    }\n\n    private clearHighlighted(): void {\n        if (!this.highlightedEl || !this.highlightedEl.offsetParent) { return; }\n\n        this.highlightedEl.classList.remove(AgList.ACTIVE_CLASS);\n        setAriaSelected(this.highlightedEl, false);\n\n        this.highlightedEl = null;\n    }\n\n    private fireChangeEvent(): void {\n        this.dispatchEvent({ type: AgAbstractField.EVENT_CHANGED });\n        this.fireItemSelected();\n    }\n\n    private fireItemSelected(): void {\n        this.dispatchEvent({ type: AgList.EVENT_ITEM_SELECTED });\n    }\n}\n","import { AgAbstractField } from \"./agAbstractField\";\nimport { AgPickerField } from \"./agPickerField\";\nimport { ListOption, AgList } from \"./agList\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { PopupService } from \"./popupService\";\nimport { setElementWidth, getAbsoluteWidth, getInnerHeight } from \"../utils/dom\";\nimport { IAgLabel } from './agAbstractLabel';\nimport { setAriaExpanded } from \"../utils/aria\";\n\nexport class AgSelect extends AgPickerField<HTMLSelectElement, string> {\n    protected listComponent: AgList;\n    private hideList: ((event?: any) => void) | null;\n\n    @Autowired('popupService') private popupService: PopupService;\n\n    constructor(config?: IAgLabel) {\n        super(config, 'ag-select', 'smallDown', 'listbox');\n    }\n\n    @PostConstruct\n    public init(): void {\n        this.listComponent = this.createBean(new AgList('select'));\n        this.listComponent.setParentComponent(this);\n        this.eWrapper.tabIndex = 0;\n\n        this.listComponent.addManagedListener(\n            this.listComponent,\n            AgList.EVENT_ITEM_SELECTED,\n            () => { if (this.hideList) { this.hideList(); } }\n        );\n\n        this.listComponent.addManagedListener(\n            this.listComponent,\n            AgAbstractField.EVENT_CHANGED,\n            () => {\n                this.setValue(this.listComponent.getValue(), false, true);\n\n                if (this.hideList) { this.hideList(); }\n            }\n        );\n    }\n\n    public showPicker() {\n        const listGui = this.listComponent.getGui();\n        const eDocument = this.gridOptionsWrapper.getDocument();\n\n        const destroyMouseWheelFunc = this.addManagedListener(eDocument.body, 'wheel', (e: MouseEvent) => {\n            if (!listGui.contains(e.target as HTMLElement) && this.hideList) {\n                this.hideList();\n            }\n        });\n\n        const destroyFocusOutFunc = this.addManagedListener(listGui, 'focusout', (e: FocusEvent) => {\n            if (!listGui.contains(e.relatedTarget as HTMLElement) && this.hideList) {\n                this.hideList();\n            }\n        });\n\n        const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: listGui,\n            closeOnEsc: true,\n            closedCallback: () => {\n                this.hideList = null;\n                this.isPickerDisplayed = false;\n                destroyFocusOutFunc!();\n                destroyMouseWheelFunc!();\n\n                if (this.isAlive()) {\n                    setAriaExpanded(this.eWrapper, false);\n                    this.getFocusableElement().focus();\n                }\n            },\n            ariaLabel: translate('ariaLabelSelectField', 'Select Field')\n        });\n\n        if (addPopupRes) {\n            this.hideList = addPopupRes.hideFunc;\n        }\n        this.isPickerDisplayed = true;\n\n        setElementWidth(listGui, getAbsoluteWidth(this.eWrapper));\n        setAriaExpanded(this.eWrapper, true);\n\n        listGui.style.maxHeight = getInnerHeight(this.popupService.getPopupParent()) + 'px';\n        listGui.style.position = 'absolute';\n\n        this.popupService.positionPopupUnderComponent({\n            type: 'ag-list',\n            eventSource: this.eWrapper,\n            ePopup: listGui,\n            keepWithinBounds: true\n        });\n\n        this.listComponent.refreshHighlighted();\n\n        return this.listComponent;\n    }\n\n    public addOptions(options: ListOption[]): this {\n        options.forEach(option => this.addOption(option));\n\n        return this;\n    }\n\n    public addOption(option: ListOption): this {\n        this.listComponent.addOption(option);\n\n        return this;\n    }\n\n    public setValue(value?: string | null, silent?: boolean, fromPicker?: boolean): this {\n        if (this.value === value) { return this; }\n\n        if (!fromPicker) {\n            this.listComponent.setValue(value, true);\n        }\n\n        const newValue = this.listComponent.getValue();\n\n        if (newValue === this.getValue()) { return this; }\n\n        this.eDisplayField.innerHTML = this.listComponent.getDisplayValue()!;\n\n        return super.setValue(value, silent);\n    }\n\n    protected destroy(): void {\n        if (this.hideList) {\n            this.hideList();\n        }\n\n        this.destroyBean(this.listComponent);\n        super.destroy();\n    }\n}\n","import { IAgLabel } from './agAbstractLabel';\nimport { RefSelector } from './componentAnnotations';\nimport { AgAbstractField, FieldElement } from './agAbstractField';\nimport { setDisabled, setElementWidth, addOrRemoveAttribute } from '../utils/dom';\nimport { setAriaLabelledBy, setAriaLabel } from '../utils/aria';\nimport { exists } from '../utils/generic';\n\nexport interface IInputField extends IAgLabel {\n    value?: any;\n    width?: number;\n}\n\nexport abstract class AgAbstractInputField<TElement extends FieldElement, TValue, TConfig extends IInputField = IInputField>\n    extends AgAbstractField<TValue, TConfig> {\n    @RefSelector('eLabel') protected readonly eLabel: HTMLElement;\n    @RefSelector('eWrapper') protected readonly eWrapper: HTMLElement;\n    @RefSelector('eInput') protected readonly eInput: TElement;\n\n    constructor(config?: TConfig, className?: string, private readonly inputType: string | null = 'text', private readonly displayFieldTag = 'input') {\n        super(config, /* html */`\n            <div role=\"presentation\">\n                <div ref=\"eLabel\" class=\"ag-input-field-label\"></div>\n                <div ref=\"eWrapper\" class=\"ag-wrapper ag-input-wrapper\" role=\"presentation\">\n                    <${displayFieldTag} ref=\"eInput\" class=\"ag-input-field-input\"></${displayFieldTag}>\n                </div>\n            </div>`, className);\n    }\n\n    protected postConstruct() {\n        super.postConstruct();\n        this.setInputType();\n\n        this.eLabel.classList.add(`${this.className}-label`);\n        this.eWrapper.classList.add(`${this.className}-input-wrapper`);\n        this.eInput.classList.add(`${this.className}-input`);\n        this.addCssClass('ag-input-field');\n\n        this.eInput.id = this.eInput.id || `ag-${this.getCompId()}-input`;\n\n        const { width, value } = this.config;\n\n        if (width != null) {\n            this.setWidth(width);\n        }\n\n        if (value != null) {\n            this.setValue(value);\n        }\n\n        this.addInputListeners();\n    }\n\n    protected refreshLabel() {\n        if (exists(this.getLabel())) {\n            setAriaLabelledBy(this.eInput, this.getLabelId());\n        } else {\n            this.eInput.removeAttribute('aria-labelledby');\n        }\n\n        super.refreshLabel();\n    }\n\n    protected addInputListeners() {\n        this.addManagedListener(this.eInput, 'input', e => this.setValue(e.target.value));\n    }\n\n    private setInputType() {\n        if (this.displayFieldTag === 'input') {\n            this.eInput.setAttribute('type', this.inputType!);\n        }\n    }\n\n    public getInputElement(): TElement {\n        return this.eInput;\n    }\n\n    public setInputWidth(width: number | 'flex'): this {\n        setElementWidth(this.eWrapper, width);\n\n        return this;\n    }\n\n    public setInputName(name: string): this {\n        this.getInputElement().setAttribute('name', name);\n\n        return this;\n    }\n\n    public getFocusableElement(): HTMLElement {\n        return this.eInput;\n    }\n\n    public setMaxLength(length: number): this {\n        const eInput = this.eInput as HTMLInputElement | HTMLTextAreaElement;\n        eInput.maxLength = length;\n\n        return this;\n    }\n\n    public setInputPlaceholder(placeholder: string): this {\n        addOrRemoveAttribute(this.eInput, 'placeholder', placeholder);\n\n        return this;\n    }\n\n    public setInputAriaLabel(label: string): this {\n        setAriaLabel(this.eInput, label);\n\n        return this;\n    }\n\n    public setDisabled(disabled: boolean): this {\n        setDisabled(this.eInput, disabled);\n\n        return super.setDisabled(disabled);\n    }\n}\n","import { EventService } from \"../eventService\";\nimport { AgEvent, Events, RowEvent, RowSelectedEvent, SelectionChangedEvent } from \"../events\";\nimport { Column } from \"./column\";\nimport { Constants } from \"../constants/constants\";\nimport { IEventEmitter } from \"../interfaces/iEventEmitter\";\nimport { DetailGridInfo } from \"../gridApi\";\nimport { exists, missing, missingOrEmpty } from \"../utils/generic\";\nimport { getAllKeysInObjects } from \"../utils/object\";\nimport { IServerSideStore } from \"../interfaces/IServerSideStore\";\nimport { IClientSideRowModel } from \"../interfaces/iClientSideRowModel\";\nimport { IServerSideRowModel } from \"../interfaces/iServerSideRowModel\";\nimport { debounce } from \"../utils/function\";\nimport { Beans } from \"../rendering/beans\";\n\nexport interface SetSelectedParams {\n    // true or false, whatever you want to set selection to\n    newValue: boolean;\n    // whether to remove other selections after this selection is done\n    clearSelection?: boolean;\n    // true when action is NOT on this node, ie user clicked a group and this is the child of a group\n    suppressFinishActions?: boolean;\n    // gets used when user shift-selects a range\n    rangeSelect?: boolean;\n    // used in group selection, if true, filtered out children will not be selected\n    groupSelectsFiltered?: boolean;\n}\n\nexport interface RowNodeEvent extends AgEvent {\n    node: RowNode;\n}\n\nexport interface DataChangedEvent extends RowNodeEvent {\n    oldData: any;\n    newData: any;\n    update: boolean;\n}\n\nexport interface CellChangedEvent extends RowNodeEvent {\n    column: Column;\n    newValue: any;\n    oldValue: any;\n}\n\nexport enum RowHighlightPosition { Above, Below }\n\nexport class RowNode implements IEventEmitter {\n\n    public static ID_PREFIX_ROW_GROUP = 'row-group-';\n    public static ID_PREFIX_TOP_PINNED = 't-';\n    public static ID_PREFIX_BOTTOM_PINNED = 'b-';\n\n    private static OBJECT_ID_SEQUENCE = 0;\n\n    public static EVENT_ROW_SELECTED = 'rowSelected';\n    public static EVENT_DATA_CHANGED = 'dataChanged';\n    public static EVENT_CELL_CHANGED = 'cellChanged';\n    public static EVENT_ALL_CHILDREN_COUNT_CHANGED = 'allChildrenCountChanged';\n    public static EVENT_MASTER_CHANGED = 'masterChanged';\n    public static EVENT_GROUP_CHANGED = 'groupChanged';\n    public static EVENT_MOUSE_ENTER = 'mouseEnter';\n    public static EVENT_MOUSE_LEAVE = 'mouseLeave';\n    public static EVENT_HEIGHT_CHANGED = 'heightChanged';\n    public static EVENT_TOP_CHANGED = 'topChanged';\n    public static EVENT_DISPLAYED_CHANGED = 'displayedChanged';\n    public static EVENT_FIRST_CHILD_CHANGED = 'firstChildChanged';\n    public static EVENT_LAST_CHILD_CHANGED = 'lastChildChanged';\n    public static EVENT_CHILD_INDEX_CHANGED = 'childIndexChanged';\n    public static EVENT_ROW_INDEX_CHANGED = 'rowIndexChanged';\n    public static EVENT_EXPANDED_CHANGED = 'expandedChanged';\n    public static EVENT_HAS_CHILDREN_CHANGED = 'hasChildrenChanged';\n    public static EVENT_SELECTABLE_CHANGED = 'selectableChanged';\n    public static EVENT_UI_LEVEL_CHANGED = 'uiLevelChanged';\n    public static EVENT_HIGHLIGHT_CHANGED = 'rowHighlightChanged';\n    public static EVENT_DRAGGING_CHANGED = 'draggingChanged';\n\n    /** Unique ID for the node. Either provided by the application, or generated by the grid if not. */\n    public id: string | undefined;\n\n    /** If using row grouping, contains the group values for this group. */\n    public groupData: { [key: string]: any | null; } | null;\n\n    /** If using row grouping and aggregation, contains the aggregation data. */\n    public aggData: any;\n\n    /** The data as provided by the application. */\n    public data: any;\n\n    /** The parent node to this node, or empty if top level */\n    public parent: RowNode | null;\n\n    /** How many levels this node is from the top when grouping. */\n    public level: number;\n\n    /** How many levels this node is from the top when grouping in the UI (only different to `parent` when `groupRemoveSingleChildren=true`)*/\n    public uiLevel: number;\n\n    /**\n     * If doing in-memory (client-side) grouping, this is the index of the group column this cell is for.\n     * This will always be the same as the level, unless we are collapsing groups, i.e. `groupRemoveSingleChildren=true`.\n     */\n    public rowGroupIndex: number | null;\n\n    /** `true` if this node is a group node (ie has children) */\n    public group: boolean | undefined;\n\n    /** `true` if this row is getting dragged */\n    public dragging: boolean;\n\n    /** `true` if this row is a master row, part of master / detail (ie row can be expanded to show detail) */\n    public master: boolean;\n\n    /** `true` if this row is a detail row, part of master / detail (ie child row of an expanded master row)*/\n    public detail: boolean;\n\n    /** If this row is a master row that was expanded, this points to the associated detail row. */\n    public detailNode: RowNode;\n\n    /** If master detail, this contains details about the detail grid */\n    public detailGridInfo: DetailGridInfo | null;\n\n    /** `true` if this node is a group and the group is the bottom level in the tree. */\n    public leafGroup: boolean;\n\n    /** `true` if this is the first child in this group. Changes when data is sorted. */\n    public firstChild: boolean;\n\n    /** `true` if this is the last child in this group. Changes when data is sorted. */\n    public lastChild: boolean;\n\n    /** Index of this row with respect to its parent when grouping. Changes when data is sorted. */\n    public childIndex: number;\n\n    /** The current row index. If the row is filtered out or in a collapsed group, this value will be `null`. */\n    public rowIndex: number | null = null;\n\n    /** Either 'top' or 'bottom' if row pinned, otherwise `undefined` or `null`. */\n    public rowPinned: string;\n\n    /** If using quick filter, stores a string representation of the row for searching against. */\n    public quickFilterAggregateText: string | null;\n\n    /** `true` if row is a footer. Footers have `group = true` and `footer = true`. */\n    public footer: boolean;\n\n    /** The field we are grouping on eg 'country'. */\n    public field: string | null;\n\n    /** The row group column used for this group, e.g. the Country column instance. */\n    public rowGroupColumn: Column | null;\n\n    /** The key for the group eg Ireland, UK, USA */\n    public key: string | null = null;\n\n    /** Used by server-side row model. `true` if this row node is a stub. A stub is a placeholder row with loading icon while waiting from row to be loaded. */\n    public stub: boolean;\n\n    /** Used by server side row model, true if this row node failed a load */\n    public failedLoad: boolean;\n\n    /** All lowest level nodes beneath this node, no groups. */\n    public allLeafChildren: RowNode[];\n\n    /** Children of this group. If multi levels of grouping, shows only immediate children. */\n    public childrenAfterGroup: RowNode[] | null;\n\n    /** Filtered children of this group. */\n    public childrenAfterFilter: RowNode[] | null;\n\n    /** Aggregated and re-filtered children of this group. */\n    public childrenAfterAggFilter: RowNode[] | null;\n\n    /** Sorted children of this group. */\n    public childrenAfterSort: RowNode[] | null;\n\n    /** Number of children and grand children. */\n    public allChildrenCount: number | null;\n\n    /** Children mapped by the pivot columns. */\n    public childrenMapped: { [key: string]: any; } | null = {};\n\n    /** Server Side Row Model Only - the children are in an infinite cache. */\n    public childStore: IServerSideStore | null;\n\n    /** `true` if group is expanded, otherwise `false`. */\n    public expanded: boolean;\n\n    /** If using footers, reference to the footer node for this group. */\n    public sibling: RowNode;\n\n    /** The height, in pixels, of this row */\n    public rowHeight: number | null | undefined;\n\n    /** Dynamic row heights are done on demand, only when row is visible. However for row virtualisation\n     * we need a row height to do the 'what rows are in viewport' maths. So we assign a row height to each\n     * row based on defaults and rowHeightEstimated=true, then when the row is needed for drawing we do\n     * the row height calculation and set rowHeightEstimated=false.*/\n    public rowHeightEstimated: boolean;\n\n    /**\n     * This will be `true` if it has a rowIndex assigned, otherwise `false`.\n     */\n    public displayed: boolean = false;\n\n    /** The row top position in pixels. */\n    public rowTop: number | null = null;\n\n    /** The top pixel for this row last time, makes sense if data set was ordered or filtered,\n     * it is used so new rows can animate in from their old position. */\n    public oldRowTop: number | null = null;\n\n    /** `true` if this node is a daemon. This means row is not part of the model. Can happen when then\n     * the row is selected and then the user sets a different ID onto the node. The nodes is then\n     * representing a different entity, so the selection controller, if the node is selected, takes\n     * a copy where daemon=true. */\n    public daemon: boolean;\n\n    /** `true` by default - can be overridden via gridOptions.isRowSelectable(rowNode) */\n    public selectable = true;\n\n    /** Used by the value service, stores values for a particular change detection turn. */\n    public __cacheData: { [colId: string]: any; };\n    public __cacheVersion: number;\n\n    /** Used by sorting service - to give deterministic sort to groups. Previously we\n     * just id for this, however id is a string and had slower sorting compared to numbers. */\n    public __objectId: number = RowNode.OBJECT_ID_SEQUENCE++;\n\n    /** We cache the result of hasChildren() so that we can be aware of when it has changed, and hence\n     * fire the event. Really we should just have hasChildren as an attribute and do away with hasChildren()\n     * method, however that would be a breaking change. */\n    private __hasChildren: boolean;\n\n    /** When one or more Columns are using autoHeight, this keeps track of height of each autoHeight Cell,\n     * indexed by the Column ID. */\n    private __autoHeights?: { [id: string]: number | undefined } = {};\n\n    /** `true` when nodes with the same id are being removed and added as part of the same batch transaction */\n    public alreadyRendered = false;\n\n    public highlighted: RowHighlightPosition | null = null;\n\n    private selected: boolean | undefined = false;\n    private eventService: EventService | null;\n\n    private beans: Beans;\n\n    private checkAutoHeightsDebounced: () => void;\n\n    private onRowHeightChangedDebounced = debounce(this.onRowHeightChanged.bind(this), 100);\n\n    constructor(beans: Beans) {\n        this.beans = beans;\n    }\n\n    /** Replaces the data on the `rowNode`. When complete, the grid will refresh the the entire rendered row if it is showing. */\n    public setData(data: any): void {\n        this.setDataCommon(data, false);\n    }\n\n    // similar to setRowData, however it is expected that the data is the same data item. this\n    // is intended to be used with Redux type stores, where the whole data can be changed. we are\n    // guaranteed that the data is the same entity (so grid doesn't need to worry about the id of the\n    // underlying data changing, hence doesn't need to worry about selection). the grid, upon receiving\n    // dataChanged event, will refresh the cells rather than rip them all out (so user can show transitions).\n    public updateData(data: any): void {\n        this.setDataCommon(data, true);\n    }\n\n    private setDataCommon(data: any, update: boolean): void {\n        const oldData = this.data;\n\n        this.data = data;\n        this.beans.valueCache.onDataChanged();\n        this.updateDataOnDetailNode();\n        this.checkRowSelectable();\n\n        const event: DataChangedEvent = this.createDataChangedEvent(data, oldData, update);\n\n        this.dispatchLocalEvent(event);\n    }\n\n    // when we are doing master / detail, the detail node is lazy created, but then kept around.\n    // so if we show / hide the detail, the same detail rowNode is used. so we need to keep the data\n    // in sync, otherwise expand/collapse of the detail would still show the old values.\n    private updateDataOnDetailNode(): void {\n        if (this.detailNode) {\n            this.detailNode.data = this.data;\n        }\n    }\n\n    private createDataChangedEvent(newData: any, oldData: any, update: boolean): DataChangedEvent {\n        return {\n            type: RowNode.EVENT_DATA_CHANGED,\n            node: this,\n            oldData: oldData,\n            newData: newData,\n            update: update\n        };\n    }\n\n    private createLocalRowEvent(type: string): RowNodeEvent {\n        return {\n            type: type,\n            node: this\n        };\n    }\n\n    public getRowIndexString(): string {\n        if (this.rowPinned === Constants.PINNED_TOP) {\n            return 't-' + this.rowIndex;\n        }\n\n        if (this.rowPinned === Constants.PINNED_BOTTOM) {\n            return 'b-' + this.rowIndex;\n        }\n\n        return this.rowIndex!.toString();\n    }\n\n    private createDaemonNode(): RowNode {\n        const oldNode = new RowNode(this.beans);\n\n        // just copy the id and data, this is enough for the node to be used\n        // in the selection controller (the selection controller is the only\n        // place where daemon nodes can live).\n        oldNode.id = this.id;\n        oldNode.data = this.data;\n        oldNode.daemon = true;\n        oldNode.selected = this.selected;\n        oldNode.level = this.level;\n\n        return oldNode;\n    }\n\n    public setDataAndId(data: any, id: string | undefined): void {\n        const oldNode = exists(this.id) ? this.createDaemonNode() : null;\n        const oldData = this.data;\n\n        this.data = data;\n        this.updateDataOnDetailNode();\n        this.setId(id);\n        this.beans.selectionService.syncInRowNode(this, oldNode);\n        this.checkRowSelectable();\n\n        const event: DataChangedEvent = this.createDataChangedEvent(data, oldData, false);\n\n        this.dispatchLocalEvent(event);\n    }\n\n    private checkRowSelectable() {\n        const isRowSelectableFunc = this.beans.gridOptionsWrapper.getIsRowSelectableFunc();\n        this.setRowSelectable(isRowSelectableFunc ? isRowSelectableFunc!(this) : true);\n    }\n\n    public setRowSelectable(newVal: boolean) {\n        if (this.selectable !== newVal) {\n            this.selectable = newVal;\n            if (this.eventService) {\n                this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_SELECTABLE_CHANGED));\n            }\n        }\n    }\n\n    public setId(id?: string): void {\n        // see if user is providing the id's\n        const getRowIdFunc = this.beans.gridOptionsWrapper.getRowIdFunc();\n\n        if (getRowIdFunc) {\n            // if user is providing the id's, then we set the id only after the data has been set.\n            // this is important for virtual pagination and viewport, where empty rows exist.\n            if (this.data) {\n                // we pass 'true' as we skip this level when generating keys,\n                // as we don't always have the key for this level (eg when updating\n                // data via transaction on SSRM, we are getting key to look up the\n                // RowNode, don't have the RowNode yet, thus no way to get the current key)\n                const parentKeys = this.getGroupKeys(true);\n                this.id = getRowIdFunc({\n                    data: this.data,\n                    parentKeys: parentKeys.length > 0 ? parentKeys : undefined,\n                    level: this.level\n                });\n                // make sure id provided doesn't start with 'row-group-' as this is reserved. also check that\n                // it has 'startsWith' in case the user provided a number.\n                if (this.id !== null && typeof this.id === 'string' && this.id.startsWith(RowNode.ID_PREFIX_ROW_GROUP)) {\n                    console.error(`AG Grid: Row IDs cannot start with ${RowNode.ID_PREFIX_ROW_GROUP}, this is a reserved prefix for AG Grid's row grouping feature.`);\n                }\n                // force id to be a string\n                if (this.id !== null && typeof this.id !== 'string') {\n                    this.id = '' + this.id;\n                }\n            } else {\n                // this can happen if user has set blank into the rowNode after the row previously\n                // having data. this happens in virtual page row model, when data is delete and\n                // the page is refreshed.\n                this.id = undefined;\n            }\n        } else {\n            this.id = id;\n        }\n    }\n\n    public getGroupKeys(excludeSelf = false): string[] {\n        const keys: string[] = [];\n\n        let pointer: RowNode | null = this;\n        if (excludeSelf) {\n            pointer = pointer.parent;\n        }\n        while (pointer && pointer.level >= 0) {\n            keys.push(pointer.key!);\n            pointer = pointer.parent;\n        }\n        keys.reverse();\n\n        return keys;\n    }\n\n    public isPixelInRange(pixel: number): boolean {\n        if (!exists(this.rowTop) || !exists(this.rowHeight)) { return false; }\n        return pixel >= this.rowTop && pixel < (this.rowTop + this.rowHeight);\n    }\n\n    public setFirstChild(firstChild: boolean): void {\n        if (this.firstChild === firstChild) { return; }\n\n        this.firstChild = firstChild;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_FIRST_CHILD_CHANGED));\n        }\n    }\n\n    public setLastChild(lastChild: boolean): void {\n        if (this.lastChild === lastChild) { return; }\n\n        this.lastChild = lastChild;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_LAST_CHILD_CHANGED));\n        }\n    }\n\n    public setChildIndex(childIndex: number): void {\n        if (this.childIndex === childIndex) { return; }\n\n        this.childIndex = childIndex;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_CHILD_INDEX_CHANGED));\n        }\n    }\n\n    public setRowTop(rowTop: number | null): void {\n        this.oldRowTop = this.rowTop;\n\n        if (this.rowTop === rowTop) { return; }\n\n        this.rowTop = rowTop;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_TOP_CHANGED));\n        }\n\n        this.setDisplayed(rowTop !== null);\n    }\n\n    public clearRowTopAndRowIndex(): void {\n        this.oldRowTop = null;\n        this.setRowTop(null);\n        this.setRowIndex(null);\n    }\n\n    private setDisplayed(displayed: boolean): void {\n        if (this.displayed === displayed) { return; }\n\n        this.displayed = displayed;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_DISPLAYED_CHANGED));\n        }\n    }\n\n    public setDragging(dragging: boolean): void {\n        if (this.dragging === dragging) { return; }\n\n        this.dragging = dragging;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_DRAGGING_CHANGED));\n        }\n    }\n\n    public setHighlighted(highlighted: RowHighlightPosition | null): void {\n        if (highlighted === this.highlighted) { return; }\n\n        this.highlighted = highlighted;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HIGHLIGHT_CHANGED));\n        }\n    }\n\n    public setAllChildrenCount(allChildrenCount: number | null): void {\n        if (this.allChildrenCount === allChildrenCount) { return; }\n\n        this.allChildrenCount = allChildrenCount;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED));\n        }\n    }\n\n    public setMaster(master: boolean): void {\n        if (this.master === master) { return; }\n\n        // if changing AWAY from master, then unexpand, otherwise\n        // next time it's shown it is expanded again\n        if (this.master && !master) {\n            this.expanded = false;\n        }\n\n        this.master = master;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_MASTER_CHANGED));\n        }\n    }\n\n    public setGroup(group: boolean): void {\n        if (this.group === group) { return; }\n\n        // if we used to be a group, and no longer, then close the node\n        if (this.group && !group) {\n            this.expanded = false;\n        }\n\n        this.group = group;\n        this.updateHasChildren();\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_GROUP_CHANGED));\n        }\n    }\n\n    /**\n     * Sets the row height.\n     * Call if you want to change the height initially assigned to the row.\n     * After calling, you must call `api.onRowHeightChanged()` so the grid knows it needs to work out the placement of the rows. */\n    public setRowHeight(rowHeight: number | undefined | null, estimated = false): void {\n        this.rowHeight = rowHeight;\n        this.rowHeightEstimated = estimated;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HEIGHT_CHANGED));\n        }\n    }\n\n    public setRowAutoHeight(cellHeight: number | undefined, column: Column): void {\n        if (!this.__autoHeights) {\n            this.__autoHeights = {};\n        }\n        const autoHeights = this.__autoHeights!;\n\n        autoHeights[column.getId()] = cellHeight;\n\n        if (cellHeight != null) {\n            if (this.checkAutoHeightsDebounced == null) {\n                this.checkAutoHeightsDebounced = debounce(this.checkAutoHeights.bind(this), 1);\n            }\n            this.checkAutoHeightsDebounced();\n        }\n    }\n\n    public checkAutoHeights(): void {\n        let notAllPresent = false;\n        let nonePresent = true;\n        let newRowHeight = 0;\n\n        const autoHeights = this.__autoHeights!;\n        if (autoHeights == null) { return; }\n\n        const displayedAutoHeightCols = this.beans.columnModel.getAllDisplayedAutoHeightCols();\n        displayedAutoHeightCols.forEach(col => {\n            const cellHeight = autoHeights[col.getId()];\n            if (cellHeight == null) {\n                notAllPresent = true;\n                return;\n            }\n            nonePresent = false;\n            if (cellHeight > newRowHeight) {\n                newRowHeight = cellHeight;\n            }\n        });\n\n        if (notAllPresent) { return; }\n\n        // we take min of 10, so we don't adjust for empty rows. if <10, we put to default.\n        // this prevents the row starting very small when waiting for async components,\n        // which would then mean the grid squashes in far to many rows (as small heights\n        // means more rows fit in) which looks crap. so best ignore small values and assume\n        // we are still waiting for values to render.\n        if (nonePresent || newRowHeight < 10) {\n            newRowHeight = this.beans.gridOptionsWrapper.getRowHeightForNode(this).height;\n        }\n\n        if (newRowHeight == this.rowHeight) { return; }\n\n        this.setRowHeight(newRowHeight);\n\n        this.onRowHeightChangedDebounced();\n    }\n\n    /** This method is debounced. It is used for row auto-height. If we don't debounce, \n     * then the Row Models will end up recalculating each row position\n     * for each row height change and result in the Row Renderer laying out rows.\n     * This is particularly bad if using print layout, and showing eg 1,000 rows,\n     * each row will change it's height, causing Row Model to update 1,000 times.\n     */\n     private onRowHeightChanged(): void {\n        const rowModel = this.beans.rowModel as (IClientSideRowModel | IServerSideRowModel);\n        if (rowModel.onRowHeightChanged) {\n            rowModel.onRowHeightChanged();\n        }\n    }\n\n    public setRowIndex(rowIndex: number | null): void {\n        if (this.rowIndex === rowIndex) { return; }\n\n        this.rowIndex = rowIndex;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_INDEX_CHANGED));\n        }\n    }\n\n    public setUiLevel(uiLevel: number): void {\n        if (this.uiLevel === uiLevel) { return; }\n\n        this.uiLevel = uiLevel;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_UI_LEVEL_CHANGED));\n        }\n    }\n\n    public setExpanded(expanded: boolean, e?: MouseEvent | KeyboardEvent): void {\n        if (this.expanded === expanded) { return; }\n\n        this.expanded = expanded;\n\n        if (this.eventService) {\n            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_EXPANDED_CHANGED));\n        }\n\n        const event = Object.assign({}, this.createGlobalRowEvent(Events.EVENT_ROW_GROUP_OPENED), {\n            expanded,\n            event: e || null\n        });\n\n        this.beans.rowNodeEventThrottle.dispatchExpanded(event);\n\n        // when using footers we need to refresh the group row, as the aggregation\n        // values jump between group and footer\n        if (this.beans.gridOptionsWrapper.isGroupIncludeFooter()) {\n            this.beans.rowRenderer.refreshCells({ rowNodes: [this] });\n        }\n    }\n\n    private createGlobalRowEvent(type: string): RowEvent {\n        return {\n            type: type,\n            node: this,\n            data: this.data,\n            rowIndex: this.rowIndex,\n            rowPinned: this.rowPinned,\n            context: this.beans.gridOptionsWrapper.getContext(),\n            api: this.beans.gridOptionsWrapper.getApi()!,\n            columnApi: this.beans.gridOptionsWrapper.getColumnApi()!\n        };\n    }\n\n    private dispatchLocalEvent(event: AgEvent): void {\n        if (this.eventService) {\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    /**\n     * Replaces the value on the `rowNode` for the specified column. When complete,\n     * the grid will refresh the rendered cell on the required row only.\n     *\n     * @param colKey The column where the value should be updated\n     * @param newValue The new value\n     * @param eventSource The source of the event\n     * @returns `True` if the value was changed, otherwise `False`.\n     */\n    public setDataValue(colKey: string | Column, newValue: any, eventSource?: string): boolean {\n        // When it is done via the editors, no 'cell changed' event gets fired, as it's assumed that\n        // the cell knows about the change given it's in charge of the editing.\n        // this method is for the client to call, so the cell listens for the change\n        // event, and also flashes the cell when the change occurs.\n        const column = this.beans.columnModel.getPrimaryColumn(colKey)!;\n        const oldValue = this.beans.valueService.getValue(column, this);\n\n        const valueChanged = this.beans.valueService.setValue(this, column, newValue, eventSource);\n        this.dispatchCellChangedEvent(column, newValue, oldValue);\n\n        return valueChanged;\n    }\n\n    public setGroupValue(colKey: string | Column, newValue: any): void {\n        const column = this.beans.columnModel.getGridColumn(colKey)!;\n\n        if (missing(this.groupData)) { this.groupData = {}; }\n\n        const columnId = column.getColId();\n        const oldValue = this.groupData[columnId];\n\n        if (oldValue === newValue) { return; }\n\n        this.groupData[columnId] = newValue;\n        this.dispatchCellChangedEvent(column, newValue, oldValue);\n    }\n\n    // sets the data for an aggregation\n    public setAggData(newAggData: any): void {\n        // find out all keys that could potentially change\n        const colIds = getAllKeysInObjects([this.aggData, newAggData]);\n        const oldAggData = this.aggData;\n\n        this.aggData = newAggData;\n\n        // if no event service, nobody has registered for events, so no need fire event\n        if (this.eventService) {\n            colIds.forEach(colId => {\n                const column = this.beans.columnModel.getGridColumn(colId)!;\n                const value = this.aggData ? this.aggData[colId] : undefined;\n                const oldValue = oldAggData ? oldAggData[colId] : undefined;\n                this.dispatchCellChangedEvent(column, value, oldValue);\n            });\n        }\n    }\n\n    public updateHasChildren(): void {\n        // we need to return true when this.group=true, as this is used by server side row model\n        // (as children are lazy loaded and stored in a cache anyway). otherwise we return true\n        // if children exist.\n        const newValue = (this.group && !this.footer) || (this.childrenAfterGroup && this.childrenAfterGroup.length > 0);\n\n        if (newValue !== this.__hasChildren) {\n            this.__hasChildren = !!newValue;\n            if (this.eventService) {\n                this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HAS_CHILDREN_CHANGED));\n            }\n        }\n    }\n\n    public hasChildren(): boolean {\n        if (this.__hasChildren == null) {\n            this.updateHasChildren();\n        }\n        return this.__hasChildren;\n    }\n\n    public isEmptyRowGroupNode(): boolean | undefined {\n        return this.group && missingOrEmpty(this.childrenAfterGroup);\n    }\n\n    private dispatchCellChangedEvent(column: Column, newValue: any, oldValue: any): void {\n        const cellChangedEvent: CellChangedEvent = {\n            type: RowNode.EVENT_CELL_CHANGED,\n            node: this,\n            column: column,\n            newValue: newValue,\n            oldValue: oldValue\n        };\n        this.dispatchLocalEvent(cellChangedEvent);\n    }\n\n    /**\n     * The first time `quickFilter` runs, the grid creates a one-off string representation of the row.\n     * This string is then used for the quick filter instead of hitting each column separately.\n     * When you edit, using grid editing, this string gets cleared down.\n     * However if you edit without using grid editing, you will need to clear this string down for the row to be updated with the new values.\n     * Otherwise new values will not work with the `quickFilter`. */\n    public resetQuickFilterAggregateText(): void {\n        this.quickFilterAggregateText = null;\n    }\n\n    public isExpandable(): boolean {\n        return (this.hasChildren() && !this.footer) || this.master ? true : false;\n    }\n\n    /** Returns:\n     * - `true` if node is selected,\n     * - `false` if the node isn't selected\n     * - `undefined` if it's partially selected (group where not all children are selected). */\n    public isSelected(): boolean | undefined {\n        // for footers, we just return what our sibling selected state is, as cannot select a footer\n        if (this.footer) { return this.sibling.isSelected(); }\n\n        return this.selected;\n    }\n\n    /** Perform a depth-first search of this node and its children. */\n    public depthFirstSearch(callback: (rowNode: RowNode) => void): void {\n        if (this.childrenAfterGroup) {\n            this.childrenAfterGroup.forEach(child => child.depthFirstSearch(callback));\n        }\n        callback(this);\n    }\n\n    // + rowController.updateGroupsInSelection()\n    // + selectionController.calculatedSelectedForAllGroupNodes()\n    public calculateSelectedFromChildren(): void {\n        let atLeastOneSelected = false;\n        let atLeastOneDeSelected = false;\n        let atLeastOneMixed = false;\n        let newSelectedValue: boolean | undefined;\n\n        if (!this.childrenAfterGroup?.length) {\n            return;\n        }\n\n        for (let i = 0; i < this.childrenAfterGroup.length; i++) {\n            const child = this.childrenAfterGroup[i];\n\n            // skip non-selectable nodes to prevent inconsistent selection values\n            if (!child.selectable) { continue; }\n\n            const childState = child.isSelected();\n\n            switch (childState) {\n                case true:\n                    atLeastOneSelected = true;\n                    break;\n                case false:\n                    atLeastOneDeSelected = true;\n                    break;\n                default:\n                    atLeastOneMixed = true;\n                    break;\n            }\n        }\n\n        if (atLeastOneMixed) {\n            newSelectedValue = undefined;\n        } else if (atLeastOneSelected && !atLeastOneDeSelected) {\n            newSelectedValue = true;\n        } else if (!atLeastOneSelected && atLeastOneDeSelected) {\n            newSelectedValue = false;\n        } else {\n            newSelectedValue = undefined;\n        }\n\n        this.selectThisNode(newSelectedValue);\n    }\n\n    public setSelectedInitialValue(selected: boolean): void {\n        this.selected = selected;\n    }\n\n    /**\n     * Select (or deselect) the node.\n     * @param newValue -`true` for selection, `false` for deselection.\n     * @param clearSelection - If selecting, then passing `true` will select the node exclusively (i.e. NOT do multi select). If doing deselection, `clearSelection` has no impact.\n     * @param suppressFinishActions - Pass `true` to prevent the `selectionChanged` from being fired. Note that the `rowSelected` event will still be fired.\n     */\n    public setSelected(newValue: boolean, clearSelection: boolean = false, suppressFinishActions: boolean = false) {\n        this.setSelectedParams({\n            newValue,\n            clearSelection,\n            suppressFinishActions,\n            rangeSelect: false\n        });\n    }\n\n    public isRowPinned(): boolean {\n        return this.rowPinned === Constants.PINNED_TOP || this.rowPinned === Constants.PINNED_BOTTOM;\n    }\n\n    // to make calling code more readable, this is the same method as setSelected except it takes names parameters\n    public setSelectedParams(params: SetSelectedParams): number {\n        const groupSelectsChildren = this.beans.gridOptionsWrapper.isGroupSelectsChildren();\n        const newValue = params.newValue === true;\n        const clearSelection = params.clearSelection === true;\n        const suppressFinishActions = params.suppressFinishActions === true;\n        const rangeSelect = params.rangeSelect === true;\n        // groupSelectsFiltered only makes sense when group selects children\n        const groupSelectsFiltered = groupSelectsChildren && (params.groupSelectsFiltered === true);\n\n        if (this.id === undefined) {\n            console.warn('AG Grid: cannot select node until id for node is known');\n            return 0;\n        }\n\n        if (this.rowPinned) {\n            console.warn('AG Grid: cannot select pinned rows');\n            return 0;\n        }\n\n        // if we are a footer, we don't do selection, just pass the info\n        // to the sibling (the parent of the group)\n        if (this.footer) {\n            return this.sibling.setSelectedParams(params);\n        }\n\n        if (rangeSelect && this.beans.selectionService.getLastSelectedNode()) {\n            const newRowClicked = this.beans.selectionService.getLastSelectedNode() !== this;\n            const allowMultiSelect = this.beans.gridOptionsWrapper.isRowSelectionMulti();\n            if (newRowClicked && allowMultiSelect) {\n                const nodesChanged = this.doRowRangeSelection(params.newValue);\n                this.beans.selectionService.setLastSelectedNode(this);\n                return nodesChanged;\n            }\n        }\n\n        let updatedCount = 0;\n\n        // when groupSelectsFiltered, then this node may end up intermediate despite\n        // trying to set it to true / false. this group will be calculated further on\n        // down when we call calculatedSelectedForAllGroupNodes(). we need to skip it\n        // here, otherwise the updatedCount would include it.\n        const skipThisNode = groupSelectsFiltered && this.group;\n\n        if (!skipThisNode) {\n            const thisNodeWasSelected = this.selectThisNode(newValue);\n            if (thisNodeWasSelected) {\n                updatedCount++;\n            }\n        }\n\n        if (groupSelectsChildren && this.childrenAfterGroup?.length) {\n            updatedCount += this.selectChildNodes(newValue, groupSelectsFiltered);\n        }\n\n        // clear other nodes if not doing multi select\n        if (!suppressFinishActions) {\n            const clearOtherNodes = newValue && (clearSelection || !this.beans.gridOptionsWrapper.isRowSelectionMulti());\n            if (clearOtherNodes) {\n                updatedCount += this.beans.selectionService.clearOtherNodes(this);\n            }\n\n            // only if we selected something, then update groups and fire events\n            if (updatedCount > 0) {\n                this.beans.selectionService.updateGroupsFromChildrenSelections();\n\n                // this is the very end of the 'action node', so we are finished all the updates,\n                // include any parent / child changes that this method caused\n                const event: SelectionChangedEvent = {\n                    type: Events.EVENT_SELECTION_CHANGED,\n                    api: this.beans.gridApi,\n                    columnApi: this.beans.columnApi\n                };\n                this.beans.eventService.dispatchEvent(event);\n            }\n\n            // so if user next does shift-select, we know where to start the selection from\n            if (newValue) {\n                this.beans.selectionService.setLastSelectedNode(this);\n            }\n        }\n\n        return updatedCount;\n    }\n\n    // selects all rows between this node and the last selected node (or the top if this is the first selection).\n    // not to be mixed up with 'cell range selection' where you drag the mouse, this is row range selection, by\n    // holding down 'shift'.\n    private doRowRangeSelection(value: boolean = true): number {\n        const groupsSelectChildren = this.beans.gridOptionsWrapper.isGroupSelectsChildren();\n        const lastSelectedNode = this.beans.selectionService.getLastSelectedNode();\n        const nodesToSelect = this.beans.rowModel.getNodesInRangeForSelection(this, lastSelectedNode);\n\n        let updatedCount = 0;\n\n        nodesToSelect.forEach(rowNode => {\n            if (rowNode.group && groupsSelectChildren || (value === false && this === rowNode)) { return; }\n\n            const nodeWasSelected = rowNode.selectThisNode(value);\n            if (nodeWasSelected) {\n                updatedCount++;\n            }\n        });\n\n        this.beans.selectionService.updateGroupsFromChildrenSelections();\n\n        const event: SelectionChangedEvent = {\n            type: Events.EVENT_SELECTION_CHANGED,\n            api: this.beans.gridApi,\n            columnApi: this.beans.columnApi\n        };\n\n        this.beans.eventService.dispatchEvent(event);\n\n        return updatedCount;\n    }\n\n    public isParentOfNode(potentialParent: RowNode): boolean {\n        let parentNode = this.parent;\n\n        while (parentNode) {\n            if (parentNode === potentialParent) {\n                return true;\n            }\n            parentNode = parentNode.parent;\n        }\n\n        return false;\n    }\n\n    public selectThisNode(newValue?: boolean): boolean {\n\n        // we only check selectable when newValue=true (ie selecting) to allow unselecting values,\n        // as selectable is dynamic, need a way to unselect rows when selectable becomes false.\n        const selectionNotAllowed = !this.selectable && newValue;\n        const selectionNotChanged = this.selected === newValue;\n\n        if (selectionNotAllowed || selectionNotChanged) { return false; }\n\n        this.selected = newValue;\n\n        if (this.eventService) {\n            this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_SELECTED));\n        }\n\n        const event: RowSelectedEvent = this.createGlobalRowEvent(Events.EVENT_ROW_SELECTED);\n\n        this.beans.eventService.dispatchEvent(event);\n\n        return true;\n    }\n\n    private selectChildNodes(newValue: boolean, groupSelectsFiltered: boolean): number {\n        const children = groupSelectsFiltered ? this.childrenAfterAggFilter : this.childrenAfterGroup;\n\n        if (missing(children)) { return 0; }\n\n        let updatedCount = 0;\n\n        for (let i = 0; i < children.length; i++) {\n            updatedCount += children[i].setSelectedParams({\n                newValue: newValue,\n                clearSelection: false,\n                suppressFinishActions: true,\n                groupSelectsFiltered\n            });\n        }\n\n        return updatedCount;\n    }\n\n    /** Add an event listener. */\n    public addEventListener(eventType: string, listener: Function): void {\n        if (!this.eventService) {\n            this.eventService = new EventService();\n        }\n        this.eventService.addEventListener(eventType, listener);\n    }\n\n    /** Remove event listener. */\n    public removeEventListener(eventType: string, listener: Function): void {\n        if (!this.eventService) { return; }\n\n        this.eventService.removeEventListener(eventType, listener);\n        if (this.eventService.noRegisteredListenersExist()) {\n            this.eventService = null;\n        }\n    }\n\n    public onMouseEnter(): void {\n        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_ENTER));\n    }\n\n    public onMouseLeave(): void {\n        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_LEAVE));\n    }\n\n    public getFirstChildOfFirstChild(rowGroupColumn: Column | null): RowNode | null {\n        let currentRowNode: RowNode = this;\n        let isCandidate = true;\n        let foundFirstChildPath = false;\n        let nodeToSwapIn: RowNode | null = null;\n\n        // if we are hiding groups, then if we are the first child, of the first child,\n        // all the way up to the column we are interested in, then we show the group cell.\n        while (isCandidate && !foundFirstChildPath) {\n            const parentRowNode = currentRowNode.parent!;\n            const firstChild = exists(parentRowNode) && currentRowNode.firstChild;\n\n            if (firstChild) {\n                if (parentRowNode.rowGroupColumn === rowGroupColumn) {\n                    foundFirstChildPath = true;\n                    nodeToSwapIn = parentRowNode;\n                }\n            } else {\n                isCandidate = false;\n            }\n\n            currentRowNode = parentRowNode;\n        }\n\n        return foundFirstChildPath ? nodeToSwapIn : null;\n    }\n\n    public isFullWidthCell(): boolean {\n        const isFullWidthCellFunc = this.beans.gridOptionsWrapper.getIsFullWidthCellFunc();\n        return isFullWidthCellFunc ? isFullWidthCellFunc({ rowNode: this }) : false;\n    }\n\n    /**\n     * Returns the route of the row node. If the Row Node is a group, it returns the route to that Row Node.\n     * If the Row Node is not a group, it returns `undefined`.\n     */\n    public getRoute(): string[] | undefined {\n        if (this.key == null) { return; }\n\n        const res: string[] = [];\n\n        let pointer: RowNode = this;\n\n        while (pointer.key != null) {\n            res.push(pointer.key);\n            pointer = pointer.parent!;\n        }\n\n        return res.reverse();\n    }\n}\n","import { _ } from \"src/ts/utils\";\nimport { AgInputTextField } from \"../../widgets/agInputTextField\";\nimport { SimpleFilter, ISimpleFilterParams, ISimpleFilterModel, ISimpleFilterModelType, Tuple } from \"./simpleFilter\";\n\nexport interface IScalarFilterParams extends ISimpleFilterParams {\n    /** If `true`, the `'inRange'` filter option will include values equal to the start and end of the range. */\n    inRangeInclusive?: boolean;\n    /** If `true`, blank (`null` or `undefined`) values will pass the `'equals'` filter option. */\n    includeBlanksInEquals?: boolean;\n    /** If `true`, blank (`null` or `undefined`) values will pass the `'lessThan'` and `'lessThanOrEqual'` filter options. */\n    includeBlanksInLessThan?: boolean;\n    /** If `true`, blank (`null` or `undefined`) values will pass the `'greaterThan'` and `'greaterThanOrEqual'` filter options. */\n    includeBlanksInGreaterThan?: boolean;\n    /** If `true`, blank (`null` or `undefined`) values will pass the `'inRange'` filter option. */\n    includeBlanksInRange?: boolean;\n}\n\nexport interface Comparator<T> {\n    (left: T, right: T): number;\n}\n\nexport abstract class ScalarFilter<M extends ISimpleFilterModel, V, E = AgInputTextField> extends SimpleFilter<M, V, E> {\n    private scalarFilterParams: IScalarFilterParams;\n\n    protected abstract comparator(): Comparator<V>;\n\n    protected setParams(params: IScalarFilterParams): void {\n        super.setParams(params);\n        this.scalarFilterParams = params;\n    }\n\n    protected evaluateNullValue(filterType?: ISimpleFilterModelType | null) {\n        switch (filterType) {\n            case ScalarFilter.EQUALS:\n            case ScalarFilter.NOT_EQUAL:\n                if (this.scalarFilterParams.includeBlanksInEquals) {\n                    return true;\n                }\n                break;\n\n            case ScalarFilter.GREATER_THAN:\n            case ScalarFilter.GREATER_THAN_OR_EQUAL:\n                if (this.scalarFilterParams.includeBlanksInGreaterThan) {\n                    return true;\n                }\n                break;\n\n            case ScalarFilter.LESS_THAN:\n            case ScalarFilter.LESS_THAN_OR_EQUAL:\n                if (this.scalarFilterParams.includeBlanksInLessThan) {\n                    return true;\n                }\n                break;\n            case ScalarFilter.IN_RANGE:\n                if (this.scalarFilterParams.includeBlanksInRange) {\n                    return true;\n                }\n                break;\n            case ScalarFilter.BLANK:\n                return true;\n            case ScalarFilter.NOT_BLANK:\n                return false;\n        }\n\n        return false;\n    }\n\n    protected evaluateNonNullValue(values: Tuple<V>, cellValue: V, filterModel: M): boolean {\n        const comparator = this.comparator();\n        const compareResult = values[0] != null ? comparator(values[0]!, cellValue) : 0;\n\n        switch (filterModel.type) {\n            case ScalarFilter.EQUALS:\n                return compareResult === 0;\n\n            case ScalarFilter.NOT_EQUAL:\n                return compareResult !== 0;\n\n            case ScalarFilter.GREATER_THAN:\n                return compareResult > 0;\n\n            case ScalarFilter.GREATER_THAN_OR_EQUAL:\n                return compareResult >= 0;\n\n            case ScalarFilter.LESS_THAN:\n                return compareResult < 0;\n\n            case ScalarFilter.LESS_THAN_OR_EQUAL:\n                return compareResult <= 0;\n\n            case ScalarFilter.IN_RANGE: {\n                const compareToResult = comparator(values[1]!, cellValue);\n\n                return this.scalarFilterParams.inRangeInclusive ?\n                    compareResult >= 0 && compareToResult <= 0 :\n                    compareResult > 0 && compareToResult < 0;\n            }\n\n            case ScalarFilter.BLANK:\n                return this.isBlank(cellValue);\n\n            case ScalarFilter.NOT_BLANK:\n                return !this.isBlank(cellValue);\n\n            default:\n                console.warn('AG Grid: Unexpected type of filter \"' + filterModel.type + '\", it looks like the filter was configured with incorrect Filter Options');\n                return true;\n        }\n    }\n}","import { RefSelector } from '../../../widgets/componentAnnotations';\nimport { Autowired } from '../../../context/context';\nimport { UserComponentFactory } from '../../../components/framework/userComponentFactory';\nimport { DateCompWrapper } from './dateCompWrapper';\nimport { ConditionPosition, ISimpleFilterModel, Tuple } from '../simpleFilter';\nimport { Comparator, IScalarFilterParams, ScalarFilter } from '../scalarFilter';\nimport { serialiseDate, parseDateTimeFromString } from '../../../utils/date';\nimport { IAfterGuiAttachedParams } from '../../../interfaces/iAfterGuiAttachedParams';\n\n// The date filter model takes strings, although the filter actually works with dates. This is because a Date object\n// won't convert easily to JSON. When the model is used for doing the filtering, it's converted to a Date object.\nexport interface DateFilterModel extends ISimpleFilterModel {\n    /** Filter type is always `'date'` */\n    filterType?: 'date';\n    /**\n     * The date value(s) associated with the filter. The type is `string` and format is always\n     * `YYYY-MM-DD hh:mm:ss` e.g. 2019-05-24 00:00:00. Custom filters can have no values (hence both\n     * are optional). Range filter has two values (from and to).\n     */\n    dateFrom: string | null;\n    /**\n     * Range filter `to` date value.\n     */\n    dateTo: string | null;\n}\n\nexport interface IDateFilterParams extends IScalarFilterParams {\n    /** Required if the data for the column are not native JS `Date` objects. */\n    comparator?: IDateComparatorFunc;\n    /**\n     * This is only used if a date component is not provided.\n     * By default the grid will use the browser date picker in Chrome and Firefox and a plain text box for all other browsers\n     * (This is because Chrome and Firefox are the only current browsers providing a decent out-of-the-box date picker).\n     * If this property is set to `true`, the browser date picker will be used regardless of the browser type.\n     * If set to `false`, a plain text box will be used for all browsers.\n     */\n    browserDatePicker?: boolean;\n    /** This is the minimum year that may be entered in a date field for the value to be considered valid. Default: `1000` */\n    minValidYear?: number;\n    /** This is the maximum year that may be entered in a date field for the value to be considered valid. Default is no restriction. */\n    maxValidYear?: number;\n}\n\nexport interface IDateComparatorFunc {\n    (filterLocalDateAtMidnight: Date, cellValue: any): number;\n}\n\nconst DEFAULT_MIN_YEAR = 1000;\nconst DEFAULT_MAX_YEAR = Infinity;\n\nexport class DateFilter extends ScalarFilter<DateFilterModel, Date, DateCompWrapper> {\n    public static DEFAULT_FILTER_OPTIONS = [\n        ScalarFilter.EQUALS,\n        ScalarFilter.GREATER_THAN,\n        ScalarFilter.LESS_THAN,\n        ScalarFilter.NOT_EQUAL,\n        ScalarFilter.IN_RANGE,\n        ScalarFilter.BLANK,\n        ScalarFilter.NOT_BLANK,\n    ];\n\n    @RefSelector('eCondition1PanelFrom') private readonly eCondition1PanelFrom: HTMLElement;\n    @RefSelector('eCondition1PanelTo') private readonly eCondition1PanelTo: HTMLElement;\n    @RefSelector('eCondition2PanelFrom') private readonly eCondition2PanelFrom: HTMLElement;\n    @RefSelector('eCondition2PanelTo') private readonly eCondition2PanelTo: HTMLElement;\n\n    private dateCondition1FromComp: DateCompWrapper;\n    private dateCondition1ToComp: DateCompWrapper;\n    private dateCondition2FromComp: DateCompWrapper;\n    private dateCondition2ToComp: DateCompWrapper;\n\n    @Autowired('userComponentFactory') private readonly userComponentFactory: UserComponentFactory;\n\n    private dateFilterParams: IDateFilterParams;\n    private minValidYear: number = DEFAULT_MIN_YEAR;\n    private maxValidYear: number = DEFAULT_MAX_YEAR;\n\n    constructor() {\n        super('dateFilter');\n    }\n\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\n        super.afterGuiAttached(params);\n\n        this.dateCondition1FromComp.afterGuiAttached(params);\n    }\n\n    protected mapValuesFromModel(filterModel: DateFilterModel | null): Tuple<Date> {\n        // unlike the other filters, we do two things here:\n        // 1) allow for different attribute names (same as done for other filters) (eg the 'from' and 'to'\n        //    are in different locations in Date and Number filter models)\n        // 2) convert the type (because Date filter uses Dates, however model is 'string')\n        //\n        // NOTE: The conversion of string to date also removes the timezone - i.e. when user picks\n        //       a date from the UI, it will have timezone info in it. This is lost when creating\n        //       the model. When we recreate the date again here, it's without a timezone.\n        const { dateFrom, dateTo, type } = filterModel || {};\n        return [\n            dateFrom && parseDateTimeFromString(dateFrom) || null,\n            dateTo && parseDateTimeFromString(dateTo) || null,\n        ].slice(0, this.getNumberOfInputs(type));\n    }\n\n    protected comparator(): Comparator<Date> {\n        return this.dateFilterParams.comparator ? this.dateFilterParams.comparator : this.defaultComparator.bind(this);\n    }\n\n    private defaultComparator(filterDate: Date, cellValue: any): number {\n        // The default comparator assumes that the cellValue is a date\n        const cellAsDate = cellValue as Date;\n\n        if (cellValue == null || cellAsDate < filterDate) { return -1; }\n        if (cellAsDate > filterDate) { return 1; }\n\n        return 0;\n    }\n\n    protected setParams(params: IDateFilterParams): void {\n        super.setParams(params);\n\n        this.dateFilterParams = params;\n\n        const yearParser = (param: keyof IDateFilterParams, fallback: number) => {\n            if (params[param] != null) {\n                if (!isNaN(params[param])) {\n                    return params[param] == null ? fallback : Number(params[param]);\n                } else {\n                    console.warn(`AG Grid: DateFilter ${param} is not a number`);\n                }\n            }\n\n            return fallback;\n        };\n        this.minValidYear = yearParser('minValidYear', DEFAULT_MIN_YEAR);\n        this.maxValidYear = yearParser('maxValidYear', DEFAULT_MAX_YEAR);\n\n        if (this.minValidYear > this.maxValidYear) {\n            console.warn(`AG Grid: DateFilter minValidYear should be <= maxValidYear`);\n        }\n\n        this.createDateComponents();\n    }\n\n    private createDateComponents(): void {\n        const createDateCompWrapper = (element: HTMLElement) =>\n            new DateCompWrapper(\n                this.getContext(),\n                this.userComponentFactory,\n                {\n                    onDateChanged: () => this.onUiChanged(),\n                    filterParams: this.dateFilterParams\n                },\n                element);\n\n        this.dateCondition1FromComp = createDateCompWrapper(this.eCondition1PanelFrom);\n        this.dateCondition1ToComp = createDateCompWrapper(this.eCondition1PanelTo);\n        this.dateCondition2FromComp = createDateCompWrapper(this.eCondition2PanelFrom);\n        this.dateCondition2ToComp = createDateCompWrapper(this.eCondition2PanelTo);\n\n        this.addDestroyFunc(() => {\n            this.forEachInput((element) => element.destroy());\n        });\n    }\n\n    protected setElementValue(element: DateCompWrapper, value: Date | null, silent?: boolean): void {\n        element.setDate(value);\n    }\n\n    protected setElementDisplayed(element: DateCompWrapper, displayed: boolean): void {\n        element.setDisplayed(displayed);\n    }\n\n    protected setElementDisabled(element: DateCompWrapper, disabled: boolean): void {\n        element.setDisabled(disabled);\n    }\n\n    protected getDefaultFilterOptions(): string[] {\n        return DateFilter.DEFAULT_FILTER_OPTIONS;\n    }\n\n    protected createValueTemplate(position: ConditionPosition): string {\n        const pos = position === ConditionPosition.One ? '1' : '2';\n\n        return /* html */`\n            <div class=\"ag-filter-body\" ref=\"eCondition${pos}Body\">\n                <div class=\"ag-filter-from ag-filter-date-from\" ref=\"eCondition${pos}PanelFrom\"></div>\n                <div class=\"ag-filter-to ag-filter-date-to\" ref=\"eCondition${pos}PanelTo\"></div>\n            </div>`;\n    }\n\n    protected isConditionUiComplete(position: ConditionPosition): boolean {\n        if (!super.isConditionUiComplete(position)) {\n            return false;\n        }\n\n        const isValidDate = (value: Date | null) => value != null\n            && value.getUTCFullYear() >= this.minValidYear\n            && value.getUTCFullYear() <= this.maxValidYear;\n\n        let valid = true;\n        this.forEachInput((element, index, elPosition, numberOfInputs) => {\n            if (elPosition !== position || !valid || index >= numberOfInputs) {\n                return;\n            }\n            valid = valid && isValidDate(element.getDate());\n        });\n\n        return valid;\n    }\n\n    protected areSimpleModelsEqual(aSimple: DateFilterModel, bSimple: DateFilterModel): boolean {\n        return aSimple.dateFrom === bSimple.dateFrom\n            && aSimple.dateTo === bSimple.dateTo\n            && aSimple.type === bSimple.type;\n        }\n\n    protected getFilterType(): 'date' {\n        return 'date';\n    }\n\n    protected createCondition(position: ConditionPosition): DateFilterModel {\n        const type = this.getConditionTypes()[position];\n        const model: Partial<DateFilterModel> = {};\n\n        const values = this.getValues(position);\n        if (values.length > 0) {\n            model.dateFrom = serialiseDate(values[0]);\n        }\n        if (values.length > 1) {\n            model.dateTo = serialiseDate(values[1]);\n        }\n\n        return {\n            dateFrom: null,\n            dateTo: null,\n            filterType: this.getFilterType(),\n            type,\n            ...model,\n        };\n    }\n\n    protected resetPlaceholder(): void {\n        const globalTranslate = this.gridOptionsWrapper.getLocaleTextFunc();\n        const placeholder = this.translate('dateFormatOoo');\n        const ariaLabel = globalTranslate('ariaFilterValue', 'Filter Value');\n\n        this.forEachInput((element) => {\n            element.setInputPlaceholder(placeholder);\n            element.setInputAriaLabel(ariaLabel);\n        });\n    }\n\n    protected getInputs(): Tuple<DateCompWrapper>[] {\n        return [\n            [this.dateCondition1FromComp, this.dateCondition1ToComp],\n            [this.dateCondition2FromComp, this.dateCondition2ToComp],\n        ];\n    }\n\n    protected getValues(position: ConditionPosition): Tuple<Date> {\n        const result: Tuple<Date> = [];\n        this.forEachInput((element, index, elPosition, numberOfInputs) => {\n            if (position === elPosition && index < numberOfInputs) {\n                result.push(element.getDate());\n            }\n        });\n\n        return result;\n    }\n}\n","import { Component } from '../../../widgets/component';\nimport { IFloatingFilterComp, IFloatingFilterParams } from '../floatingFilter';\nimport { IFilterOptionDef, ProvidedFilterModel } from '../../../interfaces/iFilter';\nimport { ICombinedSimpleModel, ISimpleFilter, ISimpleFilterModel, SimpleFilter } from '../../provided/simpleFilter';\nimport { OptionsFactory } from '../../provided/optionsFactory';\nimport { IScalarFilterParams } from '../../provided/scalarFilter';\nimport { FilterChangedEvent } from '../../../events';\nimport { IProvidedFilterParams } from '../../provided/providedFilter';\n\nexport abstract class SimpleFloatingFilter extends Component implements IFloatingFilterComp<ISimpleFilter> {\n\n    // this method is on IFloatingFilterComp. because it's not implemented at this level, we have to\n    // define it as an abstract method. it gets implemented in sub classes.\n    public abstract onParentModelChanged(model: ProvidedFilterModel, event: FilterChangedEvent): void;\n\n    // creates text equivalent of FilterModel. if it's a combined model, this takes just one condition.\n    protected abstract conditionToString(condition: ProvidedFilterModel, opts?: IFilterOptionDef): string;\n    protected abstract getDefaultFilterOptions(): string[];\n    protected abstract setEditable(editable: boolean): void;\n\n    private lastType: string | null | undefined;\n\n    private optionsFactory: OptionsFactory;\n\n    private readOnly: boolean;\n\n    protected getDefaultDebounceMs(): number {\n        return 0;\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n    // used by:\n    // 1) NumberFloatingFilter & TextFloatingFilter: Always, for both when editable and read only.\n    // 2) DateFloatingFilter: Only when read only (as we show text rather than a date picker when read only)\n    protected getTextFromModel(model: ProvidedFilterModel): string | null {\n        if (!model) { return null; }\n\n        const isCombined = (model as any).operator != null;\n        if (isCombined) {\n            const combinedModel = model as ICombinedSimpleModel<ISimpleFilterModel>;\n            const { condition1, condition2 } = combinedModel || {};\n            const customOption1 = this.optionsFactory.getCustomOption(condition1.type);\n            const customOption2 = this.optionsFactory.getCustomOption(condition2.type);\n\n            return [\n                this.conditionToString(condition1, customOption1),\n                combinedModel.operator,\n                this.conditionToString(condition2, customOption2),\n            ].join(' ');\n        } else {\n            const condition = model as ISimpleFilterModel;\n            const customOption = this.optionsFactory.getCustomOption(condition.type);\n\n            // For custom filter options we display the Name of the filter instead\n            // of displaying the `from` value, as it wouldn't be relevant\n            const { displayKey, displayName, numberOfInputs } = customOption || {};\n            if (displayKey && displayName && numberOfInputs === 0) {\n                this.gridOptionsWrapper.getLocaleTextFunc()(displayKey, displayName);\n                return displayName;\n            }\n            return this.conditionToString(condition, customOption);\n        }\n    }\n\n    protected isEventFromFloatingFilter(event: FilterChangedEvent): boolean | undefined {\n        return event && event.afterFloatingFilter;\n    }\n\n    protected getLastType(): string | null | undefined {\n        return this.lastType;\n    }\n\n    protected isReadOnly(): boolean {\n        return this.readOnly;\n    }\n\n    protected setLastTypeFromModel(model: ProvidedFilterModel): void {\n        // if no model provided by the parent filter use default\n        if (!model) {\n            this.lastType = this.optionsFactory.getDefaultOption();\n            return;\n        }\n\n        const isCombined = (model as any).operator;\n\n        let condition: ISimpleFilterModel;\n\n        if (isCombined) {\n            const combinedModel = model as ICombinedSimpleModel<ISimpleFilterModel>;\n            condition = combinedModel.condition1;\n        } else {\n            condition = model as ISimpleFilterModel;\n        }\n\n        this.lastType = condition.type;\n    }\n\n    protected canWeEditAfterModelFromParentFilter(model: ProvidedFilterModel): boolean {\n        if (!model) {\n            // if no model, then we can edit as long as the lastType is something we can edit, as this\n            // is the type we will provide to the parent filter if the user decides to use the floating filter.\n            return this.isTypeEditable(this.lastType);\n        }\n\n        // never allow editing if the filter is combined (ie has two parts)\n        const isCombined = (model as any).operator;\n\n        if (isCombined) {\n            return false;\n        }\n\n        const simpleModel = model as ISimpleFilterModel;\n\n        return this.isTypeEditable(simpleModel.type);\n    }\n\n    public init(params: IFloatingFilterParams): void {\n        this.optionsFactory = new OptionsFactory();\n        this.optionsFactory.init(params.filterParams as IScalarFilterParams, this.getDefaultFilterOptions());\n        this.lastType = this.optionsFactory.getDefaultOption();\n\n        // readOnly is a property of IProvidedFilterParams - we need to find a better (type-safe)\n        // way to support reading this in the future.\n        this.readOnly = !!(params.filterParams as IProvidedFilterParams).readOnly;\n\n        // we are editable if:\n        // 1) there is a type (user has configured filter wrong if not type)\n        //  AND\n        // 2) the default type is not 'in range'\n        const editable = this.isTypeEditable(this.lastType);\n        this.setEditable(editable);\n    }\n\n    private doesFilterHaveSingleInput(filterType: string) {\n        const customFilterOption = this.optionsFactory.getCustomOption(filterType);\n        const { numberOfInputs } = customFilterOption || {};\n        return numberOfInputs == null || numberOfInputs == 1;\n    }\n\n    private isTypeEditable(type?: string | null): boolean {\n        const uneditableTypes: string[] = [\n            SimpleFilter.IN_RANGE, SimpleFilter.EMPTY, SimpleFilter.BLANK, SimpleFilter.NOT_BLANK,\n        ];\n        return !!type &&\n            !this.isReadOnly() &&\n            this.doesFilterHaveSingleInput(type) &&\n            uneditableTypes.indexOf(type) < 0;\n    }\n}\n","import { DateFilter, DateFilterModel } from './dateFilter';\nimport { Autowired } from '../../../context/context';\nimport { UserComponentFactory } from '../../../components/framework/userComponentFactory';\nimport { IDateParams } from '../../../rendering/dateComponent';\nimport { IFloatingFilterParams } from '../../floating/floatingFilter';\nimport { DateCompWrapper } from './dateCompWrapper';\nimport { RefSelector } from '../../../widgets/componentAnnotations';\nimport { SimpleFilter, ISimpleFilterModel } from '../simpleFilter';\nimport { SimpleFloatingFilter } from '../../floating/provided/simpleFloatingFilter';\nimport { FilterChangedEvent } from '../../../events';\nimport { ProvidedFilter } from '../providedFilter';\nimport { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { setDisplayed } from '../../../utils/dom';\nimport { parseDateTimeFromString, serialiseDate } from '../../../utils/date';\nimport { debounce } from '../../../utils/function';\nimport { IFilterOptionDef } from '../../../interfaces/iFilter';\nimport { WithoutGridCommon } from '../../../interfaces/iCommon';\n\nexport class DateFloatingFilter extends SimpleFloatingFilter {\n    @Autowired('userComponentFactory') private readonly userComponentFactory: UserComponentFactory;\n\n    @RefSelector('eReadOnlyText') private readonly eReadOnlyText: AgInputTextField;\n    @RefSelector('eDateWrapper') private readonly eDateWrapper: HTMLInputElement;\n\n    private dateComp: DateCompWrapper;\n    private params: IFloatingFilterParams;\n\n    constructor() {\n        super(/* html */`\n            <div class=\"ag-floating-filter-input\" role=\"presentation\">\n                <ag-input-text-field ref=\"eReadOnlyText\"></ag-input-text-field>\n                <div ref=\"eDateWrapper\" style=\"display: flex;\"></div>\n            </div>`);\n    }\n\n    protected getDefaultFilterOptions(): string[] {\n        return DateFilter.DEFAULT_FILTER_OPTIONS;\n    }\n\n    protected conditionToString(condition: DateFilterModel, options?: IFilterOptionDef): string {\n        const { type } = condition;\n        const { numberOfInputs } = options || {};\n        const isRange = type == SimpleFilter.IN_RANGE || numberOfInputs === 2;\n\n        const dateFrom = parseDateTimeFromString(condition.dateFrom);\n        const dateTo = parseDateTimeFromString(condition.dateTo);\n\n        if (isRange) {\n            return `${serialiseDate(dateFrom, false)}-${serialiseDate(dateTo, false)}`;\n        }\n\n        if (dateFrom != null) {\n            return `${serialiseDate(dateFrom, false)}`;\n        }\n\n        // cater for when the type doesn't need a value\n        return `${type}`;\n    }\n\n    public init(params: IFloatingFilterParams): void {\n        super.init(params);\n        this.params = params;\n        this.createDateComponent();\n        const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n        this.eReadOnlyText\n            .setDisabled(true)\n            .setInputAriaLabel(translate('ariaDateFilterInput', 'Date Filter Input'));\n    }\n\n    protected setEditable(editable: boolean): void {\n        setDisplayed(this.eDateWrapper, editable);\n        setDisplayed(this.eReadOnlyText.getGui(), !editable);\n    }\n\n    public onParentModelChanged(model: ISimpleFilterModel, event: FilterChangedEvent): void {\n        // We don't want to update the floating filter if the floating filter caused the change,\n        // because the UI is already in sync. if we didn't do this, the UI would behave strangely\n        // as it would be updating as the user is typing\n        if (this.isEventFromFloatingFilter(event)) { return; }\n\n        super.setLastTypeFromModel(model);\n\n        const allowEditing = !this.isReadOnly() &&\n            this.canWeEditAfterModelFromParentFilter(model);\n\n        this.setEditable(allowEditing);\n\n        if (allowEditing) {\n            if (model) {\n                const dateModel = model as DateFilterModel;\n\n                this.dateComp.setDate(parseDateTimeFromString(dateModel.dateFrom));\n            } else {\n                this.dateComp.setDate(null);\n            }\n\n            this.eReadOnlyText.setValue('');\n        } else {\n            this.eReadOnlyText.setValue(this.getTextFromModel(model));\n            this.dateComp.setDate(null);\n        }\n    }\n\n    private onDateChanged(): void {\n        const filterValueDate = this.dateComp.getDate();\n        const filterValueText = serialiseDate(filterValueDate);\n\n        this.params.parentFilterInstance(filterInstance => {\n            if (filterInstance) {\n                const date = parseDateTimeFromString(filterValueText);\n                filterInstance.onFloatingFilterChanged(this.getLastType() || null, date);\n            }\n        });\n    }\n\n    private createDateComponent(): void {\n        const debounceMs = ProvidedFilter.getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());\n        const dateComponentParams: WithoutGridCommon<IDateParams> = {\n            onDateChanged: debounce(this.onDateChanged.bind(this), debounceMs),\n            filterParams: this.params.column.getColDef().filterParams\n        };\n\n        this.dateComp = new DateCompWrapper(this.getContext(), this.userComponentFactory, dateComponentParams, this.eDateWrapper);\n\n        this.addDestroyFunc(() => this.dateComp.destroy());\n    }\n}\n","import { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { Component } from '../../../widgets/component';\nimport { IDateComp, IDateParams } from '../../../rendering/dateComponent';\nimport { RefSelector } from '../../../widgets/componentAnnotations';\nimport { serialiseDate, parseDateTimeFromString } from '../../../utils/date';\nimport { isBrowserChrome, isBrowserFirefox } from '../../../utils/browser';\nimport { IAfterGuiAttachedParams } from '../../../interfaces/iAfterGuiAttachedParams';\n\nexport class DefaultDateComponent extends Component implements IDateComp {\n    @RefSelector('eDateInput') private readonly eDateInput: AgInputTextField;\n\n    constructor() {\n        super(/* html */`\n            <div class=\"ag-filter-filter\">\n                <ag-input-text-field class=\"ag-date-filter\" ref=\"eDateInput\"></ag-input-text-field>\n            </div>`\n        );\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n    public init(params: IDateParams): void {\n        const eDocument = this.gridOptionsWrapper.getDocument();\n        const inputElement = this.eDateInput.getInputElement();\n\n        if (this.shouldUseBrowserDatePicker(params)) {\n            inputElement.type = 'date';\n        }\n\n        // ensures that the input element is focussed when a clear button is clicked\n        this.addManagedListener(inputElement, 'mousedown', () => {\n            if (this.eDateInput.isDisabled()) { return; }\n            inputElement.focus();\n        });\n\n        this.addManagedListener(inputElement, 'input', e => {\n            if (e.target !== eDocument.activeElement) { return; }\n            if (this.eDateInput.isDisabled()) { return; }\n\n            params.onDateChanged();\n        });\n\n        const { minValidYear, maxValidYear } = params.filterParams || {};\n        if (minValidYear) {\n            inputElement.min = `${minValidYear}-01-01`;\n        }\n        if (maxValidYear) {\n            inputElement.max = `${maxValidYear}-12-31`;\n        }\n    }\n\n    public getDate(): Date | null {\n        return parseDateTimeFromString(this.eDateInput.getValue());\n    }\n\n    public setDate(date: Date): void {\n        this.eDateInput.setValue(serialiseDate(date, false));\n    }\n\n    public setInputPlaceholder(placeholder: string): void {\n        this.eDateInput.setInputPlaceholder(placeholder);\n    }\n\n    public setDisabled(disabled: boolean): void {\n        this.eDateInput.setDisabled(disabled);\n    }\n\n    public afterGuiAttached(params?: IAfterGuiAttachedParams): void {\n        if (!params || !params.suppressFocus) {\n            this.eDateInput.getInputElement().focus();\n        }\n    }\n\n    private shouldUseBrowserDatePicker(params: IDateParams): boolean {\n        if (params.filterParams && params.filterParams.browserDatePicker != null) {\n            return params.filterParams.browserDatePicker;\n        }\n\n        return isBrowserChrome() || isBrowserFirefox();\n    }\n}\n","import { RefSelector } from '../../../widgets/componentAnnotations';\nimport { _ } from '../../../utils';\nimport { ConditionPosition, ISimpleFilterModel, Tuple } from '../simpleFilter';\nimport { ScalarFilter, Comparator, IScalarFilterParams } from '../scalarFilter';\nimport { IAfterGuiAttachedParams } from '../../../interfaces/iAfterGuiAttachedParams';\nimport { makeNull } from '../../../utils/generic';\nimport { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { isBrowserChrome, isBrowserEdge } from '../../../utils/browser';\n\nexport interface NumberFilterModel extends ISimpleFilterModel {\n    /** Filter type is always `'number'` */\n    filterType?: 'number';\n    /**\n     * The number value(s) associated with the filter.\n     * Custom filters can have no values (hence both are optional).\n     * Range filter has two values (from and to).\n     */\n    filter?: number | null;\n    /**\n     * Range filter `to` value.\n     */\n    filterTo?: number | null;\n}\n\nexport interface INumberFilterParams extends IScalarFilterParams {\n    /**\n     * When specified, the input field will be of type `text` instead of `number`, and this will be used as a regex of all the characters that are allowed to be typed.\n     * This will be compared against any typed character and prevent the character from appearing in the input if it does not match, in supported browsers (all except Safari).\n     */\n    allowedCharPattern?: string;\n    /**\n     * Typically used alongside `allowedCharPattern`, this provides a custom parser to convert the value entered in the filter inputs into a number that can be used for comparisons.\n     */\n    numberParser?: (text: string | null) => number;\n}\n\nexport class NumberFilter extends ScalarFilter<NumberFilterModel, number> {\n    public static DEFAULT_FILTER_OPTIONS = [\n        ScalarFilter.EQUALS,\n        ScalarFilter.NOT_EQUAL,\n        ScalarFilter.LESS_THAN,\n        ScalarFilter.LESS_THAN_OR_EQUAL,\n        ScalarFilter.GREATER_THAN,\n        ScalarFilter.GREATER_THAN_OR_EQUAL,\n        ScalarFilter.IN_RANGE,\n        ScalarFilter.BLANK,\n        ScalarFilter.NOT_BLANK,\n    ];\n\n    @RefSelector('eValue-index0-1') private readonly eValueFrom1: AgInputTextField;\n    @RefSelector('eValue-index1-1') private readonly eValueTo1: AgInputTextField;\n\n    @RefSelector('eValue-index0-2') private readonly eValueFrom2: AgInputTextField;\n    @RefSelector('eValue-index1-2') private readonly eValueTo2: AgInputTextField;\n\n    private numberFilterParams: INumberFilterParams;\n\n    constructor() {\n        super('numberFilter');\n    }\n\n    protected mapValuesFromModel(filterModel: NumberFilterModel | null): Tuple<number> {\n        const { filter, filterTo, type } = filterModel || {};\n        return [\n            filter == null ? null : filter,\n            filterTo == null ? null : filterTo,\n        ].slice(0, this.getNumberOfInputs(type));\n    }\n\n    protected getDefaultDebounceMs(): number {\n        return 500;\n    }\n\n    protected comparator(): Comparator<number> {\n        return (left: number, right: number): number => {\n            if (left === right) { return 0; }\n\n            return left < right ? 1 : -1;\n        };\n    }\n\n    protected setParams(params: INumberFilterParams): void {\n        this.numberFilterParams = params;\n\n        const allowedCharPattern = this.getAllowedCharPattern();\n\n        if (allowedCharPattern) {\n            const config = { allowedCharPattern };\n\n            this.resetTemplate({\n                'eValue-index0-1': config,\n                'eValue-index1-1': config,\n                'eValue-index0-2': config,\n                'eValue-index1-2': config,\n            });\n        }\n\n        super.setParams(params);\n    }\n\n    protected getDefaultFilterOptions(): string[] {\n        return NumberFilter.DEFAULT_FILTER_OPTIONS;\n    }\n\n    protected createValueTemplate(position: ConditionPosition): string {\n        const pos = position === ConditionPosition.One ? '1' : '2';\n        const allowedCharPattern = this.getAllowedCharPattern();\n        const agElementTag = allowedCharPattern ? 'ag-input-text-field' : 'ag-input-number-field';\n\n        return /* html */`\n            <div class=\"ag-filter-body\" ref=\"eCondition${pos}Body\" role=\"presentation\">\n                <${agElementTag} class=\"ag-filter-from ag-filter-filter\" ref=\"eValue-index0-${pos}\"></${agElementTag}>\n                <${agElementTag} class=\"ag-filter-to ag-filter-filter\" ref=\"eValue-index1-${pos}\"></${agElementTag}>\n            </div>`;\n    }\n\n    protected getValues(position: ConditionPosition): Tuple<number> {\n        const result: Tuple<number> = [];\n        this.forEachInput((element, index, elPosition, numberOfInputs) => {\n            if (position === elPosition && index < numberOfInputs) {\n                result.push(this.stringToFloat(element.getValue()));\n            }\n        });\n\n        return result;\n    }\n\n    protected areSimpleModelsEqual(aSimple: NumberFilterModel, bSimple: NumberFilterModel): boolean {\n        return aSimple.filter === bSimple.filter\n            && aSimple.filterTo === bSimple.filterTo\n            && aSimple.type === bSimple.type;\n    }\n\n    protected getFilterType(): 'number' {\n        return 'number';\n    }\n\n    private stringToFloat(value?: string | number | null): number | null {\n        if (typeof value === 'number') {\n            return value;\n        }\n\n        let filterText = makeNull(value);\n\n        if (filterText != null && filterText.trim() === '') {\n            filterText = null;\n        }\n\n        if (this.numberFilterParams.numberParser) {\n            return this.numberFilterParams.numberParser(filterText);\n        }\n\n        return filterText == null || filterText.trim() === '-' ? null : parseFloat(filterText);\n    }\n\n    protected createCondition(position: ConditionPosition): NumberFilterModel {\n        const type = this.getConditionTypes()[position];\n        const model: NumberFilterModel = {\n            filterType: this.getFilterType(),\n            type\n        };\n\n        const values = this.getValues(position);\n        if (values.length > 0) {\n            model.filter = values[0];\n        }\n        if (values.length > 1) {\n            model.filterTo = values[1];\n        }\n\n        return model;\n    }\n\n    protected getInputs(): Tuple<AgInputTextField>[] {\n        return [\n            [this.eValueFrom1, this.eValueTo1],\n            [this.eValueFrom2, this.eValueTo2],\n        ];\n    }\n\n    private getAllowedCharPattern(): string | null {\n        const { allowedCharPattern } = this.numberFilterParams || {};\n\n        if (allowedCharPattern) {\n            return allowedCharPattern;\n        }\n\n        if (!isBrowserChrome() && !isBrowserEdge()) {\n            // only Chrome and Edge support the HTML5 number field, so for other browsers we provide an equivalent\n            // constraint instead\n            return '\\\\d\\\\-\\\\.';\n        }\n\n        return null;\n    }\n}\n","import { RefSelector } from '../../../widgets/componentAnnotations';\nimport {\n    SimpleFilter,\n    ConditionPosition,\n    ISimpleFilterParams,\n    ISimpleFilterModel,\n    ISimpleFilterModelType,\n    Tuple\n} from '../simpleFilter';\nimport { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { makeNull } from '../../../utils/generic';\nimport { _ } from '../../../utils';\nimport { BaseColDefParams } from '../../../entities/colDef';\nimport { IDoesFilterPassParams } from '../../../interfaces/iFilter';\n\nexport interface TextFilterModel extends ISimpleFilterModel {\n    /** Filter type is always `'text'` */\n    filterType?: 'text';\n    /**\n     * The text value associated with the filter.\n     * It's optional as custom filters may not have a text value.\n     * */\n    filter?: string | null;\n    /**\n     * The 2nd text value associated with the filter, if supported.\n     * */\n     filterTo?: string | null;\n    }\n\nexport interface TextMatcherParams extends BaseColDefParams {\n    filterOption: string | null | undefined;\n    value: any;\n    filterText: string | null;\n    textFormatter?: TextFormatter;\n}\n\nexport interface TextMatcher {\n    (params: TextMatcherParams): boolean;\n}\n\nexport interface TextFormatter {\n    (from?: string | null): string | null;\n}\n\nexport interface ITextFilterParams extends ISimpleFilterParams {\n    /**\n     * Used to override how to filter based on the user input.\n     */\n    textMatcher?: TextMatcher;\n    /**\n     * By default, text filtering is case-insensitive. Set this to `true` to make text filtering case-sensitive.\n     * Default: `false`\n     */\n    caseSensitive?: boolean;\n    /**\n     * Formats the text before applying the filter compare logic.\n     * Useful if you want to substitute accented characters, for example.\n     */\n    textFormatter?: (from: string) => string;\n\n    /**\n     * If `true`, the input that the user enters will be trimmed when the filter is applied, so any leading or trailing whitespace will be removed.\n     * If only whitespace is entered, it will be left as-is.\n     * If you enable `trimInput`, it is best to also increase the `debounceMs` to give users more time to enter text.\n     * Default: `false`\n     */\n    trimInput?: boolean;\n}\n\nexport class TextFilter extends SimpleFilter<TextFilterModel, string> {\n    public static DEFAULT_FILTER_OPTIONS = [\n        SimpleFilter.CONTAINS,\n        SimpleFilter.NOT_CONTAINS,\n        SimpleFilter.EQUALS,\n        SimpleFilter.NOT_EQUAL,\n        SimpleFilter.STARTS_WITH,\n        SimpleFilter.ENDS_WITH,\n        SimpleFilter.BLANK,\n        SimpleFilter.NOT_BLANK,\n    ];\n\n    static DEFAULT_FORMATTER: TextFormatter = (from: string) => from;\n\n    static DEFAULT_LOWERCASE_FORMATTER: TextFormatter = (from: string) => from == null ? null : from.toString().toLowerCase();\n\n    static DEFAULT_MATCHER: TextMatcher = ({filterOption, value, filterText}) => {\n        if (filterText == null) { return false; }\n\n        switch (filterOption) {\n            case TextFilter.CONTAINS:\n                return value.indexOf(filterText) >= 0;\n            case TextFilter.NOT_CONTAINS:\n                return value.indexOf(filterText) < 0;\n            case TextFilter.EQUALS:\n                return value === filterText;\n            case TextFilter.NOT_EQUAL:\n                return value != filterText;\n            case TextFilter.STARTS_WITH:\n                return value.indexOf(filterText) === 0;\n            case TextFilter.ENDS_WITH:\n                const index = value.lastIndexOf(filterText);\n                return index >= 0 && index === (value.length - filterText.length);\n            default:\n                return false;\n        }\n    }\n\n    @RefSelector('eValue-index0-1') private readonly eValueFrom1: AgInputTextField;\n    @RefSelector('eValue-index1-1') private readonly eValueTo1: AgInputTextField;\n\n    @RefSelector('eValue-index0-2') private readonly eValueFrom2: AgInputTextField;\n    @RefSelector('eValue-index1-2') private readonly eValueTo2: AgInputTextField;\n\n    private matcher: TextMatcher;\n    private formatter: TextFormatter;\n\n    private textFilterParams: ITextFilterParams;\n\n    constructor() {\n        super('textFilter');\n    }\n\n    public static trimInput(value?: string | null): string | null | undefined {\n        const trimmedInput = value && value.trim();\n\n        // trim the input, unless it is all whitespace (this is consistent with Excel behaviour)\n        return trimmedInput === '' ? value : trimmedInput;\n    }\n\n    protected getDefaultDebounceMs(): number {\n        return 500;\n    }\n\n    protected setParams(params: ITextFilterParams): void {\n        super.setParams(params);\n\n        this.textFilterParams = params;\n        this.matcher = this.getTextMatcher();\n        this.formatter = this.textFilterParams.textFormatter ||\n            (this.textFilterParams.caseSensitive ? TextFilter.DEFAULT_FORMATTER : TextFilter.DEFAULT_LOWERCASE_FORMATTER);\n    }\n\n    private getTextMatcher(): TextMatcher {\n        const legacyComparator = (this.textFilterParams as any).textCustomComparator;\n        if (legacyComparator) {\n            _.doOnce(() => console.warn('AG Grid - textCustomComparator is deprecated, use textMatcher instead.'), 'textCustomComparator.deprecated');\n            return ({ filterOption, value, filterText }) => legacyComparator(filterOption, value, filterText);\n        }\n        return this.textFilterParams.textMatcher || TextFilter.DEFAULT_MATCHER\n    }\n\n    protected createCondition(position: ConditionPosition): TextFilterModel {\n        const type = this.getConditionTypes()[position];\n\n        const model: TextFilterModel = {\n            filterType: this.getFilterType(),\n            type,\n        };\n\n        const values = this.getValues(position);\n        if (values.length > 0) {\n            model.filter = values[0];\n        }\n        if (values.length > 1) {\n            model.filterTo = values[1];\n        }\n\n        return model;\n    }\n\n    protected getFilterType(): 'text' {\n        return 'text';\n    }\n\n    protected areSimpleModelsEqual(aSimple: TextFilterModel, bSimple: TextFilterModel): boolean {\n        return aSimple.filter === bSimple.filter &&\n            aSimple.filterTo === bSimple.filterTo &&\n            aSimple.type === bSimple.type;\n    }\n\n    protected getInputs(): Tuple<AgInputTextField>[] {\n        return [\n            [this.eValueFrom1, this.eValueTo1],\n            [this.eValueFrom2, this.eValueTo2],\n        ];\n    }\n\n    protected getValues(position: ConditionPosition): Tuple<string> {\n        const result: Tuple<string> = [];\n        this.forEachInput((element, index, elPosition, numberOfInputs) => {\n            if (position === elPosition && index < numberOfInputs) {\n                const value = makeNull(element.getValue());\n                const cleanValue = (this.textFilterParams.trimInput ? TextFilter.trimInput(value) : value) || null;\n                result.push(cleanValue);\n                element.setValue(cleanValue, true); // ensure clean value is visible\n            }\n        });\n\n        return result;\n    }\n\n    protected getDefaultFilterOptions(): string[] {\n        return TextFilter.DEFAULT_FILTER_OPTIONS;\n    }\n\n    protected createValueTemplate(position: ConditionPosition): string {\n        const pos = position === ConditionPosition.One ? '1' : '2';\n\n        return /* html */`\n            <div class=\"ag-filter-body\" ref=\"eCondition${pos}Body\" role=\"presentation\">\n                <ag-input-text-field class=\".ag-filter-from ag-filter-filter\" ref=\"eValue-index0-${pos}\"></ag-input-text-field>\n                <ag-input-text-field class=\"ag-filter-to ag-filter-filter\" ref=\"eValue-index1-${pos}\"></ag-input-text-field>\n            </div>`;\n    }\n\n    protected mapValuesFromModel(filterModel: TextFilterModel | null): Tuple<string> {\n        const { filter, filterTo, type } = filterModel || {};\n        return [\n            filter || null,\n            filterTo || null,\n        ].slice(0, this.getNumberOfInputs(type));\n    }\n\n    protected evaluateNullValue(filterType: ISimpleFilterModelType | null) {\n        const filterTypesAllowNulls = [\n            SimpleFilter.NOT_EQUAL, SimpleFilter.NOT_CONTAINS, SimpleFilter.BLANK,\n        ];\n\n        return filterType ? filterTypesAllowNulls.indexOf(filterType) >= 0 : false;\n    }\n\n    protected evaluateNonNullValue(values: Tuple<string>, cellValue: string, filterModel: TextFilterModel, params: IDoesFilterPassParams): boolean {\n        const formattedValues = values.map(v => this.formatter(v)) || [];\n        const cellValueFormatted = this.formatter(cellValue);\n        const {api, colDef, column, columnApi, context, textFormatter} = this.textFilterParams;\n\n        if (filterModel.type === SimpleFilter.BLANK) {\n            return this.isBlank(cellValue);\n        } else if (filterModel.type === SimpleFilter.NOT_BLANK) {\n            return !this.isBlank(cellValue);\n        }\n\n        const matcherParams = {\n            api,\n            colDef,\n            column,\n            columnApi,\n            context,\n            node: params.node,\n            data: params.data,\n            filterOption: filterModel.type,\n            value: cellValueFormatted,\n            textFormatter,\n        };\n\n        return formattedValues.some(v => this.matcher({ ...matcherParams, filterText: v }));\n    }\n}\n","import { IFloatingFilterParams } from '../floatingFilter';\nimport { RefSelector } from '../../../widgets/componentAnnotations';\nimport { IFilterOptionDef, ProvidedFilterModel } from '../../../interfaces/iFilter';\nimport { debounce } from '../../../utils/function';\nimport { ProvidedFilter } from '../../provided/providedFilter';\nimport { PostConstruct, Autowired } from '../../../context/context';\nimport { SimpleFloatingFilter } from './simpleFloatingFilter';\nimport { SimpleFilter } from '../../provided/simpleFilter';\nimport { FilterChangedEvent } from '../../../events';\nimport { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { ColumnModel } from '../../../columns/columnModel';\nimport { KeyCode } from '../../../constants/keyCode';\nimport { ITextFilterParams, TextFilter, TextFilterModel } from '../../provided/text/textFilter';\nimport { NumberFilterModel, INumberFilterParams } from '../../provided/number/numberFilter';\n\ntype ModelUnion = TextFilterModel | NumberFilterModel;\nexport abstract class TextInputFloatingFilter<M extends ModelUnion> extends SimpleFloatingFilter {\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @RefSelector('eFloatingFilterInput') private readonly eFloatingFilterInput: AgInputTextField;\n\n    protected params: IFloatingFilterParams;\n\n    private applyActive: boolean;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.resetTemplate();\n    }\n\n    private resetTemplate(paramsMap?: any) {\n        this.setTemplate(/* html */`\n            <div class=\"ag-floating-filter-input\" role=\"presentation\">\n                <ag-input-text-field ref=\"eFloatingFilterInput\"></ag-input-text-field>\n            </div>\n        `, paramsMap);\n    }\n\n    protected getDefaultDebounceMs(): number {\n        return 500;\n    }\n\n    public onParentModelChanged(model: ProvidedFilterModel, event: FilterChangedEvent): void {\n        if (this.isEventFromFloatingFilter(event)) {\n            // if the floating filter triggered the change, it is already in sync\n            return;\n        }\n\n        this.setLastTypeFromModel(model);\n        this.eFloatingFilterInput.setValue(this.getTextFromModel(model));\n        this.setEditable(this.canWeEditAfterModelFromParentFilter(model));\n    }\n\n    public init(params: IFloatingFilterParams): void {\n        super.init(params);\n\n        this.params = params;\n        this.applyActive = ProvidedFilter.isUseApplyButton(this.params.filterParams);\n\n        const { allowedCharPattern } = this.params.filterParams as INumberFilterParams;\n        if (allowedCharPattern != null) {\n            this.resetTemplate({ eFloatingFilterInput: { allowedCharPattern } });\n        }\n\n        if (!this.isReadOnly()) {\n            const debounceMs = ProvidedFilter.getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());\n            const toDebounce: () => void = debounce(this.syncUpWithParentFilter.bind(this), debounceMs);\n            const filterGui = this.eFloatingFilterInput.getGui();\n\n            this.addManagedListener(filterGui, 'input', toDebounce);\n            this.addManagedListener(filterGui, 'keypress', toDebounce);\n            this.addManagedListener(filterGui, 'keydown', toDebounce);\n        }\n\n        const columnDef = (params.column.getDefinition() as any);\n\n        if (this.isReadOnly() || (\n            columnDef.filterParams &&\n            columnDef.filterParams.filterOptions &&\n            columnDef.filterParams.filterOptions.length === 1 &&\n            columnDef.filterParams.filterOptions[0] === 'inRange')) {\n            this.eFloatingFilterInput.setDisabled(true);\n        }\n\n        const displayName = this.columnModel.getDisplayNameForColumn(params.column, 'header', true);\n        const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n        this.eFloatingFilterInput.setInputAriaLabel(`${displayName} ${translate('ariaFilterInput', 'Filter Input')}`);\n    }\n\n    private syncUpWithParentFilter(e: KeyboardEvent): void {\n        const enterKeyPressed = e.key === KeyCode.ENTER;\n\n        if (this.applyActive && !enterKeyPressed) { return; }\n\n        let value = this.eFloatingFilterInput.getValue();\n\n        if ((this.params.filterParams as ITextFilterParams).trimInput) {\n            value = TextFilter.trimInput(value);\n            this.eFloatingFilterInput.setValue(value, true); // ensure visible value is trimmed\n        }\n\n        this.params.parentFilterInstance(filterInstance => {\n            if (filterInstance) {\n                filterInstance.onFloatingFilterChanged(this.getLastType() || null, value || null);\n            }\n        });\n    }\n\n    protected conditionToString(condition: M, options?: IFilterOptionDef): string {\n        const { numberOfInputs } = options || {};\n        const isRange = condition.type == SimpleFilter.IN_RANGE || numberOfInputs === 2;\n\n        if (isRange) {\n            return `${condition.filter}-${condition.filterTo}`;\n        }\n\n        // cater for when the type doesn't need a value\n        if (condition.filter != null) {\n            return `${condition.filter}`;\n        }\n\n        return `${condition.type}`;\n    }\n\n    protected setEditable(editable: boolean): void {\n        this.eFloatingFilterInput.setDisabled(!editable);\n    }\n}\n","import { NumberFilter, NumberFilterModel } from './numberFilter';\nimport { TextInputFloatingFilter } from '../../floating/provided/textInputFloatingFilter';\n\nexport class NumberFloatingFilter extends TextInputFloatingFilter<NumberFilterModel> {\n    protected getDefaultFilterOptions(): string[] {\n        return NumberFilter.DEFAULT_FILTER_OPTIONS;\n    }\n}\n","import { TextFilter, TextFilterModel } from './textFilter';\nimport { TextInputFloatingFilter } from '../../floating/provided/textInputFloatingFilter';\n\nexport class TextFloatingFilter extends TextInputFloatingFilter<TextFilterModel> {\n    protected getDefaultFilterOptions(): string[] {\n        return TextFilter.DEFAULT_FILTER_OPTIONS;\n    }\n}\n","import { AgEvent } from \"../events\";\nimport { EventService } from \"../eventService\";\nimport { IEventEmitter } from \"../interfaces/iEventEmitter\";\nimport { areEventsNear } from \"../utils/mouse\";\n\nexport interface TapEvent extends AgEvent {\n    touchStart: Touch;\n}\n\nexport interface LongTapEvent extends AgEvent {\n    touchStart: Touch;\n    touchEvent: TouchEvent;\n}\n\nexport class TouchListener implements IEventEmitter {\n\n    public static EVENT_TAP = \"tap\";\n    public static EVENT_DOUBLE_TAP = \"doubleTap\";\n    public static EVENT_LONG_TAP = \"longTap\";\n\n    private static DOUBLE_TAP_MILLIS = 500;\n\n    private eElement: HTMLElement;\n\n    private destroyFuncs: Function[] = [];\n\n    private moved: boolean;\n\n    private touching = false;\n    private touchStart: Touch;\n\n    private lastTapTime: number | null;\n\n    private eventService: EventService = new EventService();\n\n    // private mostRecentTouch: Touch;\n\n    private preventMouseClick: boolean;\n\n    constructor(eElement: HTMLElement, preventMouseClick = false) {\n        this.eElement = eElement;\n        this.preventMouseClick = preventMouseClick;\n\n        const startListener = this.onTouchStart.bind(this);\n        const moveListener = this.onTouchMove.bind(this);\n        const endListener = this.onTouchEnd.bind(this);\n\n        this.eElement.addEventListener(\"touchstart\", startListener, { passive: true } as any);\n        this.eElement.addEventListener(\"touchmove\", moveListener, { passive: true } as any);\n        // we set passive=false, as we want to prevent default on this event\n        this.eElement.addEventListener(\"touchend\", endListener, { passive: false } as any);\n\n        this.destroyFuncs.push(() => {\n            this.eElement.removeEventListener(\"touchstart\", startListener, { passive: true } as any);\n            this.eElement.removeEventListener(\"touchmove\", moveListener, { passive: true } as any);\n            this.eElement.removeEventListener(\"touchend\", endListener, { passive: false } as any);\n        });\n    }\n\n    private getActiveTouch(touchList: TouchList): Touch | null {\n        for (let i = 0; i < touchList.length; i++) {\n            const matches = touchList[i].identifier === this.touchStart.identifier;\n            if (matches) {\n                return touchList[i];\n            }\n        }\n\n        return null;\n    }\n\n    public addEventListener(eventType: string, listener: Function): void {\n        this.eventService.addEventListener(eventType, listener);\n    }\n\n    public removeEventListener(eventType: string, listener: Function): void {\n        this.eventService.removeEventListener(eventType, listener);\n    }\n\n    private onTouchStart(touchEvent: TouchEvent): void {\n        // only looking at one touch point at any time\n        if (this.touching) {\n            return;\n        }\n\n        this.touchStart = touchEvent.touches[0];\n        this.touching = true;\n\n        this.moved = false;\n\n        const touchStartCopy = this.touchStart;\n\n        window.setTimeout(() => {\n            const touchesMatch = this.touchStart === touchStartCopy;\n\n            if (this.touching && touchesMatch && !this.moved) {\n                this.moved = true;\n                const event: LongTapEvent = {\n                    type: TouchListener.EVENT_LONG_TAP,\n                    touchStart: this.touchStart,\n                    touchEvent: touchEvent\n                };\n                this.eventService.dispatchEvent(event);\n            }\n        }, 500);\n    }\n\n    private onTouchMove(touchEvent: TouchEvent): void {\n        if (!this.touching) {\n            return;\n        }\n\n        const touch = this.getActiveTouch(touchEvent.touches);\n        if (!touch) {\n            return;\n        }\n\n        const eventIsFarAway = !areEventsNear(touch, this.touchStart, 4);\n        if (eventIsFarAway) {\n            this.moved = true;\n        }\n    }\n\n    private onTouchEnd(touchEvent: TouchEvent): void {\n        if (!this.touching) {\n            return;\n        }\n\n        if (!this.moved) {\n            const event: TapEvent = {\n                type: TouchListener.EVENT_TAP,\n                touchStart: this.touchStart\n            };\n            this.eventService.dispatchEvent(event);\n            this.checkForDoubleTap();\n        }\n\n        // stops the tap from also been processed as a mouse click\n        if (this.preventMouseClick) {\n            touchEvent.preventDefault();\n        }\n\n        this.touching = false;\n    }\n\n    private checkForDoubleTap(): void {\n        const now = new Date().getTime();\n\n        if (this.lastTapTime && this.lastTapTime > 0) {\n            // if previous tap, see if duration is short enough to be considered double tap\n            const interval = now - this.lastTapTime;\n            if (interval > TouchListener.DOUBLE_TAP_MILLIS) {\n                // dispatch double tap event\n                const event: TapEvent = {\n                    type: TouchListener.EVENT_DOUBLE_TAP,\n                    touchStart: this.touchStart\n                };\n                this.eventService.dispatchEvent(event);\n\n                // this stops a tripple tap ending up as two double taps\n                this.lastTapTime = null;\n            } else {\n                this.lastTapTime = now;\n            }\n        } else {\n            this.lastTapTime = now;\n        }\n    }\n\n    public destroy(): void {\n        this.destroyFuncs.forEach(func => func());\n    }\n}","import { Autowired } from \"../../../context/context\";\nimport { Column } from \"../../../entities/column\";\nimport { Events } from \"../../../events\";\nimport { IComponent } from \"../../../interfaces/iComponent\";\nimport { IMenuFactory } from \"../../../interfaces/iMenuFactory\";\nimport { AgGridCommon } from \"../../../interfaces/iCommon\";\nimport { SortController } from \"../../../sortController\";\nimport { firstExistingValue } from \"../../../utils/array\";\nimport { isIOSUserAgent } from \"../../../utils/browser\";\nimport { clearElement, removeFromParent, setDisplayed } from \"../../../utils/dom\";\nimport { exists } from \"../../../utils/generic\";\nimport { createIconNoSpan } from \"../../../utils/icon\";\nimport { escapeString } from \"../../../utils/string\";\nimport { Component } from \"../../../widgets/component\";\nimport { RefSelector } from \"../../../widgets/componentAnnotations\";\nimport { LongTapEvent, TapEvent, TouchListener } from \"../../../widgets/touchListener\";\n\nexport interface IHeaderParams extends AgGridCommon {\n    /** The column the header is for. */\n    column: Column;\n    /**\n     * The name to display for the column.\n     * If the column is using a headerValueGetter, the displayName will take this into account.\n     */\n    displayName: string;\n    /**\n     * Whether sorting is enabled for the column.\n     * Only put sort logic into your header if this is true.\n     */\n    enableSorting: boolean | undefined;\n    /**\n     * Whether menu is enabled for the column.\n     * Only display a menu button in your header if this is true.\n     */\n    enableMenu: boolean;\n    /**\n     * Callback to request the grid to show the column menu.\n     * Pass in the html element of the column menu to have the\n     *  grid position the menu over the button.\n     */\n    showColumnMenu: (source: HTMLElement) => void;\n    /**\n     * Callback to progress the sort for this column.\n     * The grid will decide the next sort direction eg ascending, descending or 'no sort'.\n     * Pass `multiSort=true` if you want to do a multi sort (eg user has Shift held down when they click).\n     */\n    progressSort: (multiSort?: boolean) => void;\n    /**\n     * Callback to set the sort for this column.\n     * Pass the sort direction to use ignoring the current sort eg one of 'asc', 'desc' or null (for no sort).\n     * Pass `multiSort=true` if you want to do a multi sort (eg user has Shift held down when they click)\n     */\n    setSort: (sort: 'asc' | 'desc' | null, multiSort?: boolean) => void;\n\n    /** Custom header template if provided to `headerComponentParams`, otherwise will be `undefined`. See [Header Templates](https://ag-grid.com/javascript-data-grid/column-headers/#header-templates) */\n    template?: string;\n    /**\n     * The header the grid provides.\n     * The custom header component is a child of the grid provided header.\n     * The grid's header component is what contains the grid managed functionality such as resizing, keyboard navigation etc.\n     * This is provided should you want to make changes to this cell,\n     * eg add ARIA tags, or add keyboard event listener (as focus goes here when navigating to the header).\n     */\n    eGridHeader: HTMLElement;\n}\n\nexport interface IHeader {\n    /** Get the header to refresh. Gets called whenever Column Defs are updated. */\n    refresh(params: IHeaderParams): boolean;\n}\n\nexport interface IHeaderComp extends IHeader, IComponent<IHeaderParams> { }\n\nexport class HeaderComp extends Component implements IHeaderComp {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-cell-label-container\" role=\"presentation\">\n            <span ref=\"eMenu\" class=\"ag-header-icon ag-header-cell-menu-button\" aria-hidden=\"true\"></span>\n            <div ref=\"eLabel\" class=\"ag-header-cell-label\" role=\"presentation\">\n                <span ref=\"eText\" class=\"ag-header-cell-text\"></span>\n                <span ref=\"eFilter\" class=\"ag-header-icon ag-header-label-icon ag-filter-icon\" aria-hidden=\"true\"></span>\n                <span ref=\"eSortOrder\" class=\"ag-header-icon ag-header-label-icon ag-sort-order\" aria-hidden=\"true\"></span>\n                <span ref=\"eSortAsc\" class=\"ag-header-icon ag-header-label-icon ag-sort-ascending-icon\" aria-hidden=\"true\"></span>\n                <span ref=\"eSortDesc\" class=\"ag-header-icon ag-header-label-icon ag-sort-descending-icon\" aria-hidden=\"true\"></span>\n                <span ref=\"eSortNone\" class=\"ag-header-icon ag-header-label-icon ag-sort-none-icon\" aria-hidden=\"true\"></span>\n            </div>\n        </div>`;\n\n    @Autowired('sortController') private sortController: SortController;\n    @Autowired('menuFactory') private menuFactory: IMenuFactory;\n\n    @RefSelector('eFilter') private eFilter: HTMLElement;\n    @RefSelector('eSortAsc') private eSortAsc: HTMLElement;\n\n    @RefSelector('eSortDesc') private eSortDesc: HTMLElement;\n    @RefSelector('eSortNone') private eSortNone: HTMLElement;\n    @RefSelector('eSortOrder') private eSortOrder: HTMLElement;\n    @RefSelector('eMenu') private eMenu: HTMLElement;\n    @RefSelector('eLabel') private eLabel: HTMLElement;\n    @RefSelector('eText') private eText: HTMLElement;\n\n    private params: IHeaderParams;\n\n    private lastMovingChanged = 0;\n\n    private currentDisplayName: string;\n    private currentTemplate: string | null | undefined;\n    private currentShowMenu: boolean;\n    private currentSort: boolean | undefined;\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n    public refresh(params: IHeaderParams): boolean {\n\n        this.params = params;\n\n        // if template changed, then recreate the whole comp, the code required to manage\n        // a changing template is to difficult for what it's worth.\n        if (this.workOutTemplate() != this.currentTemplate) { return false; }\n        if (this.workOutShowMenu() != this.currentShowMenu) { return false; }\n        if (this.workOutSort() != this.currentSort) { return false; }\n\n        this.setDisplayName(params);\n\n        return true;\n    }\n\n    private workOutTemplate(): string | null | undefined {\n        let template: string | null | undefined = firstExistingValue(\n            this.params.template,\n            HeaderComp.TEMPLATE\n        );\n\n        // take account of any newlines & whitespace before/after the actual template\n        template = template && template.trim ? template.trim() : template;\n        return template;\n    }\n\n    public init(params: IHeaderParams): void {\n        this.params = params;\n\n        this.currentTemplate = this.workOutTemplate();\n        this.setTemplate(this.currentTemplate);\n        this.setupTap();\n        this.setupIcons(params.column);\n        this.setMenu();\n        this.setupSort();\n        this.setupFilterIcon();\n        this.setDisplayName(params);\n    }\n\n    private setDisplayName(params: IHeaderParams): void {\n        if (this.currentDisplayName != params.displayName) {\n            this.currentDisplayName = params.displayName;\n            const displayNameSanitised = escapeString(this.currentDisplayName);\n            if (this.eText) {\n                this.eText.innerHTML = displayNameSanitised!;\n            }\n        }\n    }\n\n    private setupIcons(column: Column): void {\n        this.addInIcon('sortAscending', this.eSortAsc, column);\n        this.addInIcon('sortDescending', this.eSortDesc, column);\n        this.addInIcon('sortUnSort', this.eSortNone, column);\n        this.addInIcon('menu', this.eMenu, column);\n        this.addInIcon('filter', this.eFilter, column);\n    }\n\n    private addInIcon(iconName: string, eParent: HTMLElement, column: Column): void {\n        if (eParent == null) { return; }\n\n        const eIcon = createIconNoSpan(iconName, this.gridOptionsWrapper, column);\n        if (eIcon) {\n            eParent.appendChild(eIcon);\n        }\n    }\n\n    private setupTap(): void {\n        const { gridOptionsWrapper: options } = this;\n\n        if (options.isSuppressTouch()) { return; }\n\n        const touchListener = new TouchListener(this.getGui(), true);\n        const suppressMenuHide = options.isSuppressMenuHide();\n        const tapMenuButton = suppressMenuHide && exists(this.eMenu);\n        const menuTouchListener = tapMenuButton ? new TouchListener(this.eMenu, true) : touchListener;\n\n        if (this.params.enableMenu) {\n            const eventType = tapMenuButton ? 'EVENT_TAP' : 'EVENT_LONG_TAP';\n            const showMenuFn = (event: TapEvent | LongTapEvent) => {\n                options.getApi()!.showColumnMenuAfterMouseClick(this.params.column, event.touchStart);\n            };\n            this.addManagedListener(menuTouchListener, TouchListener[eventType], showMenuFn);\n        }\n\n        if (this.params.enableSorting) {\n            const tapListener = (event: TapEvent) => {\n                const target = event.touchStart.target as HTMLElement;\n                // When suppressMenuHide is true, a tap on the menu icon will bubble up\n                // to the header container, in that case we should not sort\n                if (suppressMenuHide && this.eMenu.contains(target)) { return; }\n\n                this.sortController.progressSort(this.params.column, false, \"uiColumnSorted\");\n            };\n\n            this.addManagedListener(touchListener, TouchListener.EVENT_TAP, tapListener);\n        }\n\n        // if tapMenuButton is true `touchListener` and `menuTouchListener` are different\n        // so we need to make sure to destroy both listeners here\n        this.addDestroyFunc(() => touchListener.destroy());\n\n        if (tapMenuButton) {\n            this.addDestroyFunc(() => menuTouchListener.destroy());\n        }\n    }\n\n    private workOutShowMenu(): boolean {\n        // we don't show the menu if on an iPad/iPhone, as the user cannot have a pointer device/\n        // However if suppressMenuHide is set to true the menu will be displayed alwasys, so it's ok\n        // to show it on iPad in this case (as hover isn't needed). If suppressMenuHide\n        // is false (default) user will need to use longpress to display the menu.\n        const menuHides = !this.gridOptionsWrapper.isSuppressMenuHide();\n\n        const onIpadAndMenuHides = isIOSUserAgent() && menuHides;\n        const showMenu = this.params.enableMenu && !onIpadAndMenuHides;\n\n        return showMenu;\n    }\n\n    private setMenu(): void {\n        // if no menu provided in template, do nothing\n        if (!this.eMenu) {\n            return;\n        }\n\n        this.currentShowMenu = this.workOutShowMenu();\n        if (!this.currentShowMenu) {\n            removeFromParent(this.eMenu);\n            return;\n        }\n\n        const suppressMenuHide = this.gridOptionsWrapper.isSuppressMenuHide();\n        this.addManagedListener(this.eMenu, 'click', () => this.showMenu(this.eMenu));\n        this.eMenu.classList.toggle('ag-header-menu-always-show', suppressMenuHide);\n    }\n\n    public showMenu(eventSource?: HTMLElement) {\n        if (!eventSource) {\n            eventSource = this.eMenu;\n        }\n\n        this.menuFactory.showMenuAfterButtonClick(this.params.column, eventSource, 'columnMenu');\n    }\n\n    private removeSortIcons(): void {\n        removeFromParent(this.eSortAsc);\n        removeFromParent(this.eSortDesc);\n        removeFromParent(this.eSortNone);\n        removeFromParent(this.eSortOrder);\n    }\n\n    private workOutSort(): boolean | undefined {\n        return this.params.enableSorting;\n    }\n\n    public setupSort(): void {\n        this.currentSort = this.params.enableSorting;\n\n        if (!this.currentSort) {\n            this.removeSortIcons();\n            return;\n        }\n\n        const sortUsingCtrl = this.gridOptionsWrapper.isMultiSortKeyCtrl();\n\n        // keep track of last time the moving changed flag was set\n        this.addManagedListener(this.params.column, Column.EVENT_MOVING_CHANGED, () => {\n            this.lastMovingChanged = new Date().getTime();\n        });\n\n        // add the event on the header, so when clicked, we do sorting\n        if (this.eLabel) {\n            this.addManagedListener(this.eLabel, 'click', (event: MouseEvent) => {\n\n                // sometimes when moving a column via dragging, this was also firing a clicked event.\n                // here is issue raised by user: https://ag-grid.zendesk.com/agent/tickets/1076\n                // this check stops sort if a) column is moving or b) column moved less than 200ms ago (so caters for race condition)\n                const moving = this.params.column.isMoving();\n                const nowTime = new Date().getTime();\n                // typically there is <2ms if moving flag was set recently, as it would be done in same VM turn\n                const movedRecently = (nowTime - this.lastMovingChanged) < 50;\n                const columnMoving = moving || movedRecently;\n\n                if (!columnMoving) {\n                    const multiSort = sortUsingCtrl ? (event.ctrlKey || event.metaKey) : event.shiftKey;\n                    this.params.progressSort(multiSort);\n                }\n            });\n        }\n\n        this.addManagedListener(this.params.column, Column.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n        this.onSortChanged();\n\n        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.setMultiSortOrder.bind(this));\n        this.setMultiSortOrder();\n    }\n\n    private onSortChanged(): void {\n        this.addOrRemoveCssClass('ag-header-cell-sorted-asc', this.params.column.isSortAscending());\n        this.addOrRemoveCssClass('ag-header-cell-sorted-desc', this.params.column.isSortDescending());\n        this.addOrRemoveCssClass('ag-header-cell-sorted-none', this.params.column.isSortNone());\n\n        if (this.eSortAsc) {\n            this.eSortAsc.classList.toggle('ag-hidden', !this.params.column.isSortAscending());\n        }\n\n        if (this.eSortDesc) {\n            this.eSortDesc.classList.toggle('ag-hidden', !this.params.column.isSortDescending());\n        }\n\n        if (this.eSortNone) {\n            const alwaysHideNoSort = !this.params.column.getColDef().unSortIcon && !this.gridOptionsWrapper.isUnSortIcon();\n            this.eSortNone.classList.toggle('ag-hidden', alwaysHideNoSort || !this.params.column.isSortNone());\n        }\n    }\n\n    // we listen here for global sort events, NOT column sort events, as we want to do this\n    // when sorting has been set on all column (if we listened just for our col (where we\n    // set the asc / desc icons) then it's possible other cols are yet to get their sorting state.\n    private setMultiSortOrder(): void {\n\n        if (!this.eSortOrder) { return; }\n\n        const col = this.params.column;\n        const allColumnsWithSorting = this.sortController.getColumnsWithSortingOrdered();\n        const indexThisCol = allColumnsWithSorting.indexOf(col);\n        const moreThanOneColSorting = allColumnsWithSorting.length > 1;\n        const showIndex = col.isSorting() && moreThanOneColSorting;\n\n        setDisplayed(this.eSortOrder, showIndex);\n\n        if (indexThisCol >= 0) {\n            this.eSortOrder.innerHTML = (indexThisCol + 1).toString();\n        } else {\n            clearElement(this.eSortOrder);\n        }\n    }\n\n    private setupFilterIcon(): void {\n\n        if (!this.eFilter) { return; }\n\n        this.addManagedListener(this.params.column, Column.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n        this.onFilterChanged();\n    }\n\n    private onFilterChanged(): void {\n        const filterPresent = this.params.column.isFilterActive();\n        this.eFilter.classList.toggle('ag-hidden', !filterPresent);\n    }\n}\n","import { ColumnModel } from \"../../../columns/columnModel\";\nimport { Autowired } from \"../../../context/context\";\nimport { ColumnGroup } from \"../../../entities/columnGroup\";\nimport { ProvidedColumnGroup } from \"../../../entities/providedColumnGroup\";\nimport { IComponent } from \"../../../interfaces/iComponent\";\nimport { AgGridCommon } from \"../../../interfaces/iCommon\";\nimport { setDisplayed } from \"../../../utils/dom\";\nimport { isStopPropagationForAgGrid, stopPropagationForAgGrid } from \"../../../utils/event\";\nimport { doOnce } from \"../../../utils/function\";\nimport { exists } from \"../../../utils/generic\";\nimport { createIconNoSpan } from \"../../../utils/icon\";\nimport { escapeString } from \"../../../utils/string\";\nimport { Component } from \"../../../widgets/component\";\nimport { RefSelector } from \"../../../widgets/componentAnnotations\";\nimport { TouchListener } from \"../../../widgets/touchListener\";\n\nexport interface IHeaderGroupParams extends AgGridCommon {\n    /** The column group the header is for. */\n    columnGroup: ColumnGroup;\n    /**\n     * The text label to render.\n     * If the column is using a headerValueGetter, the displayName will take this into account.\n     */\n    displayName: string;\n    /** Opens / closes the column group */\n    setExpanded: (expanded: boolean) => void;\n}\n\nexport interface IHeaderGroup { }\n\nexport interface IHeaderGroupComp extends IHeaderGroup, IComponent<IHeaderGroupParams> { }\n\nexport class HeaderGroupComp extends Component implements IHeaderGroupComp {\n\n    @Autowired(\"columnModel\") private columnModel: ColumnModel;\n\n    static TEMPLATE = /* html */\n        `<div class=\"ag-header-group-cell-label\" ref=\"agContainer\" role=\"presentation\">\n            <span ref=\"agLabel\" class=\"ag-header-group-text\" role=\"presentation\"></span>\n            <span ref=\"agOpened\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-expanded\"></span>\n            <span ref=\"agClosed\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-collapsed\"></span>\n        </div>`;\n\n    private params: IHeaderGroupParams;\n\n    @RefSelector(\"agOpened\") private eOpenIcon: HTMLElement;\n    @RefSelector(\"agClosed\") private eCloseIcon: HTMLElement;\n\n    constructor() {\n        super(HeaderGroupComp.TEMPLATE);\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n    public init(params: IHeaderGroupParams): void {\n        this.params = params;\n\n        this.checkWarnings();\n\n        this.setupLabel();\n        this.addGroupExpandIcon();\n        this.setupExpandIcons();\n    }\n\n    private checkWarnings(): void {\n        const paramsAny = this.params as any;\n\n        if (paramsAny.template) {\n            const message = `AG Grid: A template was provided for Header Group Comp - templates are only supported for Header Comps (not groups)`;\n            doOnce(() => console.warn(message), 'HeaderGroupComp.templateNotSupported');\n        }\n    }\n\n    private setupExpandIcons(): void {\n        this.addInIcon(\"columnGroupOpened\", \"agOpened\");\n        this.addInIcon(\"columnGroupClosed\", \"agClosed\");\n\n        const expandAction = (event: MouseEvent) => {\n            if (isStopPropagationForAgGrid(event)) {\n                return;\n            }\n\n            const newExpandedValue = !this.params.columnGroup.isExpanded();\n            this.columnModel.setColumnGroupOpened(this.params.columnGroup.getProvidedColumnGroup(), newExpandedValue, \"uiColumnExpanded\");\n        };\n\n        this.addTouchAndClickListeners(this.eCloseIcon, expandAction);\n        this.addTouchAndClickListeners(this.eOpenIcon, expandAction);\n\n        const stopPropagationAction = (event: MouseEvent) => {\n            stopPropagationForAgGrid(event);\n        };\n\n        // adding stopPropagation to the double click for the icons prevents double click action happening\n        // when the icons are clicked. if the icons are double clicked, then the groups should open and\n        // then close again straight away. if we also listened to double click, then the group would open,\n        // close, then open, which is not what we want. double click should only action if the user double\n        // clicks outside of the icons.\n        this.addManagedListener(this.eCloseIcon, \"dblclick\", stopPropagationAction);\n        this.addManagedListener(this.eOpenIcon, \"dblclick\", stopPropagationAction);\n\n        this.addManagedListener(this.getGui(), \"dblclick\", expandAction);\n\n        this.updateIconVisibility();\n\n        const providedColumnGroup = this.params.columnGroup.getProvidedColumnGroup();\n        this.addManagedListener(providedColumnGroup, ProvidedColumnGroup.EVENT_EXPANDED_CHANGED, this.updateIconVisibility.bind(this));\n        this.addManagedListener(providedColumnGroup, ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED, this.updateIconVisibility.bind(this));\n    }\n\n    private addTouchAndClickListeners(eElement: HTMLElement, action: (event: MouseEvent) => void): void {\n        const touchListener = new TouchListener(eElement, true);\n\n        this.addManagedListener(touchListener, TouchListener.EVENT_TAP, action);\n        this.addDestroyFunc(() => touchListener.destroy());\n        this.addManagedListener(eElement, \"click\", action);\n    }\n\n    private updateIconVisibility(): void {\n        const columnGroup = this.params.columnGroup;\n        if (columnGroup.isExpandable()) {\n            const expanded = this.params.columnGroup.isExpanded();\n            setDisplayed(this.eOpenIcon, expanded);\n            setDisplayed(this.eCloseIcon, !expanded);\n        } else {\n            setDisplayed(this.eOpenIcon, false);\n            setDisplayed(this.eCloseIcon, false);\n        }\n    }\n\n    private addInIcon(iconName: string, refName: string): void {\n        const eIcon = createIconNoSpan(iconName, this.gridOptionsWrapper, null);\n        if (eIcon) {\n            this.getRefElement(refName).appendChild(eIcon);\n        }\n    }\n\n    private addGroupExpandIcon() {\n        if (!this.params.columnGroup.isExpandable()) {\n            setDisplayed(this.eOpenIcon, false);\n            setDisplayed(this.eCloseIcon, false);\n            return;\n        }\n    }\n\n    private setupLabel(): void {\n        // no renderer, default text render\n        const displayName = this.params.displayName;\n\n        if (exists(displayName)) {\n            const displayNameSanitised = escapeString(displayName);\n            this.getRefElement('agLabel').innerHTML = displayNameSanitised!;\n        }\n    }\n}\n","import { Component } from \"./component\";\nimport { IPopupComponent } from \"../interfaces/iPopupComponent\";\n\nexport class PopupComponent extends Component implements IPopupComponent<any> {\n\n    public isPopup(): boolean {\n        return true;\n    }\n\n    setParentComponent(container: Component) {\n        container.addCssClass('ag-has-popup');\n        super.setParentComponent(container);\n    }\n\n    public destroy(): void {\n        const parentComp = this.parentComponent;\n        const hasParent = parentComp && parentComp.isAlive();\n\n        if (hasParent) {\n            parentComp!.getGui().classList.remove('ag-has-popup');\n        }\n\n        super.destroy();\n    }\n}\n","import { AgInputTextArea } from \"../../widgets/agInputTextArea\";\nimport { ICellEditorComp, ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { PopupComponent } from \"../../widgets/popupComponent\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { exists } from \"../../utils/generic\";\nimport { KeyCode } from '../../constants/keyCode';\n\nexport interface ILargeTextEditorParams extends ICellEditorParams {\n    maxLength: number;\n    rows: number;\n    cols: number;\n}\n\nexport class LargeTextCellEditor extends PopupComponent implements ICellEditorComp {\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-large-text\" tabindex=\"0\">\n            <ag-input-text-area ref=\"eTextArea\" class=\"ag-large-text-input\"></ag-input-text-area>\n        </div>`;\n\n    private params: ILargeTextEditorParams;\n    @RefSelector(\"eTextArea\") private eTextArea: AgInputTextArea;\n    private focusAfterAttached: boolean;\n\n    constructor() {\n        super(LargeTextCellEditor.TEMPLATE);\n    }\n\n    public init(params: ILargeTextEditorParams): void {\n        this.params = params;\n\n        this.focusAfterAttached = params.cellStartedEdit;\n\n        this.eTextArea\n            .setMaxLength(params.maxLength || 200)\n            .setCols(params.cols || 60)\n            .setRows(params.rows || 10);\n\n        if (exists(params.value)) {\n            this.eTextArea.setValue(params.value.toString(), true);\n        }\n\n        this.addGuiEventListener('keydown', this.onKeyDown.bind(this));\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n        const key = event.key;\n\n        if (key === KeyCode.LEFT ||\n            key === KeyCode.UP ||\n            key === KeyCode.RIGHT ||\n            key === KeyCode.DOWN ||\n            (event.shiftKey && key === KeyCode.ENTER)) { // shift+enter allows for newlines\n            event.stopPropagation();\n        }\n    }\n\n    public afterGuiAttached(): void {\n        const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n\n        this.eTextArea.setInputAriaLabel(translate('ariaInputEditor', 'Input Editor'));\n\n        if (this.focusAfterAttached) {\n            this.eTextArea.getFocusableElement().focus();\n        }\n    }\n\n    public getValue(): any {\n        return this.params.parseValue(this.eTextArea.getValue());\n    }\n}\n","import { AgSelect } from \"../../widgets/agSelect\";\nimport { Autowired } from \"../../context/context\";\nimport { ICellEditorComp, ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { ValueFormatterService } from \"../valueFormatterService\";\nimport { PopupComponent } from \"../../widgets/popupComponent\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { ListOption } from \"../../widgets/agList\";\nimport { missing } from \"../../utils/generic\";\nimport { KeyCode } from '../../constants/keyCode';\n\nexport interface ISelectCellEditorParams extends ICellEditorParams {\n    values: any[];\n}\n\nexport class SelectCellEditor extends PopupComponent implements ICellEditorComp {\n\n    private focusAfterAttached: boolean;\n\n    @Autowired('valueFormatterService') private valueFormatterService: ValueFormatterService;\n    @RefSelector('eSelect') private eSelect: AgSelect;\n\n    private startedByEnter: boolean = false;\n\n    constructor() {\n        super('<div class=\"ag-cell-edit-wrapper\"><ag-select class=\"ag-cell-editor\" ref=\"eSelect\"></ag-select></div>');\n    }\n\n    public init(params: ISelectCellEditorParams): void {\n        this.focusAfterAttached = params.cellStartedEdit;\n\n        if (missing(params.values)) {\n            console.warn('AG Grid: no values found for select cellEditor');\n            return;\n        }\n\n        this.startedByEnter = params.eventKey != null ? params.eventKey === KeyCode.ENTER : false;\n\n        let hasValue = false;\n        params.values.forEach((value: any) => {\n            const option: ListOption = { value };\n            const valueFormatted = this.valueFormatterService.formatValue(params.column, null, null, value);\n            const valueFormattedExits = valueFormatted !== null && valueFormatted !== undefined;\n            option.text = valueFormattedExits ? valueFormatted : value;\n\n            this.eSelect.addOption(option);\n            hasValue = hasValue || params.value === value;\n        });\n\n        if (hasValue) {\n            this.eSelect.setValue(params.value, true);\n        } else if (params.values.length) {\n            this.eSelect.setValue(params.values[0], true);\n        }\n\n        // we don't want to add this if full row editing, otherwise selecting will stop the\n        // full row editing.\n        if (!this.gridOptionsWrapper.isFullRowEdit()) {\n            this.eSelect.onValueChange(() => params.stopEditing());\n        }\n    }\n\n    public afterGuiAttached() {\n        if (this.focusAfterAttached) {\n            this.eSelect.getFocusableElement().focus();\n        }\n\n        if (this.startedByEnter) {\n            this.eSelect.showPicker();\n        }\n    }\n\n    public focusIn(): void {\n        this.eSelect.getFocusableElement().focus();\n    }\n\n    public getValue(): any {\n        return this.eSelect.getValue();\n    }\n\n    public isPopup() {\n        return false;\n    }\n}","import { doOnce } from \"../../utils/function\";\nimport { SelectCellEditor } from \"./selectCellEditor\";\n\nexport class PopupSelectCellEditor extends SelectCellEditor {\n\n    constructor() {\n        super();\n        doOnce( ()=> console.warn('AG Grid: The PopupSelectCellEditor (agPopupSelectCellEditor) is deprecated. Instead use {cellEditor: \"agSelectCellEditor\", cellEditorPopup: true} '), 'PopupSelectCellEditor.deprecated');\n    }\n\n    public isPopup(): boolean {\n        return true;\n    }\n\n}\n","import { PopupComponent } from \"../../widgets/popupComponent\";\nimport { ICellEditorComp, ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { AgInputTextField } from \"../../widgets/agInputTextField\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { exists } from \"../../utils/generic\";\nimport { isBrowserSafari } from \"../../utils/browser\";\nimport { KeyCode } from '../../constants/keyCode';\n\n/**\n * useFormatter: used when the cell value needs formatting prior to editing, such as when using reference data and you\n *               want to display text rather than code.\n*/\nexport interface ITextCellEditorParams extends ICellEditorParams {\n    useFormatter: boolean;\n}\n\nexport class TextCellEditor extends PopupComponent implements ICellEditorComp {\n\n    private static TEMPLATE = '<div class=\"ag-cell-edit-wrapper\"><ag-input-text-field class=\"ag-cell-editor\" ref=\"eInput\"></ag-input-text-field></div>';\n\n    private highlightAllOnFocus: boolean;\n    private focusAfterAttached: boolean;\n    protected params: ICellEditorParams;\n    @RefSelector('eInput') protected eInput: AgInputTextField;\n\n    constructor() {\n        super(TextCellEditor.TEMPLATE);\n    }\n\n    public init(params: ITextCellEditorParams): void {\n        this.params = params;\n\n        const eInput = this.eInput;\n        let startValue: string;\n\n        // cellStartedEdit is only false if we are doing fullRow editing\n        if (params.cellStartedEdit) {\n            this.focusAfterAttached = true;\n\n            if (params.eventKey === KeyCode.BACKSPACE || params.eventKey === KeyCode.DELETE) {\n                startValue = '';\n            } else if (params.charPress) {\n                startValue = params.charPress;\n            } else {\n                startValue = this.getStartValue(params);\n\n                if (params.eventKey !== KeyCode.F2) {\n                    this.highlightAllOnFocus = true;\n                }\n            }\n\n        } else {\n            this.focusAfterAttached = false;\n            startValue = this.getStartValue(params);\n        }\n\n        if (startValue != null) {\n            eInput.setValue(startValue, true);\n        }\n\n        this.addManagedListener(eInput.getGui(), 'keydown', (event: KeyboardEvent) => {\n            const { key } = event;\n\n            if (key === KeyCode.PAGE_UP || key === KeyCode.PAGE_DOWN) {\n                event.preventDefault();\n            }\n        });\n    }\n\n    public afterGuiAttached(): void {\n        const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n        const eInput = this.eInput;\n\n        eInput.setInputAriaLabel(translate('ariaInputEditor', 'Input Editor'));\n\n        if (!this.focusAfterAttached) { return; }\n        // Added for AG-3238. We can't remove this explicit focus() because Chrome requires an input\n        // to be focused before setSelectionRange will work. But it triggers a bug in Safari where\n        // explicitly focusing then blurring an empty field will cause the parent container to scroll.\n        if (!isBrowserSafari()) {\n            eInput.getFocusableElement().focus();\n        }\n\n        const inputEl = eInput.getInputElement();\n\n        if (this.highlightAllOnFocus) {\n            inputEl.select();\n        } else {\n            // when we started editing, we want the caret at the end, not the start.\n            // this comes into play in two scenarios:\n            //   a) when user hits F2\n            //   b) when user hits a printable character\n            const value = eInput.getValue();\n            const len = (exists(value) && value.length) || 0;\n\n            if (len) {\n                inputEl.setSelectionRange(len, len);\n            }\n        }\n    }\n\n    // gets called when tabbing trough cells and in full row edit mode\n    public focusIn(): void {\n        const eInput = this.eInput;\n        const focusEl = eInput.getFocusableElement();\n        const inputEl = eInput.getInputElement();\n\n        focusEl.focus();\n        inputEl.select();\n    }\n\n    public getValue(): any {\n        const eInput = this.eInput;\n        return this.params.parseValue(eInput.getValue());\n    }\n\n    private getStartValue(params: ITextCellEditorParams) {\n        const formatValue = params.useFormatter || params.column.getColDef().refData;\n        return formatValue ? params.formatValue(params.value) : params.value;\n    }\n    public isPopup() {\n        return false;\n    }\n}\n","import { doOnce } from \"../../utils/function\";\nimport { TextCellEditor } from \"./textCellEditor\";\n\nexport class PopupTextCellEditor extends TextCellEditor {\n\n    constructor() {\n        super();\n        doOnce( ()=> console.warn('AG Grid: The PopupTextCellEditor (agPopupTextCellEditor) is deprecated. Instead use {cellEditor: \"agTextCellEditor\", cellEditorPopup: true} '), 'PopupTextCellEditor.deprecated');\n    }\n\n    public isPopup(): boolean {\n        return true;\n    }\n\n}\n","import { Autowired } from \"../../context/context\";\nimport { ICellRenderer } from \"./iCellRenderer\";\nimport { Component } from \"../../widgets/component\";\nimport { FilterManager } from \"../../filter/filterManager\";\nimport { exists } from \"../../utils/generic\";\nimport { clearElement } from \"../../utils/dom\";\n\nconst ARROW_UP = '\\u2191';\nconst ARROW_DOWN = '\\u2193';\n\nexport class AnimateShowChangeCellRenderer extends Component implements ICellRenderer {\n\n    private static TEMPLATE =\n        '<span>' +\n        '<span class=\"ag-value-change-delta\"></span>' +\n        '<span class=\"ag-value-change-value\"></span>' +\n        '</span>';\n\n    // private params: any;\n    private lastValue: number;\n\n    private eValue: HTMLElement;\n    private eDelta: HTMLElement;\n\n    private refreshCount = 0;\n\n    @Autowired('filterManager') private filterManager: FilterManager;\n\n    constructor() {\n        super(AnimateShowChangeCellRenderer.TEMPLATE);\n    }\n\n    public init(params: any): void {\n        // this.params = params;\n\n        this.eValue = this.queryForHtmlElement('.ag-value-change-value');\n        this.eDelta = this.queryForHtmlElement('.ag-value-change-delta');\n\n        this.refresh(params);\n    }\n\n    private showDelta(params: any, delta: number): void {\n\n        const absDelta = Math.abs(delta);\n        const valueFormatted = params.formatValue(absDelta);\n\n        const valueToUse = exists(valueFormatted) ? valueFormatted : absDelta;\n\n        const deltaUp = (delta >= 0);\n\n        if (deltaUp) {\n            this.eDelta.innerHTML = ARROW_UP + valueToUse;\n        } else {\n            // because negative, use ABS to remove sign\n            this.eDelta.innerHTML = ARROW_DOWN + valueToUse;\n        }\n\n        this.eDelta.classList.toggle('ag-value-change-delta-up', deltaUp);\n        this.eDelta.classList.toggle('ag-value-change-delta-down', !deltaUp);\n    }\n\n    private setTimerToRemoveDelta(): void {\n        // the refreshCount makes sure that if the value updates again while\n        // the below timer is waiting, then the below timer will realise it\n        // is not the most recent and will not try to remove the delta value.\n        this.refreshCount++;\n        const refreshCountCopy = this.refreshCount;\n        window.setTimeout(() => {\n            if (refreshCountCopy === this.refreshCount) {\n                this.hideDeltaValue();\n            }\n        }, 2000);\n    }\n\n    private hideDeltaValue(): void {\n        this.eValue.classList.remove('ag-value-change-value-highlight');\n        clearElement(this.eDelta);\n    }\n\n    public refresh(params: any): boolean {\n        const value = params.value;\n\n        if (value === this.lastValue) {\n            return false;\n        }\n\n        if (exists(params.valueFormatted)) {\n            this.eValue.innerHTML = params.valueFormatted;\n        } else if (exists(params.value)) {\n            this.eValue.innerHTML = value;\n        } else {\n            clearElement(this.eValue);\n        }\n\n        // we don't show the delta if we are in the middle of a filter. see comment on FilterManager\n        // with regards processingFilterChange\n        if (this.filterManager.isSuppressFlashingCellsBecauseFiltering()) {\n            return false;\n        }\n\n        if (typeof value === 'number' && typeof this.lastValue === 'number') {\n            const delta = value - this.lastValue;\n            this.showDelta(params, delta);\n        }\n\n        // highlight the current value, but only if it's not new, otherwise it\n        // would get highlighted first time the value is shown\n        if (this.lastValue) {\n            this.eValue.classList.add('ag-value-change-value-highlight');\n        }\n\n        this.setTimerToRemoveDelta();\n\n        this.lastValue = value;\n\n        return true;\n    }\n}\n","import { Autowired } from \"../../context/context\";\nimport { ICellRenderer } from \"./iCellRenderer\";\nimport { Component } from \"../../widgets/component\";\nimport { FilterManager } from \"../../filter/filterManager\";\nimport { loadTemplate, clearElement } from \"../../utils/dom\";\nimport { missing, exists } from \"../../utils/generic\";\n\nexport class AnimateSlideCellRenderer extends Component implements ICellRenderer {\n\n    private static TEMPLATE = /* html */\n        `<span>\n            <span class=\"ag-value-slide-current\"></span>\n        </span>`;\n\n    private eCurrent: HTMLElement;\n    private ePrevious: HTMLElement | null;\n\n    private lastValue: any;\n\n    private refreshCount = 0;\n\n    @Autowired('filterManager') private filterManager: FilterManager;\n\n    constructor() {\n        super(AnimateSlideCellRenderer.TEMPLATE);\n        this.eCurrent = this.queryForHtmlElement('.ag-value-slide-current');\n    }\n\n    public init(params: any): void {\n        this.refresh(params);\n    }\n\n    public addSlideAnimation(): void {\n        this.refreshCount++;\n\n        // below we keep checking this, and stop working on the animation\n        // if it no longer matches - this means another animation has started\n        // and this one is stale.\n        const refreshCountCopy = this.refreshCount;\n\n        // if old animation, remove it\n        if (this.ePrevious) {\n            this.getGui().removeChild(this.ePrevious);\n        }\n\n        this.ePrevious = loadTemplate('<span class=\"ag-value-slide-previous ag-value-slide-out\"></span>');\n        this.ePrevious.innerHTML = this.eCurrent.innerHTML;\n        this.getGui().insertBefore(this.ePrevious, this.eCurrent);\n\n        // having timeout of 0 allows use to skip to the next css turn,\n        // so we know the previous css classes have been applied. so the\n        // complex set of setTimeout below creates the animation\n        window.setTimeout(() => {\n            if (refreshCountCopy !== this.refreshCount) { return; }\n            this.ePrevious!.classList.add('ag-value-slide-out-end');\n        }, 50);\n\n        window.setTimeout(() => {\n            if (refreshCountCopy !== this.refreshCount) { return; }\n            this.getGui().removeChild(this.ePrevious!);\n            this.ePrevious = null;\n        }, 3000);\n    }\n\n    public refresh(params: any): boolean {\n        let value = params.value;\n\n        if (missing(value)) {\n            value = '';\n        }\n\n        if (value === this.lastValue) {\n            return false;\n        }\n\n        // we don't show the delta if we are in the middle of a filter. see comment on FilterManager\n        // with regards processingFilterChange\n        if (this.filterManager.isSuppressFlashingCellsBecauseFiltering()) {\n            return false;\n        }\n\n        this.addSlideAnimation();\n\n        this.lastValue = value;\n\n        if (exists(params.valueFormatted)) {\n            this.eCurrent.innerHTML = params.valueFormatted;\n        } else if (exists(params.value)) {\n            this.eCurrent.innerHTML = value;\n        } else {\n            clearElement(this.eCurrent);\n        }\n\n        return true;\n    }\n}\n","import { BeanStub } from \"../context/beanStub\";\nimport { PostConstruct, Bean, Autowired, PreDestroy } from \"../context/context\";\nimport { Column } from \"../entities/column\";\nimport { ColumnApi } from \"../columns/columnApi\";\nimport { GridApi } from \"../gridApi\";\nimport { DragService, DragListenerParams } from \"./dragService\";\nimport { Environment } from \"../environment\";\nimport { RowDropZoneParams } from \"../gridBodyComp/rowDragFeature\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { escapeString } from \"../utils/string\";\nimport { createIcon } from \"../utils/icon\";\nimport { removeFromArray } from \"../utils/array\";\nimport { getBodyHeight, getBodyWidth } from \"../utils/browser\";\nimport { loadTemplate, clearElement } from \"../utils/dom\";\nimport { isFunction } from \"../utils/function\";\n\nexport interface DragItem {\n    /**\n     * When dragging a row, this contains the row node being dragged\n     * When dragging multiple rows, this contains the row that started the drag.\n     */\n    rowNode?: RowNode;\n\n    /** When dragging multiple rows, this contains all rows being dragged */\n    rowNodes?: RowNode[];\n\n    /** When dragging columns, this contains the columns being dragged */\n    columns?: Column[];\n\n    /** When dragging columns, this contains the visible state of the columns */\n    visibleState?: { [key: string]: boolean };\n}\n\nexport enum DragSourceType { ToolPanel, HeaderCell, RowDrag, ChartPanel }\n\nexport interface DragSource {\n    /**\n     * The type of the drag source, used by the drop target to know where the\n     * drag originated from.\n     */\n    type: DragSourceType;\n    /**\n     * Element which, when dragged, will kick off the DnD process\n     */\n    eElement: HTMLElement;\n    /**\n     * If eElement is dragged, then the dragItem is the object that gets passed around.\n     */\n    getDragItem: () => DragItem;\n    /**\n     * This name appears in the ghost icon when dragging.\n     */\n    dragItemName: string | (() => string) | null;\n    /**\n     * Icon to show when not over a drop zone\n     */\n    defaultIconName?: string;\n    /**\n     * The drop target associated with this dragSource. When dragging starts, this\n     * target does not get an onDragEnter event.\n     */\n    dragSourceDropTarget?: DropTarget;\n    /**\n     * The drag source DOM Data Key, this is useful to detect if the origin grid is the same\n     * as the target grid.\n     */\n    dragSourceDomDataKey?: string;\n    /**\n     * After how many pixels of dragging should the drag operation start. Default is 4.\n     */\n    dragStartPixels?: number;\n    /**\n     * Callback for drag started\n     */\n    onDragStarted?: () => void;\n    /**\n     * Callback for drag stopped\n     */\n    onDragStopped?: () => void;\n}\n\nexport interface DropTarget {\n    /** The main container that will get the drop. */\n    getContainer(): HTMLElement;\n    /** If any secondary containers. For example when moving columns in AG Grid, we listen for drops\n     * in the header as well as the body (main rows and pinned rows) of the grid. */\n    getSecondaryContainers?(): HTMLElement[][];\n    /** Icon to show when drag is over */\n    getIconName?(): string | null;\n\n    isInterestedIn(type: DragSourceType, el: HTMLElement): boolean;\n\n    /**\n     * If `true`, the DragSources will only be allowed to be dragged within the DragTarget that contains them.\n     * This is useful for changing order of items within a container, and not moving items across containers.\n     * Default: `false`\n     */\n    targetContainsSource?: boolean;\n\n    /** Callback for when drag enters */\n    onDragEnter?(params: DraggingEvent): void;\n    /** Callback for when drag leaves */\n    onDragLeave?(params: DraggingEvent): void;\n    /** Callback for when dragging */\n    onDragging?(params: DraggingEvent): void;\n    /** Callback for when drag stops */\n    onDragStop?(params: DraggingEvent): void;\n    external?: boolean;\n}\n\nexport enum VerticalDirection { Up, Down }\nexport enum HorizontalDirection { Left, Right }\n\nexport interface DraggingEvent {\n    event: MouseEvent;\n    x: number;\n    y: number;\n    vDirection: VerticalDirection | null;\n    hDirection: HorizontalDirection | null;\n    dragSource: DragSource;\n    dragItem: DragItem;\n    fromNudge: boolean;\n    api: GridApi;\n    columnApi: ColumnApi;\n    dropZoneTarget: HTMLElement;\n}\n\n@Bean('dragAndDropService')\nexport class DragAndDropService extends BeanStub {\n\n    @Autowired('dragService') private dragService: DragService;\n    @Autowired('environment') private environment: Environment;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    public static ICON_PINNED = 'pinned';\n    public static ICON_MOVE = 'move';\n    public static ICON_LEFT = 'left';\n    public static ICON_RIGHT = 'right';\n    public static ICON_GROUP = 'group';\n    public static ICON_AGGREGATE = 'aggregate';\n    public static ICON_PIVOT = 'pivot';\n    public static ICON_NOT_ALLOWED = 'notAllowed';\n    public static ICON_HIDE = 'hide';\n\n    public static GHOST_TEMPLATE = /* html */\n        `<div class=\"ag-dnd-ghost ag-unselectable\">\n            <span class=\"ag-dnd-ghost-icon ag-shake-left-to-right\"></span>\n            <div class=\"ag-dnd-ghost-label\"></div>\n        </div>`;\n\n    private dragSourceAndParamsList: { params: DragListenerParams, dragSource: DragSource }[] = [];\n\n    private dragItem: DragItem | null;\n    private eventLastTime: MouseEvent | null;\n    private dragSource: DragSource;\n    private dragging: boolean;\n\n    private eGhost: HTMLElement | null;\n    private eGhostParent: HTMLElement;\n    private eGhostIcon: HTMLElement;\n\n    private dropTargets: DropTarget[] = [];\n    private lastDropTarget: DropTarget | null | undefined;\n\n    private ePinnedIcon: HTMLElement;\n    private eHideIcon: HTMLElement;\n    private eMoveIcon: HTMLElement;\n    private eLeftIcon: HTMLElement;\n    private eRightIcon: HTMLElement;\n    private eGroupIcon: HTMLElement;\n    private eAggregateIcon: HTMLElement;\n    private ePivotIcon: HTMLElement;\n    private eDropNotAllowedIcon: HTMLElement;\n\n    @PostConstruct\n    private init(): void {\n        this.ePinnedIcon = createIcon('columnMovePin', this.gridOptionsWrapper, null);\n        this.eHideIcon = createIcon('columnMoveHide', this.gridOptionsWrapper, null);\n        this.eMoveIcon = createIcon('columnMoveMove', this.gridOptionsWrapper, null);\n        this.eLeftIcon = createIcon('columnMoveLeft', this.gridOptionsWrapper, null);\n        this.eRightIcon = createIcon('columnMoveRight', this.gridOptionsWrapper, null);\n        this.eGroupIcon = createIcon('columnMoveGroup', this.gridOptionsWrapper, null);\n        this.eAggregateIcon = createIcon('columnMoveValue', this.gridOptionsWrapper, null);\n        this.ePivotIcon = createIcon('columnMovePivot', this.gridOptionsWrapper, null);\n        this.eDropNotAllowedIcon = createIcon('dropNotAllowed', this.gridOptionsWrapper, null);\n    }\n\n    public addDragSource(dragSource: DragSource, allowTouch = false): void {\n        const params: DragListenerParams = {\n            eElement: dragSource.eElement,\n            dragStartPixels: dragSource.dragStartPixels,\n            onDragStart: this.onDragStart.bind(this, dragSource),\n            onDragStop: this.onDragStop.bind(this),\n            onDragging: this.onDragging.bind(this)\n        };\n\n        this.dragSourceAndParamsList.push({ params: params, dragSource: dragSource });\n\n        this.dragService.addDragSource(params, allowTouch);\n    }\n\n    public removeDragSource(dragSource: DragSource): void {\n        const sourceAndParams = this.dragSourceAndParamsList.find(item => item.dragSource === dragSource);\n\n        if (sourceAndParams) {\n            this.dragService.removeDragSource(sourceAndParams.params);\n            removeFromArray(this.dragSourceAndParamsList, sourceAndParams);\n        }\n    }\n\n    @PreDestroy\n    private clearDragSourceParamsList(): void {\n        this.dragSourceAndParamsList.forEach(sourceAndParams => this.dragService.removeDragSource(sourceAndParams.params));\n        this.dragSourceAndParamsList.length = 0;\n    }\n\n    public nudge(): void {\n        if (this.dragging) {\n            this.onDragging(this.eventLastTime!, true);\n        }\n    }\n\n    private onDragStart(dragSource: DragSource, mouseEvent: MouseEvent): void {\n        this.dragging = true;\n        this.dragSource = dragSource;\n        this.eventLastTime = mouseEvent;\n        this.dragItem = this.dragSource.getDragItem();\n        this.lastDropTarget = this.dragSource.dragSourceDropTarget;\n\n        if (this.dragSource.onDragStarted) {\n            this.dragSource.onDragStarted();\n        }\n\n        this.createGhost();\n    }\n\n    private onDragStop(mouseEvent: MouseEvent): void {\n        this.eventLastTime = null;\n        this.dragging = false;\n\n        if (this.dragSource.onDragStopped) {\n            this.dragSource.onDragStopped();\n        }\n\n        if (this.lastDropTarget && this.lastDropTarget.onDragStop) {\n            const draggingEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, null, null, false);\n            this.lastDropTarget.onDragStop(draggingEvent);\n        }\n\n        this.lastDropTarget = null;\n        this.dragItem = null;\n        this.removeGhost();\n    }\n\n    private onDragging(mouseEvent: MouseEvent, fromNudge: boolean): void {\n        const hDirection = this.getHorizontalDirection(mouseEvent);\n        const vDirection = this.getVerticalDirection(mouseEvent);\n\n        this.eventLastTime = mouseEvent;\n\n        this.positionGhost(mouseEvent);\n\n        // check if mouseEvent intersects with any of the drop targets\n        const validDropTargets = this.dropTargets.filter(target => this.isMouseOnDropTarget(mouseEvent, target));\n        const len = validDropTargets.length;\n\n        let dropTarget: DropTarget | null = null;\n\n        if (len > 0) {\n            dropTarget = len === 1\n            ? validDropTargets[0]\n            // the current mouse position could intersect with more than 1 element\n            // if they are nested. In that case we need to get the most specific\n            // container, which is the one that does not contain any other targets.\n            : validDropTargets.reduce((prevTarget, currTarget) => {\n                if (!prevTarget) { return currTarget; }\n                const prevContainer = prevTarget.getContainer();\n                const currContainer = currTarget.getContainer();\n\n                if (prevContainer.contains(currContainer)) { return currTarget; }\n\n                return prevTarget;\n            });\n        }\n\n        if (dropTarget !== this.lastDropTarget) {\n            this.leaveLastTargetIfExists(mouseEvent, hDirection, vDirection, fromNudge);\n            this.enterDragTargetIfExists(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);\n            this.lastDropTarget = dropTarget;\n        } else if (dropTarget && dropTarget.onDragging) {\n            const draggingEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);\n            dropTarget.onDragging(draggingEvent);\n        }\n    }\n\n    private enterDragTargetIfExists(dropTarget: DropTarget | null, mouseEvent: MouseEvent, hDirection: HorizontalDirection | null, vDirection: VerticalDirection | null, fromNudge: boolean): void {\n        if (!dropTarget) { return; }\n\n        if (dropTarget.onDragEnter) {\n            const dragEnterEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);\n\n            dropTarget.onDragEnter(dragEnterEvent);\n        }\n\n        this.setGhostIcon(dropTarget.getIconName ? dropTarget.getIconName() : null);\n    }\n\n    private leaveLastTargetIfExists(mouseEvent: MouseEvent, hDirection: HorizontalDirection | null, vDirection: VerticalDirection | null, fromNudge: boolean): void {\n        if (!this.lastDropTarget) { return; }\n\n        if (this.lastDropTarget.onDragLeave) {\n            const dragLeaveEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, hDirection, vDirection, fromNudge);\n\n            this.lastDropTarget.onDragLeave(dragLeaveEvent);\n        }\n\n        this.setGhostIcon(null);\n    }\n\n    private getAllContainersFromDropTarget(dropTarget: DropTarget): HTMLElement[][] {\n        const secondaryContainers = dropTarget.getSecondaryContainers ? dropTarget.getSecondaryContainers() : null;\n        const containers: HTMLElement[][] = [[dropTarget.getContainer()]];\n\n        return secondaryContainers ? containers.concat(secondaryContainers) : containers;\n    }\n\n    private allContainersIntersect(mouseEvent: MouseEvent, containers: HTMLElement[]) {\n        for (const container of containers) {\n            const rect = container.getBoundingClientRect();\n\n            // if element is not visible, then width and height are zero\n            if (rect.width === 0 || rect.height === 0) { return false; }\n\n            const horizontalFit = mouseEvent.clientX >= rect.left && mouseEvent.clientX < rect.right;\n            const verticalFit = mouseEvent.clientY >= rect.top && mouseEvent.clientY < rect.bottom;\n\n            if (!horizontalFit || !verticalFit) { return false; }\n        }\n        return true;\n    }\n\n    // checks if the mouse is on the drop target. it checks eContainer and eSecondaryContainers\n    private isMouseOnDropTarget(mouseEvent: MouseEvent, dropTarget: DropTarget): boolean {\n        const allContainersFromDropTarget = this.getAllContainersFromDropTarget(dropTarget);\n        let mouseOverTarget = false;\n\n        for (const currentContainers of allContainersFromDropTarget) {\n            if (this.allContainersIntersect(mouseEvent, currentContainers)) {\n                mouseOverTarget = true;\n                break;\n            }\n        }\n\n        if (dropTarget.targetContainsSource && !dropTarget.getContainer().contains(this.dragSource.eElement)) { return false; }\n\n        return mouseOverTarget && dropTarget.isInterestedIn(this.dragSource.type, this.dragSource.eElement);\n    }\n\n    public addDropTarget(dropTarget: DropTarget) {\n        this.dropTargets.push(dropTarget);\n    }\n\n    public removeDropTarget(dropTarget: DropTarget) {\n        this.dropTargets = this.dropTargets.filter(target => target.getContainer() !== dropTarget.getContainer());\n    }\n\n    public hasExternalDropZones(): boolean {\n        return this.dropTargets.some(zones => zones.external);\n    }\n\n    public findExternalZone(params: RowDropZoneParams): DropTarget | null {\n        const externalTargets = this.dropTargets.filter(target => target.external);\n\n        return externalTargets.find(zone => zone.getContainer() === params.getContainer()) || null;\n    }\n\n    public getHorizontalDirection(event: MouseEvent): HorizontalDirection | null {\n        const clientX = this.eventLastTime && this.eventLastTime.clientX;\n        const eClientX = event.clientX;\n\n        if (clientX === eClientX) { return null; }\n\n        return clientX! > eClientX ? HorizontalDirection.Left : HorizontalDirection.Right;\n    }\n\n    public getVerticalDirection(event: MouseEvent): VerticalDirection | null {\n        const clientY = this.eventLastTime && this.eventLastTime.clientY;\n        const eClientY = event.clientY;\n\n        if (clientY === eClientY) { return null; }\n\n        return clientY! > eClientY ? VerticalDirection.Up : VerticalDirection.Down;\n    }\n\n    public createDropTargetEvent(\n        dropTarget: DropTarget,\n        event: MouseEvent,\n        hDirection: HorizontalDirection | null,\n        vDirection: VerticalDirection | null,\n        fromNudge: boolean\n    ): DraggingEvent {\n        // localise x and y to the target\n        const dropZoneTarget = dropTarget.getContainer();\n        const rect = dropZoneTarget.getBoundingClientRect();\n        const { gridApi: api, columnApi, dragItem, dragSource } = this;\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n\n        return { event, x, y, vDirection, hDirection, dragSource, fromNudge, dragItem: dragItem as DragItem, api, columnApi, dropZoneTarget };\n    }\n\n    private positionGhost(event: MouseEvent): void {\n        const ghost = this.eGhost;\n\n        if (!ghost) { return; }\n\n        const ghostRect = ghost.getBoundingClientRect();\n        const ghostHeight = ghostRect.height;\n\n        // for some reason, without the '-2', it still overlapped by 1 or 2 pixels, which\n        // then brought in scrollbars to the browser. no idea why, but putting in -2 here\n        // works around it which is good enough for me.\n        const browserWidth = getBodyWidth() - 2;\n        const browserHeight = getBodyHeight() - 2;\n\n        let top = event.pageY - (ghostHeight / 2);\n        let left = event.pageX - 10;\n\n        const eDocument = this.gridOptionsWrapper.getDocument();\n        const win = (eDocument.defaultView || window);\n        const windowScrollY = win.pageYOffset || eDocument.documentElement.scrollTop;\n        const windowScrollX = win.pageXOffset || eDocument.documentElement.scrollLeft;\n\n        // check ghost is not positioned outside of the browser\n        if (browserWidth > 0 && ((left + ghost.clientWidth) > (browserWidth + windowScrollX))) {\n            left = browserWidth + windowScrollX - ghost.clientWidth;\n        }\n\n        if (left < 0) {\n            left = 0;\n        }\n\n        if (browserHeight > 0 && ((top + ghost.clientHeight) > (browserHeight + windowScrollY))) {\n            top = browserHeight + windowScrollY - ghost.clientHeight;\n        }\n\n        if (top < 0) {\n            top = 0;\n        }\n\n        ghost.style.left = `${left}px`;\n        ghost.style.top = `${top}px`;\n    }\n\n    private removeGhost(): void {\n        if (this.eGhost && this.eGhostParent) {\n            this.eGhostParent.removeChild(this.eGhost);\n        }\n\n        this.eGhost = null;\n    }\n\n    private createGhost(): void {\n        this.eGhost = loadTemplate(DragAndDropService.GHOST_TEMPLATE);\n        const { theme } = this.environment.getTheme();\n\n        if (theme) {\n            this.eGhost.classList.add(theme);\n        }\n\n        this.eGhostIcon = this.eGhost.querySelector('.ag-dnd-ghost-icon') as HTMLElement;\n\n        this.setGhostIcon(null);\n\n        const eText = this.eGhost.querySelector('.ag-dnd-ghost-label') as HTMLElement;\n        let dragItemName = this.dragSource.dragItemName;\n\n        if (isFunction(dragItemName)) {\n            dragItemName = (dragItemName as () => string)();\n        }\n\n        eText.innerHTML = escapeString(dragItemName as string) || '';\n\n        this.eGhost.style.height = '25px';\n        this.eGhost.style.top = '20px';\n        this.eGhost.style.left = '20px';\n\n        const eDocument = this.gridOptionsWrapper.getDocument();\n        let targetEl: HTMLElement | null = null;\n\n        try {\n            targetEl = eDocument.fullscreenElement as HTMLElement | null;\n        } catch (e) {\n            // some environments like SalesForce will throw errors\n            // simply by trying to read the fullscreenElement property\n        } finally {\n            if (!targetEl) {\n                targetEl = eDocument.querySelector('body');\n            }\n        }\n\n        this.eGhostParent = targetEl as HTMLElement;\n\n        if (!this.eGhostParent) {\n            console.warn('AG Grid: could not find document body, it is needed for dragging columns');\n        } else {\n            this.eGhostParent.appendChild(this.eGhost);\n        }\n    }\n\n    public setGhostIcon(iconName: string | null, shake = false): void {\n        clearElement(this.eGhostIcon);\n\n        let eIcon: HTMLElement | null = null;\n\n        if (!iconName) {\n            iconName = this.dragSource.defaultIconName || DragAndDropService.ICON_NOT_ALLOWED;\n        }\n\n        switch (iconName) {\n            case DragAndDropService.ICON_PINNED:      eIcon = this.ePinnedIcon; break;\n            case DragAndDropService.ICON_MOVE:        eIcon = this.eMoveIcon; break;\n            case DragAndDropService.ICON_LEFT:        eIcon = this.eLeftIcon; break;\n            case DragAndDropService.ICON_RIGHT:       eIcon = this.eRightIcon; break;\n            case DragAndDropService.ICON_GROUP:       eIcon = this.eGroupIcon; break;\n            case DragAndDropService.ICON_AGGREGATE:   eIcon = this.eAggregateIcon; break;\n            case DragAndDropService.ICON_PIVOT:       eIcon = this.ePivotIcon; break;\n            case DragAndDropService.ICON_NOT_ALLOWED: eIcon = this.eDropNotAllowedIcon; break;\n            case DragAndDropService.ICON_HIDE:        eIcon = this.eHideIcon; break;\n        }\n\n        this.eGhostIcon.classList.toggle('ag-shake-left-to-right', shake);\n\n        if (eIcon === this.eHideIcon && this.gridOptionsWrapper.isSuppressDragLeaveHidesColumns()) {\n            return;\n        }\n\n        if (eIcon) {\n            this.eGhostIcon.appendChild(eIcon);\n        }\n    }\n}\n","import { AgCheckbox } from '../widgets/agCheckbox';\nimport { PostConstruct } from '../context/context';\nimport { Column } from '../entities/column';\nimport { Component } from '../widgets/component';\nimport { Events } from '../events';\nimport { RefSelector } from '../widgets/componentAnnotations';\nimport { RowNode } from '../entities/rowNode';\nimport { stopPropagationForAgGrid } from '../utils/event';\n\nexport class CheckboxSelectionComponent extends Component {\n\n    @RefSelector('eCheckbox') private eCheckbox: AgCheckbox;\n\n    private rowNode: RowNode;\n    private column: Column | undefined;\n\n    constructor() {\n        super(/* html*/`\n            <div class=\"ag-selection-checkbox\" role=\"presentation\">\n                <ag-checkbox role=\"presentation\" ref=\"eCheckbox\"></ag-checkbox>\n            </div>`\n        );\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.eCheckbox.setPassive(true);\n    }\n\n    public getCheckboxId(): string {\n        return this.eCheckbox.getInputElement().id;\n    }\n\n    private onDataChanged(): void {\n        // when rows are loaded for the second time, this can impact the selection, as a row\n        // could be loaded as already selected (if user scrolls down, and then up again).\n        this.onSelectionChanged();\n    }\n\n    private onSelectableChanged(): void {\n        this.showOrHideSelect();\n    }\n\n    private onSelectionChanged(): void {\n        const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n        const state = this.rowNode.isSelected();\n        const stateName = state === undefined\n            ? translate('ariaIndeterminate', 'indeterminate')\n            : (state === true\n                ? translate('ariaChecked', 'checked')\n                : translate('ariaUnchecked', 'unchecked')\n            );\n        const ariaLabel = translate('ariaRowToggleSelection', 'Press Space to toggle row selection');\n\n        this.eCheckbox.setValue(state, true);\n        this.eCheckbox.setInputAriaLabel(`${ariaLabel} (${stateName})`);\n    }\n\n    private onCheckedClicked(event: MouseEvent): number {\n        const groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();\n        const updatedCount = this.rowNode.setSelectedParams({ newValue: false, rangeSelect: event.shiftKey, groupSelectsFiltered: groupSelectsFiltered });\n        return updatedCount;\n    }\n\n    private onUncheckedClicked(event: MouseEvent): number {\n        const groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();\n        const updatedCount = this.rowNode.setSelectedParams({ newValue: true, rangeSelect: event.shiftKey, groupSelectsFiltered: groupSelectsFiltered });\n        return updatedCount;\n    }\n\n    public init(params: {rowNode: RowNode, column?: Column}): void {\n        this.rowNode = params.rowNode;\n        this.column = params.column;\n\n        this.onSelectionChanged();\n\n        // we don't want the row clicked event to fire when selecting the checkbox, otherwise the row\n        // would possibly get selected twice\n        this.addGuiEventListener('click', event => stopPropagationForAgGrid(event));\n        // likewise we don't want double click on this icon to open a group\n        this.addGuiEventListener('dblclick', event => stopPropagationForAgGrid(event));\n\n        this.addManagedListener(this.eCheckbox.getInputElement(), 'click', (event) => {\n            const isSelected = this.eCheckbox.getValue();\n            const previousValue = this.eCheckbox.getPreviousValue();\n\n            if (previousValue === undefined || isSelected === undefined) {\n                // Indeterminate state - try toggling children to determine action.\n                const result = this.onUncheckedClicked(event || {});\n                if (result === 0) {\n                    this.onCheckedClicked(event);\n                }\n            } else if (isSelected) {\n                this.onCheckedClicked(event);\n            } else {\n                this.onUncheckedClicked(event || {});\n            }\n        });\n\n        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_SELECTED, this.onSelectionChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.onDataChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_SELECTABLE_CHANGED, this.onSelectableChanged.bind(this));\n\n        const isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();\n        const checkboxVisibleIsDynamic = isRowSelectableFunc || this.checkboxCallbackExists();\n\n        if (checkboxVisibleIsDynamic) {\n            const showOrHideSelectListener = this.showOrHideSelect.bind(this);\n            this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, showOrHideSelectListener);\n            this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, showOrHideSelectListener);\n            this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, showOrHideSelectListener);\n            this.showOrHideSelect();\n        }\n\n        this.eCheckbox.getInputElement().setAttribute('tabindex', '-1');\n    }\n\n    private showOrHideSelect(): void {\n        // if the isRowSelectable() is not provided the row node is selectable by default\n        let selectable = this.rowNode.selectable;\n\n        // checkboxSelection callback is deemed a legacy solution however we will still consider it's result.\n        // If selectable, then also check the colDef callback. if not selectable, this it short circuits - no need\n        // to call the colDef callback.\n        if (selectable && this.checkboxCallbackExists()) {\n            selectable = this.column!.isCellCheckboxSelection(this.rowNode);\n        }\n\n        // show checkbox if both conditions are true\n        this.setVisible(selectable);\n    }\n\n    private checkboxCallbackExists(): boolean {\n        // column will be missing if groupUseEntireRow=true\n        const colDef = this.column ? this.column.getColDef() : null;\n        return !!colDef && typeof colDef.checkboxSelection === 'function';\n    }\n}\n","import { Column } from \"../entities/column\";\nimport { ExportParams } from \"./exportParams\";\nimport { XmlElement } from \"./iXmlFactory\";\n\n// Excel Styles\nexport interface ExcelStyle {\n    id: string;\n    alignment?: ExcelAlignment;\n    borders?: ExcelBorders;\n    dataType?: ExcelDataType;\n    font?: ExcelFont;\n    interior?: ExcelInterior;\n    numberFormat?: ExcelNumberFormat;\n    protection?: ExcelProtection;\n    /**\n     * @deprecated Legacy property\n     */\n    name?: string;\n}\n\nexport interface ExcelAlignment {\n    horizontal?: 'Automatic' | 'Left' | 'Center' | 'Right' | 'Fill' | 'Justify' | 'CenterAcrossSelection' | 'Distributed' | 'JustifyDistributed';\n    indent?: number;\n    readingOrder?: 'RightToLeft' | 'LeftToRight' | 'Context';\n    rotate?: number;\n    shrinkToFit?: boolean;\n    vertical?: 'Automatic' | 'Top' | 'Bottom' | 'Center' | 'Justify' | 'Distributed' | 'JustifyDistributed';\n    wrapText?: boolean;\n    /**\n     * @deprecated Legacy property\n     */\n    verticalText?: boolean;\n}\n\nexport interface ExcelBorders {\n    borderBottom?: ExcelBorder;\n    borderLeft?: ExcelBorder;\n    borderRight?: ExcelBorder;\n    borderTop?: ExcelBorder;\n}\n\nexport interface ExcelBorder {\n    color?: string;\n    lineStyle?: 'None' | 'Continuous' | 'Dash' | 'Dot' | 'DashDot' | 'DashDotDot' | 'SlantDashDot' | 'Double';\n    weight?: 0 | 1 | 2 | 3;\n}\n\nexport interface ExcelFont {\n    bold?: boolean;\n    color?: string;\n    family?: string;\n    fontName?: string;\n    italic?: boolean;\n    outline?: boolean;\n    shadow?: boolean;\n    size?: number;\n    strikeThrough?: boolean;\n    underline?: 'Single' | 'Double';\n    verticalAlign?: 'Superscript' | 'Subscript';\n    /**\n     * @deprecated Legacy property\n     */\n    charSet?: number;\n}\n\nexport interface ExcelInterior {\n    pattern: 'None' | 'Solid' | 'Gray75' | 'Gray50' | 'Gray25' | 'Gray125' | 'Gray0625' | 'HorzStripe' | 'VertStripe' | 'ReverseDiagStripe' | 'DiagStripe' | 'DiagCross' | 'ThickDiagCross' | 'ThinHorzStripe' | 'ThinVertStripe' | 'ThinReverseDiagStripe' | 'ThinDiagStripe' | 'ThinHorzCross' | 'ThinDiagCross';\n    color?: string;\n    patternColor?: string;\n}\n\nexport interface ExcelNumberFormat {\n    format: string;\n}\n\nexport interface ExcelProtection {\n    protected: boolean;\n    hideFormula: boolean;\n}\n\n// Excel Structure\nexport interface ExcelWorksheet {\n    name: string;\n    table: ExcelTable;\n}\n\nexport interface ExcelTable {\n    columns: ExcelColumn[];\n    rows: ExcelRow[];\n}\n\nexport interface ExcelColumn {\n    min?: number;\n    max?: number;\n    outlineLevel?: number;\n    width?: number;\n    s?: number;\n    hidden?: boolean;\n    bestFit?: boolean;\n}\n\nexport interface ExcelRow {\n    index?: number;\n    collapsed?: boolean;\n    hidden?: boolean;\n    height?: number;\n    outlineLevel?: number;\n    s?: number;\n    cells: ExcelCell[];\n}\n\nexport interface ExcelCell {\n    ref?: string;\n    styleId?: string;\n    data: ExcelData;\n    mergeAcross?: number;\n    collapsibleRanges?: number[][];\n}\n\nexport interface ExcelImage {\n    id: string;\n    base64: string;\n    imageType: 'jpg' | 'png' | 'gif';\n    altText?: string;\n    fitCell?: boolean;\n    transparency?: number;\n    rotation?: number;\n    recolor?: 'Grayscale' | 'Sepia' | 'Washout';\n    width?: number;\n    height?: number;\n    position?: {\n        row?: number;\n        rowSpan?: number;\n        column?: number;\n        colSpan?: number;\n        offsetX?: number;\n        offsetY?: number;\n    };\n}\n\n/*\n * OOXML Data Types\n * (str): String\n * (s): Shared String\n * (f): Formula\n * (inlineStr): Inline string\n * Note: Inline strings are placed in a `is` element instead of `v`\n * (n) Number\n * (b) Boolean\n * (d) DateTime\n * (e) Error\n*/\nexport type ExcelDataType = 'String' | 'Formula' | 'Number' | 'Boolean' | 'DateTime' | 'Error';\nexport type ExcelOOXMLDataType = 'str' | 's' | 'f' | 'inlineStr' | 'n' | 'b' | 'd' | 'e' | 'empty';\n\nexport interface ExcelData {\n    type: ExcelDataType | ExcelOOXMLDataType;\n    value: string | null;\n}\n\nexport interface ExcelRelationship {\n    Id: string;\n    Type: string;\n    Target: string;\n}\n\nexport interface ExcelContentType {\n    name: 'Default' | 'Override';\n    ContentType: string;\n    Extension?: string;\n    PartName?: string;\n}\n\nexport interface ExcelXMLTemplate {\n    getTemplate(styleProperties?: ExcelStyle | ExcelWorksheet | ExcelColumn | ExcelRow | ExcelCell): XmlElement;\n}\n\nexport interface ExcelOOXMLTemplate {\n    getTemplate(config?: any, idx?: number, currentSheet?: number): XmlElement;\n    convertType?(type: string): string;\n}\n\n// Excel Export\nexport enum ExcelFactoryMode { SINGLE_SHEET, MULTI_SHEET }\n\nexport interface ColumnWidthCallbackParams {\n    column: Column | null;\n    index: number;\n}\n\nexport interface RowHeightCallbackParams {\n    rowIndex: number;\n}\n\nexport interface ExcelExportParams extends ExportParams<ExcelCell[][]> {\n    author?: string;\n    autoConvertFormulas?: boolean;\n    columnWidth?: number | ((params: ColumnWidthCallbackParams) => number);\n    exportMode?: 'xlsx' | 'xml';\n    fontSize?: number;\n    headerRowHeight?: number | ((params: RowHeightCallbackParams) => number);\n    rowHeight?: number | ((params: RowHeightCallbackParams) => number);\n    sheetName?: string;\n    margins?: ExcelSheetMargin;\n    pageSetup?: ExcelSheetPageSetup;\n    headerFooterConfig?: ExcelHeaderFooterConfig;\n    suppressTextAsCDATA?: boolean;\n    mimeType?: string;\n    /** Use to export an image for the gridCell in question. */\n    addImageToCell?: (rowIndex: number, column: Column, value: string) => { image: ExcelImage, value?: string } | undefined;\n}\n\nexport interface ExcelExportMultipleSheetParams {\n    author?: string;\n    data: string[];\n    fileName?: string;\n    fontSize?: number;\n    mimeType?: string;\n}\n\nexport interface ExcelHeaderFooterConfig {\n    all?: ExcelHeaderFooter;\n    first?: ExcelHeaderFooter;\n    even?: ExcelHeaderFooter;\n}\nexport interface ExcelHeaderFooter {\n    header?: ExcelHeaderFooterContent[];\n    footer?: ExcelHeaderFooterContent[];\n}\n\nexport interface ExcelHeaderFooterContent {\n    value: string;\n    position?: 'Left' | 'Center' | 'Right';\n    font?: ExcelFont;\n}\n\nexport interface IExcelCreator {\n    exportDataAsExcel(params?: ExcelExportParams): void;\n    getDataAsExcel(params?: ExcelExportParams): Blob | string | undefined;\n    getSheetDataForExcel(params?: ExcelExportParams): string;\n\n    getMultipleSheetsAsExcel(params: ExcelExportMultipleSheetParams): Blob | undefined;\n    exportMultipleSheetsAsExcel(params: ExcelExportMultipleSheetParams): void;\n\n    /** private methods */\n    setFactoryMode(factoryMode: ExcelFactoryMode, exportMode: 'xml' | 'xlsx'): void;\n    getFactoryMode(exportMode: 'xml' | 'xlsx'): ExcelFactoryMode;\n}\n\nexport interface ExcelSheetMargin {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n    header?: number;\n    footer?: number;\n}\n\nexport interface ExcelSheetPageSetup {\n    orientation?: 'Portrait' | 'Landscape';\n    pageSize?: 'Letter' | 'Letter Small' | 'Tabloid' | 'Ledger' | 'Legal' | 'Statement' | 'Executive' | 'A3' | 'A4' | 'A4 Small' | 'A5' | 'A6' | 'B4' | 'B5' | 'Folio' | 'Envelope' | 'Envelope DL' | 'Envelope C5' | 'Envelope B5' | 'Envelope C3' | 'Envelope C4' | 'Envelope C6' | 'Envelope Monarch' | 'Japanese Postcard' | 'Japanese Double Postcard';\n}\n","import { Component } from \"../../widgets/component\";\nimport { Autowired, PostConstruct, PreDestroy } from \"../../context/context\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { DragItem, DragSource, DragSourceType } from \"../../dragAndDrop/dragAndDropService\";\nimport { Events } from \"../../eventKeys\";\nimport { Beans } from \"../beans\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Column } from \"../../entities/column\";\nimport { createIconNoSpan } from \"../../utils/icon\";\nimport { doOnce, isFunction } from \"../../utils/function\";\n\nexport interface IRowDragItem extends DragItem {\n    /** The default text that would be applied to this Drag Element */\n    defaultTextValue: string;\n}\n\nexport class RowDragComp extends Component {\n\n    private dragSource: DragSource | null = null;\n\n    @Autowired('beans') private readonly beans: Beans;\n\n    constructor(\n        private readonly cellValueFn: () => string,\n        private readonly rowNode: RowNode,\n        private readonly column?: Column,\n        private readonly customGui?: HTMLElement,\n        private readonly dragStartPixels?: number,\n        private readonly suppressVisibilityChange?: boolean\n    ) { super(); }\n\n    public isCustomGui(): boolean {\n        return this.customGui != null;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        if (!this.customGui) {\n            this.setTemplate(/* html */ `<div class=\"ag-drag-handle ag-row-drag\" aria-hidden=\"true\"></div>`);\n            this.getGui().appendChild(createIconNoSpan('rowDrag', this.beans.gridOptionsWrapper, null)!);\n            this.addDragSource();\n        } else {\n            this.setDragElement(this.customGui, this.dragStartPixels);\n        }\n\n        this.checkCompatibility();\n\n        if (!this.suppressVisibilityChange) {\n            const strategy = this.beans.gridOptionsWrapper.isRowDragManaged() ?\n                new ManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column) :\n                new NonManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column);\n\n            this.createManagedBean(strategy, this.beans.context);\n        }\n    }\n\n    public setDragElement(dragElement: HTMLElement, dragStartPixels?: number) {\n        this.setTemplateFromElement(dragElement);\n        this.addDragSource(dragStartPixels);\n    }\n\n    private getSelectedCount(): number {\n        const isRowDragMultiRow = this.beans.gridOptionsWrapper.isRowDragMultiRow();\n        if (!isRowDragMultiRow) { return 1; }\n\n        const selection = this.beans.selectionService.getSelectedNodes();\n\n        return selection.indexOf(this.rowNode) !== -1 ? selection.length : 1;\n    }\n\n    // returns true if all compatibility items work out\n    private checkCompatibility(): void {\n        const managed = this.beans.gridOptionsWrapper.isRowDragManaged();\n        const treeData = this.beans.gridOptionsWrapper.isTreeData();\n\n        if (treeData && managed) {\n            doOnce(() =>\n                console.warn('AG Grid: If using row drag with tree data, you cannot have rowDragManaged=true'),\n                'RowDragComp.managedAndTreeData'\n            );\n        }\n    }\n\n    private addDragSource(dragStartPixels: number = 4): void {\n        // if this is changing the drag element, delete the previous dragSource\n        if (this.dragSource) { this.removeDragSource(); }\n\n        const dragItem: IRowDragItem = {\n            rowNode: this.rowNode,\n            columns: this.column ? [this.column] : undefined,\n            defaultTextValue: this.cellValueFn(),\n        };\n\n        const rowDragText = this.column && this.column.getColDef().rowDragText;\n        const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n\n        this.dragSource = {\n            type: DragSourceType.RowDrag,\n            eElement: this.getGui(),\n            dragItemName: () => {\n                const dragItemCount = this.getSelectedCount();\n                if (rowDragText) {\n                    return rowDragText(dragItem, dragItemCount);\n                }\n\n                return dragItemCount === 1 ? this.cellValueFn() : `${dragItemCount} ${translate('rowDragRows', 'rows')}`;\n            },\n            getDragItem: () => dragItem,\n            dragStartPixels,\n            dragSourceDomDataKey: this.beans.gridOptionsWrapper.getDomDataKey()\n        };\n\n        this.beans.dragAndDropService.addDragSource(this.dragSource, true);\n    }\n\n    @PreDestroy\n    private removeDragSource() {\n        if (this.dragSource) {\n            this.beans.dragAndDropService.removeDragSource(this.dragSource);\n        }\n        this.dragSource = null;\n    }\n}\n\nclass VisibilityStrategy extends BeanStub {\n    private readonly parent: RowDragComp;\n    private readonly column: Column | undefined;\n    protected readonly rowNode: RowNode;\n\n    constructor(parent: RowDragComp, rowNode: RowNode, column?: Column) {\n        super();\n        this.parent = parent;\n        this.rowNode = rowNode;\n        this.column = column;\n    }\n\n    protected setDisplayedOrVisible(neverDisplayed: boolean): void {\n        if (neverDisplayed) {\n            this.parent.setDisplayed(false);\n        } else {\n            let shown: boolean = true;\n            let isShownSometimes: boolean = false;\n\n            if (this.column) {\n                shown = this.column.isRowDrag(this.rowNode) || this.parent.isCustomGui();\n                isShownSometimes = isFunction(this.column.getColDef().rowDrag);\n            }\n\n            // if shown sometimes, them some rows can have drag handle while other don't,\n            // so we use setVisible to keep the handles horizontally aligned (as setVisible\n            // keeps the empty space, whereas setDisplayed looses the space)\n            if (isShownSometimes) {\n                this.parent.setDisplayed(true);\n                this.parent.setVisible(shown);\n            } else {\n                this.parent.setDisplayed(shown);\n                this.parent.setVisible(true);\n            }\n        }\n    }\n}\n\n// when non managed, the visibility depends on suppressRowDrag property only\nclass NonManagedVisibilityStrategy extends VisibilityStrategy {\n    private readonly beans: Beans;\n\n    constructor(parent: RowDragComp, beans: Beans, rowNode: RowNode, column?: Column) {\n        super(parent, rowNode, column);\n        this.beans = beans;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.beans.gridOptionsWrapper, 'suppressRowDrag', this.onSuppressRowDrag.bind(this));\n\n        // in case data changes, then we need to update visibility of drag item\n        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.beans.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.workOutVisibility.bind(this));\n\n        this.workOutVisibility();\n    }\n\n    private onSuppressRowDrag(): void {\n        this.workOutVisibility();\n    }\n\n    private workOutVisibility(): void {\n        // only show the drag if both sort and filter are not present\n        const neverDisplayed = this.beans.gridOptionsWrapper.isSuppressRowDrag();\n        this.setDisplayedOrVisible(neverDisplayed);\n    }\n}\n\n// when managed, the visibility depends on sort, filter and row group, as well as suppressRowDrag property\nclass ManagedVisibilityStrategy extends VisibilityStrategy {\n\n    private readonly beans: Beans;\n\n    constructor(parent: RowDragComp, beans: Beans, rowNode: RowNode, column?: Column) {\n        super(parent, rowNode, column);\n        this.beans = beans;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        // we do not show the component if sort, filter or grouping is active\n\n        this.addManagedListener(this.beans.eventService, Events.EVENT_SORT_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.beans.eventService, Events.EVENT_FILTER_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.beans.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.beans.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.workOutVisibility.bind(this));\n\n        // in case data changes, then we need to update visibility of drag item\n        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));\n\n        this.addManagedListener(this.beans.gridOptionsWrapper, 'suppressRowDrag', this.onSuppressRowDrag.bind(this));\n\n        this.workOutVisibility();\n    }\n\n    private onSuppressRowDrag(): void {\n        this.workOutVisibility();\n    }\n\n    private workOutVisibility(): void {\n        // only show the drag if both sort and filter are not present\n        const gridBodyCon = this.beans.ctrlsService.getGridBodyCtrl();\n        const rowDragFeature = gridBodyCon.getRowDragFeature();\n        const shouldPreventRowMove = rowDragFeature && rowDragFeature.shouldPreventRowMove();\n        const suppressRowDrag = this.beans.gridOptionsWrapper.isSuppressRowDrag();\n        const hasExternalDropZones = this.beans.dragAndDropService.hasExternalDropZones();\n        const neverDisplayed = (shouldPreventRowMove && !hasExternalDropZones) || suppressRowDrag;\n\n        this.setDisplayedOrVisible(neverDisplayed);\n    }\n}\n","import { ColumnModel } from \"../../columns/columnModel\";\nimport { UserCompDetails, UserComponentFactory } from \"../../components/framework/userComponentFactory\";\nimport { Constants } from \"../../constants/constants\";\nimport { KeyCode } from \"../../constants/keyCode\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Autowired } from \"../../context/context\";\nimport { CellRendererSelectorFunc } from \"../../entities/colDef\";\nimport { Column } from \"../../entities/column\";\nimport { GridOptions } from \"../../entities/gridOptions\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { isElementInEventPath, isStopPropagationForAgGrid, stopPropagationForAgGrid } from \"../../utils/event\";\nimport { removeAriaExpanded, setAriaExpanded } from \"../../utils/aria\";\nimport { doOnce } from \"../../utils/function\";\nimport { missing } from \"../../utils/generic\";\nimport { createIconNoSpan } from \"../../utils/icon\";\nimport { cloneObject } from \"../../utils/object\";\nimport { ExpressionService } from \"../../valueService/expressionService\";\nimport { CheckboxSelectionComponent } from \"../checkboxSelectionComponent\";\nimport { RowDragComp } from \"../row/rowDragComp\";\nimport { ValueFormatterService } from \"../valueFormatterService\";\nimport { ICellRendererComp, ICellRendererFunc, ICellRendererParams } from \"./iCellRenderer\";\n\nexport interface IGroupCellRenderer {\n    setInnerRenderer(compDetails: UserCompDetails | undefined, valueToDisplay: any): void;\n    setChildCount(count: string): void;\n    setCheckboxVisible(value: boolean): void;\n    setExpandedDisplayed(value: boolean): void;\n    setContractedDisplayed(value: boolean): void;\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\n}\n\nexport interface FooterValueGetterFunc {\n    (params: GroupCellRendererParams): any;\n}\n\nexport interface GroupCellRendererParams extends ICellRendererParams {\n\n    /**\n     * Only when in fullWidth, this gives whether the comp is pinned or not.\n     * If not doing fullWidth, then this is not provided, as pinned can be got from the column.\n     */\n    pinned: string;\n    /** 'true' if comp is showing full width. */\n    fullWidth: boolean;\n\n    /** Set to `true` to not include any padding (indentation) in the child rows. */\n    suppressPadding: boolean;\n    /** Set to `true` to suppress expand on double click. */\n    suppressDoubleClickExpand: boolean;\n    /** Set to `true` to suppress expand on <kbd>Enter</kbd> */\n    suppressEnterExpand: boolean;\n    /** The value getter for the footer text. Can be a function or expression. */\n    footerValueGetter: string | FooterValueGetterFunc;\n    /** If `true`, count is not displayed beside the name. */\n    suppressCount: boolean;\n    /** If `true`, a selection checkbox is included.  */\n    checkbox: any;\n    rowDrag?: boolean;\n\n    /** The renderer to use for inside the cell (after grouping functions are added) */\n    innerRenderer?: { new(): ICellRendererComp; } | ICellRendererFunc | string;\n    /**\n     * @deprecated as of v27, use innerRenderer for Framework components\n     * Same as `innerRenderer` but for a framework component. */\n    innerRendererFramework?: any;\n    /** Additional params to customise to the `innerRenderer`. */\n    innerRendererParams?: any;\n    /** Callback to enable different innerRenderers to be used based of value of params. */\n    innerRendererSelector?: CellRendererSelectorFunc;\n\n    /** @deprecated */\n    padding: number;\n}\n\nexport class GroupCellRendererCtrl extends BeanStub {\n\n    @Autowired('expressionService') private expressionService: ExpressionService;\n    @Autowired('valueFormatterService') private valueFormatterService: ValueFormatterService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('userComponentFactory') private userComponentFactory: UserComponentFactory;\n    @Autowired('gridOptions') private readonly gridOptions: GridOptions;\n\n    private params: GroupCellRendererParams;\n\n    // will be true if the node was pulled down\n    private showingValueForOpenedParent: boolean;\n\n    // this is normally the rowNode of this row, however when doing hideOpenParents, it will\n    // be the parent who's details we are actually showing if the data was pulled down.\n    private displayedGroupNode: RowNode;\n\n    private cellIsBlank: boolean;\n\n    private eGui: HTMLElement;\n    private eExpanded: HTMLElement;\n    private eContracted: HTMLElement;\n    private eCheckbox: HTMLElement;\n    private expandListener: (() => null) | null;\n\n    // keep reference to this, so we can remove again when indent changes\n    private indentClass: string;\n\n    private comp: IGroupCellRenderer;\n    private compClass: any;\n\n    public init(comp: IGroupCellRenderer, eGui: HTMLElement, eCheckbox: HTMLElement, eExpanded: HTMLElement, eContracted: HTMLElement, compClass: any, params: GroupCellRendererParams): void {\n        this.params = params;\n        this.eGui = eGui;\n        this.eCheckbox = eCheckbox;\n        this.eExpanded = eExpanded;\n        this.eContracted = eContracted;\n        this.comp = comp;\n        this.compClass = compClass;\n\n        const topLevelFooter = this.isTopLevelFooter();\n\n        const embeddedRowMismatch = this.isEmbeddedRowMismatch();\n        // This allows for empty strings to appear as groups since\n        // it will only return for null or undefined.\n        const nullValue = params.value == null;\n        let skipCell = false;\n\n        // if the groupCellRenderer is inside of a footer and groupHideOpenParents is true\n        // we should only display the groupCellRenderer if the current column is the rowGroupedColumn\n        if (this.gridOptionsWrapper.isGroupIncludeFooter() && this.gridOptionsWrapper.isGroupHideOpenParents()) {\n            const node = params.node;\n\n            if (node.footer) {\n                const showRowGroup = params.colDef && params.colDef.showRowGroup;\n                const rowGroupColumnId = node.rowGroupColumn && node.rowGroupColumn.getColId();\n\n                skipCell = showRowGroup !== rowGroupColumnId;\n            }\n        }\n\n        this.cellIsBlank = topLevelFooter ? false : (embeddedRowMismatch || nullValue || skipCell);\n\n        if (this.cellIsBlank) { return; }\n\n        this.setupShowingValueForOpenedParent();\n        this.findDisplayedGroupNode();\n        this.addFullWidthRowDraggerIfNeeded();\n        this.addExpandAndContract();\n        this.addCheckboxIfNeeded();\n        this.addValueElement();\n        this.setupIndent();\n        this.refreshAriaExpanded();\n    }\n\n    protected destroy(): void {\n        super.destroy();\n        // property cleanup to avoid memory leaks\n        this.expandListener = null;\n    }\n\n    private refreshAriaExpanded(): void {\n        const { node, eParentOfValue } = this.params;\n\n        if (this.expandListener) {\n            this.expandListener = this.expandListener();\n        }\n\n        if (!this.isExpandable()) {\n            removeAriaExpanded(eParentOfValue);\n            return;\n        }\n\n        const listener = () => {\n            // for react, we don't use JSX, as setting attributes via jsx is slower\n            setAriaExpanded(eParentOfValue, !!node.expanded);\n        };\n\n        this.expandListener = this.addManagedListener(node, RowNode.EVENT_EXPANDED_CHANGED, listener) || null;\n        listener();\n    }\n\n    private isTopLevelFooter(): boolean {\n        if (!this.gridOptionsWrapper.isGroupIncludeTotalFooter()) { return false; }\n\n        if (this.params.value != null || this.params.node.level != -1) { return false; }\n\n        // at this point, we know it's the root node and there is no value present, so it's a footer cell.\n        // the only thing to work out is if we are displaying groups  across multiple\n        // columns (groupMultiAutoColumn=true), we only want 'total' to appear in the first column.\n\n        const colDef = this.params.colDef;\n        const doingFullWidth = colDef == null;\n        if (doingFullWidth) { return true; }\n\n        if (colDef!.showRowGroup === true) { return true; }\n\n        const rowGroupCols = this.columnModel.getRowGroupColumns();\n        // this is a sanity check, rowGroupCols should always be present\n        if (!rowGroupCols || rowGroupCols.length === 0) { return true; }\n\n        const firstRowGroupCol = rowGroupCols[0];\n\n        return firstRowGroupCol.getId() === colDef!.showRowGroup;\n    }\n\n    // if we are doing embedded full width rows, we only show the renderer when\n    // in the body, or if pinning in the pinned section, or if pinning and RTL,\n    // in the right section. otherwise we would have the cell repeated in each section.\n    private isEmbeddedRowMismatch(): boolean {\n        if (!this.params.fullWidth || !this.gridOptionsWrapper.isEmbedFullWidthRows()) { return false; }\n\n        const pinnedLeftCell = this.params.pinned === Constants.PINNED_LEFT;\n        const pinnedRightCell = this.params.pinned === Constants.PINNED_RIGHT;\n        const bodyCell = !pinnedLeftCell && !pinnedRightCell;\n\n        if (this.gridOptionsWrapper.isEnableRtl()) {\n            if (this.columnModel.isPinningLeft()) {\n                return !pinnedRightCell;\n            }\n            return !bodyCell;\n        }\n\n        if (this.columnModel.isPinningLeft()) {\n            return !pinnedLeftCell;\n        }\n\n        return !bodyCell;\n    }\n\n    private findDisplayedGroupNode(): void {\n        const column = this.params.column;\n        const rowNode: RowNode = this.params.node;\n\n        if (this.showingValueForOpenedParent) {\n            let pointer = rowNode.parent;\n\n            while (pointer != null) {\n                if (pointer.rowGroupColumn && column!.isRowGroupDisplayed(pointer.rowGroupColumn.getId())) {\n                    this.displayedGroupNode = pointer;\n                    break;\n                }\n                pointer = pointer.parent;\n            }\n        }\n\n        // if we didn't find a displayed group, set it to the row node\n        if (missing(this.displayedGroupNode)) {\n            this.displayedGroupNode = rowNode;\n        }\n    }\n\n    private setupShowingValueForOpenedParent(): void {\n        // note - this code depends on sortService.updateGroupDataForHiddenOpenParents, where group data\n        // is updated to reflect the dragged down parents\n        const rowNode: RowNode = this.params.node;\n        const column = this.params.column as Column;\n\n        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {\n            this.showingValueForOpenedParent = false;\n            return;\n        }\n\n        // hideOpenParents means rowNode.groupData can have data for the group this column is displaying, even though\n        // this rowNode isn't grouping by the column we are displaying\n\n        // if no groupData at all, we are not showing a parent value\n        if (!rowNode.groupData) {\n            this.showingValueForOpenedParent = false;\n            return;\n        }\n\n        // this is the normal case, in that we are showing a group for which this column is configured. note that\n        // this means the Row Group is closed (if it was open, we would not be displaying it)\n        const showingGroupNode = rowNode.rowGroupColumn != null;\n        if (showingGroupNode) {\n            const keyOfGroupingColumn = rowNode.rowGroupColumn!.getId();\n            const configuredToShowThisGroupLevel = column.isRowGroupDisplayed(keyOfGroupingColumn);\n            // if showing group as normal, we didn't take group info from parent\n            if (configuredToShowThisGroupLevel) {\n                this.showingValueForOpenedParent = false;\n                return;\n            }\n        }\n\n        // see if we are showing a Group Value for the Displayed Group. if we are showing a group value, and this Row Node\n        // is not grouping by this Displayed Group, we must of gotten the value from a parent node\n        const valPresent = rowNode.groupData[column.getId()] != null;\n\n        this.showingValueForOpenedParent = valPresent;\n    }\n\n    private addValueElement(): void {\n        if (this.displayedGroupNode.footer) {\n            this.addFooterValue();\n        } else {\n            this.addGroupValue();\n            this.addChildCount();\n        }\n    }\n\n    private addGroupValue(): void {\n\n        // we try and use the cellRenderer of the column used for the grouping if we can\n        const paramsAdjusted = this.adjustParamsWithDetailsFromRelatedColumn();\n        const innerCompDetails = this.getInnerCompDetails(paramsAdjusted);\n\n        const { valueFormatted, value } = paramsAdjusted;\n        const valueWhenNoRenderer = valueFormatted != null ? valueFormatted : value;\n\n        this.comp.setInnerRenderer(innerCompDetails, valueWhenNoRenderer);\n    }\n\n    private adjustParamsWithDetailsFromRelatedColumn(): GroupCellRendererParams {\n\n        const relatedColumn = this.displayedGroupNode.rowGroupColumn;\n        const column = this.params.column;\n\n        if (!relatedColumn) { return this.params; }\n\n        const notFullWidth = column != null;\n        if (notFullWidth) {\n            const showingThisRowGroup = column!.isRowGroupDisplayed(relatedColumn.getId());\n            if (!showingThisRowGroup) { return this.params; }\n        }\n\n        const params = this.params;\n\n        const { value, node } = this.params;\n        const valueFormatted = this.valueFormatterService.formatValue(relatedColumn, node, value);\n\n        // we don't update the original params, as they could of come through React,\n        // as react has RowGroupCellRenderer, which means the params could be props which\n        // would be read only\n        const paramsAdjusted = {\n            ...params,\n            valueFormatted: valueFormatted\n        };\n\n        return paramsAdjusted;\n    }\n\n    private addFooterValue(): void {\n        const footerValueGetter = this.params.footerValueGetter;\n        let footerValue = '';\n\n        if (footerValueGetter) {\n            // params is same as we were given, except we set the value as the item to display\n            const paramsClone = cloneObject(this.params);\n            paramsClone.value = this.params.value;\n\n            if (typeof footerValueGetter === 'function') {\n                footerValue = footerValueGetter(paramsClone);\n            } else if (typeof footerValueGetter === 'string') {\n                footerValue = this.expressionService.evaluate(footerValueGetter, paramsClone);\n            } else {\n                console.warn('AG Grid: footerValueGetter should be either a function or a string (expression)');\n            }\n        } else {\n            footerValue = 'Total ' + (this.params.value != null ? this.params.value : '');\n        }\n\n        const innerCompDetails = this.getInnerCompDetails(this.params);\n\n        this.comp.setInnerRenderer(innerCompDetails, footerValue);\n    }\n\n    private getInnerCompDetails(params: GroupCellRendererParams): UserCompDetails | undefined {\n\n        // for full width rows, we don't do any of the below\n        if (params.fullWidth) {\n            return this.userComponentFactory.getFullWidthGroupRowInnerCellRenderer(\n                this.gridOptions.groupRowRendererParams, params);\n        }\n\n        // when grouping, the normal case is we use the cell renderer of the grouped column. eg if grouping by country\n        // and then rating, we will use the country cell renderer for each country group row and likewise the rating\n        // cell renderer for each rating group row.\n        //\n        // however if the user has innerCellRenderer defined, this gets preference and we don't use cell renderers\n        // of the grouped columns.\n        //\n        // so we check and use in the following order:\n        //\n        // 1) thisColDef.cellRendererParams.innerRenderer of the column showing the groups (eg auto group column)\n        // 2) groupedColDef.cellRenderer of the grouped column\n        // 3) groupedColDef.cellRendererParams.innerRenderer\n\n        // we check if cell renderer provided for the group cell renderer, eg colDef.cellRendererParams.innerRenderer\n        const innerCompDetails = this.userComponentFactory\n            .getInnerRendererDetails(params, params);\n\n        // avoid using GroupCellRenderer again, otherwise stack overflow, as we insert same renderer again and again.\n        // this covers off chance user is grouping by a column that is also configured with GroupCellRenderer\n        const isGroupRowRenderer = (details: UserCompDetails | undefined) => details && details.componentClass == this.compClass;\n\n        if (innerCompDetails && !isGroupRowRenderer(innerCompDetails)) {\n            // use the renderer defined in cellRendererParams.innerRenderer\n            return innerCompDetails;\n        }\n\n        const relatedColumn = this.displayedGroupNode.rowGroupColumn;\n        const relatedColDef = relatedColumn ? relatedColumn.getColDef() : undefined;\n\n        if (!relatedColDef) {\n            return;\n        }\n\n        // otherwise see if we can use the cellRenderer of the column we are grouping by\n        const relatedCompDetails = this.userComponentFactory\n            .getCellRendererDetails(relatedColDef, params);\n\n        if (relatedCompDetails && !isGroupRowRenderer(relatedCompDetails)) {\n            // Only if the original column is using a specific renderer, it it is a using a DEFAULT one ignore it\n            return relatedCompDetails;\n        }\n\n        if (isGroupRowRenderer(relatedCompDetails) &&\n            relatedColDef.cellRendererParams &&\n            relatedColDef.cellRendererParams.innerRenderer) {\n            // edge case - this comes from a column which has been grouped dynamically, that has a renderer 'group'\n            // and has an inner cell renderer\n            const res = this.userComponentFactory.getInnerRendererDetails(relatedColDef.cellRendererParams, params);\n            return res;\n        }\n    }\n\n    private addChildCount(): void {\n        // only include the child count if it's included, eg if user doing custom aggregation,\n        // then this could be left out, or set to -1, ie no child count\n        if (this.params.suppressCount) { return; }\n\n        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.updateChildCount.bind(this));\n\n        // filtering changes the child count, so need to cater for it\n        this.updateChildCount();\n    }\n\n    private updateChildCount(): void {\n        const allChildrenCount = this.displayedGroupNode.allChildrenCount;\n        const showingGroupForThisNode = this.isShowRowGroupForThisRow();\n        const showCount = showingGroupForThisNode && allChildrenCount != null && allChildrenCount >= 0;\n        const countString = showCount ? `(${allChildrenCount})` : ``;\n        this.comp.setChildCount(countString);\n    }\n\n    private isShowRowGroupForThisRow(): boolean {\n        if (this.gridOptionsWrapper.isTreeData()) { return true; }\n\n        const rowGroupColumn = this.displayedGroupNode.rowGroupColumn;\n\n        if (!rowGroupColumn) { return false; }\n\n        // column is null for fullWidthRows\n        const column = this.params.column;\n        const thisColumnIsInterested = column == null || column.isRowGroupDisplayed(rowGroupColumn.getId());\n\n        return thisColumnIsInterested;\n    }\n\n    private addExpandAndContract(): void {\n        const params = this.params;\n        const eExpandedIcon = createIconNoSpan('groupExpanded', this.gridOptionsWrapper, null);\n        const eContractedIcon = createIconNoSpan('groupContracted', this.gridOptionsWrapper, null);\n\n        if (eExpandedIcon) {\n            this.eExpanded.appendChild(eExpandedIcon);\n        }\n\n        if (eContractedIcon) {\n            this.eContracted.appendChild(eContractedIcon);\n        }\n\n        const eGroupCell = params.eGridCell;\n\n        // if editing groups, then double click is to start editing\n        if (!this.gridOptionsWrapper.isEnableGroupEdit() && this.isExpandable() && !params.suppressDoubleClickExpand) {\n            this.addManagedListener(eGroupCell, 'dblclick', this.onCellDblClicked.bind(this));\n        }\n\n        this.addManagedListener(this.eExpanded, 'click', this.onExpandClicked.bind(this));\n        this.addManagedListener(this.eContracted, 'click', this.onExpandClicked.bind(this));\n\n        // expand / contract as the user hits enter\n        this.addManagedListener(eGroupCell, 'keydown', this.onKeyDown.bind(this));\n        this.addManagedListener(params.node, RowNode.EVENT_EXPANDED_CHANGED, this.showExpandAndContractIcons.bind(this));\n\n        this.showExpandAndContractIcons();\n\n        // because we don't show the expand / contract when there are no children, we need to check every time\n        // the number of children change.\n        const expandableChangedListener = this.onRowNodeIsExpandableChanged.bind(this);\n        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, expandableChangedListener);\n        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_MASTER_CHANGED, expandableChangedListener);\n        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_GROUP_CHANGED, expandableChangedListener);\n        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_HAS_CHILDREN_CHANGED, expandableChangedListener);\n    }\n\n    private onExpandClicked(mouseEvent: MouseEvent): void {\n        if (isStopPropagationForAgGrid(mouseEvent)) { return; }\n\n        // so if we expand a node, it does not also get selected.\n        stopPropagationForAgGrid(mouseEvent);\n\n        this.onExpandOrContract(mouseEvent);\n    }\n\n    private onExpandOrContract(e: MouseEvent | KeyboardEvent): void {\n        // must use the displayedGroup, so if data was dragged down, we expand the parent, not this row\n        const rowNode: RowNode = this.displayedGroupNode;\n        const nextExpandState = !rowNode.expanded;\n        rowNode.setExpanded(nextExpandState, e);\n    }\n\n    private isExpandable(): boolean {\n        if (this.showingValueForOpenedParent) { return true; }\n\n        const rowNode = this.displayedGroupNode;\n        const reducedLeafNode = this.columnModel.isPivotMode() && rowNode.leafGroup;\n        const expandableGroup = rowNode.isExpandable() && !rowNode.footer && !reducedLeafNode;\n\n        if (!expandableGroup) { return false; }\n\n        // column is null for fullWidthRows\n        const column = this.params.column;\n        const displayingForOneColumnOnly = column != null && typeof column.getColDef().showRowGroup === 'string';\n\n        if (displayingForOneColumnOnly) {\n            const showing = this.isShowRowGroupForThisRow();\n            return showing;\n        }\n\n        return true;\n    }\n\n    private showExpandAndContractIcons(): void {\n        const { params, displayedGroupNode: displayedGroup, columnModel } = this;\n        const { node } = params;\n\n        const isExpandable = this.isExpandable();\n\n        if (isExpandable) {\n            // if expandable, show one based on expand state.\n            // if we were dragged down, means our parent is always expanded\n            const expanded = this.showingValueForOpenedParent ? true : node.expanded;\n            this.comp.setExpandedDisplayed(expanded);\n            this.comp.setContractedDisplayed(!expanded);\n        } else {\n            // it not expandable, show neither\n            this.comp.setExpandedDisplayed(false);\n            this.comp.setContractedDisplayed(false);\n        }\n\n        // compensation padding for leaf nodes, so there is blank space instead of the expand icon\n        const pivotMode = columnModel.isPivotMode();\n        const pivotModeAndLeafGroup = pivotMode && displayedGroup.leafGroup;\n        const addExpandableCss = isExpandable && !pivotModeAndLeafGroup;\n        const isTotalFooterNode = node.footer && node.level === -1;\n\n        this.comp.addOrRemoveCssClass('ag-cell-expandable', addExpandableCss);\n        this.comp.addOrRemoveCssClass('ag-row-group', addExpandableCss);\n\n        if (pivotMode) {\n            this.comp.addOrRemoveCssClass('ag-pivot-leaf-group', pivotModeAndLeafGroup);\n        } else if (!isTotalFooterNode) {\n            this.comp.addOrRemoveCssClass('ag-row-group-leaf-indent', !addExpandableCss);\n        }\n    }\n\n    private onRowNodeIsExpandableChanged(): void {\n        // maybe if no children now, we should hide the expand / contract icons\n        this.showExpandAndContractIcons();\n\n        // if we have no children, this impacts the indent\n        this.setIndent();\n\n        this.refreshAriaExpanded();\n    }\n\n    private setupIndent(): void {\n        // only do this if an indent - as this overwrites the padding that\n        // the theme set, which will make things look 'not aligned' for the\n        // first group level.\n        const node: RowNode = this.params.node;\n        const suppressPadding = this.params.suppressPadding;\n\n        if (!suppressPadding) {\n            this.addManagedListener(node, RowNode.EVENT_UI_LEVEL_CHANGED, this.setIndent.bind(this));\n            this.setIndent();\n        }\n    }\n\n    private setIndent(): void {\n        if (this.gridOptionsWrapper.isGroupHideOpenParents()) { return; }\n\n        const params = this.params;\n        const rowNode: RowNode = params.node;\n        // if we are only showing one group column, we don't want to be indenting based on level\n        const fullWithRow = !!params.colDef;\n        const treeData = this.gridOptionsWrapper.isTreeData();\n        const manyDimensionThisColumn = !fullWithRow || treeData || params.colDef!.showRowGroup === true;\n        const paddingCount = manyDimensionThisColumn ? rowNode.uiLevel : 0;\n        const userProvidedPaddingPixelsTheDeprecatedWay = params.padding >= 0;\n\n        if (userProvidedPaddingPixelsTheDeprecatedWay) {\n            doOnce(() => console.warn('AG Grid: cellRendererParams.padding no longer works, it was deprecated in since v14.2 and removed in v26, configuring padding for groupCellRenderer should be done with Sass variables and themes. Please see the AG Grid documentation page for Themes, in particular the property $row-group-indent-size.'), 'groupCellRenderer->doDeprecatedWay');\n        }\n\n        if (this.indentClass) {\n            this.comp.addOrRemoveCssClass(this.indentClass, false);\n        }\n\n        this.indentClass = 'ag-row-group-indent-' + paddingCount;\n        this.comp.addOrRemoveCssClass(this.indentClass, true);\n    }\n\n    private addFullWidthRowDraggerIfNeeded(): void {\n        if (!this.params.fullWidth || !this.params.rowDrag) { return; }\n\n        const rowDragComp = new RowDragComp(() => this.params.value, this.params.node);\n        this.createManagedBean(rowDragComp, this.context);\n\n        this.eGui.insertAdjacentElement('afterbegin', rowDragComp.getGui());\n    }\n\n    private isUserWantsSelected(): boolean {\n        const paramsCheckbox = this.params.checkbox;\n\n        if (typeof paramsCheckbox === 'function') { return paramsCheckbox(this.params); }\n\n        return paramsCheckbox === true;\n    }\n\n    private addCheckboxIfNeeded(): void {\n        const rowNode = this.displayedGroupNode;\n        const checkboxNeeded = this.isUserWantsSelected() &&\n            // footers cannot be selected\n            !rowNode.footer &&\n            // pinned rows cannot be selected\n            !rowNode.rowPinned &&\n            // details cannot be selected\n            !rowNode.detail;\n\n        if (checkboxNeeded) {\n            const cbSelectionComponent = new CheckboxSelectionComponent();\n            this.getContext().createBean(cbSelectionComponent);\n\n            cbSelectionComponent.init({ rowNode: rowNode, column: this.params.column });\n            this.eCheckbox.appendChild(cbSelectionComponent.getGui());\n            this.addDestroyFunc(() => this.getContext().destroyBean(cbSelectionComponent));\n        }\n\n        this.comp.setCheckboxVisible(checkboxNeeded);\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n        const enterKeyPressed = event.key === KeyCode.ENTER;\n\n        if (!enterKeyPressed || this.params.suppressEnterExpand) { return; }\n\n        const cellEditable = this.params.column && this.params.column.isCellEditable(this.params.node);\n\n        if (cellEditable) { return; }\n\n        this.onExpandOrContract(event);\n    }\n\n    private onCellDblClicked(mouseEvent: MouseEvent): void {\n        if (isStopPropagationForAgGrid(mouseEvent)) { return; }\n\n        // we want to avoid acting on double click events on the expand / contract icon,\n        // as that icons already has expand / collapse functionality on it. otherwise if\n        // the icon was double clicked, we would get 'click', 'click', 'dblclick' which\n        // is open->close->open, however double click should be open->close only.\n        const targetIsExpandIcon\n            = isElementInEventPath(this.eExpanded, mouseEvent)\n            || isElementInEventPath(this.eContracted, mouseEvent);\n\n        if (!targetIsExpandIcon) {\n            this.onExpandOrContract(mouseEvent);\n        }\n    }\n}\n","import { UserCompDetails } from \"../../components/framework/userComponentFactory\";\nimport { setAriaRole } from \"../../utils/aria\";\nimport { setDisplayed } from \"../../utils/dom\";\nimport { Component } from \"../../widgets/component\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { GroupCellRendererCtrl, GroupCellRendererParams, IGroupCellRenderer } from \"./groupCellRendererCtrl\";\nimport { ICellRendererComp } from \"./iCellRenderer\";\n\nexport class GroupCellRenderer extends Component implements ICellRendererComp {\n\n    private static TEMPLATE = /* html */\n        `<span class=\"ag-cell-wrapper\">\n            <span class=\"ag-group-expanded\" ref=\"eExpanded\"></span>\n            <span class=\"ag-group-contracted\" ref=\"eContracted\"></span>\n            <span class=\"ag-group-checkbox ag-invisible\" ref=\"eCheckbox\"></span>\n            <span class=\"ag-group-value\" ref=\"eValue\"></span>\n            <span class=\"ag-group-child-count\" ref=\"eChildCount\"></span>\n        </span>`;\n\n    @RefSelector('eExpanded') private eExpanded: HTMLElement;\n    @RefSelector('eContracted') private eContracted: HTMLElement;\n    @RefSelector('eCheckbox') private eCheckbox: HTMLElement;\n    @RefSelector('eValue') private eValue: HTMLElement;\n    @RefSelector('eChildCount') private eChildCount: HTMLElement;\n\n    // this cell renderer\n    private innerCellRenderer: ICellRendererComp;\n\n    constructor() {\n        super(GroupCellRenderer.TEMPLATE);\n    }\n\n    public init(params: GroupCellRendererParams): void {\n\n        const compProxy: IGroupCellRenderer = {\n            setInnerRenderer: (compDetails, valueToDisplay) => this.setRenderDetails(compDetails, valueToDisplay),\n            setChildCount: count => this.eChildCount.innerHTML = count,\n            addOrRemoveCssClass: (cssClass, value) => this.addOrRemoveCssClass(cssClass, value),\n            setContractedDisplayed: expanded => setDisplayed(this.eContracted, expanded),\n            setExpandedDisplayed: expanded => setDisplayed(this.eExpanded, expanded),\n            setCheckboxVisible: visible => this.eCheckbox.classList.toggle('ag-invisible', !visible)\n        };\n\n        const ctrl = this.createManagedBean(new GroupCellRendererCtrl());\n        const fullWidth = !params.colDef;\n        const eGui = this.getGui();\n        ctrl.init(compProxy, eGui, this.eCheckbox, this.eExpanded, this.eContracted, this.constructor, params);\n\n        if (fullWidth) {\n            setAriaRole(eGui, 'gridcell');\n        }\n    }\n\n    private setRenderDetails(compDetails: UserCompDetails | undefined, valueToDisplay: any): void {\n\n        if (compDetails) {\n            const componentPromise = compDetails.newAgStackInstance();\n            if (!componentPromise) { return; }\n            componentPromise.then(comp => {\n                if (!comp) { return; }\n                const destroyComp = () => this.context.destroyBean(comp);\n                if (this.isAlive()) {\n                    this.eValue.appendChild(comp.getGui());\n                    this.addDestroyFunc(destroyComp);\n                } else {\n                    destroyComp();\n                }\n            });\n        } else {\n            this.eValue.innerText = valueToDisplay;\n        }\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to have public here instead of private or protected\n    public destroy(): void {\n        this.getContext().destroyBean(this.innerCellRenderer);\n        super.destroy();\n    }\n\n    public refresh(): boolean {\n        return false;\n    }\n}\n","import { Component } from \"../../widgets/component\";\nimport { ICellRendererParams } from \"./iCellRenderer\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { createIconNoSpan } from \"../../utils/icon\";\nimport { IComponent } from \"../../interfaces/iComponent\";\n\nexport interface ILoadingCellRendererParams extends ICellRendererParams { }\nexport interface ILoadingCellRenderer { }\nexport interface ILoadingCellRendererComp extends ILoadingCellRenderer, IComponent<ILoadingCellRendererParams> { }\n\nexport class LoadingCellRenderer extends Component implements ILoadingCellRendererComp {\n\n    private static TEMPLATE =\n        `<div class=\"ag-loading\">\n            <span class=\"ag-loading-icon\" ref=\"eLoadingIcon\"></span>\n            <span class=\"ag-loading-text\" ref=\"eLoadingText\"></span>\n        </div>`;\n\n    @RefSelector('eLoadingIcon') private eLoadingIcon: HTMLElement;\n    @RefSelector('eLoadingText') private eLoadingText: HTMLElement;\n\n    constructor() {\n        super(LoadingCellRenderer.TEMPLATE);\n    }\n\n    public init(params: ILoadingCellRendererParams): void {\n        params.node.failedLoad ? this.setupFailed() : this.setupLoading();\n    }\n\n    private setupFailed(): void {\n        this.eLoadingText.innerText = 'ERR';\n    }\n\n    private setupLoading(): void {\n        const eLoadingIcon = createIconNoSpan('groupLoading', this.gridOptionsWrapper, null);\n        if (eLoadingIcon) {\n            this.eLoadingIcon.appendChild(eLoadingIcon);\n        }\n\n        const localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();\n        this.eLoadingText.innerText = localeTextFunc('loadingOoo', 'Loading');\n    }\n\n    public refresh(params: ILoadingCellRendererParams): boolean {\n        return false;\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n}","import { IComponent } from \"../../interfaces/iComponent\";\nimport { AgGridCommon } from \"../../interfaces/iCommon\";\nimport { Component } from \"../../widgets/component\";\n\nexport interface ILoadingOverlayParams extends AgGridCommon { }\n\nexport interface ILoadingOverlayComp extends IComponent<ILoadingOverlayParams> { }\n\nexport class LoadingOverlayComponent extends Component implements ILoadingOverlayComp {\n\n    private static DEFAULT_LOADING_OVERLAY_TEMPLATE = '<span class=\"ag-overlay-loading-center\">[LOADING...]</span>';\n\n    constructor() {\n        super();\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n    public init(params: ILoadingOverlayParams): void {\n        const template =\n            this.gridOptionsWrapper.getOverlayLoadingTemplate() ?\n                this.gridOptionsWrapper.getOverlayLoadingTemplate() : LoadingOverlayComponent.DEFAULT_LOADING_OVERLAY_TEMPLATE;\n\n        const localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();\n        const localisedTemplate = template!.replace('[LOADING...]', localeTextFunc('loadingOoo', 'Loading...'));\n\n        this.setTemplate(localisedTemplate);\n    }\n}\n","import { AgGridCommon } from \"../../interfaces/iCommon\";\nimport { IComponent } from \"../../interfaces/iComponent\";\nimport { Component } from \"../../widgets/component\";\n\nexport interface INoRowsOverlayParams extends AgGridCommon { }\n\nexport interface INoRowsOverlayComp extends IComponent<INoRowsOverlayParams> { }\n\nexport class NoRowsOverlayComponent extends Component implements INoRowsOverlayComp {\n    private static DEFAULT_NO_ROWS_TEMPLATE = '<span class=\"ag-overlay-no-rows-center\">[NO_ROWS_TO_SHOW]</span>';\n\n    constructor() {\n        super();\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n    public init(params: INoRowsOverlayParams): void {\n        const template =\n            this.gridOptionsWrapper.getOverlayNoRowsTemplate() ?\n                this.gridOptionsWrapper.getOverlayNoRowsTemplate() : NoRowsOverlayComponent.DEFAULT_NO_ROWS_TEMPLATE;\n\n        const localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();\n        const localisedTemplate = template!.replace('[NO_ROWS_TO_SHOW]', localeTextFunc('noRowsToShow', 'No Rows To Show'));\n        this.setTemplate(localisedTemplate);\n    }\n}\n","import { PopupComponent } from '../widgets/popupComponent';\nimport { IComponent } from '../interfaces/iComponent';\nimport { escapeString } from '../utils/string';\nimport { RowNode } from '../entities/rowNode';\nimport { Column } from '../entities/column';\nimport { ColumnGroup } from '../entities/columnGroup';\nimport { ColGroupDef, ColDef } from '../entities/colDef';\nimport { AgGridCommon } from '../interfaces/iCommon';\n\nexport interface ITooltipParams extends AgGridCommon {\n    /** What part of the application is showing the tooltip, e.g. 'cell', 'header', 'menuItem' etc */\n    location: string;\n    /** The value to be rendered by the tooltip. */\n    value?: any;\n    /** The formatted value to be rendered by the tooltip. */\n    valueFormatted?: any;\n    /** Column / ColumnGroup definition. */\n    colDef?: ColDef | ColGroupDef | null;\n    /** Column / ColumnGroup */\n    column?: Column | ColumnGroup;\n    /** The index of the row containing the cell rendering the tooltip. */\n    rowIndex?: number;\n    /** The row node. */\n    node?: RowNode;\n    /** Data for the row node in question. */\n    data?: any;\n}\n\nexport interface ITooltipComp extends IComponent<ITooltipParams> { }\n\nexport class TooltipComponent extends PopupComponent implements ITooltipComp {\n    constructor() {\n        super(/* html */`<div class=\"ag-tooltip\"></div>`);\n    }\n\n    // will need to type params\n    public init(params: ITooltipParams): void {\n        const { value } = params;\n        this.getGui().innerHTML = escapeString(value) as string;\n    }\n}\n","import { BeanStub } from \"../../context/beanStub\";\nimport { Autowired, Bean, PostConstruct } from \"../../context/context\";\nimport { GridOptions } from \"../../entities/gridOptions\";\nimport { ReadOnlyFloatingFilter } from \"../../filter/floating/provided/readOnlyFloatingFilter\";\nimport { DateFilter } from \"../../filter/provided/date/dateFilter\";\nimport { DateFloatingFilter } from \"../../filter/provided/date/dateFloatingFilter\";\nimport { DefaultDateComponent } from \"../../filter/provided/date/defaultDateComponent\";\nimport { NumberFilter } from \"../../filter/provided/number/numberFilter\";\nimport { NumberFloatingFilter } from \"../../filter/provided/number/numberFloatingFilter\";\nimport { TextFilter } from \"../../filter/provided/text/textFilter\";\nimport { TextFloatingFilter } from \"../../filter/provided/text/textFloatingFilter\";\nimport { HeaderComp } from \"../../headerRendering/cells/column/headerComp\";\nimport { HeaderGroupComp } from \"../../headerRendering/cells/columnGroup/headerGroupComp\";\nimport { IComponent } from \"../../interfaces/iComponent\";\nimport { LargeTextCellEditor } from \"../../rendering/cellEditors/largeTextCellEditor\";\nimport { PopupSelectCellEditor } from \"../../rendering/cellEditors/popupSelectCellEditor\";\nimport { PopupTextCellEditor } from \"../../rendering/cellEditors/popupTextCellEditor\";\nimport { SelectCellEditor } from \"../../rendering/cellEditors/selectCellEditor\";\nimport { TextCellEditor } from \"../../rendering/cellEditors/textCellEditor\";\nimport { AnimateShowChangeCellRenderer } from \"../../rendering/cellRenderers/animateShowChangeCellRenderer\";\nimport { AnimateSlideCellRenderer } from \"../../rendering/cellRenderers/animateSlideCellRenderer\";\nimport { GroupCellRenderer } from \"../../rendering/cellRenderers/groupCellRenderer\";\nimport { LoadingCellRenderer } from \"../../rendering/cellRenderers/loadingCellRenderer\";\nimport { LoadingOverlayComponent } from \"../../rendering/overlays/loadingOverlayComponent\";\nimport { NoRowsOverlayComponent } from \"../../rendering/overlays/noRowsOverlayComponent\";\nimport { TooltipComponent } from \"../../rendering/tooltipComponent\";\nimport { doOnce } from \"../../utils/function\";\nimport { iterateObject } from '../../utils/object';\nimport { AgComponentUtils } from \"./agComponentUtils\";\n\n/**\n * B the business interface (ie IHeader)\n * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid\n */\nexport interface RegisteredComponent {\n    component: any;\n    componentFromFramework: boolean;\n}\n\nexport interface DeprecatedComponentName {\n    propertyHolder: string;\n    newComponentName: string;\n}\n\n@Bean('userComponentRegistry')\nexport class UserComponentRegistry extends BeanStub {\n\n    @Autowired('gridOptions') private gridOptions: GridOptions;\n    @Autowired('agComponentUtils') private readonly agComponentUtils: AgComponentUtils;\n\n    private agGridDefaults: { [key: string]: any } = {\n        //date\n        agDateInput: DefaultDateComponent,\n\n        //header\n        agColumnHeader: HeaderComp,\n        agColumnGroupHeader: HeaderGroupComp,\n\n        //floating filters\n        agTextColumnFloatingFilter: TextFloatingFilter,\n        agNumberColumnFloatingFilter: NumberFloatingFilter,\n        agDateColumnFloatingFilter: DateFloatingFilter,\n        agReadOnlyFloatingFilter: ReadOnlyFloatingFilter,\n\n        // renderers\n        agAnimateShowChangeCellRenderer: AnimateShowChangeCellRenderer,\n        agAnimateSlideCellRenderer: AnimateSlideCellRenderer,\n        agGroupCellRenderer: GroupCellRenderer,\n        agGroupRowRenderer: GroupCellRenderer,\n        agLoadingCellRenderer: LoadingCellRenderer,\n\n        //editors\n        agCellEditor: TextCellEditor,\n        agTextCellEditor: TextCellEditor,\n        agSelectCellEditor: SelectCellEditor,\n        agPopupTextCellEditor: PopupTextCellEditor,\n        agPopupSelectCellEditor: PopupSelectCellEditor,\n        agLargeTextCellEditor: LargeTextCellEditor,\n\n        //filter\n        agTextColumnFilter: TextFilter,\n        agNumberColumnFilter: NumberFilter,\n        agDateColumnFilter: DateFilter,\n\n        //overlays\n        agLoadingOverlay: LoadingOverlayComponent,\n        agNoRowsOverlay: NoRowsOverlayComponent,\n\n        // tooltips\n        agTooltipComponent: TooltipComponent\n    };\n\n    private agDeprecatedNames: { [key: string]: DeprecatedComponentName; } = {\n        set: {\n            newComponentName: 'agSetColumnFilter',\n            propertyHolder: 'filter'\n        },\n        text: {\n            newComponentName: 'agTextColumnFilter',\n            propertyHolder: 'filter'\n        },\n        number: {\n            newComponentName: 'agNumberColumnFilter',\n            propertyHolder: 'filter'\n        },\n        date: {\n            newComponentName: 'agDateColumnFilter',\n            propertyHolder: 'filter'\n        },\n\n        group: {\n            newComponentName: 'agGroupCellRenderer',\n            propertyHolder: 'cellRenderer'\n        },\n        animateShowChange: {\n            newComponentName: 'agAnimateShowChangeCellRenderer',\n            propertyHolder: 'cellRenderer'\n        },\n        animateSlide: {\n            newComponentName: 'agAnimateSlideCellRenderer',\n            propertyHolder: 'cellRenderer'\n        },\n\n        select: {\n            newComponentName: 'agSelectCellEditor',\n            propertyHolder: 'cellEditor'\n        },\n        largeText: {\n            newComponentName: 'agLargeTextCellEditor',\n            propertyHolder: 'cellEditor'\n        },\n        popupSelect: {\n            newComponentName: 'agPopupSelectCellEditor',\n            propertyHolder: 'cellEditor'\n        },\n        popupText: {\n            newComponentName: 'agPopupTextCellEditor',\n            propertyHolder: 'cellEditor'\n        },\n        richSelect: {\n            newComponentName: 'agRichSelectCellEditor',\n            propertyHolder: 'cellEditor'\n        },\n        headerComponent: {\n            newComponentName: 'agColumnHeader',\n            propertyHolder: 'headerComponent'\n        }\n    };\n\n    private jsComps: { [key: string]: any } = {};\n    private fwComps: { [key: string]: any } = {};\n\n    @PostConstruct\n    private init(): void {\n        if (this.gridOptions.components != null) {\n            iterateObject(this.gridOptions.components, (key, component) => this.registerJsComponent(key, component));\n        }\n\n        if (this.gridOptions.frameworkComponents != null) {\n            iterateObject(this.gridOptions.frameworkComponents,\n                (key, component) => this.registerFwComponent(key, component as any));\n        }\n    }\n\n    public registerDefaultComponent(rawName: string, component: any) {\n        const name = this.translateIfDeprecated(rawName);\n\n        if (this.agGridDefaults[name]) {\n            console.error(`Trying to overwrite a default component. You should call registerComponent`);\n            return;\n        }\n\n        this.agGridDefaults[name] = component;\n    }\n\n    private registerJsComponent(rawName: string, component: any) {\n        const name = this.translateIfDeprecated(rawName);\n\n        if (this.fwComps[name]) {\n            console.error(`Trying to register a component that you have already registered for frameworks: ${name}`);\n            return;\n        }\n\n        this.jsComps[name] = component;\n    }\n\n    /**\n     * B the business interface (ie IHeader)\n     * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid\n     */\n    private registerFwComponent<A extends IComponent<any> & B, B>(rawName: string, component: { new(): IComponent<B>; }) {\n        const warningMessage = `AG Grid: As of v27, registering components via grid property frameworkComponents is deprecated. Instead register both JavaScript AND Framework Components via the components property.`;\n        doOnce( ()=> console.warn(warningMessage), `UserComponentRegistry.frameworkComponentsDeprecated`);\n\n        const name = this.translateIfDeprecated(rawName);\n        this.fwComps[name] = component;\n    }\n\n    public retrieve(rawName: string): {componentFromFramework: boolean, component: any} | null {\n        const name = this.translateIfDeprecated(rawName);\n\n        const createResult = (component: any, componentFromFramework: boolean) => ({componentFromFramework, component});\n\n        // FrameworkOverrides.frameworkComponent() is used in two locations:\n        // 1) for Vue, user provided components get registered via a framework specific way.\n        // 2) for React, it's how the React UI provides alternative default components (eg GroupCellRenderer and DetailCellRenderer)\n        const registeredViaFrameworkComp = this.getFrameworkOverrides().frameworkComponent(name);\n        if (registeredViaFrameworkComp!=null) {\n            return createResult(registeredViaFrameworkComp, true);\n        }\n\n        const frameworkComponent = this.fwComps[name];\n        if (frameworkComponent) {\n            return createResult(frameworkComponent, true);\n        }\n\n        const jsComponent = this.jsComps[name];\n        if (jsComponent) {\n            const isFwkComp = this.getFrameworkOverrides().isFrameworkComponent(jsComponent);\n            return createResult(jsComponent, isFwkComp);\n        }\n\n        const defaultComponent = this.agGridDefaults[name];\n        if (defaultComponent) {\n            return createResult(defaultComponent, false);\n        }\n\n        if (Object.keys(this.agGridDefaults).indexOf(name) < 0) {\n            console.warn(`AG Grid: Looking for component [${name}] but it wasn't found.`);\n        }\n\n        return null;\n    }\n\n    private translateIfDeprecated(raw: string): string {\n        const deprecatedInfo = this.agDeprecatedNames[raw];\n\n        if (deprecatedInfo != null) {\n            doOnce(() => {\n                console.warn(`ag-grid. Since v15.0 component names have been renamed to be namespaced. You should rename ${deprecatedInfo.propertyHolder}:${raw} to ${deprecatedInfo.propertyHolder}:${deprecatedInfo.newComponentName}`);\n            }, 'DEPRECATE_COMPONENT_' + raw);\n\n            return deprecatedInfo.newComponentName;\n        }\n\n        return raw;\n    }\n}\n","export interface ComponentType {\n    propertyName: string;\n    cellRenderer: boolean;\n}\n\nexport const DateComponent: ComponentType = {\n    propertyName: 'dateComponent',\n    cellRenderer: false\n};\n\nexport const HeaderComponent: ComponentType = {\n    propertyName: 'headerComponent',\n    cellRenderer: false\n};\n\nexport const HeaderGroupComponent: ComponentType = {\n    propertyName: 'headerGroupComponent',\n    cellRenderer: false\n};\n\nexport const CellRendererComponent: ComponentType = {\n    propertyName: 'cellRenderer',\n    cellRenderer: true\n};\n\nexport const CellEditorComponent: ComponentType = {\n    propertyName: 'cellEditor',\n    cellRenderer: false\n};\n\nexport const InnerRendererComponent: ComponentType = {\n    propertyName: 'innerRenderer',\n    cellRenderer: true\n};\n\nexport const LoadingOverlayComponent: ComponentType = {\n    propertyName: 'loadingOverlayComponent',\n    cellRenderer: false\n};\n\nexport const NoRowsOverlayComponent: ComponentType = {\n    propertyName: 'noRowsOverlayComponent',\n    cellRenderer: false\n};\n\nexport const TooltipComponent: ComponentType = {\n    propertyName: 'tooltipComponent',\n    cellRenderer: false\n};\n\nexport const FilterComponent: ComponentType = {\n    propertyName: 'filter',\n    cellRenderer: false\n};\n\nexport const FloatingFilterComponent: ComponentType = {\n    propertyName: 'floatingFilterComponent',\n    cellRenderer: false\n};\n\nexport const ToolPanelComponent: ComponentType = {\n    propertyName: 'toolPanel',\n    cellRenderer: false\n};\n\nexport const StatusPanelComponent: ComponentType = {\n    propertyName: 'statusPanel',\n    cellRenderer: false\n};\n\nexport const FullWidth: ComponentType = {\n    propertyName: 'fullWidthCellRenderer',\n    cellRenderer: true\n};\n\nexport const FullWidthLoading: ComponentType = {\n    propertyName: 'loadingCellRenderer',\n    cellRenderer: true\n};\n\nexport const FullWidthGroup: ComponentType = {\n    propertyName: 'groupRowRenderer',\n    cellRenderer: true\n};\n\nexport const FullWidthDetail: ComponentType = {\n    propertyName: 'detailCellRenderer',\n    cellRenderer: true\n};\n","export class FloatingFilterMapper {\n    private static filterToFloatingFilterMapping: { [p: string]: string; } = {\n        set: 'agSetColumnFloatingFilter',\n        agSetColumnFilter: 'agSetColumnFloatingFilter',\n\n        multi: 'agMultiColumnFloatingFilter',\n        agMultiColumnFilter: 'agMultiColumnFloatingFilter',\n\n        number: 'agNumberColumnFloatingFilter',\n        agNumberColumnFilter: 'agNumberColumnFloatingFilter',\n\n        date: 'agDateColumnFloatingFilter',\n        agDateColumnFilter: 'agDateColumnFloatingFilter',\n\n        text: 'agTextColumnFloatingFilter',\n        agTextColumnFilter: 'agTextColumnFloatingFilter'\n    };\n\n    public static getFloatingFilterType(filterType: string): string {\n        return this.filterToFloatingFilterMapping[filterType];\n    }\n}\n","import { BeanStub } from \"../../context/beanStub\";\nimport { Autowired, Bean, Optional } from \"../../context/context\";\nimport { CellEditorSelectorFunc, CellEditorSelectorResult, CellRendererSelectorFunc, ColDef, ColGroupDef } from \"../../entities/colDef\";\nimport { GridOptions } from \"../../entities/gridOptions\";\nimport { ToolPanelDef } from \"../../entities/sideBar\";\nimport { IFloatingFilterParams } from \"../../filter/floating/floatingFilter\";\nimport { IHeaderParams } from \"../../headerRendering/cells/column/headerComp\";\nimport { IHeaderGroupParams } from \"../../headerRendering/cells/columnGroup/headerGroupComp\";\nimport { ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { IFilterDef, IFilterParams } from \"../../interfaces/iFilter\";\nimport { IRichCellEditorParams } from \"../../interfaces/iRichCellEditorParams\";\nimport { ISetFilterParams } from \"../../interfaces/iSetFilter\";\nimport { IStatusPanelParams, StatusPanelDef } from \"../../interfaces/iStatusPanel\";\nimport { IToolPanelParams } from \"../../interfaces/iToolPanel\";\nimport { GroupCellRendererParams } from \"../../rendering/cellRenderers/groupCellRendererCtrl\";\nimport { ICellRendererParams, ISetFilterCellRendererParams } from \"../../rendering/cellRenderers/iCellRenderer\";\nimport { IDateParams } from \"../../rendering/dateComponent\";\nimport { ILoadingOverlayParams } from \"../../rendering/overlays/loadingOverlayComponent\";\nimport { INoRowsOverlayParams } from \"../../rendering/overlays/noRowsOverlayComponent\";\nimport { ITooltipParams } from \"../../rendering/tooltipComponent\";\nimport { AgPromise } from \"../../utils\";\nimport { mergeDeep } from '../../utils/object';\nimport { AgComponentUtils } from \"./agComponentUtils\";\nimport { ComponentMetadata, ComponentMetadataProvider } from \"./componentMetadataProvider\";\nimport {\n    CellEditorComponent,\n    CellRendererComponent,\n    ComponentType,\n    DateComponent,\n    FilterComponent,\n    FloatingFilterComponent,\n    FullWidth,\n    FullWidthDetail,\n    FullWidthGroup,\n    FullWidthLoading,\n    HeaderComponent,\n    HeaderGroupComponent,\n    InnerRendererComponent,\n    LoadingOverlayComponent,\n    NoRowsOverlayComponent,\n    StatusPanelComponent,\n    ToolPanelComponent,\n    TooltipComponent\n} from \"./componentTypes\";\nimport { FrameworkComponentWrapper } from \"./frameworkComponentWrapper\";\nimport { UserComponentRegistry } from \"./userComponentRegistry\";\nimport { FloatingFilterMapper } from '../../filter/floating/floatingFilterMapper';\nimport { ModuleNames } from '../../modules/moduleNames';\nimport { ModuleRegistry } from '../../modules/moduleRegistry';\nimport { doOnce } from \"../../utils/function\";\nimport { AgGridCommon, WithoutGridCommon } from \"../../interfaces/iCommon\";\n\nexport type DefinitionObject =\n    GridOptions\n    | ColDef\n    | ColGroupDef\n    | IFilterDef\n    | ISetFilterParams\n    | IRichCellEditorParams\n    | ToolPanelDef\n    | StatusPanelDef;\n\nexport interface UserCompDetails {\n    componentClass: any;\n    componentFromFramework: boolean;\n    params: any;\n    type: ComponentType;\n    popupFromSelector?: boolean,\n    popupPositionFromSelector?: string,\n    newAgStackInstance: () => AgPromise<any>;\n}\n\nconst ANNOTATIONS = '__annotations__';\n\n@Bean('userComponentFactory')\nexport class UserComponentFactory extends BeanStub {\n\n    @Autowired('gridOptions') private readonly gridOptions: GridOptions;\n    @Autowired('agComponentUtils') private readonly agComponentUtils: AgComponentUtils;\n    @Autowired('componentMetadataProvider') private readonly componentMetadataProvider: ComponentMetadataProvider;\n    @Autowired('userComponentRegistry') private readonly userComponentRegistry: UserComponentRegistry;\n    @Optional('frameworkComponentWrapper') private readonly frameworkComponentWrapper: FrameworkComponentWrapper;\n\n    public getHeaderCompDetails(colDef: ColDef, params: WithoutGridCommon<IHeaderParams>): UserCompDetails | undefined {\n        return this.getCompDetails(colDef, HeaderComponent, 'agColumnHeader', params);\n    }\n\n    public getHeaderGroupCompDetails(params: WithoutGridCommon<IHeaderGroupParams>): UserCompDetails | undefined {\n        const colGroupDef = params.columnGroup.getColGroupDef()!;\n        return this.getCompDetails(colGroupDef, HeaderGroupComponent, 'agColumnGroupHeader', params);\n    }\n\n    // this one is unusual, as it can be LoadingCellRenderer, DetailCellRenderer, FullWidthCellRenderer or GroupRowRenderer.\n    // so we have to pass the type in.\n    public getFullWidthCellRendererDetails(params: WithoutGridCommon<ICellRendererParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, FullWidth, null, params, true)!;\n    }\n\n    public getFullWidthLoadingCellRendererDetails(params: WithoutGridCommon<ICellRendererParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, FullWidthLoading, 'agLoadingCellRenderer', params, true)!;\n    }\n\n    public getFullWidthGroupCellRendererDetails(params: WithoutGridCommon<ICellRendererParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, FullWidthGroup, 'agGroupRowRenderer', params, true)!;\n    }\n\n    public getFullWidthDetailCellRendererDetails(params: WithoutGridCommon<ICellRendererParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, FullWidthDetail, 'agDetailCellRenderer', params, true)!;\n    }\n\n    // CELL RENDERER\n    public getInnerRendererDetails(def: GroupCellRendererParams, params: WithoutGridCommon<ICellRendererParams>): UserCompDetails | undefined {\n        return this.getCompDetails(def, InnerRendererComponent, null, params);\n    }\n    public getFullWidthGroupRowInnerCellRenderer(def: any, params: WithoutGridCommon<ICellRendererParams>): UserCompDetails | undefined {\n        return this.getCompDetails(def, InnerRendererComponent, null, params);\n    }\n    public getCellRendererDetails(def: ColDef | IRichCellEditorParams, params: WithoutGridCommon<ICellRendererParams>): UserCompDetails | undefined {\n        return this.getCompDetails(def, CellRendererComponent, null, params);\n    }\n\n    // CELL EDITOR\n    public getCellEditorDetails(def: ColDef, params: WithoutGridCommon<ICellEditorParams>): UserCompDetails | undefined {\n        return this.getCompDetails(def, CellEditorComponent, 'agCellEditor', params, true);\n    }\n\n    // FILTER\n    public getFilterDetails(def: IFilterDef, params: WithoutGridCommon<IFilterParams>, defaultFilter: string): UserCompDetails | undefined {\n        return this.getCompDetails(def, FilterComponent, defaultFilter, params, true);\n    }\n\n    public getDateCompDetails(params: WithoutGridCommon<IDateParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, DateComponent, 'agDateInput', params, true)!;\n    }\n\n    public getLoadingOverlayCompDetails(params: WithoutGridCommon<ILoadingOverlayParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, LoadingOverlayComponent, 'agLoadingOverlay', params, true)!;\n    }\n\n    public getNoRowsOverlayCompDetails(params: WithoutGridCommon<INoRowsOverlayParams>): UserCompDetails {\n        return this.getCompDetails(this.gridOptions, NoRowsOverlayComponent, 'agNoRowsOverlay', params, true)!;\n    }\n\n    public getTooltipCompDetails(params: WithoutGridCommon<ITooltipParams>): UserCompDetails {\n        return this.getCompDetails(params.colDef!, TooltipComponent, 'agTooltipComponent', params, true)!;\n    }\n\n    public getSetFilterCellRendererDetails(def: ISetFilterParams, params: WithoutGridCommon<ISetFilterCellRendererParams>): UserCompDetails | undefined {\n        return this.getCompDetails(def, CellRendererComponent, null, params);\n    }\n\n    public getFloatingFilterCompDetails(def: IFilterDef, params: WithoutGridCommon<IFloatingFilterParams<any>>, defaultFloatingFilter: string | null): UserCompDetails | undefined {\n        return this.getCompDetails(def, FloatingFilterComponent, defaultFloatingFilter, params);\n    }\n\n    public getToolPanelCompDetails(toolPanelDef: ToolPanelDef, params: WithoutGridCommon<IToolPanelParams>): UserCompDetails {\n        return this.getCompDetails(toolPanelDef, ToolPanelComponent, null, params, true)!;\n    }\n\n    public getStatusPanelCompDetails(def: StatusPanelDef, params: WithoutGridCommon<IStatusPanelParams>): UserCompDetails {\n        return this.getCompDetails(def, StatusPanelComponent, null, params, true)!;\n    }\n\n    private getCompDetails(defObject: DefinitionObject, type: ComponentType, defaultName: string | null | undefined, params: any, mandatory = false): UserCompDetails | undefined {\n\n        const { propertyName, cellRenderer } = type;\n\n        let { compName, jsComp, fwComp, paramsFromSelector, popupFromSelector, popupPositionFromSelector } = this.getCompKeys(defObject, type, params);\n\n        const lookupFromRegistry = (key: string) => {\n            const item = this.userComponentRegistry.retrieve(key);\n            if (item) {\n                jsComp = !item.componentFromFramework ? item.component : undefined;\n                fwComp = item.componentFromFramework ? item.component : undefined;\n            }\n        };\n\n        // if compOption is a string, means we need to look the item up\n        if (compName != null) {\n            lookupFromRegistry(compName);\n        }\n\n        // if lookup brought nothing back, and we have a default, lookup the default\n        if (jsComp == null && fwComp == null && defaultName != null) {\n            lookupFromRegistry(defaultName);\n        }\n\n        // if we have a comp option, and it's a function, replace it with an object equivalent adaptor\n        if (jsComp && cellRenderer && !this.agComponentUtils.doesImplementIComponent(jsComp)) {\n            jsComp = this.agComponentUtils.adaptFunction(propertyName, jsComp);\n        }\n\n        if (!jsComp && !fwComp) {\n            if (mandatory) {\n                console.error(`Could not find component ${compName}, did you forget to configure this component?`);\n            }\n            return;\n        }\n\n        const paramsMerged = this.mergeParamsWithApplicationProvidedParams(defObject, type, params, paramsFromSelector);\n\n        const componentFromFramework = jsComp == null;\n        const componentClass = jsComp ? jsComp : fwComp;\n\n        return {\n            componentFromFramework,\n            componentClass,\n            params: paramsMerged,\n            type: type,\n            popupFromSelector,\n            popupPositionFromSelector,\n            newAgStackInstance: () => this.newAgStackInstance(componentClass, componentFromFramework, paramsMerged, type)\n        };\n    }\n\n    private getCompKeys(defObject: DefinitionObject, type: ComponentType, params?: any): {\n        compName?: string,\n        jsComp: any,\n        fwComp: any,\n        paramsFromSelector: any,\n        popupFromSelector?: boolean,\n        popupPositionFromSelector?: string\n    } {\n\n        const { propertyName } = type;\n\n        let compName: string | undefined;\n        let jsComp: any;\n        let fwComp: any;\n\n        let paramsFromSelector: any;\n        let popupFromSelector: boolean | undefined;\n        let popupPositionFromSelector: string | undefined;\n\n        // there are two types of js comps, class based and func based. we can only check for\n        // class based, by checking if getGui() exists. no way to differentiate js func based vs eg react func based\n        // const isJsClassComp = (comp: any) => this.agComponentUtils.doesImplementIComponent(comp);\n        // const fwActive = this.frameworkComponentWrapper != null;\n\n        // pull from defObject if available\n        if (defObject) {\n            const defObjectAny = defObject as any;\n\n            // if selector, use this\n            const selectorFunc: CellEditorSelectorFunc | CellRendererSelectorFunc = defObjectAny[propertyName + 'Selector'];\n            const selectorRes = selectorFunc ? selectorFunc(params) : null;\n\n            const assignComp = (providedJsComp: any, providedFwComp: any) => {\n\n                const xxxFrameworkDeprecatedWarn = () => {\n                    const warningMessage = `AG Grid: As of v27, the property ${propertyName}Framework is deprecated. The property ${propertyName} can now be used for JavaScript AND Framework Components.`;\n                    doOnce(() => console.warn(warningMessage), `UserComponentFactory.${propertyName}FrameworkDeprecated`);\n                };\n\n                if (typeof providedJsComp === 'string') {\n                    compName = providedJsComp as string;\n                } else if (typeof providedFwComp === 'string') {\n                    xxxFrameworkDeprecatedWarn();\n                    compName = providedFwComp as string;\n                    // comp===true for filters, which means use the default comp\n                } else if (providedJsComp != null && providedJsComp !== true) {\n                    const isFwkComp = this.getFrameworkOverrides().isFrameworkComponent(providedJsComp);\n                    if (isFwkComp) {\n                        fwComp = providedJsComp;\n                    } else {\n                        jsComp = providedJsComp;\n                    }\n                } else if (providedFwComp != null) {\n                    xxxFrameworkDeprecatedWarn();\n                    fwComp = providedFwComp;\n                }\n            };\n\n            if (selectorRes) {\n                if (selectorRes.frameworkComponent != null) {\n                    const warningMessage = `AG Grid: As of v27, the return for ${propertyName}Selector has attributes [component, params] only. The attribute frameworkComponent is deprecated. You should now return back Framework Components using the 'component' attribute and the grid works out if it's a framework component or not.`;\n                    doOnce(() => console.warn(warningMessage), `UserComponentFactory.${propertyName}FrameworkSelectorDeprecated`);\n                    assignComp(selectorRes.frameworkComponent, undefined);\n                } else {\n                    assignComp(selectorRes.component, undefined);\n                }\n                paramsFromSelector = selectorRes.params;\n                popupFromSelector = (selectorRes as CellEditorSelectorResult).popup;\n                popupPositionFromSelector = (selectorRes as CellEditorSelectorResult).popupPosition;\n            } else {\n                // if no selector, or result of selector is empty, take from defObject\n                assignComp(defObjectAny[propertyName], defObjectAny[propertyName + 'Framework']);\n            }\n        }\n\n        return { compName, jsComp, fwComp, paramsFromSelector, popupFromSelector, popupPositionFromSelector };\n    }\n\n    private newAgStackInstance(\n        ComponentClass: any,\n        componentFromFramework: boolean,\n        params: any,\n        type: ComponentType\n    ): AgPromise<any> {\n        const propertyName = type.propertyName;\n        const jsComponent = !componentFromFramework;\n        // using javascript component\n        let instance: any;\n\n        if (jsComponent) {\n            instance = new ComponentClass();\n        } else {\n            // Using framework component\n            const thisComponentConfig: ComponentMetadata = this.componentMetadataProvider.retrieve(propertyName);\n            instance = this.frameworkComponentWrapper.wrap(\n                ComponentClass,\n                thisComponentConfig.mandatoryMethodList,\n                thisComponentConfig.optionalMethodList,\n                type\n            );\n        }\n\n        const deferredInit = this.initComponent(instance, params);\n\n        if (deferredInit == null) {\n            return AgPromise.resolve(instance);\n        }\n        return (deferredInit as AgPromise<void>).then(() => instance);\n    }\n\n    // used by Floating Filter\n    public mergeParamsWithApplicationProvidedParams(\n        defObject: DefinitionObject,\n        type: ComponentType,\n        paramsFromGrid: any,\n        paramsFromSelector: any = null\n    ): any {\n        const params: AgGridCommon = {\n            context: this.gridOptionsWrapper.getContext(),\n            columnApi: this.gridOptionsWrapper.getColumnApi()!,\n            api: this.gridOptionsWrapper.getApi()!\n        };\n\n        mergeDeep(params, paramsFromGrid);\n\n        // pull user params from either the old prop name and new prop name\n        // eg either cellRendererParams and cellCompParams\n        const defObjectAny = defObject as any;\n        const userParams = defObjectAny && defObjectAny[type.propertyName + 'Params'];\n\n        if (typeof userParams === 'function') {\n            const userParamsFromFunc = userParams(paramsFromGrid);\n            mergeDeep(params, userParamsFromFunc);\n        } else if (typeof userParams === 'object') {\n            mergeDeep(params, userParams);\n        }\n\n        mergeDeep(params, paramsFromSelector);\n\n        return params;\n    }\n\n    private initComponent(component: any, params: any): AgPromise<void> | void {\n        this.context.createBean(component);\n        if (component.init == null) { return; }\n        return component.init(params);\n    }\n\n    public getDefaultFloatingFilterType(def: IFilterDef): string | null {\n        if (def == null) { return null; }\n\n        let defaultFloatingFilterType: string | null = null;\n\n        let { compName, jsComp, fwComp }\n            = this.getCompKeys(def, FilterComponent);\n\n        if (compName) {\n            // will be undefined if not in the map\n            defaultFloatingFilterType = FloatingFilterMapper.getFloatingFilterType(compName);\n        } else {\n            const usingDefaultFilter = (jsComp == null && fwComp == null) && (def.filter === true);\n            if (usingDefaultFilter) {\n                const setFilterModuleLoaded = ModuleRegistry.isRegistered(ModuleNames.SetFilterModule);\n                defaultFloatingFilterType = setFilterModuleLoaded ? 'agSetColumnFloatingFilter' : 'agTextColumnFloatingFilter';\n            }\n        }\n\n        return defaultFloatingFilterType;\n    }\n}\n","import { Bean, PreDestroy, Autowired, PostConstruct } from \"../context/context\";\nimport { LoggerFactory, Logger } from \"../logger\";\nimport { DragStartedEvent, DragStoppedEvent, Events } from \"../events\";\nimport { ColumnApi } from \"../columns/columnApi\";\nimport { GridApi } from \"../gridApi\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { exists } from \"../utils/generic\";\nimport { removeFromArray } from \"../utils/array\";\nimport { areEventsNear } from \"../utils/mouse\";\nimport { MouseEventService } from \"../gridBodyComp/mouseEventService\";\nimport { isBrowserSafari } from \"../utils/browser\";\n\n/** Adds drag listening onto an element. In AG Grid this is used twice, first is resizing columns,\n * second is moving the columns and column groups around (ie the 'drag' part of Drag and Drop. */\n@Bean('dragService')\nexport class DragService extends BeanStub {\n\n    @Autowired('loggerFactory') private loggerFactory: LoggerFactory;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('mouseEventService') private mouseEventService: MouseEventService;\n\n    private currentDragParams: DragListenerParams | null;\n    private dragging: boolean;\n    private mouseStartEvent: MouseEvent | null;\n    private touchLastTime: Touch | null;\n    private touchStart: Touch | null;\n\n    private logger: Logger;\n\n    private dragEndFunctions: Function[] = [];\n\n    private dragSources: DragSourceAndListener[] = [];\n\n    @PostConstruct\n    private init(): void {\n        this.logger = this.loggerFactory.create('DragService');\n    }\n\n    @PreDestroy\n    private removeAllListeners(): void {\n        this.dragSources.forEach(this.removeListener.bind(this));\n        this.dragSources.length = 0;\n    }\n\n    private removeListener(dragSourceAndListener: DragSourceAndListener): void {\n        const element = dragSourceAndListener.dragSource.eElement;\n        const mouseDownListener = dragSourceAndListener.mouseDownListener;\n        element.removeEventListener('mousedown', mouseDownListener);\n\n        // remove touch listener only if it exists\n        if (dragSourceAndListener.touchEnabled) {\n            const touchStartListener = dragSourceAndListener.touchStartListener;\n            element.removeEventListener('touchstart', touchStartListener!, {passive:true} as any);\n        }\n    }\n\n    public removeDragSource(params: DragListenerParams): void {\n        const dragSourceAndListener = this.dragSources.find(item => item.dragSource === params);\n\n        if (!dragSourceAndListener) { return; }\n\n        this.removeListener(dragSourceAndListener);\n        removeFromArray(this.dragSources, dragSourceAndListener);\n    }\n\n    public isDragging(): boolean {\n        return this.dragging;\n    }\n\n    public addDragSource(params: DragListenerParams, includeTouch: boolean = false): void {\n        const mouseListener = this.onMouseDown.bind(this, params);\n        params.eElement.addEventListener('mousedown', mouseListener);\n\n        let touchListener: ((touchEvent: TouchEvent) => void) | null = null;\n\n        const suppressTouch = this.gridOptionsWrapper.isSuppressTouch();\n\n        if (includeTouch && !suppressTouch) {\n            touchListener = (touchEvent: TouchEvent) => {\n                if (touchEvent.cancelable) { touchEvent.preventDefault(); }\n                this.onTouchStart(params, touchEvent);\n            };\n            params.eElement.addEventListener('touchstart', touchListener, { passive: true });\n        }\n\n        this.dragSources.push({\n            dragSource: params,\n            mouseDownListener: mouseListener,\n            touchStartListener: touchListener,\n            touchEnabled: includeTouch\n        });\n    }\n\n    // gets called whenever mouse down on any drag source\n    private onTouchStart(params: DragListenerParams, touchEvent: TouchEvent): void {\n        this.currentDragParams = params;\n        this.dragging = false;\n\n        const touch = touchEvent.touches[0];\n\n        this.touchLastTime = touch;\n        this.touchStart = touch;\n\n        const touchMoveEvent = (e: TouchEvent) => this.onTouchMove(e, params.eElement);\n        const touchEndEvent = (e: TouchEvent) => this.onTouchUp(e, params.eElement);\n        const documentTouchMove = (e: TouchEvent) => { if (e.cancelable) { e.preventDefault(); } };\n        const target = params.eElement;\n\n        const events = [\n            // Prevents the page document from moving while we are dragging items around.\n            // preventDefault needs to be called in the touchmove listener and never inside the\n            // touchstart, because using touchstart causes the click event to be cancelled on touch devices.\n            { target: document, type: 'touchmove', listener: documentTouchMove, options: { passive: false } },\n            { target, type: 'touchmove', listener: touchMoveEvent, options: { passive: true } },\n            { target, type: 'touchend', listener: touchEndEvent, options: { passive: true} },\n            { target, type: 'touchcancel', listener: touchEndEvent, options: { passive: true} }\n        ];\n        // temporally add these listeners, for the duration of the drag\n        this.addTemporaryEvents(events);\n\n        // see if we want to start dragging straight away\n        if (params.dragStartPixels === 0) {\n            this.onCommonMove(touch, this.touchStart, params.eElement);\n        }\n    }\n\n    // gets called whenever mouse down on any drag source\n    private onMouseDown(params: DragListenerParams, mouseEvent: MouseEvent): void {\n        const e = mouseEvent as any;\n\n        if (params.skipMouseEvent && params.skipMouseEvent(mouseEvent)) {\n            return;\n        }\n\n        // if there are two elements with parent / child relationship, and both are draggable,\n        // when we drag the child, we should NOT drag the parent. an example of this is row moving\n        // and range selection - row moving should get preference when use drags the rowDrag component.\n        if (e._alreadyProcessedByDragService) { return; }\n\n        e._alreadyProcessedByDragService = true;\n\n        // only interested in left button clicks\n        if (mouseEvent.button !== 0) { return; }\n\n        this.currentDragParams = params;\n        this.dragging = false;\n\n        this.mouseStartEvent = mouseEvent;\n\n        const eDocument = this.gridOptionsWrapper.getDocument();\n\n        const mouseMoveEvent = (event: MouseEvent) => this.onMouseMove(event, params.eElement);\n        const mouseUpEvent = (event: MouseEvent) => this.onMouseUp(event, params.eElement);\n        const contextEvent = (event: MouseEvent) => event.preventDefault();\n        const target = eDocument;\n        const events = [\n            { target, type: 'mousemove', listener: mouseMoveEvent },\n            { target, type: 'mouseup', listener: mouseUpEvent },\n            { target, type: 'contextmenu', listener: contextEvent }\n        ];\n        // temporally add these listeners, for the duration of the drag\n        this.addTemporaryEvents(events);\n\n        //see if we want to start dragging straight away\n        if (params.dragStartPixels === 0) {\n            this.onMouseMove(mouseEvent, params.eElement);\n        }\n    }\n\n    private addTemporaryEvents(\n        events: {\n            target: HTMLElement | Document,\n            type: string,\n            listener: (e: MouseEvent | TouchEvent, el: HTMLElement) => void,\n            options?: any\n        }[]\n    ): void {\n        events.forEach((currentEvent) => {\n            const { target, type, listener, options } = currentEvent;\n            target.addEventListener(type, listener as any, options);\n        });\n\n        this.dragEndFunctions.push(() => {\n            events.forEach((currentEvent) => {\n                const { target, type, listener, options } = currentEvent;\n                target.removeEventListener(type, listener as any, options);\n            });\n        });\n    }\n\n    // returns true if the event is close to the original event by X pixels either vertically or horizontally.\n    // we only start dragging after X pixels so this allows us to know if we should start dragging yet.\n    private isEventNearStartEvent(currentEvent: MouseEvent | Touch, startEvent: MouseEvent | Touch): boolean {\n        // by default, we wait 4 pixels before starting the drag\n        const { dragStartPixels } = this.currentDragParams!;\n        const requiredPixelDiff = exists(dragStartPixels) ? dragStartPixels : 4;\n        return areEventsNear(currentEvent, startEvent, requiredPixelDiff);\n    }\n\n    private getFirstActiveTouch(touchList: TouchList): Touch | null {\n        for (let i = 0; i < touchList.length; i++) {\n            if (touchList[i].identifier === this.touchStart!.identifier) {\n                return touchList[i];\n            }\n        }\n        return null;\n    }\n\n    private onCommonMove(currentEvent: MouseEvent | Touch, startEvent: MouseEvent | Touch, el: HTMLElement): void {\n        if (!this.dragging) {\n            // if mouse hasn't travelled from the start position enough, do nothing\n            if (!this.dragging && this.isEventNearStartEvent(currentEvent, startEvent)) { return; }\n\n            this.dragging = true;\n            const event: DragStartedEvent = {\n                type: Events.EVENT_DRAG_STARTED,\n                api: this.gridApi,\n                columnApi: this.columnApi,\n                target: el\n            };\n            this.eventService.dispatchEvent(event);\n\n            this.currentDragParams!.onDragStart(startEvent);\n            // we need ONE drag action at the startEvent, so that we are guaranteed the drop target\n            // at the start gets notified. this is because the drag can start outside of the element\n            // that started it, as the mouse is allowed drag away from the mouse down before it's\n            // considered a drag (the isEventNearStartEvent() above). if we didn't do this, then\n            // it would be possible to click a column by the edge, then drag outside of the drop zone\n            // in less than 4 pixels and the drag officially starts outside of the header but the header\n            // wouldn't be notified of the dragging.\n            this.currentDragParams!.onDragging(startEvent);\n        }\n\n        this.currentDragParams!.onDragging(currentEvent);\n    }\n\n    private onTouchMove(touchEvent: TouchEvent, el: HTMLElement): void {\n        const touch = this.getFirstActiveTouch(touchEvent.touches);\n        if (!touch) { return; }\n\n        // this.___statusPanel.setInfoText(Math.random() + ' onTouchMove preventDefault stopPropagation');\n        this.onCommonMove(touch, this.touchStart!, el);\n    }\n\n    // only gets called after a mouse down - as this is only added after mouseDown\n    // and is removed when mouseUp happens\n    private onMouseMove(mouseEvent: MouseEvent, el: HTMLElement): void {\n        // The event type can be `mousedown` when `dragStartPixels=0`\n        // we should only preventDefault on `mousemove`.\n        if (\n            isBrowserSafari() &&\n            mouseEvent.type === 'mousemove' &&\n            mouseEvent.cancelable &&\n            this.mouseEventService.isEventFromThisGrid(mouseEvent) &&\n            !this.isOverFormFieldElement(mouseEvent)\n         ) {\n            mouseEvent.preventDefault();\n        }\n        this.onCommonMove(mouseEvent, this.mouseStartEvent!, el);\n    }\n\n    private isOverFormFieldElement(mouseEvent: MouseEvent): boolean {\n        const el = mouseEvent.target as HTMLElement | null;\n        const tagName = el?.tagName.toLocaleLowerCase();\n\n        return !!tagName?.match('^a$|textarea|input|select|button');\n    }\n\n    public onTouchUp(touchEvent: TouchEvent, el: HTMLElement): void {\n        let touch = this.getFirstActiveTouch(touchEvent.changedTouches);\n\n        // i haven't worked this out yet, but there is no matching touch\n        // when we get the touch up event. to get around this, we swap in\n        // the last touch. this is a hack to 'get it working' while we\n        // figure out what's going on, why we are not getting a touch in\n        // current event.\n        if (!touch) {\n            touch = this.touchLastTime;\n        }\n\n        // if mouse was left up before we started to move, then this is a tap.\n        // we check this before onUpCommon as onUpCommon resets the dragging\n        // let tap = !this.dragging;\n        // let tapTarget = this.currentDragParams.eElement;\n\n        this.onUpCommon(touch!, el);\n\n        // if tap, tell user\n        // console.log(`${Math.random()} tap = ${tap}`);\n        // if (tap) {\n        //     tapTarget.click();\n        // }\n    }\n\n    public onMouseUp(mouseEvent: MouseEvent, el: HTMLElement): void {\n        this.onUpCommon(mouseEvent, el);\n    }\n\n    public onUpCommon(eventOrTouch: MouseEvent | Touch, el: HTMLElement): void {\n        if (this.dragging) {\n            this.dragging = false;\n            this.currentDragParams!.onDragStop(eventOrTouch);\n            const event: DragStoppedEvent = {\n                type: Events.EVENT_DRAG_STOPPED,\n                api: this.gridApi,\n                columnApi: this.columnApi,\n                target: el\n            };\n            this.eventService.dispatchEvent(event);\n        }\n\n        this.mouseStartEvent = null;\n        this.touchStart = null;\n        this.touchLastTime = null;\n        this.currentDragParams = null;\n\n        this.dragEndFunctions.forEach(func => func());\n        this.dragEndFunctions.length = 0;\n    }\n}\n\ninterface DragSourceAndListener {\n    dragSource: DragListenerParams;\n    mouseDownListener: (mouseEvent: MouseEvent) => void;\n    touchEnabled: boolean;\n    touchStartListener: ((touchEvent: TouchEvent) => void) | null;\n}\n\nexport interface DragListenerParams {\n    /** After how many pixels of dragging should the drag operation start. Default is 4px. */\n    dragStartPixels?: number;\n    /** Dom element to add the drag handling to */\n    eElement: HTMLElement;\n    /** Some places may wish to ignore certain events, eg range selection ignores shift clicks */\n    skipMouseEvent?: (mouseEvent: MouseEvent) => boolean;\n    /** Callback for drag starting */\n    onDragStart: (mouseEvent: MouseEvent | Touch) => void;\n    /** Callback for drag stopping */\n    onDragStop: (mouseEvent: MouseEvent | Touch) => void;\n    /** Callback for mouse move while dragging */\n    onDragging: (mouseEvent: MouseEvent | Touch) => void;\n}\n","import { AgPromise, _ } from '../utils';\nimport { ValueService } from '../valueService/valueService';\nimport { ColumnModel } from '../columns/columnModel';\nimport { ColumnApi } from '../columns/columnApi';\nimport { RowNode } from '../entities/rowNode';\nimport { Column } from '../entities/column';\nimport { Autowired, Bean, PostConstruct, PreDestroy } from '../context/context';\nimport { IRowModel } from '../interfaces/iRowModel';\nimport { ColumnEventType, Events, FilterChangedEvent, FilterModifiedEvent, FilterOpenedEvent } from '../events';\nimport { IFilterComp, IFilter, IFilterParams } from '../interfaces/iFilter';\nimport { ColDef, GetQuickFilterTextParams } from '../entities/colDef';\nimport { GridApi } from '../gridApi';\nimport { UserComponentFactory } from '../components/framework/userComponentFactory';\nimport { ModuleNames } from '../modules/moduleNames';\nimport { ModuleRegistry } from '../modules/moduleRegistry';\nimport { BeanStub } from '../context/beanStub';\nimport { convertToSet } from '../utils/set';\nimport { exists } from '../utils/generic';\nimport { mergeDeep, cloneObject } from '../utils/object';\nimport { loadTemplate } from '../utils/dom';\nimport { RowRenderer } from '../rendering/rowRenderer';\n\nexport type FilterRequestSource = 'COLUMN_MENU' | 'TOOLBAR' | 'NO_UI';\n\n@Bean('filterManager')\nexport class FilterManager extends BeanStub {\n\n    @Autowired('valueService') private valueService: ValueService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('userComponentFactory') private userComponentFactory: UserComponentFactory;\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n\n    public static QUICK_FILTER_SEPARATOR = '\\n';\n\n    private allColumnFilters = new Map<string, FilterWrapper>();\n    private activeAggregateFilters: IFilterComp[] = [];\n    private activeColumnFilters: IFilterComp[] = [];\n\n    private quickFilter: string | null = null;\n    private quickFilterParts: string[] | null = null;\n\n    // this is true when the grid is processing the filter change. this is used by the cell comps, so that they\n    // don't flash when data changes due to filter changes. there is no need to flash when filter changes as the\n    // user is in control, so doesn't make sense to show flashing changes. for example, go to main demo where\n    // this feature is turned off (hack code to always return false for isSuppressFlashingCellsBecauseFiltering(), put in)\n    // 100,000 rows and group by country. then do some filtering. all the cells flash, which is silly.\n    private processingFilterChange = false;\n    private allowShowChangeAfterFilter: boolean;\n\n    @PostConstruct\n    public init(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, () => this.onColumnsChanged());\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, () => this.refreshFiltersForAggregations());\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, () => this.refreshFiltersForAggregations());\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, () => this.refreshFiltersForAggregations());\n\n        this.quickFilter = this.parseQuickFilter(this.gridOptionsWrapper.getQuickFilterText());\n        this.setQuickFilterParts();\n\n        this.allowShowChangeAfterFilter = this.gridOptionsWrapper.isAllowShowChangeAfterFilter();\n    }\n\n    private setQuickFilterParts(): void {\n        this.quickFilterParts = this.quickFilter ? this.quickFilter.split(' ') : null;\n    }\n\n    public setFilterModel(model: { [key: string]: any; }): void {\n        const allPromises: AgPromise<void>[] = [];\n        const previousModel = this.getFilterModel();\n\n        if (model) {\n            // mark the filters as we set them, so any active filters left over we stop\n            const modelKeys = convertToSet(Object.keys(model));\n\n            this.allColumnFilters.forEach((filterWrapper, colId) => {\n                const newModel = model[colId];\n\n                allPromises.push(this.setModelOnFilterWrapper(filterWrapper.filterPromise!, newModel));\n                modelKeys.delete(colId);\n            });\n\n            // at this point, processedFields contains data for which we don't have a filter working yet\n            modelKeys.forEach(colId => {\n                const column = this.columnModel.getPrimaryColumn(colId) || this.columnModel.getGridColumn(colId);\n\n                if (!column) {\n                    console.warn('AG Grid: setFilterModel() - no column found for colId: ' + colId);\n                    return;\n                }\n\n                if (!column.isFilterAllowed()) {\n                    console.warn('AG Grid: setFilterModel() - unable to fully apply model, filtering disabled for colId: ' + colId);\n                    return;\n                }\n\n                const filterWrapper = this.getOrCreateFilterWrapper(column, 'NO_UI');\n                if (!filterWrapper) {\n                    console.warn('AG-Grid: setFilterModel() - unable to fully apply model, unable to create filter for colId: ' + colId);\n                    return;\n                }\n                allPromises.push(this.setModelOnFilterWrapper(filterWrapper.filterPromise!, model[colId]));\n            });\n        } else {\n            this.allColumnFilters.forEach(filterWrapper => {\n                allPromises.push(this.setModelOnFilterWrapper(filterWrapper.filterPromise!, null));\n            });\n        }\n\n        AgPromise.all(allPromises).then(() => {\n            const currentModel = this.getFilterModel();\n\n            const columns: Column[] = [];\n            this.allColumnFilters.forEach((filterWrapper, colId) => {\n                const before = previousModel ? previousModel[colId] : null;\n                const after = currentModel ? currentModel[colId] : null;\n\n                if (!_.jsonEquals(before, after)) {\n                    columns.push(filterWrapper.column);\n                }\n            });\n\n            if (columns.length > 0) {\n                this.onFilterChanged({ columns });\n            }\n        });\n    }\n\n    private setModelOnFilterWrapper(filterPromise: AgPromise<IFilterComp>, newModel: any): AgPromise<void> {\n        return new AgPromise<void>(resolve => {\n            filterPromise.then(filter => {\n                if (typeof filter!.setModel !== 'function') {\n                    console.warn('AG Grid: filter missing setModel method, which is needed for setFilterModel');\n                    resolve();\n                }\n\n                (filter!.setModel(newModel) || AgPromise.resolve()).then(() => resolve());\n            });\n        });\n    }\n\n    public getFilterModel(): { [key: string]: any; } {\n        const result: { [key: string]: any; } = {};\n\n        this.allColumnFilters.forEach((filterWrapper, key) => {\n            // because user can provide filters, we provide useful error checking and messages\n            const filterPromise = filterWrapper.filterPromise;\n            const filter = filterPromise!.resolveNow(null, promiseFilter => promiseFilter);\n\n            if (filter == null) { return null; }\n\n            if (typeof filter.getModel !== 'function') {\n                console.warn('AG Grid: filter API missing getModel method, which is needed for getFilterModel');\n                return;\n            }\n\n            const model = filter.getModel();\n\n            if (exists(model)) {\n                result[key] = model;\n            }\n        });\n\n        return result;\n    }\n\n    public isColumnFilterPresent(): boolean {\n        return this.activeColumnFilters.length > 0;\n    }\n\n    public isAggregateFilterPresent(): boolean {\n        return !!this.activeAggregateFilters.length;\n    }\n\n    private doAggregateFiltersPass(node: RowNode, filterToSkip?: IFilterComp) {\n        return this.doColumnFiltersPass(node, filterToSkip, true);\n    }\n\n    // called by:\n    // 1) onFilterChanged()\n    // 2) onNewRowsLoaded()\n    private updateActiveFilters(): void {\n        this.activeColumnFilters.length = 0;\n        this.activeAggregateFilters.length = 0;\n\n        const isFilterActive = (filter: IFilter | null) => {\n            if (!filter) { return false; } // this never happens, including to avoid compile error\n            if (!filter.isFilterActive) {\n                console.warn('AG Grid: Filter is missing isFilterActive() method');\n                return false;\n            }\n            return filter.isFilterActive();\n        };\n\n        const groupFilterEnabled = !!this.gridOptionsWrapper.getGroupAggFiltering();\n\n        const isAggFilter = (column: Column) => {\n\n            const isSecondary = !column.isPrimary();\n            // the only filters that can appear on secondary columns are groupAgg filters\n            if (isSecondary) { return true; }\n\n            const isShowingPrimaryColumns = !this.columnModel.isPivotActive();\n            const isValueActive = column.isValueActive();\n\n            // primary columns are only ever groupAgg filters if a) value is active and b) showing primary columns\n            if (!isValueActive || !isShowingPrimaryColumns) { return false; }\n            \n            // from here on we know: isPrimary=true, isValueActive=true, isShowingPrimaryColumns=true\n            if (this.columnModel.isPivotMode()) { \n                // primary column is pretending to be a pivot column, ie pivotMode=true, but we are\n                // still showing primary columns\n                return true; \n            } else {\n                // we are not pivoting, so we groupFilter when it's an agg column\n                return groupFilterEnabled;\n            }\n        };\n\n        this.allColumnFilters.forEach(filterWrapper => {\n            if (filterWrapper.filterPromise!.resolveNow(false, isFilterActive)) {\n                const filterComp = filterWrapper.filterPromise!.resolveNow(null, filter => filter);\n                if (isAggFilter(filterWrapper.column)) {\n                    this.activeAggregateFilters.push(filterComp!);\n                } else {\n                    this.activeColumnFilters.push(filterComp!);\n                }\n            }\n        });\n    }\n\n    private updateFilterFlagInColumns(source: ColumnEventType, additionalEventAttributes?: any): void {\n        this.allColumnFilters.forEach(filterWrapper => {\n            const isFilterActive = filterWrapper.filterPromise!.resolveNow(false, filter => filter!.isFilterActive());\n\n            filterWrapper.column.setFilterActive(isFilterActive, source, additionalEventAttributes);\n        });\n    }\n\n    public isAnyFilterPresent(): boolean {\n        return this.isQuickFilterPresent() || this.isColumnFilterPresent() || this.isAggregateFilterPresent() || this.gridOptionsWrapper.isExternalFilterPresent();\n    }\n\n    private doColumnFiltersPass(node: RowNode, filterToSkip?: IFilterComp, targetAggregates?: boolean): boolean {\n        const { data, aggData } = node;\n\n        const targetedFilters = targetAggregates ? this.activeAggregateFilters : this.activeColumnFilters;\n        const targetedData = targetAggregates ? aggData : data;\n        for (let i = 0; i < targetedFilters.length; i++) {\n            const filter = targetedFilters[i];\n\n            if (filter == null || filter === filterToSkip) { continue; }\n\n            if (typeof filter.doesFilterPass !== 'function') {\n                // because users can do custom filters, give nice error message\n                throw new Error('Filter is missing method doesFilterPass');\n            }\n\n            if (!filter.doesFilterPass({ node, data: targetedData })) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private parseQuickFilter(newFilter?: string): string | null {\n        if (!exists(newFilter)) {\n            return null;\n        }\n\n        if (!this.gridOptionsWrapper.isRowModelDefault()) {\n            console.warn('AG Grid - Quick filtering only works with the Client-Side Row Model');\n            return null;\n        }\n\n        return newFilter.toUpperCase();\n    }\n\n    public setQuickFilter(newFilter: string): void {\n        if (newFilter != null && typeof newFilter !== 'string') {\n            console.warn(`AG Grid - setQuickFilter() only supports string inputs, received: ${typeof newFilter}`);\n            return;\n        }\n\n        const parsedFilter = this.parseQuickFilter(newFilter);\n\n        if (this.quickFilter !== parsedFilter) {\n            this.quickFilter = parsedFilter;\n            this.setQuickFilterParts();\n            this.onFilterChanged();\n        }\n    }\n\n    public refreshFiltersForAggregations() {\n        const isAggFiltering = this.gridOptionsWrapper.getGroupAggFiltering();\n        if (isAggFiltering) {\n            this.onFilterChanged();\n        }\n    }\n\n    // sometimes (especially in React) the filter can call onFilterChanged when we are in the middle\n    // of a render cycle. this would be bad, so we wait for render cycle to complete when this happens.\n    // this happens in react when we change React State in the grid (eg setting RowCtrl's in RowContainer)\n    // which results in React State getting applied in the main application, triggering a useEffect() to\n    // be kicked off adn then the application calling the grid's API. in AG-6554, the custom filter was\n    // getting it's useEffect() triggered in this way.\n    public callOnFilterChangedOutsideRenderCycle(params: { filterInstance?: IFilterComp, additionalEventAttributes?: any, columns?: Column[] } = {}): void {\n        const action = () => this.onFilterChanged(params);\n        if (this.rowRenderer.isRefreshInProgress()) {\n            setTimeout(action, 0);\n        } else {\n            action();\n        }\n    }\n\n    public onFilterChanged(params: { filterInstance?: IFilterComp, additionalEventAttributes?: any, columns?: Column[] } = {}): void {\n        const { filterInstance, additionalEventAttributes, columns } = params;\n\n        this.updateActiveFilters();\n        this.updateFilterFlagInColumns('filterChanged', additionalEventAttributes);\n\n        this.allColumnFilters.forEach(filterWrapper => {\n            if (!filterWrapper.filterPromise) { return; }\n            filterWrapper.filterPromise.then(filter => {\n                if (filter && filter !== filterInstance && filter.onAnyFilterChanged) {\n                    filter!.onAnyFilterChanged();\n                }\n            });\n        });\n\n        const filterChangedEvent: FilterChangedEvent = {\n            type: Events.EVENT_FILTER_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            columns: columns || [],\n        };\n\n        if (additionalEventAttributes) {\n            mergeDeep(filterChangedEvent, additionalEventAttributes);\n        }\n\n        // because internal events are not async in ag-grid, when the dispatchEvent\n        // method comes back, we know all listeners have finished executing.\n        this.processingFilterChange = true;\n\n        this.eventService.dispatchEvent(filterChangedEvent);\n\n        this.processingFilterChange = false;\n    }\n\n    public isSuppressFlashingCellsBecauseFiltering(): boolean {\n        // if user has elected to always flash cell changes, then always return false, otherwise we suppress flashing\n        // changes when filtering\n        return !this.allowShowChangeAfterFilter && this.processingFilterChange;\n    }\n\n    public isQuickFilterPresent(): boolean {\n        return this.quickFilter !== null;\n    }\n\n    public doesRowPassOtherFilters(filterToSkip: IFilterComp, node: any): boolean {\n        return this.doesRowPassFilter({ rowNode: node, filterInstanceToSkip: filterToSkip });\n    }\n\n    private doesRowPassQuickFilterNoCache(node: RowNode, filterPart: string): boolean {\n        const columns = this.columnModel.getAllColumnsForQuickFilter();\n\n        return columns.some(column => {\n            const part = this.getQuickFilterTextForColumn(column, node);\n\n            return exists(part) && part.indexOf(filterPart) >= 0;\n        });\n    }\n\n    private doesRowPassQuickFilterCache(node: RowNode, filterPart: string): boolean {\n        if (!node.quickFilterAggregateText) {\n            this.aggregateRowForQuickFilter(node);\n        }\n\n        return node.quickFilterAggregateText!.indexOf(filterPart) >= 0;\n    }\n\n    private doesRowPassQuickFilter(node: RowNode): boolean {\n        const usingCache = this.gridOptionsWrapper.isCacheQuickFilter();\n\n        // each part must pass, if any fails, then the whole filter fails\n        return this.quickFilterParts!.every(part =>\n            usingCache ? this.doesRowPassQuickFilterCache(node, part) : this.doesRowPassQuickFilterNoCache(node, part)\n        );\n    }\n\n    public doesRowPassAggregateFilters(params: {\n        rowNode: RowNode;\n        filterInstanceToSkip?: IFilterComp;\n    }): boolean {\n        if (this.isAggregateFilterPresent() && !this.doAggregateFiltersPass(params.rowNode, params.filterInstanceToSkip)) {\n            return false;\n        }\n\n        // got this far, all filters pass\n        return true;\n    }\n\n    public doesRowPassFilter(params: {\n        rowNode: RowNode,\n        filterInstanceToSkip?: IFilterComp;\n    }): boolean {\n        // the row must pass ALL of the filters, so if any of them fail,\n        // we return true. that means if a row passes the quick filter,\n        // but fails the column filter, it fails overall\n\n        // first up, check quick filter\n        if (this.isQuickFilterPresent() && !this.doesRowPassQuickFilter(params.rowNode)) {\n            return false;\n        }\n\n        // secondly, give the client a chance to reject this row\n        if (this.gridOptionsWrapper.isExternalFilterPresent() && !this.gridOptionsWrapper.doesExternalFilterPass(params.rowNode)) {\n            return false;\n        }\n\n        // lastly, check column filter\n        if (this.isColumnFilterPresent() && !this.doColumnFiltersPass(params.rowNode, params.filterInstanceToSkip)) {\n            return false;\n        }\n\n        // got this far, all filters pass\n        return true;\n    }\n\n    private getQuickFilterTextForColumn(column: Column, node: RowNode): string {\n        let value = this.valueService.getValue(column, node, true);\n        const colDef = column.getColDef();\n\n        if (colDef.getQuickFilterText) {\n            const params: GetQuickFilterTextParams = {\n                value,\n                node,\n                data: node.data,\n                column,\n                colDef,\n                api: this.gridOptionsWrapper.getApi()!,\n                columnApi: this.gridOptionsWrapper.getColumnApi()!,\n                context: this.gridOptionsWrapper.getContext()\n            };\n\n            value = colDef.getQuickFilterText(params);\n        }\n\n        return exists(value) ? value.toString().toUpperCase() : null;\n    }\n\n    private aggregateRowForQuickFilter(node: RowNode): void {\n        const stringParts: string[] = [];\n        const columns = this.columnModel.getAllColumnsForQuickFilter();\n\n        columns.forEach(column => {\n            const part = this.getQuickFilterTextForColumn(column, node);\n\n            if (exists(part)) {\n                stringParts.push(part);\n            }\n        });\n\n        node.quickFilterAggregateText = stringParts.join(FilterManager.QUICK_FILTER_SEPARATOR);\n    }\n\n    public onNewRowsLoaded(source: ColumnEventType): void {\n        this.allColumnFilters.forEach(filterWrapper => {\n            filterWrapper.filterPromise!.then(filter => {\n                if (filter!.onNewRowsLoaded) {\n                    filter!.onNewRowsLoaded();\n                }\n            });\n        });\n\n        this.updateFilterFlagInColumns(source);\n        this.updateActiveFilters();\n    }\n\n    private createValueGetter(column: Column): IFilterParams['valueGetter'] {\n        return ({ node }) => this.valueService.getValue(column, node, true);\n    }\n\n    public getFilterComponent(column: Column, source: FilterRequestSource, createIfDoesNotExist = true): AgPromise<IFilterComp> | null {\n        if (createIfDoesNotExist) {\n            return this.getOrCreateFilterWrapper(column, source)?.filterPromise || null;\n        }\n\n        const filterWrapper = this.cachedFilter(column);\n\n        return filterWrapper ? filterWrapper.filterPromise : null;\n    }\n\n    public isFilterActive(column: Column): boolean {\n        const filterWrapper = this.cachedFilter(column);\n\n        return !!filterWrapper && filterWrapper.filterPromise!.resolveNow(false, filter => filter!.isFilterActive());\n    }\n\n    public getOrCreateFilterWrapper(column: Column, source: FilterRequestSource): FilterWrapper | null {\n        if (!column.isFilterAllowed()) {\n            return null;\n        }\n\n        let filterWrapper = this.cachedFilter(column);\n\n        if (!filterWrapper) {\n            filterWrapper = this.createFilterWrapper(column, source);\n            this.allColumnFilters.set(column.getColId(), filterWrapper);\n        } else if (source !== 'NO_UI') {\n            this.putIntoGui(filterWrapper, source);\n        }\n\n        return filterWrapper;\n    }\n\n    public cachedFilter(column: Column): FilterWrapper | undefined {\n        return this.allColumnFilters.get(column.getColId());\n    }\n\n    private createFilterInstance(column: Column): AgPromise<IFilterComp> | null {\n        const defaultFilter =\n            ModuleRegistry.isRegistered(ModuleNames.SetFilterModule) ? 'agSetColumnFilter' : 'agTextColumnFilter';\n\n        const colDef = column.getColDef();\n\n        let filterInstance: IFilterComp;\n\n        const params: IFilterParams = {\n            ...this.createFilterParams(column, colDef),\n            filterModifiedCallback: () => {\n                const event: FilterModifiedEvent = {\n                    type: Events.EVENT_FILTER_MODIFIED,\n                    api: this.gridApi,\n                    columnApi: this.columnApi,\n                    column,\n                    filterInstance\n                };\n\n                this.eventService.dispatchEvent(event);\n            },\n            filterChangedCallback: (additionalEventAttributes?: any) => {\n                const params = { filterInstance, additionalEventAttributes, columns: [column] };\n                this.callOnFilterChangedOutsideRenderCycle(params);\n            },\n            doesRowPassOtherFilter: node => this.doesRowPassOtherFilters(filterInstance, node),\n        };\n\n        const compDetails = this.userComponentFactory.getFilterDetails(colDef, params, defaultFilter);\n        if (!compDetails) { return null; }\n        const componentPromise = compDetails.newAgStackInstance();\n\n        if (componentPromise) {\n            componentPromise.then(r => filterInstance = r!);\n        }\n\n        return componentPromise;\n    }\n\n    public createFilterParams(column: Column, colDef: ColDef): IFilterParams {\n        const params: IFilterParams = {\n            api: this.gridOptionsWrapper.getApi()!,\n            columnApi: this.gridOptionsWrapper.getColumnApi()!,\n            column,\n            colDef: cloneObject(colDef),\n            rowModel: this.rowModel,\n            filterChangedCallback: () => { },\n            filterModifiedCallback: () => { },\n            valueGetter: this.createValueGetter(column),\n            context: this.gridOptionsWrapper.getContext(),\n            doesRowPassOtherFilter: () => true,\n        };\n\n        return params;\n    }\n\n    private createFilterWrapper(column: Column, source: FilterRequestSource): FilterWrapper {\n        const filterWrapper: FilterWrapper = {\n            column: column,\n            filterPromise: null,\n            compiledElement: null,\n            guiPromise: AgPromise.resolve(null)\n        };\n\n        filterWrapper.filterPromise = this.createFilterInstance(column);\n\n        if (filterWrapper.filterPromise) {\n            this.putIntoGui(filterWrapper, source);\n        }\n\n        return filterWrapper;\n    }\n\n    private putIntoGui(filterWrapper: FilterWrapper, source: FilterRequestSource): void {\n        const eFilterGui = document.createElement('div');\n\n        eFilterGui.className = 'ag-filter';\n\n        filterWrapper.guiPromise = new AgPromise<HTMLElement>(resolve => {\n            filterWrapper.filterPromise!.then(filter => {\n                let guiFromFilter = filter!.getGui();\n\n                if (!exists(guiFromFilter)) {\n                    console.warn(`AG Grid: getGui method from filter returned ${guiFromFilter}, it should be a DOM element or an HTML template string.`);\n                }\n\n                // for backwards compatibility with Angular 1 - we\n                // used to allow providing back HTML from getGui().\n                // once we move away from supporting Angular 1\n                // directly, we can change this.\n                if (typeof guiFromFilter === 'string') {\n                    guiFromFilter = loadTemplate(guiFromFilter as string);\n                }\n\n                eFilterGui.appendChild(guiFromFilter);\n                resolve(eFilterGui);\n\n                this.eventService.dispatchEvent({\n                    type: Events.EVENT_FILTER_OPENED,\n                    column: filterWrapper.column,\n                    source,\n                    eGui: eFilterGui,\n                    api: this.gridApi,\n                    columnApi: this.columnApi\n                } as FilterOpenedEvent);\n            });\n        });\n    }\n\n    private onColumnsChanged(): void {\n        const columns: Column[] = [];\n\n        this.allColumnFilters.forEach((wrapper, colId) => {\n            let currentColumn: Column | null;\n            if (wrapper.column.isPrimary()) {\n                currentColumn = this.columnModel.getPrimaryColumn(colId);\n            } else {\n                currentColumn = this.columnModel.getGridColumn(colId);\n            }\n            if (currentColumn) { return; }\n\n            columns.push(wrapper.column);\n            this.disposeFilterWrapper(wrapper, 'filterDestroyed');\n        });\n\n        if (columns.length > 0) {\n            this.onFilterChanged({ columns });\n        }\n    }\n\n    // destroys the filter, so it not longer takes part\n    public destroyFilter(column: Column, source: ColumnEventType = 'api'): void {\n        const filterWrapper = this.allColumnFilters.get(column.getColId());\n\n        if (filterWrapper) {\n            this.disposeFilterWrapper(filterWrapper, source);\n            this.onFilterChanged({ columns: [column] });\n        }\n    }\n\n    private disposeFilterWrapper(filterWrapper: FilterWrapper, source: ColumnEventType): void {\n        filterWrapper.filterPromise!.then(filter => {\n            (filter!.setModel(null) || AgPromise.resolve()).then(() => {\n                this.getContext().destroyBean(filter);\n\n                filterWrapper.column.setFilterActive(false, source);\n\n                this.allColumnFilters.delete(filterWrapper.column.getColId());\n            });\n        });\n    }\n\n    @PreDestroy\n    protected destroy() {\n        super.destroy();\n        this.allColumnFilters.forEach(filterWrapper => this.disposeFilterWrapper(filterWrapper, 'filterDestroyed'));\n    }\n}\n\nexport interface FilterWrapper {\n    compiledElement: any;\n    column: Column;\n    filterPromise: AgPromise<IFilterComp> | null;\n    guiPromise: AgPromise<HTMLElement | null>;\n}\n","import { ColumnGroup } from \"../../../entities/columnGroup\";\nimport { Column } from \"../../../entities/column\";\nimport { isUserSuppressingHeaderKeyboardEvent } from \"../../../utils/keyboard\";\nimport { Component } from \"../../../widgets/component\";\nimport { Autowired } from \"../../../context/context\";\nimport { FocusService } from \"../../../focusService\";\nimport { AbstractHeaderCellCtrl } from \"./abstractHeaderCellCtrl\";\n\nexport abstract class AbstractHeaderCellComp<T extends AbstractHeaderCellCtrl> extends Component {\n\n    protected ctrl: T;\n\n    constructor(template: string, ctrl: T) {\n        super(template);\n        this.ctrl = ctrl;\n    }\n\n    public getCtrl(): T {\n        return this.ctrl;\n    }\n}","import { UserCompDetails } from \"../../../components/framework/userComponentFactory\";\nimport { PostConstruct } from '../../../context/context';\nimport { IFloatingFilterComp } from '../../../filter/floating/floatingFilter';\nimport { AgPromise } from '../../../utils';\nimport { RefSelector } from '../../../widgets/componentAnnotations';\nimport { AbstractHeaderCellComp } from '../abstractCell/abstractHeaderCellComp';\nimport { HeaderFilterCellCtrl, IHeaderFilterCellComp } from './headerFilterCellCtrl';\n\nexport class HeaderFilterCellComp extends AbstractHeaderCellComp<HeaderFilterCellCtrl> {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-header-cell ag-floating-filter\" role=\"gridcell\" tabindex=\"-1\">\n            <div ref=\"eFloatingFilterBody\" role=\"presentation\"></div>\n            <div class=\"ag-floating-filter-button ag-hidden\" ref=\"eButtonWrapper\" role=\"presentation\">\n                <button type=\"button\" aria-label=\"Open Filter Menu\" class=\"ag-floating-filter-button-button\" ref=\"eButtonShowMainFilter\" tabindex=\"-1\"></button>\n            </div>\n        </div>`;\n\n    @RefSelector('eFloatingFilterBody') private readonly eFloatingFilterBody: HTMLElement;\n    @RefSelector('eButtonWrapper') private readonly eButtonWrapper: HTMLElement;\n    @RefSelector('eButtonShowMainFilter') private readonly eButtonShowMainFilter: HTMLElement;\n\n    private compPromise: AgPromise<IFloatingFilterComp> | null;\n\n    constructor(ctrl: HeaderFilterCellCtrl) {\n        super(HeaderFilterCellComp.TEMPLATE, ctrl);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n\n        const eGui = this.getGui();\n\n        const compProxy: IHeaderFilterCellComp = {\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\n            addOrRemoveBodyCssClass: (cssClassName, on) => this.eFloatingFilterBody.classList.toggle(cssClassName, on),\n            addOrRemoveButtonWrapperCssClass: (cssClassName, on) => this.eButtonWrapper.classList.toggle(cssClassName, on),\n            setCompDetails: compDetails => this.setCompDetails(compDetails),\n            getFloatingFilterComp: () => this.compPromise,\n            setWidth: width => eGui.style.width = width,\n            setMenuIcon: eIcon => this.eButtonShowMainFilter.appendChild(eIcon)\n        };\n\n        this.ctrl.setComp(compProxy, eGui, this.eButtonShowMainFilter, this.eFloatingFilterBody);\n    }\n\n    private setCompDetails(compDetails: UserCompDetails): void {\n        // because we are providing defaultFloatingFilterType, we know it will never be undefined;\n        this.compPromise = compDetails.newAgStackInstance();\n        this.compPromise.then(comp => this.afterCompCreated(comp));\n    }\n\n    private afterCompCreated(comp: IFloatingFilterComp | null): void {\n        if (!comp) { return; }\n\n        this.addDestroyFunc(() => this.context.destroyBean(comp));\n        if (!this.isAlive()) { return; }\n\n        this.eFloatingFilterBody.appendChild(comp.getGui());\n\n        if (comp.afterGuiAttached) {\n            comp.afterGuiAttached();\n        }\n    }\n}\n","export interface ToolPanelDef {\n    /** The unique ID for this panel. Used in the API and elsewhere to refer to the panel. */\n    id: string;\n    /** The key used for localisation for displaying the label. The label is displayed in the tab button. */\n    labelKey: string;\n    /** The default label if `labelKey` is missing or does not map to valid text through localisation. */\n    labelDefault: string;\n    /** The min width of the tool panel. Default: `100` */\n    minWidth?: number;\n    /** The max width of the tool panel. Default: `undefined` */\n    maxWidth?: number;\n    /** The initial width of the tool panel. Default: `$side-bar-panel-width (theme variable)` */\n    width?: number;\n    /** The key of the icon to be used as a graphical aid beside the label in the side bar. */\n    iconKey: string;\n\n    /**\n     * The tool panel component to use as the panel.\n     * The provided panels use components `agColumnsToolPanel` and `agFiltersToolPanel`.\n     * To provide your own custom panel component, you reference it here.\n     */\n    toolPanel?: any;\n    /** @deprecated Same as `toolPanel` but for framework specific components. As of v27, use toolPanel instead for Framework components */\n    toolPanelFramework?: any;\n    /** Customise the parameters provided to the `toolPanel` component. */\n    toolPanelParams?: any;\n}\n\nexport interface SideBarDef {\n    /**\n     * A list of all the panels to place in the side bar. The panels will be displayed in the provided order from top to bottom.\n     */\n    toolPanels?: (ToolPanelDef | string)[];\n    /** The panel (identified by ID) to open by default. If none specified, the side bar is initially displayed closed. */\n    defaultToolPanel?: string;\n    /** To hide the side bar by default, set this to `true`. If left undefined the side bar will be shown. */\n    hiddenByDefault?: boolean;\n    /** Sets the side bar position relative to the grid. */\n    position?: 'left' | 'right';\n}\n\nexport class SideBarDefParser {\n    static readonly DEFAULT_COLUMN_COMP: ToolPanelDef = {\n        id: 'columns',\n        labelDefault: 'Columns',\n        labelKey: 'columns',\n        iconKey: 'columns',\n        toolPanel: 'agColumnsToolPanel',\n    };\n\n    static readonly DEFAULT_FILTER_COMP: ToolPanelDef = {\n        id: 'filters',\n        labelDefault: 'Filters',\n        labelKey: 'filters',\n        iconKey: 'filter',\n        toolPanel: 'agFiltersToolPanel',\n    };\n\n    static readonly DEFAULT_BY_KEY: { [p: string]: ToolPanelDef } = {\n        columns: SideBarDefParser.DEFAULT_COLUMN_COMP,\n        filters: SideBarDefParser.DEFAULT_FILTER_COMP\n    };\n\n    static parse(toParse: SideBarDef | string | string[] | boolean): SideBarDef | null {\n        if (!toParse) { return null; }\n        if (toParse === true) {\n            return {\n                toolPanels: [\n                    SideBarDefParser.DEFAULT_COLUMN_COMP,\n                    SideBarDefParser.DEFAULT_FILTER_COMP,\n                ],\n                defaultToolPanel: 'columns'\n            };\n        }\n\n        if (typeof toParse === 'string') { return SideBarDefParser.parse([toParse]); }\n\n        if (Array.isArray(toParse)) {\n            const comps: ToolPanelDef[] = [];\n            toParse.forEach(key => {\n                const lookupResult = SideBarDefParser.DEFAULT_BY_KEY[key];\n                if (!lookupResult) {\n                    console.warn(`AG Grid: the key ${key} is not a valid key for specifying a tool panel, valid keys are: ${Object.keys(SideBarDefParser.DEFAULT_BY_KEY).join(',')}`);\n                    return;\n                }\n\n                comps.push(lookupResult);\n            });\n\n            if (comps.length === 0) {\n                return null;\n            }\n\n            return {\n                toolPanels: comps,\n                defaultToolPanel: comps[0].id\n            };\n        }\n\n        const result: SideBarDef = {\n            toolPanels: SideBarDefParser.parseComponents(toParse.toolPanels),\n            defaultToolPanel: toParse.defaultToolPanel,\n            hiddenByDefault: toParse.hiddenByDefault,\n            position: toParse.position\n        };\n\n        return result;\n    }\n\n    static parseComponents(from?: (ToolPanelDef | string)[]): ToolPanelDef[] {\n        const result: ToolPanelDef[] = [];\n\n        if (!from) { return result; }\n\n        from.forEach((it: ToolPanelDef | string) => {\n            let toAdd: ToolPanelDef | null = null;\n            if (typeof it === 'string') {\n                const lookupResult = SideBarDefParser.DEFAULT_BY_KEY[it];\n                if (!lookupResult) {\n                    console.warn(`AG Grid: the key ${it} is not a valid key for specifying a tool panel, valid keys are: ${Object.keys(SideBarDefParser.DEFAULT_BY_KEY).join(',')}`);\n                    return;\n                }\n\n                toAdd = lookupResult;\n            } else {\n                toAdd = it;\n            }\n\n            result.push(toAdd);\n        });\n\n        return result;\n    }\n}","import { ColumnApi } from './columns/columnApi';\nimport { ColDefUtil } from './components/colDefUtil';\nimport { ComponentUtil } from './components/componentUtil';\nimport { Constants } from './constants/constants';\nimport { Autowired, Bean, PostConstruct, PreDestroy, Qualifier } from './context/context';\nimport { ColDef, ColGroupDef, IAggFunc, SuppressKeyboardEventParams } from './entities/colDef';\nimport { GridOptions, RowGroupingDisplayType, TreeDataDisplayType } from './entities/gridOptions';\nimport { GetGroupAggFilteringParams, GetGroupRowAggParams, GetLocaleTextParams, GetRowIdParams, InitialGroupOrderComparatorParams, IsFullWidthRowParams, PostSortRowsParams, RowHeightParams } from './entities/iCallbackParams';\nimport { RowNode } from './entities/rowNode';\nimport { SideBarDef, SideBarDefParser } from './entities/sideBar';\nimport { Environment, SASS_PROPERTIES } from './environment';\nimport { Events } from './eventKeys';\nimport { AgEvent } from './events';\nimport { EventService } from './eventService';\nimport { GridApi } from './gridApi';\nimport { CsvExportParams } from './interfaces/exportParams';\nimport { AgChartTheme, AgChartThemeOverrides } from \"./interfaces/iAgChartOptions\";\nimport { AgGridCommon, WithoutGridCommon } from './interfaces/iCommon';\nimport { IDatasource } from './interfaces/iDatasource';\nimport { ExcelExportParams } from './interfaces/iExcelCreator';\nimport { IServerSideDatasource } from './interfaces/iServerSideDatasource';\nimport { IViewportDatasource } from './interfaces/iViewportDatasource';\nimport { ModuleNames } from './modules/moduleNames';\nimport { ModuleRegistry } from './modules/moduleRegistry';\nimport { PropertyKeys } from './propertyKeys';\nimport { getScrollbarWidth } from './utils/browser';\nimport { doOnce } from './utils/function';\nimport { fuzzyCheckStrings } from './utils/fuzzyMatch';\nimport { exists, missing, values } from './utils/generic';\nimport { isNumeric } from './utils/number';\nimport { iterateObject } from './utils/object';\nimport { capitalise } from './utils/string';\n\nconst DEFAULT_ROW_HEIGHT = 25;\nconst DEFAULT_DETAIL_ROW_HEIGHT = 300;\nconst DEFAULT_VIEWPORT_ROW_MODEL_PAGE_SIZE = 5;\nconst DEFAULT_VIEWPORT_ROW_MODEL_BUFFER_SIZE = 5;\nconst DEFAULT_KEEP_DETAIL_ROW_COUNT = 10;\n\nfunction isTrue(value: any): boolean {\n    return value === true || value === 'true';\n}\n\nfunction toNumber(value: any): number | undefined {\n    if (typeof value == 'number') {\n        return value;\n    }\n\n    if (typeof value == 'string') {\n        return parseInt(value, 10);\n    }\n}\n\nfunction zeroOrGreater(value: any, defaultValue: number): number {\n    if (value >= 0) { return value; }\n\n    // zero gets returned if number is missing or the wrong type\n    return defaultValue;\n}\n\nfunction oneOrGreater(value: any, defaultValue?: number): number | undefined {\n    const valueNumber = parseInt(value, 10);\n\n    if (isNumeric(valueNumber) && valueNumber > 0) {\n        return valueNumber;\n    }\n\n    return defaultValue;\n}\n\nexport interface PropertyChangedEvent extends AgEvent {\n    currentValue: any;\n    previousValue: any;\n}\n\n@Bean('gridOptionsWrapper')\nexport class GridOptionsWrapper {\n    private static MIN_COL_WIDTH = 10;\n\n    public static PROP_HEADER_HEIGHT = 'headerHeight';\n    public static PROP_GROUP_REMOVE_SINGLE_CHILDREN = 'groupRemoveSingleChildren';\n    public static PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN = 'groupRemoveLowestSingleChildren';\n    public static PROP_PIVOT_HEADER_HEIGHT = 'pivotHeaderHeight';\n    public static PROP_SUPPRESS_CLIPBOARD_PASTE = 'suppressClipboardPaste';\n\n    public static PROP_GROUP_HEADER_HEIGHT = 'groupHeaderHeight';\n    public static PROP_PIVOT_GROUP_HEADER_HEIGHT = 'pivotGroupHeaderHeight';\n\n    public static PROP_NAVIGATE_TO_NEXT_CELL = 'navigateToNextCell';\n    public static PROP_TAB_TO_NEXT_CELL = 'tabToNextCell';\n    public static PROP_NAVIGATE_TO_NEXT_HEADER = 'navigateToNextHeader';\n    public static PROP_TAB_TO_NEXT_HEADER = 'tabToNextHeader';\n\n    public static PROP_IS_EXTERNAL_FILTER_PRESENT = 'isExternalFilterPresent';\n    public static PROP_DOES_EXTERNAL_FILTER_PASS = 'doesExternalFilterPass';\n\n    public static PROP_FLOATING_FILTERS_HEIGHT = 'floatingFiltersHeight';\n\n    public static PROP_SUPPRESS_ROW_CLICK_SELECTION = 'suppressRowClickSelection';\n    public static PROP_SUPPRESS_ROW_DRAG = 'suppressRowDrag';\n    public static PROP_SUPPRESS_MOVE_WHEN_ROW_DRAG = 'suppressMoveWhenRowDragging';\n\n    public static PROP_GET_ROW_CLASS = 'getRowClass';\n    public static PROP_GET_ROW_STYLE = 'getRowStyle';\n\n    public static PROP_GET_ROW_HEIGHT = 'getRowHeight';\n\n    public static PROP_POPUP_PARENT = 'popupParent';\n\n    public static PROP_DOM_LAYOUT = 'domLayout';\n    public static PROP_ROW_CLASS = 'rowClass';\n\n    public static PROP_FILL_HANDLE_DIRECTION = 'fillHandleDirection';\n\n    public static PROP_GROUP_ROW_AGG_NODES = 'groupRowAggNodes';\n    public static PROP_GET_GROUP_ROW_AGG = 'getGroupRowAgg';\n    public static PROP_GET_BUSINESS_KEY_FOR_NODE = 'getBusinessKeyForNode';\n    public static PROP_GET_CHILD_COUNT = 'getChildCount';\n    public static PROP_PROCESS_ROW_POST_CREATE = 'processRowPostCreate';\n    public static PROP_GET_ROW_NODE_ID = 'getRowNodeId';\n    public static PROP_GET_ROW_ID = 'getRowId';\n    public static PROP_IS_FULL_WIDTH_CELL = 'isFullWidthCell';\n    public static PROP_IS_FULL_WIDTH_ROW = 'isFullWidthRow';\n    public static PROP_IS_ROW_SELECTABLE = 'isRowSelectable';\n    public static PROP_IS_ROW_MASTER = 'isRowMaster';\n    public static PROP_POST_SORT = 'postSort';\n    public static PROP_POST_SORT_ROWS = 'postSortRows';\n    public static PROP_GET_DOCUMENT = 'getDocument';\n    public static PROP_POST_PROCESS_POPUP = 'postProcessPopup';\n    public static PROP_DEFAULT_GROUP_ORDER_COMPARATOR = 'defaultGroupOrderComparator';\n    public static PROP_INITIAL_GROUP_ORDER_COMPARATOR = 'initialGroupOrderComparator';\n    public static PROP_PAGINATION_NUMBER_FORMATTER = 'paginationNumberFormatter';\n\n    public static PROP_GET_CONTEXT_MENU_ITEMS = 'getContextMenuItems';\n    public static PROP_GET_MAIN_MENU_ITEMS = 'getMainMenuItems';\n\n    public static PROP_PROCESS_CELL_FOR_CLIPBOARD = 'processCellForClipboard';\n    public static PROP_PROCESS_CELL_FROM_CLIPBOARD = 'processCellFromClipboard';\n    public static PROP_SEND_TO_CLIPBOARD = 'sendToClipboard';\n\n    public static PROP_PROCESS_TO_SECONDARY_COLDEF = 'processSecondaryColDef';\n    public static PROP_PROCESS_SECONDARY_COL_GROUP_DEF = 'processSecondaryColGroupDef';\n\n    public static PROP_GET_CHART_TOOLBAR_ITEMS = 'getChartToolbarItems';\n\n    public static PROP_GET_SERVER_SIDE_STORE_PARAMS = 'getServerSideStoreParams';\n    public static PROP_IS_SERVER_SIDE_GROUPS_OPEN_BY_DEFAULT = 'isServerSideGroupOpenByDefault';\n    public static PROP_IS_APPLY_SERVER_SIDE_TRANSACTION = 'isApplyServerSideTransaction';\n    public static PROP_IS_SERVER_SIDE_GROUP = 'isServerSideGroup';\n    public static PROP_GET_SERVER_SIDE_GROUP_KEY = 'getServerSideGroupKey';\n\n    @Autowired('gridOptions') private readonly gridOptions: GridOptions;\n    @Autowired('eventService') private readonly eventService: EventService;\n    @Autowired('environment') private readonly environment: Environment;\n    @Autowired('eGridDiv') private eGridDiv: HTMLElement;\n\n    private propertyEventService: EventService = new EventService();\n\n    private domDataKey = '__AG_' + Math.random().toString();\n\n    // we store this locally, so we are not calling getScrollWidth() multiple times as it's an expensive operation\n    private scrollbarWidth: number;\n\n    private destroyed = false;\n\n    private agWire(@Qualifier('gridApi') gridApi: GridApi, @Qualifier('columnApi') columnApi: ColumnApi): void {\n        this.gridOptions.api = gridApi;\n        this.gridOptions.columnApi = columnApi;\n        this.checkForDeprecated();\n        this.checkForViolations();\n    }\n\n    @PreDestroy\n    private destroy(): void {\n        // need to remove these, as we don't own the lifecycle of the gridOptions, we need to\n        // remove the references in case the user keeps the grid options, we want the rest\n        // of the grid to be picked up by the garbage collector\n        this.gridOptions.api = null;\n        this.gridOptions.columnApi = null;\n\n        this.destroyed = true;\n    }\n\n    @PostConstruct\n    public init(): void {\n        if (this.gridOptions.suppressPropertyNamesCheck !== true) {\n            this.checkGridOptionsProperties();\n            this.checkColumnDefProperties();\n        }\n\n        // parse side bar options into correct format\n        if (this.gridOptions.sideBar != null) {\n            this.gridOptions.sideBar = SideBarDefParser.parse(this.gridOptions.sideBar);\n        }\n\n        const async = this.useAsyncEvents();\n        this.eventService.addGlobalListener(this.globalEventHandler.bind(this), async);\n\n        if (this.isGroupSelectsChildren() && this.isSuppressParentsInRowNodes()) {\n            console.warn(\"AG Grid: 'groupSelectsChildren' does not work with 'suppressParentsInRowNodes', this selection method needs the part in rowNode to work\");\n        }\n\n        if (this.isGroupSelectsChildren()) {\n            if (!this.isRowSelectionMulti()) {\n                console.warn(\"AG Grid: rowSelection must be 'multiple' for groupSelectsChildren to make sense\");\n            }\n            if (this.isRowModelServerSide()) {\n                console.warn(\n                    'AG Grid: group selects children is NOT support for Server Side Row Model. ' +\n                    'This is because the rows are lazy loaded, so selecting a group is not possible as' +\n                    'the grid has no way of knowing what the children are.'\n                );\n            }\n        }\n\n        if (this.isGroupRemoveSingleChildren() && this.isGroupHideOpenParents()) {\n            console.warn(\n                \"AG Grid: groupRemoveSingleChildren and groupHideOpenParents do not work with each other, you need to pick one. And don't ask us how to us these together on our support forum either you will get the same answer!\"\n            );\n        }\n\n        if (this.isRowModelServerSide()) {\n            const msg = (prop: string) => `AG Grid: '${prop}' is not supported on the Server-Side Row Model`;\n            if (exists(this.gridOptions.groupDefaultExpanded)) {\n                console.warn(msg('groupDefaultExpanded'));\n            }\n            if (exists(this.gridOptions.groupDefaultExpanded)) {\n                console.warn(msg('groupIncludeFooter'));\n            }\n            if (exists(this.gridOptions.groupDefaultExpanded)) {\n                console.warn(msg('groupIncludeTotalFooter'));\n            }\n        }\n\n        if (this.isEnableRangeSelection()) {\n            ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'enableRangeSelection');\n        }\n\n        if (!this.isEnableRangeSelection() && (this.isEnableRangeHandle() || this.isEnableFillHandle())) {\n            console.warn(\"AG Grid: 'enableRangeHandle' and 'enableFillHandle' will not work unless 'enableRangeSelection' is set to true\");\n        }\n\n        const warnOfDeprecaredIcon = (name: string) => {\n            if (this.gridOptions.icons && this.gridOptions.icons[name]) {\n                console.warn(`gridOptions.icons.${name} is no longer supported. For information on how to style checkboxes and radio buttons, see https://www.ag-grid.com/javascript-grid-icons/`);\n            }\n        };\n        warnOfDeprecaredIcon('radioButtonOff');\n        warnOfDeprecaredIcon('radioButtonOn');\n        warnOfDeprecaredIcon('checkboxChecked');\n        warnOfDeprecaredIcon('checkboxUnchecked');\n        warnOfDeprecaredIcon('checkboxIndeterminate');\n\n        // sets an initial calculation for the scrollbar width\n        this.getScrollbarWidth();\n    }\n\n    private checkColumnDefProperties() {\n        if (this.gridOptions.columnDefs == null) { return; }\n\n        this.gridOptions.columnDefs.forEach(colDef => {\n            const userProperties: string[] = Object.getOwnPropertyNames(colDef);\n            const validProperties: string[] = [...ColDefUtil.ALL_PROPERTIES, ...ColDefUtil.FRAMEWORK_PROPERTIES];\n\n            this.checkProperties(\n                userProperties,\n                validProperties,\n                validProperties,\n                'colDef',\n                'https://www.ag-grid.com/javascript-grid-column-properties/'\n            );\n        });\n    }\n\n    private checkGridOptionsProperties() {\n        const userProperties: string[] = Object.getOwnPropertyNames(this.gridOptions);\n        const validProperties: string[] = [\n            ...PropertyKeys.ALL_PROPERTIES,\n            ...PropertyKeys.FRAMEWORK_PROPERTIES,\n            ...values<any>(Events).map(event => ComponentUtil.getCallbackForEvent(event))\n        ];\n\n        const validPropertiesAndExceptions: string[] = [...validProperties, 'api', 'columnApi'];\n\n        this.checkProperties(\n            userProperties,\n            validPropertiesAndExceptions,\n            validProperties,\n            'gridOptions',\n            'https://www.ag-grid.com/javascript-data-grid/grid-options/'\n        );\n    }\n\n    private checkProperties(\n        userProperties: string[],\n        validPropertiesAndExceptions: string[],\n        validProperties: string[],\n        containerName: string,\n        docsUrl: string\n    ) {\n        const invalidProperties: { [p: string]: string[]; } = fuzzyCheckStrings(\n            userProperties,\n            validPropertiesAndExceptions,\n            validProperties\n        );\n\n        iterateObject<any>(invalidProperties, (key, value) => {\n            console.warn(`ag-grid: invalid ${containerName} property '${key}' did you mean any of these: ${value.slice(0, 8).join(\", \")}`);\n        });\n\n        if (Object.keys(invalidProperties).length > 0) {\n            console.warn(`ag-grid: to see all the valid ${containerName} properties please check: ${docsUrl}`);\n        }\n    }\n\n    /**\n    * Wrap the user callback and attach the api, columnApi and context to the params object on the way through.\n    * @param callback User provided callback\n    * @returns Wrapped callback where the params object not require api, columnApi and context\n    */\n    private mergeGridCommonParams<P extends AgGridCommon, T>(callback: ((params: P) => T) | undefined):\n        ((params: WithoutGridCommon<P>) => T) | undefined {\n        if (callback) {\n            const wrapped = (callbackParams: WithoutGridCommon<P>): T => {\n                const mergedParams = { ...callbackParams, api: this.getApi()!, columnApi: this.getColumnApi()!, context: this.getContext() } as P;\n                return callback(mergedParams);\n            }\n            return wrapped;\n        }\n        return callback;\n    }\n\n    public getDomDataKey(): string {\n        return this.domDataKey;\n    }\n\n    // returns the dom data, or undefined if not found\n    public getDomData(element: Node | null, key: string): any {\n        const domData = (element as any)[this.getDomDataKey()];\n\n        return domData ? domData[key] : undefined;\n    }\n\n    public setDomData(element: Element, key: string, value: any): any {\n        const domDataKey = this.getDomDataKey();\n        let domData = (element as any)[domDataKey];\n\n        if (missing(domData)) {\n            domData = {};\n            (element as any)[domDataKey] = domData;\n        }\n        domData[key] = value;\n    }\n\n    public isRowSelection() {\n        return this.gridOptions.rowSelection === 'single' || this.gridOptions.rowSelection === 'multiple';\n    }\n\n    public isSuppressRowDeselection() {\n        return isTrue(this.gridOptions.suppressRowDeselection);\n    }\n\n    public isRowSelectionMulti() {\n        return this.gridOptions.rowSelection === 'multiple';\n    }\n\n    public isRowMultiSelectWithClick() {\n        return isTrue(this.gridOptions.rowMultiSelectWithClick);\n    }\n\n    public getContext() {\n        return this.gridOptions.context;\n    }\n\n    public isPivotMode() {\n        return isTrue(this.gridOptions.pivotMode);\n    }\n\n    public isSuppressExpandablePivotGroups() {\n        return isTrue(this.gridOptions.suppressExpandablePivotGroups);\n    }\n\n    public getPivotColumnGroupTotals() {\n        return this.gridOptions.pivotColumnGroupTotals;\n    }\n\n    public getPivotRowTotals() {\n        return this.gridOptions.pivotRowTotals;\n    }\n\n    public isRowModelInfinite() {\n        return this.gridOptions.rowModelType === Constants.ROW_MODEL_TYPE_INFINITE;\n    }\n\n    public isRowModelViewport() {\n        return this.gridOptions.rowModelType === Constants.ROW_MODEL_TYPE_VIEWPORT;\n    }\n\n    public isRowModelServerSide() {\n        return this.gridOptions.rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE;\n    }\n\n    public isRowModelDefault() {\n        return (missing(this.gridOptions.rowModelType) ||\n            this.gridOptions.rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE);\n    }\n\n    public isFullRowEdit() {\n        return this.gridOptions.editType === 'fullRow';\n    }\n\n    public isSuppressFocusAfterRefresh() {\n        return isTrue(this.gridOptions.suppressFocusAfterRefresh);\n    }\n\n    public isSuppressBrowserResizeObserver() {\n        return isTrue(this.gridOptions.suppressBrowserResizeObserver);\n    }\n\n    public isSuppressMaintainUnsortedOrder() {\n        return isTrue(this.gridOptions.suppressMaintainUnsortedOrder);\n    }\n\n    public isSuppressClearOnFillReduction() {\n        return isTrue(this.gridOptions.suppressClearOnFillReduction);\n    }\n\n    public isShowToolPanel() {\n        return isTrue(this.gridOptions.sideBar && Array.isArray(this.getSideBar().toolPanels));\n    }\n\n    public getSideBar(): SideBarDef {\n        return this.gridOptions.sideBar as SideBarDef;\n    }\n\n    public isSuppressTouch() {\n        return isTrue(this.gridOptions.suppressTouch);\n    }\n\n    public isMaintainColumnOrder() {\n        return isTrue(this.gridOptions.maintainColumnOrder);\n    }\n\n    public isSuppressRowTransform() {\n        return isTrue(this.gridOptions.suppressRowTransform);\n    }\n\n    public isSuppressColumnStateEvents() {\n        return isTrue(this.gridOptions.suppressColumnStateEvents);\n    }\n\n    public isAllowDragFromColumnsToolPanel() {\n        return isTrue(this.gridOptions.allowDragFromColumnsToolPanel);\n    }\n\n    public useAsyncEvents() {\n        return !isTrue(this.gridOptions.suppressAsyncEvents);\n    }\n\n    public isEnableCellChangeFlash() {\n        return isTrue(this.gridOptions.enableCellChangeFlash);\n    }\n\n    public getCellFlashDelay(): number {\n        return this.gridOptions.cellFlashDelay || 500;\n    }\n\n    public getCellFadeDelay(): number {\n        return this.gridOptions.cellFadeDelay || 1000;\n    }\n\n    public isGroupSelectsChildren() {\n        return isTrue(this.gridOptions.groupSelectsChildren);\n    }\n\n    public isSuppressRowHoverHighlight() {\n        return isTrue(this.gridOptions.suppressRowHoverHighlight);\n    }\n\n    public isColumnHoverHighlight() {\n        return isTrue(this.gridOptions.columnHoverHighlight);\n    }\n\n    public isGroupSelectsFiltered() {\n        return isTrue(this.gridOptions.groupSelectsFiltered);\n    }\n\n    public isGroupHideOpenParents() {\n        return isTrue(this.gridOptions.groupHideOpenParents);\n    }\n\n    public isGroupMaintainOrder() {\n        return isTrue(this.gridOptions.groupMaintainOrder);\n    }\n\n    public getAutoGroupColumnDef(): ColDef | undefined {\n        return this.gridOptions.autoGroupColumnDef;\n    }\n\n    public isGroupMultiAutoColumn() {\n        if (this.gridOptions.groupDisplayType) {\n            return this.matchesGroupDisplayType('multipleColumns', this.gridOptions.groupDisplayType);\n        }\n        // if we are doing hideOpenParents we also show multiple columns, otherwise hideOpenParents would not work\n        return isTrue(this.gridOptions.groupHideOpenParents);\n    }\n\n    public isGroupUseEntireRow(pivotMode: boolean): boolean {\n        // we never allow groupUseEntireRow if in pivot mode, otherwise we won't see the pivot values.\n        if (pivotMode) { return false; }\n\n        return this.gridOptions.groupDisplayType ?\n            this.matchesGroupDisplayType('groupRows', this.gridOptions.groupDisplayType) : false;\n    }\n\n    public isGroupSuppressAutoColumn() {\n        const isCustomRowGroups = this.gridOptions.groupDisplayType ?\n            this.matchesGroupDisplayType('custom', this.gridOptions.groupDisplayType) : false;\n\n        if (isCustomRowGroups) { return true; }\n\n        return this.gridOptions.treeDataDisplayType ?\n            this.matchesTreeDataDisplayType('custom', this.gridOptions.treeDataDisplayType) : false;\n    }\n\n    public isGroupRemoveSingleChildren() {\n        return isTrue(this.gridOptions.groupRemoveSingleChildren);\n    }\n\n    public isGroupRemoveLowestSingleChildren() {\n        return isTrue(this.gridOptions.groupRemoveLowestSingleChildren);\n    }\n\n    public isGroupIncludeFooter() {\n        return isTrue(this.gridOptions.groupIncludeFooter);\n    }\n\n    public isGroupIncludeTotalFooter() {\n        return isTrue(this.gridOptions.groupIncludeTotalFooter);\n    }\n\n    public isGroupSuppressBlankHeader() {\n        return isTrue(this.gridOptions.groupSuppressBlankHeader);\n    }\n\n    public isSuppressRowClickSelection() {\n        return isTrue(this.gridOptions.suppressRowClickSelection);\n    }\n\n    public isSuppressCellFocus() {\n        return isTrue(this.gridOptions.suppressCellFocus);\n    }\n\n    public isSuppressMultiSort() {\n        return isTrue(this.gridOptions.suppressMultiSort);\n    }\n\n    public isAlwaysMultiSort() {\n        return isTrue(this.gridOptions.alwaysMultiSort);\n    }\n\n    public isMultiSortKeyCtrl() {\n        return this.gridOptions.multiSortKey === 'ctrl';\n    }\n\n    public isPivotSuppressAutoColumn() {\n        return isTrue(this.gridOptions.pivotSuppressAutoColumn);\n    }\n\n    public isSuppressDragLeaveHidesColumns() {\n        return isTrue(this.gridOptions.suppressDragLeaveHidesColumns);\n    }\n\n    public isSuppressScrollOnNewData() {\n        return isTrue(this.gridOptions.suppressScrollOnNewData);\n    }\n\n    public isSuppressScrollWhenPopupsAreOpen() {\n        return isTrue(this.gridOptions.suppressScrollWhenPopupsAreOpen);\n    }\n\n    public isRowDragEntireRow() {\n        return isTrue(this.gridOptions.rowDragEntireRow);\n    }\n\n    public isSuppressRowDrag() {\n        return isTrue(this.gridOptions.suppressRowDrag);\n    }\n\n    public isRowDragManaged() {\n        return isTrue(this.gridOptions.rowDragManaged);\n    }\n\n    public isSuppressMoveWhenRowDragging() {\n        return isTrue(this.gridOptions.suppressMoveWhenRowDragging);\n    }\n\n    public isRowDragMultiRow() {\n        return isTrue(this.gridOptions.rowDragMultiRow);\n    }\n\n    // returns either 'print', 'autoHeight' or 'normal' (normal is the default)\n    public getDomLayout(): string {\n        const domLayout = this.gridOptions.domLayout || Constants.DOM_LAYOUT_NORMAL;\n        const validLayouts = [\n            Constants.DOM_LAYOUT_PRINT,\n            Constants.DOM_LAYOUT_AUTO_HEIGHT,\n            Constants.DOM_LAYOUT_NORMAL\n        ];\n\n        if (validLayouts.indexOf(domLayout) === -1) {\n            doOnce(\n                () =>\n                    console.warn(\n                        `AG Grid: ${domLayout} is not valid for DOM Layout, valid values are ${Constants.DOM_LAYOUT_NORMAL}, ${Constants.DOM_LAYOUT_AUTO_HEIGHT} and ${Constants.DOM_LAYOUT_PRINT}`\n                    ),\n                'warn about dom layout values'\n            );\n            return Constants.DOM_LAYOUT_NORMAL;\n        }\n\n        return domLayout;\n    }\n\n    public isSuppressHorizontalScroll() {\n        return isTrue(this.gridOptions.suppressHorizontalScroll);\n    }\n\n    public isSuppressMaxRenderedRowRestriction() {\n        return isTrue(this.gridOptions.suppressMaxRenderedRowRestriction);\n    }\n\n    public isExcludeChildrenWhenTreeDataFiltering() {\n        return isTrue(this.gridOptions.excludeChildrenWhenTreeDataFiltering);\n    }\n\n    public isAlwaysShowHorizontalScroll() {\n        return isTrue(this.gridOptions.alwaysShowHorizontalScroll);\n    }\n\n    public isAlwaysShowVerticalScroll() {\n        return isTrue(this.gridOptions.alwaysShowVerticalScroll);\n    }\n\n    public isDebounceVerticalScrollbar() {\n        return isTrue(this.gridOptions.debounceVerticalScrollbar);\n    }\n\n    public isSuppressLoadingOverlay() {\n        return isTrue(this.gridOptions.suppressLoadingOverlay);\n    }\n\n    public isSuppressNoRowsOverlay() {\n        return isTrue(this.gridOptions.suppressNoRowsOverlay);\n    }\n\n    public isSuppressFieldDotNotation() {\n        return isTrue(this.gridOptions.suppressFieldDotNotation);\n    }\n\n    public getPinnedTopRowData(): any[] | undefined {\n        return this.gridOptions.pinnedTopRowData;\n    }\n\n    public getPinnedBottomRowData(): any[] | undefined {\n        return this.gridOptions.pinnedBottomRowData;\n    }\n\n    public isFunctionsPassive() {\n        return isTrue(this.gridOptions.functionsPassive);\n    }\n\n    public isSuppressChangeDetection() {\n        return isTrue(this.gridOptions.suppressChangeDetection);\n    }\n\n    public isSuppressAnimationFrame() {\n        return isTrue(this.gridOptions.suppressAnimationFrame);\n    }\n\n    public getQuickFilterText(): string | undefined {\n        return this.gridOptions.quickFilterText;\n    }\n\n    public isCacheQuickFilter() {\n        return isTrue(this.gridOptions.cacheQuickFilter);\n    }\n\n    public isUnSortIcon() {\n        return isTrue(this.gridOptions.unSortIcon);\n    }\n\n    public isSuppressMenuHide() {\n        return isTrue(this.gridOptions.suppressMenuHide);\n    }\n\n    public isEnterMovesDownAfterEdit() {\n        return isTrue(this.gridOptions.enterMovesDownAfterEdit);\n    }\n\n    public isEnterMovesDown() {\n        return isTrue(this.gridOptions.enterMovesDown);\n    }\n\n    public isUndoRedoCellEditing() {\n        return isTrue(this.gridOptions.undoRedoCellEditing);\n    }\n\n    public getUndoRedoCellEditingLimit(): number | undefined {\n        return toNumber(this.gridOptions.undoRedoCellEditingLimit);\n    }\n\n    public getRowStyle() {\n        return this.gridOptions.rowStyle;\n    }\n\n    public getRowClass() {\n        return this.gridOptions.rowClass;\n    }\n\n    public getRowStyleFunc() {\n        return this.mergeGridCommonParams(this.gridOptions.getRowStyle);\n    }\n\n    public getRowClassFunc() {\n        return this.mergeGridCommonParams(this.gridOptions.getRowClass);\n    }\n\n    public rowClassRules() {\n        return this.gridOptions.rowClassRules;\n    }\n\n    public getServerSideStoreType(): string | undefined {\n        return this.gridOptions.serverSideStoreType;\n    }\n\n    public getServerSideStoreParamsFunc() {\n        return this.mergeGridCommonParams(this.gridOptions.getServerSideStoreParams);\n    }\n\n    public getCreateChartContainerFunc() {\n        return this.mergeGridCommonParams(this.gridOptions.createChartContainer);\n    }\n\n    public getPopupParent() {\n        return this.gridOptions.popupParent;\n    }\n\n    public getBlockLoadDebounceMillis() {\n        return this.gridOptions.blockLoadDebounceMillis;\n    }\n\n    public getPostProcessPopupFunc() {\n        return this.mergeGridCommonParams(this.gridOptions.postProcessPopup);\n    }\n\n    public getPaginationNumberFormatterFunc() {\n        return this.mergeGridCommonParams(this.gridOptions.paginationNumberFormatter);\n    }\n\n    public getChildCountFunc() {\n        return this.gridOptions.getChildCount;\n    }\n\n    public getIsApplyServerSideTransactionFunc() {\n        return this.mergeGridCommonParams(this.gridOptions.isApplyServerSideTransaction);\n    }\n\n    public getInitialGroupOrderComparator() {\n        const { initialGroupOrderComparator, defaultGroupOrderComparator } = this.gridOptions;\n        if (initialGroupOrderComparator) {\n            return this.mergeGridCommonParams(initialGroupOrderComparator);\n        }\n        // this is the deprecated way, so provide a proxy to make it compatible\n        if (defaultGroupOrderComparator) {\n            return (params: WithoutGridCommon<InitialGroupOrderComparatorParams>) => defaultGroupOrderComparator(params.nodeA, params.nodeB);\n        }\n    }\n\n    public getIsFullWidthCellFunc() {\n        const { isFullWidthRow, isFullWidthCell } = this.gridOptions;\n        if (isFullWidthRow) {\n            return this.mergeGridCommonParams(isFullWidthRow);\n        }\n        // this is the deprecated way, so provide a proxy to make it compatible\n        if (isFullWidthCell) {\n            return (params: WithoutGridCommon<IsFullWidthRowParams>) => isFullWidthCell(params.rowNode);\n        }\n    }\n\n    public getFullWidthCellRendererParams() {\n        return this.gridOptions.fullWidthCellRendererParams;\n    }\n\n    public isEmbedFullWidthRows() {\n        return isTrue(this.gridOptions.embedFullWidthRows) || isTrue(this.gridOptions.deprecatedEmbedFullWidthRows);\n    }\n\n    public isDetailRowAutoHeight() {\n        return isTrue(this.gridOptions.detailRowAutoHeight);\n    }\n\n    public getSuppressKeyboardEventFunc(): ((params: SuppressKeyboardEventParams) => boolean) | undefined {\n        return this.gridOptions.suppressKeyboardEvent;\n    }\n\n    public getBusinessKeyForNodeFunc() {\n        return this.gridOptions.getBusinessKeyForNode;\n    }\n\n    public getApi(): GridApi | undefined | null {\n        return this.gridOptions.api;\n    }\n\n    public getColumnApi(): ColumnApi | undefined | null {\n        return this.gridOptions.columnApi;\n    }\n\n    public isReadOnlyEdit(): boolean {\n        return isTrue(this.gridOptions.readOnlyEdit);;\n    }\n\n    public isImmutableData() {\n        // we used to have a property immutableData for this. however this was deprecated\n        // in favour of having Immutable Data on by default when getRowId is provided\n        const getRowIdProvided = this.gridOptions.getRowId != null;\n        const immutableData = isTrue(this.gridOptions.immutableData);\n        // this property is a backwards compatibility property, for those who want\n        // the old behaviour of Row ID's but NOT Immutable Data.\n        const resetRowDataOnUpdate = isTrue(this.gridOptions.resetRowDataOnUpdate);\n\n        if (resetRowDataOnUpdate) { return false; }\n        return getRowIdProvided || immutableData;\n    }\n\n    public isEnsureDomOrder() {\n        return isTrue(this.gridOptions.ensureDomOrder);\n    }\n\n    public isEnableCharts() {\n        if (isTrue(this.gridOptions.enableCharts)) {\n            return ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'enableCharts');\n        }\n        return false;\n    }\n\n    public getColResizeDefault() {\n        return this.gridOptions.colResizeDefault;\n    }\n\n    public isSingleClickEdit() {\n        return isTrue(this.gridOptions.singleClickEdit);\n    }\n\n    public isSuppressClickEdit() {\n        return isTrue(this.gridOptions.suppressClickEdit);\n    }\n\n    public isStopEditingWhenCellsLoseFocus() {\n        return isTrue(this.gridOptions.stopEditingWhenCellsLoseFocus);\n    }\n\n    public getGroupDefaultExpanded(): number | undefined {\n        return this.gridOptions.groupDefaultExpanded;\n    }\n\n    public getMaxConcurrentDatasourceRequests(): number | undefined {\n        const res = toNumber(this.gridOptions.maxConcurrentDatasourceRequests);\n        if (res == null) { return 2; } // 2 is the default\n        if (res <= 0) { return; } // negative number, eg -1, means no max restriction\n        return res;\n    }\n\n    public getMaxBlocksInCache(): number | undefined {\n        return this.gridOptions.maxBlocksInCache;\n    }\n\n    public getCacheOverflowSize(): number | undefined {\n        return this.gridOptions.cacheOverflowSize;\n    }\n\n    public getPaginationPageSize(): number | undefined {\n        return toNumber(this.gridOptions.paginationPageSize);\n    }\n\n    public isPaginateChildRows(): boolean {\n        const shouldPaginate = this.isGroupRemoveSingleChildren() || this.isGroupRemoveLowestSingleChildren();\n        if (shouldPaginate) { return true; }\n        return isTrue(this.gridOptions.paginateChildRows);\n    }\n\n    public getCacheBlockSize(): number | undefined {\n        return oneOrGreater(this.gridOptions.cacheBlockSize);\n    }\n\n    public getInfiniteInitialRowCount(): number | undefined {\n        return this.gridOptions.infiniteInitialRowCount;\n    }\n\n    public isPurgeClosedRowNodes() {\n        return isTrue(this.gridOptions.purgeClosedRowNodes);\n    }\n\n    public isSuppressPaginationPanel() {\n        return isTrue(this.gridOptions.suppressPaginationPanel);\n    }\n\n    public getRowData(): any[] | undefined | null {\n        return this.gridOptions.rowData;\n    }\n\n    public isEnableRtl() {\n        return isTrue(this.gridOptions.enableRtl);\n    }\n\n    public getRowGroupPanelShow() {\n        return this.gridOptions.rowGroupPanelShow;\n    }\n\n    public getPivotPanelShow() {\n        return this.gridOptions.pivotPanelShow;\n    }\n\n    public isAngularCompileRows() {\n        return isTrue(this.gridOptions.angularCompileRows);\n    }\n\n    public isAngularCompileFilters() {\n        return isTrue(this.gridOptions.angularCompileFilters);\n    }\n\n    public isDebug() {\n        return isTrue(this.gridOptions.debug);\n    }\n\n    public getColumnDefs() {\n        return this.gridOptions.columnDefs;\n    }\n\n    public getColumnTypes(): { [key: string]: ColDef; } | undefined {\n        return this.gridOptions.columnTypes;\n    }\n\n    public getDatasource(): IDatasource | undefined {\n        return this.gridOptions.datasource;\n    }\n\n    public getViewportDatasource(): IViewportDatasource | undefined {\n        return this.gridOptions.viewportDatasource;\n    }\n\n    public getServerSideDatasource(): IServerSideDatasource | undefined {\n        return this.gridOptions.serverSideDatasource;\n    }\n\n    public isAccentedSort() {\n        return isTrue(this.gridOptions.accentedSort);\n    }\n\n    public isEnableBrowserTooltips() {\n        return isTrue(this.gridOptions.enableBrowserTooltips);\n    }\n\n    public isEnableCellExpressions() {\n        return isTrue(this.gridOptions.enableCellExpressions);\n    }\n\n    public isEnableGroupEdit() {\n        return isTrue(this.gridOptions.enableGroupEdit);\n    }\n\n    public isSuppressMiddleClickScrolls() {\n        return isTrue(this.gridOptions.suppressMiddleClickScrolls);\n    }\n\n    public isPreventDefaultOnContextMenu() {\n        return isTrue(this.gridOptions.preventDefaultOnContextMenu);\n    }\n\n    public isSuppressPreventDefaultOnMouseWheel() {\n        return isTrue(this.gridOptions.suppressPreventDefaultOnMouseWheel);\n    }\n\n    public isSuppressColumnVirtualisation() {\n        return isTrue(this.gridOptions.suppressColumnVirtualisation);\n    }\n\n    public isSuppressRowVirtualisation() {\n        return isTrue(this.gridOptions.suppressRowVirtualisation);\n    }\n\n    public isSuppressContextMenu() {\n        return isTrue(this.gridOptions.suppressContextMenu);\n    }\n\n    public isAllowContextMenuWithControlKey() {\n        return isTrue(this.gridOptions.allowContextMenuWithControlKey);\n    }\n\n    public isSuppressCopyRowsToClipboard() {\n        return isTrue(this.gridOptions.suppressCopyRowsToClipboard);\n    }\n\n    public isSuppressCopySingleCellRanges() {\n        return isTrue(this.gridOptions.suppressCopySingleCellRanges);\n    }\n\n    public isCopyHeadersToClipboard() {\n        return isTrue(this.gridOptions.copyHeadersToClipboard);\n    }\n\n    public isCopyGroupHeadersToClipboard() {\n        return isTrue(this.gridOptions.copyGroupHeadersToClipboard);\n    }\n\n    public isSuppressClipboardPaste() {\n        return isTrue(this.gridOptions.suppressClipboardPaste);\n    }\n\n    public isSuppressLastEmptyLineOnPaste() {\n        return isTrue(this.gridOptions.suppressLastEmptyLineOnPaste);\n    }\n\n    public isPagination() {\n        return isTrue(this.gridOptions.pagination);\n    }\n\n    public isSuppressEnterpriseResetOnNewColumns() {\n        return isTrue(this.gridOptions.suppressEnterpriseResetOnNewColumns);\n    }\n\n    public getProcessDataFromClipboardFunc() {\n        return this.mergeGridCommonParams(this.gridOptions.processDataFromClipboard);\n    }\n\n    public getAsyncTransactionWaitMillis(): number | undefined {\n        return exists(this.gridOptions.asyncTransactionWaitMillis) ? this.gridOptions.asyncTransactionWaitMillis : Constants.BATCH_WAIT_MILLIS;\n    }\n\n    public isSuppressMovableColumns() {\n        return isTrue(this.gridOptions.suppressMovableColumns);\n    }\n\n    public isAnimateRows() {\n        // never allow animating if enforcing the row order\n        if (this.isEnsureDomOrder()) { return false; }\n\n        return isTrue(this.gridOptions.animateRows);\n    }\n\n    public isSuppressColumnMoveAnimation() {\n        return isTrue(this.gridOptions.suppressColumnMoveAnimation);\n    }\n\n    public isSuppressAggFuncInHeader() {\n        return isTrue(this.gridOptions.suppressAggFuncInHeader);\n    }\n\n    public isSuppressAggAtRootLevel() {\n        return isTrue(this.gridOptions.suppressAggAtRootLevel);\n    }\n\n    public isSuppressAggFilteredOnly() {\n        const isGroupAggFiltering = this.getGroupAggFiltering() !== undefined;\n        return isGroupAggFiltering || isTrue(this.gridOptions.suppressAggFilteredOnly);\n    }\n\n    public isRemovePivotHeaderRowWhenSingleValueColumn() {\n        return isTrue(this.gridOptions.removePivotHeaderRowWhenSingleValueColumn);\n    }\n\n    public isShowOpenedGroup() {\n        return isTrue(this.gridOptions.showOpenedGroup);\n    }\n\n    public isReactUi() {\n        return isTrue(this.gridOptions.reactUi);\n    }\n\n    public isSuppressReactUi() {\n        return isTrue(this.gridOptions.suppressReactUi);\n    }\n\n    public isEnableRangeSelection(): boolean {\n        return ModuleRegistry.isRegistered(ModuleNames.RangeSelectionModule) && isTrue(this.gridOptions.enableRangeSelection);\n    }\n\n    public isEnableRangeHandle(): boolean {\n        return isTrue(this.gridOptions.enableRangeHandle);\n    }\n\n    public isEnableFillHandle(): boolean {\n        return isTrue(this.gridOptions.enableFillHandle);\n    }\n\n    public getFillHandleDirection(): 'x' | 'y' | 'xy' {\n        const direction = this.gridOptions.fillHandleDirection;\n\n        if (!direction) { return 'xy'; }\n\n        if (direction !== 'x' && direction !== 'y' && direction !== 'xy') {\n            doOnce(() => console.warn(`AG Grid: valid values for fillHandleDirection are 'x', 'y' and 'xy'. Default to 'xy'.`), 'warn invalid fill direction');\n            return 'xy';\n        }\n\n        return direction;\n    }\n\n    public getFillOperation() {\n        return this.mergeGridCommonParams(this.gridOptions.fillOperation);\n    }\n\n    public isSuppressMultiRangeSelection(): boolean {\n        return isTrue(this.gridOptions.suppressMultiRangeSelection);\n    }\n\n    public isPaginationAutoPageSize(): boolean {\n        return isTrue(this.gridOptions.paginationAutoPageSize);\n    }\n\n    public isRememberGroupStateWhenNewData(): boolean {\n        return isTrue(this.gridOptions.rememberGroupStateWhenNewData);\n    }\n\n    public getIcons() {\n        return this.gridOptions.icons;\n    }\n\n    public getGroupAggFiltering(): ((params: WithoutGridCommon<GetGroupAggFilteringParams>) => boolean) | undefined {\n        const userValue = this.gridOptions.groupAggFiltering;\n\n        if (typeof userValue === 'function') {\n            return this.mergeGridCommonParams(userValue);\n        }\n\n        if (isTrue(userValue)) {\n            return () => true;\n        }\n\n        return undefined;\n    }\n\n    public getAggFuncs(): { [key: string]: IAggFunc; } | undefined {\n        return this.gridOptions.aggFuncs;\n    }\n\n    public getSortingOrder(): ('asc' | 'desc' | null)[] | undefined {\n        return this.gridOptions.sortingOrder;\n    }\n\n    public getAlignedGrids(): GridOptions[] | undefined {\n        return this.gridOptions.alignedGrids;\n    }\n\n    public isMasterDetail() {\n        const masterDetail = isTrue(this.gridOptions.masterDetail);\n\n        if (masterDetail) {\n            return ModuleRegistry.assertRegistered(ModuleNames.MasterDetailModule, 'masterDetail');\n        } else {\n            return false;\n        }\n    }\n\n    public isKeepDetailRows(): boolean {\n        return isTrue(this.gridOptions.keepDetailRows);\n    }\n\n    public getKeepDetailRowsCount(): number | undefined {\n        const keepDetailRowsCount = this.gridOptions.keepDetailRowsCount;\n        if (exists(keepDetailRowsCount) && keepDetailRowsCount > 0) {\n            return this.gridOptions.keepDetailRowsCount;\n        }\n\n        return DEFAULT_KEEP_DETAIL_ROW_COUNT;\n    }\n\n    public getIsRowMasterFunc() {\n        return this.gridOptions.isRowMaster;\n    }\n\n    public getIsRowSelectableFunc() {\n        return this.gridOptions.isRowSelectable;\n    }\n\n    public getGroupRowRendererParams() {\n        return this.gridOptions.groupRowRendererParams;\n    }\n\n    public getOverlayLoadingTemplate() {\n        return this.gridOptions.overlayLoadingTemplate;\n    }\n\n    public getOverlayNoRowsTemplate() {\n        return this.gridOptions.overlayNoRowsTemplate;\n    }\n\n    public isSuppressAutoSize() {\n        return isTrue(this.gridOptions.suppressAutoSize);\n    }\n\n    public isEnableCellTextSelection() {\n        return isTrue(this.gridOptions.enableCellTextSelection);\n    }\n\n    public isSuppressParentsInRowNodes() {\n        return isTrue(this.gridOptions.suppressParentsInRowNodes);\n    }\n\n    public isSuppressClipboardApi() {\n        return isTrue(this.gridOptions.suppressClipboardApi);\n    }\n\n    public isFunctionsReadOnly() {\n        return isTrue(this.gridOptions.functionsReadOnly);\n    }\n\n    public isEnableCellTextSelect(): boolean {\n        return isTrue(this.gridOptions.enableCellTextSelection);\n    }\n\n    public getDefaultColDef(): ColDef | undefined {\n        return this.gridOptions.defaultColDef;\n    }\n\n    public getDefaultColGroupDef(): Partial<ColGroupDef> | undefined {\n        return this.gridOptions.defaultColGroupDef;\n    }\n\n    public getDefaultExportParams(type: 'csv'): CsvExportParams | undefined;\n    public getDefaultExportParams(type: 'excel'): ExcelExportParams | undefined;\n    public getDefaultExportParams(type: 'csv' | 'excel'): CsvExportParams | ExcelExportParams | undefined {\n        if (this.gridOptions.defaultExportParams) {\n            console.warn(`AG Grid: Since v25.2 \\`defaultExportParams\\`  has been replaced by \\`default${capitalise(type)}ExportParams\\`'`);\n            if (type === 'csv') {\n                return this.gridOptions.defaultExportParams as CsvExportParams;\n            }\n            return this.gridOptions.defaultExportParams as ExcelExportParams;\n        }\n\n        if (type === 'csv' && this.gridOptions.defaultCsvExportParams) {\n            return this.gridOptions.defaultCsvExportParams;\n        }\n\n        if (type === 'excel' && this.gridOptions.defaultExcelExportParams) {\n            return this.gridOptions.defaultExcelExportParams;\n        }\n    }\n\n    public isSuppressCsvExport() {\n        return isTrue(this.gridOptions.suppressCsvExport);\n    }\n\n    public isAllowShowChangeAfterFilter() {\n        return isTrue(this.gridOptions.allowShowChangeAfterFilter);\n    }\n\n    public isSuppressExcelExport() {\n        return isTrue(this.gridOptions.suppressExcelExport);\n    }\n\n    public isSuppressMakeColumnVisibleAfterUnGroup() {\n        return isTrue(this.gridOptions.suppressMakeColumnVisibleAfterUnGroup);\n    }\n\n    public getDataPathFunc(): ((dataItem: any) => string[]) | undefined {\n        return this.gridOptions.getDataPath;\n    }\n\n    public getIsServerSideGroupFunc(): ((dataItem: any) => boolean) | undefined {\n        return this.gridOptions.isServerSideGroup;\n    }\n\n    public getIsServerSideGroupOpenByDefaultFunc() {\n        return this.mergeGridCommonParams(this.gridOptions.isServerSideGroupOpenByDefault);\n    }\n\n    public getIsGroupOpenByDefaultFunc() {\n        return this.mergeGridCommonParams(this.gridOptions.isGroupOpenByDefault);\n    }\n\n    public getServerSideGroupKeyFunc(): ((dataItem: any) => string) | undefined {\n        return this.gridOptions.getServerSideGroupKey;\n    }\n\n    public getGroupRowAggFunc() {\n\n        const { getGroupRowAgg, groupRowAggNodes } = this.gridOptions;\n        if (getGroupRowAgg) {\n            return this.mergeGridCommonParams(getGroupRowAgg);\n        }\n        // this is the deprecated way, so provide a proxy to make it compatible\n        if (groupRowAggNodes) {\n            return (params: WithoutGridCommon<GetGroupRowAggParams>) => groupRowAggNodes(params.nodes)\n        }\n    }\n\n    public getContextMenuItemsFunc() {\n        return this.mergeGridCommonParams(this.gridOptions.getContextMenuItems);\n    }\n\n    public getMainMenuItemsFunc() {\n        return this.mergeGridCommonParams(this.gridOptions.getMainMenuItems);\n    }\n\n    public getRowIdFunc() {\n        const { getRowId, getRowNodeId } = this.gridOptions;\n        if (getRowId) {\n            return this.mergeGridCommonParams(getRowId);\n        }\n        // this is the deprecated way, so provide a proxy to make it compatible\n        if (getRowNodeId) {\n            return (params: WithoutGridCommon<GetRowIdParams>) => getRowNodeId(params.data)\n        }\n    }\n\n    public getNavigateToNextHeaderFunc() {\n        return this.mergeGridCommonParams(this.gridOptions.navigateToNextHeader);\n    }\n\n    public getTabToNextHeaderFunc() {\n        return this.mergeGridCommonParams(this.gridOptions.tabToNextHeader);\n    }\n\n    public getNavigateToNextCellFunc() {\n        return this.mergeGridCommonParams(this.gridOptions.navigateToNextCell);\n    }\n\n    public getTabToNextCellFunc() {\n        return this.mergeGridCommonParams(this.gridOptions.tabToNextCell)\n    }\n\n    public getGridTabIndex(): string {\n        return (this.gridOptions.tabIndex || 0).toString();\n    }\n\n    public isTreeData(): boolean {\n        const usingTreeData = isTrue(this.gridOptions.treeData);\n\n        if (usingTreeData) {\n            return ModuleRegistry.assertRegistered(ModuleNames.RowGroupingModule, 'Tree Data');\n        }\n\n        return false;\n    }\n\n    public isValueCache(): boolean {\n        return isTrue(this.gridOptions.valueCache);\n    }\n\n    public isValueCacheNeverExpires(): boolean {\n        return isTrue(this.gridOptions.valueCacheNeverExpires);\n    }\n\n    public isDeltaSort(): boolean {\n        return isTrue(this.gridOptions.deltaSort);\n    }\n\n    public isAggregateOnlyChangedColumns(): boolean {\n        return isTrue(this.gridOptions.aggregateOnlyChangedColumns);\n    }\n\n    public getProcessSecondaryColDefFunc() {\n        return this.gridOptions.processSecondaryColDef;\n    }\n    public getProcessSecondaryColGroupDefFunc() {\n        return this.gridOptions.processSecondaryColGroupDef;\n    }\n\n    public getSendToClipboardFunc() {\n        return this.mergeGridCommonParams(this.gridOptions.sendToClipboard);\n    }\n\n    public getProcessRowPostCreateFunc() {\n        return this.mergeGridCommonParams(this.gridOptions.processRowPostCreate);\n    }\n\n    public getProcessCellForClipboardFunc() {\n        return this.mergeGridCommonParams(this.gridOptions.processCellForClipboard);\n    }\n\n    public getProcessHeaderForClipboardFunc() {\n        return this.mergeGridCommonParams(this.gridOptions.processHeaderForClipboard);\n    }\n\n    public getProcessGroupHeaderForClipboardFunc() {\n        return this.mergeGridCommonParams(this.gridOptions.processGroupHeaderForClipboard);\n    }\n\n    public getProcessCellFromClipboardFunc() {\n        return this.mergeGridCommonParams(this.gridOptions.processCellFromClipboard);\n    }\n\n    public getViewportRowModelPageSize(): number | undefined {\n        return oneOrGreater(this.gridOptions.viewportRowModelPageSize, DEFAULT_VIEWPORT_ROW_MODEL_PAGE_SIZE);\n    }\n\n    public getViewportRowModelBufferSize(): number {\n        return zeroOrGreater(this.gridOptions.viewportRowModelBufferSize, DEFAULT_VIEWPORT_ROW_MODEL_BUFFER_SIZE);\n    }\n\n    public isServerSideSortingAlwaysResets() {\n        return isTrue(this.gridOptions.serverSideSortingAlwaysResets);\n    }\n\n    public isServerSideFilteringAlwaysResets() {\n        return isTrue(this.gridOptions.serverSideFilteringAlwaysResets);\n    }\n\n    public getPostSortFunc() {\n        const { postSortRows, postSort } = this.gridOptions;\n        if (postSortRows) {\n            return this.mergeGridCommonParams(postSortRows);\n        }\n        // this is the deprecated way, so provide a proxy to make it compatible\n        if (postSort) {\n            return (params: WithoutGridCommon<PostSortRowsParams>) => postSort(params.nodes);\n        }\n    }\n\n    public getChartToolbarItemsFunc() {\n        return this.mergeGridCommonParams(this.gridOptions.getChartToolbarItems);\n    }\n\n    public getChartThemeOverrides(): AgChartThemeOverrides | undefined {\n        return this.gridOptions.chartThemeOverrides;\n    }\n\n    public getCustomChartThemes(): { [name: string]: AgChartTheme; } | undefined {\n        return this.gridOptions.customChartThemes;\n    }\n\n    public getChartThemes(): string[] {\n        // return default themes if user hasn't supplied any\n        return this.gridOptions.chartThemes || ['ag-default', 'ag-material', 'ag-pastel', 'ag-vivid', 'ag-solar'];\n    }\n\n    public getClipboardDelimiter() {\n        return exists(this.gridOptions.clipboardDelimiter) ? this.gridOptions.clipboardDelimiter : '\\t';\n    }\n\n    public setProperty(key: string, value: any, force = false): void {\n        const gridOptionsNoType = this.gridOptions as any;\n        const previousValue = gridOptionsNoType[key];\n\n        if (force || previousValue !== value) {\n            gridOptionsNoType[key] = value;\n            const event: PropertyChangedEvent = {\n                type: key,\n                currentValue: value,\n                previousValue: previousValue\n            };\n            this.propertyEventService.dispatchEvent(event);\n        }\n    }\n\n    public addEventListener(key: string, listener: Function): void {\n        this.propertyEventService.addEventListener(key, listener);\n    }\n\n    public removeEventListener(key: string, listener: Function): void {\n        this.propertyEventService.removeEventListener(key, listener);\n    }\n\n    public isSkipHeaderOnAutoSize(): boolean {\n        return !!this.gridOptions.skipHeaderOnAutoSize;\n    }\n\n    public getAutoSizePadding(): number {\n        const value = this.gridOptions.autoSizePadding;\n        return value != null && value >= 0 ? value : 20;\n    }\n\n    // properties\n    public getHeaderHeight(): number | null | undefined {\n        if (typeof this.gridOptions.headerHeight === 'number') {\n            return this.gridOptions.headerHeight;\n        }\n\n        return this.getFromTheme(25, 'headerHeight');\n    }\n\n    public getFloatingFiltersHeight(): number | null | undefined {\n        if (typeof this.gridOptions.floatingFiltersHeight === 'number') {\n            return this.gridOptions.floatingFiltersHeight;\n        }\n\n        return this.getFromTheme(25, 'headerHeight');\n    }\n\n    public getGroupHeaderHeight(): number | null | undefined {\n        if (typeof this.gridOptions.groupHeaderHeight === 'number') {\n            return this.gridOptions.groupHeaderHeight;\n        }\n\n        return this.getHeaderHeight();\n    }\n\n    public getPivotHeaderHeight(): number | null | undefined {\n        if (typeof this.gridOptions.pivotHeaderHeight === 'number') {\n            return this.gridOptions.pivotHeaderHeight;\n        }\n\n        return this.getHeaderHeight();\n    }\n\n    public getPivotGroupHeaderHeight(): number | null | undefined {\n        if (typeof this.gridOptions.pivotGroupHeaderHeight === 'number') {\n            return this.gridOptions.pivotGroupHeaderHeight;\n        }\n\n        return this.getGroupHeaderHeight();\n    }\n\n    public isExternalFilterPresent() {\n        if (typeof this.gridOptions.isExternalFilterPresent === 'function') {\n            return this.gridOptions.isExternalFilterPresent({ api: this.getApi()!, columnApi: this.getColumnApi()!, context: this.getContext() });\n        }\n\n        return false;\n    }\n\n    public doesExternalFilterPass(node: RowNode) {\n        if (typeof this.gridOptions.doesExternalFilterPass === 'function') {\n            return this.gridOptions.doesExternalFilterPass(node);\n        }\n\n        return false;\n    }\n\n    public getTooltipDelay(type: 'show' | 'hide'): number | null {\n        const { tooltipShowDelay, tooltipHideDelay } = this.gridOptions;\n        const delay = type === 'show' ? tooltipShowDelay : tooltipHideDelay;\n        const capitalisedType = capitalise(type);\n\n        if (exists(delay)) {\n            if (delay < 0) {\n                doOnce(() => console.warn(`ag-grid: tooltip${capitalisedType}Delay should not be lower than 0`), `tooltip${capitalisedType}DelayWarn`);\n            }\n\n            return Math.max(200, delay);\n        }\n\n        return null;\n    }\n\n    public isTooltipMouseTrack() {\n        return isTrue(this.gridOptions.tooltipMouseTrack);\n    }\n\n    public isSuppressModelUpdateAfterUpdateTransaction(): boolean {\n        return isTrue(this.gridOptions.suppressModelUpdateAfterUpdateTransaction);\n    }\n\n    public getDocument(): Document {\n        // if user is providing document, we use the users one,\n        // otherwise we use the document on the global namespace.\n        let result: Document | null = null;\n        if (this.gridOptions.getDocument && exists(this.gridOptions.getDocument)) {\n            result = this.gridOptions.getDocument();\n        } else if (this.eGridDiv) {\n            result = this.eGridDiv.ownerDocument;\n        }\n\n        if (result && exists(result)) {\n            return result;\n        }\n\n        return document;\n    }\n\n    public getMinColWidth(): number {\n        const minColWidth = this.gridOptions.minColWidth;\n\n        if (exists(minColWidth) && minColWidth > GridOptionsWrapper.MIN_COL_WIDTH) {\n            return this.gridOptions.minColWidth!;\n        }\n\n        const measuredMin = this.getFromTheme(null, 'headerCellMinWidth');\n        return exists(measuredMin) ? Math.max(measuredMin, GridOptionsWrapper.MIN_COL_WIDTH) : GridOptionsWrapper.MIN_COL_WIDTH;\n    }\n\n    public getMaxColWidth() {\n        if (this.gridOptions.maxColWidth && this.gridOptions.maxColWidth > GridOptionsWrapper.MIN_COL_WIDTH) {\n            return this.gridOptions.maxColWidth;\n        }\n\n        return null;\n    }\n\n    public getColWidth() {\n        if (typeof this.gridOptions.colWidth !== 'number' || this.gridOptions.colWidth < GridOptionsWrapper.MIN_COL_WIDTH) {\n            return 200;\n        }\n\n        return this.gridOptions.colWidth;\n    }\n\n    public getRowBuffer(): number {\n        let rowBuffer = this.gridOptions.rowBuffer;\n\n        if (typeof rowBuffer === 'number') {\n            if (rowBuffer < 0) {\n                doOnce(() => console.warn(`AG Grid: rowBuffer should not be negative`), 'warn rowBuffer negative');\n                this.gridOptions.rowBuffer = rowBuffer = 0;\n            }\n        } else {\n            rowBuffer = Constants.ROW_BUFFER_SIZE;\n        }\n\n        return rowBuffer;\n    }\n\n    public getRowBufferInPixels() {\n        const rowsToBuffer = this.getRowBuffer();\n        const defaultRowHeight = this.getRowHeightAsNumber();\n\n        return rowsToBuffer * defaultRowHeight;\n    }\n\n    // the user might be using some non-standard scrollbar, eg a scrollbar that has zero\n    // width and overlays (like the Safari scrollbar, but presented in Chrome). so we\n    // allow the user to provide the scroll width before we work it out.\n    public getScrollbarWidth() {\n        if (this.scrollbarWidth == null) {\n            const useGridOptions = typeof this.gridOptions.scrollbarWidth === 'number' && this.gridOptions.scrollbarWidth >= 0;\n            const scrollbarWidth = useGridOptions ? this.gridOptions.scrollbarWidth : getScrollbarWidth();\n\n            if (scrollbarWidth != null) {\n                this.scrollbarWidth = scrollbarWidth;\n\n                this.eventService.dispatchEvent({\n                    type: Events.EVENT_SCROLLBAR_WIDTH_CHANGED\n                });\n            }\n        }\n\n        return this.scrollbarWidth;\n    }\n\n    private checkForDeprecated() {\n        // casting to generic object, so typescript compiles even though\n        // we are looking for attributes that don't exist\n        const options: any = this.gridOptions;\n\n        if (options.deprecatedEmbedFullWidthRows) {\n            console.warn(`AG Grid: since v21.2, deprecatedEmbedFullWidthRows has been replaced with embedFullWidthRows.`);\n        }\n\n        if (options.rowDeselection) {\n            console.warn(\n                'AG Grid: since v24.x, rowDeselection is deprecated and the behaviour is true by default. Please use `suppressRowDeselection` to prevent rows from being deselected.'\n            );\n        }\n\n        if (options.enableMultiRowDragging) {\n            options.rowDragMultiRow = true;\n            delete options.enableMultiRowDragging;\n            console.warn(\n                'AG Grid: since v26.1, `enableMultiRowDragging` is deprecated. Please use `rowDragMultiRow`.'\n            );\n        }\n\n        const checkRenamedProperty = (oldProp: string, newProp: string, version: string) => {\n            if (options[oldProp] != null) {\n                console.warn(`AG Grid: since version ${version}, '${oldProp}' is deprecated / renamed, please use the new property name '${newProp}' instead.`);\n                if (options[newProp] == null) {\n                    options[newProp] = options[oldProp];\n                }\n            }\n        };\n\n        checkRenamedProperty('batchUpdateWaitMillis', 'asyncTransactionWaitMillis', '23.1.x');\n        checkRenamedProperty('deltaRowDataMode', 'immutableData', '23.1.x');\n\n        if (options.immutableColumns || options.deltaColumnMode) {\n            console.warn(\n                'AG Grid: since v24.0, immutableColumns and deltaColumnMode properties are gone. The grid now works like this as default. To keep column order maintained, set grid property applyColumnDefOrder=true'\n            );\n        }\n\n        checkRenamedProperty('suppressSetColumnStateEvents', 'suppressColumnStateEvents', '24.0.x');\n\n        if (options.groupRowInnerRenderer || options.groupRowInnerRendererParams || options.groupRowInnerRendererFramework) {\n            console.warn('AG Grid: since v24.0, grid properties groupRowInnerRenderer, groupRowInnerRendererFramework and groupRowInnerRendererParams are no longer used.');\n            console.warn('  Instead use the grid properties groupRowRendererParams.innerRenderer, groupRowRendererParams.innerRendererFramework and groupRowRendererParams.innerRendererParams.');\n            console.warn('  For example instead of this:');\n            console.warn('    groupRowInnerRenderer: \"myRenderer\"');\n            console.warn('    groupRowInnerRendererParams: {x: a}');\n            console.warn('  Replace with this:');\n            console.warn('    groupRowRendererParams: {');\n            console.warn('      innerRenderer: \"myRenderer\",');\n            console.warn('      innerRendererParams: {x: a}');\n            console.warn('    }');\n            console.warn('  We have copied the properties over for you. However to stop this error message, please change your application code.');\n            if (!options.groupRowRendererParams) {\n                options.groupRowRendererParams = {};\n            }\n            const params = options.groupRowRendererParams;\n            if (options.groupRowInnerRenderer) {\n                params.innerRenderer = options.groupRowInnerRenderer;\n            }\n            if (options.groupRowInnerRendererParams) {\n                params.innerRendererParams = options.groupRowInnerRendererParams;\n            }\n            if (options.groupRowInnerRendererFramework) {\n                params.innerRendererFramework = options.groupRowInnerRendererFramework;\n            }\n        }\n\n        if (options.rememberGroupStateWhenNewData) {\n            console.warn('AG Grid: since v24.0, grid property rememberGroupStateWhenNewData is deprecated. This feature was provided before Transaction Updates worked (which keep group state). Now that transaction updates are possible and they keep group state, this feature is no longer needed.');\n        }\n\n        if (options.detailCellRendererParams && options.detailCellRendererParams.autoHeight) {\n            console.warn('AG Grid: since v24.1, grid property detailCellRendererParams.autoHeight is replaced with grid property detailRowAutoHeight. This allows this feature to work when you provide a custom DetailCellRenderer');\n            options.detailRowAutoHeight = true;\n        }\n\n        if (options.suppressKeyboardEvent) {\n            console.warn(\n                `AG Grid: since v24.1 suppressKeyboardEvent in the gridOptions has been deprecated and will be removed in\n                 future versions of AG Grid. If you need this to be set for every column use the defaultColDef property.`\n            );\n        }\n\n        if (options.suppressEnterpriseResetOnNewColumns) {\n            console.warn('AG Grid: since v25, grid property suppressEnterpriseResetOnNewColumns is deprecated. This was a temporary property to allow changing columns in Server Side Row Model without triggering a reload. Now that it is possible to dynamically change columns in the grid, this is no longer needed.');\n        }\n\n        if (options.suppressColumnStateEvents) {\n            console.warn('AG Grid: since v25, grid property suppressColumnStateEvents no longer works due to a refactor that we did. It should be possible to achieve similar using event.source, which would be \"api\" if the event was due to setting column state via the API');\n        }\n\n        if (options.defaultExportParams) {\n            console.warn('AG Grid: since v25.2, the grid property `defaultExportParams` has been replaced by `defaultCsvExportParams` and `defaultExcelExportParams`.');\n        }\n\n        if (options.stopEditingWhenGridLosesFocus) {\n            console.warn('AG Grid: since v25.2.2, the grid property `stopEditingWhenGridLosesFocus` has been replaced by `stopEditingWhenCellsLoseFocus`.');\n            options.stopEditingWhenCellsLoseFocus = true;\n        }\n\n        if (options.applyColumnDefOrder) {\n            console.warn('AG Grid: since v26.0, the grid property `applyColumnDefOrder` is no longer needed, as this is the default behaviour. To turn this behaviour off, set maintainColumnOrder=true');\n        }\n\n        if (options.groupMultiAutoColumn) {\n            console.warn(\"AG Grid: since v26.0, the grid property `groupMultiAutoColumn` has been replaced by `groupDisplayType = 'multipleColumns'`\");\n            options.groupDisplayType = 'multipleColumns';\n        }\n\n        if (options.groupUseEntireRow) {\n            console.warn(\"AG Grid: since v26.0, the grid property `groupUseEntireRow` has been replaced by `groupDisplayType = 'groupRows'`\");\n            options.groupDisplayType = 'groupRows';\n        }\n\n        if (options.groupSuppressAutoColumn) {\n            const propName = options.treeData ? 'treeDataDisplayType' : 'groupDisplayType';\n            console.warn(`AG Grid: since v26.0, the grid property \\`groupSuppressAutoColumn\\` has been replaced by \\`${propName} = 'custom'\\``);\n            options.groupDisplayType = 'custom';\n        }\n\n        if (options.defaultGroupOrderComparator) {\n            console.warn(\"AG Grid: since v27.2, the grid property `defaultGroupOrderComparator` is deprecated and has been replaced by `initialGroupOrderComparator` and now receives a single params object.\");\n        }\n        if (options.defaultGroupSortComparator) {\n            console.warn(\"AG Grid: since v26.0, the grid property `defaultGroupSortComparator` has been replaced by `initialGroupOrderComparator`\");\n            options.defaultGroupOrderComparator = options.defaultGroupSortComparator;\n        }\n\n        if (options.groupRowAggNodes) {\n            console.warn(\"AG Grid: since v27.2, the grid property `groupRowAggNodes` is deprecated and has been replaced by `getGroupRowAgg` and now receives a single params object.\");\n        }\n        if (options.postSort) {\n            console.warn(\"AG Grid: since v27.2, the grid property `postSort` is deprecated and has been replaced by `postSortRows` and now receives a single params object.\");\n        }\n        if (options.isFullWidthCell) {\n            console.warn(\"AG Grid: since v27.2, the grid property `isFullWidthCell` is deprecated and has been replaced by `isFullWidthRow` and now receives a single params object.\");\n        }\n        if (options.localeTextFunc) {\n            console.warn(\"AG Grid: since v27.2, the grid property `localeTextFunc` is deprecated and has been replaced by `getLocaleText` and now receives a single params object.\");\n        }\n\n        if (options.colWidth) {\n            console.warn('AG Grid: since v26.1, the grid property `colWidth` is deprecated and should be set via `defaultColDef.width`.');\n        }\n        if (options.minColWidth) {\n            console.warn('AG Grid: since v26.1, the grid property `minColWidth` is deprecated and should be set via `defaultColDef.minWidth`.');\n        }\n        if (options.maxColWidth) {\n            console.warn('AG Grid: since v26.1, the grid property `maxColWidth` is deprecated and should be set via `defaultColDef.maxWidth`.');\n        }\n        if (options.reactUi) {\n            console.warn('AG Grid: since v27.0, React UI is on by default, so no need for reactUi=true. To turn it off, set suppressReactUi=true.');\n        }\n        if (options.suppressReactUi) {\n            console.warn('AG Grid: The legacy React rendering engine is deprecated and will be removed in the next major version of the grid.');\n        }\n        if (options.suppressCellSelection) {\n            console.warn('AG Grid: since v27.0, `suppressCellSelection` has been replaced by `suppressCellFocus`.');\n            options.suppressCellFocus = options.suppressCellSelection;\n        }\n\n        if (options.getRowNodeId) {\n            console.warn('AG Grid: since v27.1, `getRowNodeId` is deprecated and has been replaced by `getRowId`. The difference: if getRowId() is implemented then immutable data is enabled by default.');\n        }\n        if (options.immutableData) {\n            if (options.getRowId) {\n                console.warn('AG Grid: since v27.1, `immutableData` is deprecated. With the `getRowId` callback implemented, immutable data is enabled by default so you can remove `immutableData=true`.');\n            } else {\n                console.warn('AG Grid: since v27.1, `immutableData` is deprecated. To enable immutable data you must implement the `getRowId()` callback.');\n            }\n        }\n        if (options.clipboardDeliminator) {\n            console.warn('AG Grid: since v27.1, `clipboardDeliminator` has been replaced by `clipboardDelimiter`.');\n            options.clipboardDelimiter = options.clipboardDeliminator;\n        }\n    }\n\n    private checkForViolations() {\n        if (this.isTreeData()) { this.treeDataViolations(); }\n    }\n\n    private treeDataViolations() {\n        if (this.isRowModelDefault()) {\n            if (missing(this.getDataPathFunc())) {\n                console.warn(\n                    'AG Grid: property usingTreeData=true with rowModel=clientSide, but you did not ' +\n                    'provide getDataPath function, please provide getDataPath function if using tree data.'\n                );\n            }\n        }\n        if (this.isRowModelServerSide()) {\n            if (missing(this.getIsServerSideGroupFunc())) {\n                console.warn(\n                    'AG Grid: property usingTreeData=true with rowModel=serverSide, but you did not ' +\n                    'provide isServerSideGroup function, please provide isServerSideGroup function if using tree data.'\n                );\n            }\n            if (missing(this.getServerSideGroupKeyFunc())) {\n                console.warn(\n                    'AG Grid: property usingTreeData=true with rowModel=serverSide, but you did not ' +\n                    'provide getServerSideGroupKey function, please provide getServerSideGroupKey function if using tree data.'\n                );\n            }\n        }\n    }\n\n    public getLocaleTextFunc(): (key: string, defaultValue: string, variableValues?: string[]) => string {\n        const { localeText, getLocaleText, localeTextFunc } = this.gridOptions;\n        if (getLocaleText) {\n            //key: string, defaultValue: string, variableValues?: string[]\n            return (key: string, defaultValue: string, variableValues?: string[]) => {\n                const params: GetLocaleTextParams = {\n                    key,\n                    defaultValue,\n                    variableValues,\n                    api: this.getApi()!,\n                    columnApi: this.getColumnApi()!,\n                    context: this.getContext()\n                }\n                return getLocaleText(params);\n            }\n        }\n\n        if (localeTextFunc) {\n            return localeTextFunc;\n        }\n\n        return (key: string, defaultValue: string, variableValues?: string[]) => {\n            let localisedText = localeText && localeText[key];\n\n\n            if (localisedText && variableValues && variableValues.length) {\n                let found = 0;\n                while (true) {\n                    if (found >= variableValues.length) { break; }\n                    const idx = localisedText.indexOf('${variable}');\n                    if (idx === -1) { break; }\n\n                    localisedText = localisedText.replace('${variable}', variableValues[found++]);\n                }\n            }\n\n            return localisedText ?? defaultValue;\n        };\n    }\n\n    // responsible for calling the onXXX functions on gridOptions\n    public globalEventHandler(eventName: string, event?: any): void {\n        // prevent events from being fired _after_ the grid has been destroyed\n        if (this.destroyed) {\n            return;\n        }\n\n        const callbackMethodName = ComponentUtil.getCallbackForEvent(eventName);\n        if (typeof (this.gridOptions as any)[callbackMethodName] === 'function') {\n            (this.gridOptions as any)[callbackMethodName](event);\n        }\n    }\n\n    private setRowHeightVariable(height: number): void {\n        const oldRowHeight = this.eGridDiv.style.getPropertyValue('--ag-line-height').trim();\n        const newRowHeight = `${height}px`;\n\n        if (oldRowHeight != newRowHeight) {\n            this.eGridDiv.style.setProperty('--ag-line-height', newRowHeight);\n        }\n    }\n\n    // we don't allow dynamic row height for virtual paging\n    public getRowHeightAsNumber(): number {\n        if (!this.gridOptions.rowHeight || missing(this.gridOptions.rowHeight)) {\n            return this.getDefaultRowHeight();\n        }\n\n        const rowHeight = this.gridOptions.rowHeight;\n\n        if (rowHeight && this.isNumeric(rowHeight)) {\n            this.setRowHeightVariable(rowHeight);\n            return rowHeight;\n        }\n\n        console.warn('AG Grid row height must be a number if not using standard row model');\n        return this.getDefaultRowHeight();\n    }\n\n    public isGetRowHeightFunction(): boolean {\n        return typeof this.gridOptions.getRowHeight === 'function';\n    }\n\n    public getRowHeightForNode(rowNode: RowNode, allowEstimate = false, defaultRowHeight?: number): { height: number; estimated: boolean; } {\n        if (defaultRowHeight == null) {\n            defaultRowHeight = this.getDefaultRowHeight();\n        }\n\n        // check the function first, in case use set both function and\n        // number, when using virtual pagination then function can be\n        // used for pinned rows and the number for the body rows.\n\n        if (this.isGetRowHeightFunction()) {\n            if (allowEstimate) {\n                return { height: defaultRowHeight, estimated: true };\n            }\n\n            const params: WithoutGridCommon<RowHeightParams> = {\n                node: rowNode,\n                data: rowNode.data\n            };\n\n            const height = this.mergeGridCommonParams(this.gridOptions.getRowHeight)!(params);\n\n            if (this.isNumeric(height)) {\n                if (height === 0) {\n                    doOnce(() => console.warn('AG Grid: The return of `getRowHeight` cannot be zero. If the intention is to hide rows, use a filter instead.'), 'invalidRowHeight');\n                }\n                return { height: Math.max(1, height), estimated: false };\n            }\n        }\n\n        if (rowNode.detail && this.isMasterDetail()) {\n            // if autoHeight, we want the height to grow to the new height starting at 1, as otherwise a flicker would happen,\n            // as the detail goes to the default (eg 200px) and then immediately shrink up/down to the new measured height\n            // (due to auto height) which looks bad, especially if doing row animation.\n            if (this.isDetailRowAutoHeight()) {\n                return { height: 1, estimated: false };\n            }\n\n            if (this.isNumeric(this.gridOptions.detailRowHeight)) {\n                return { height: this.gridOptions.detailRowHeight, estimated: false };\n            }\n\n            return { height: DEFAULT_DETAIL_ROW_HEIGHT, estimated: false };\n        }\n\n        const rowHeight = this.gridOptions.rowHeight && this.isNumeric(this.gridOptions.rowHeight) ? this.gridOptions.rowHeight : defaultRowHeight;\n\n        return { height: rowHeight, estimated: false };\n    }\n\n    public isDynamicRowHeight(): boolean {\n        return typeof this.gridOptions.getRowHeight === 'function';\n    }\n\n    public getListItemHeight() {\n        return this.getFromTheme(20, 'listItemHeight');\n\n    }\n\n    public chartMenuPanelWidth() {\n        return this.environment.chartMenuPanelWidth();\n    }\n\n    private isNumeric(value: any): value is number {\n        return !isNaN(value) && typeof value === 'number' && isFinite(value);\n    }\n\n    // Material data table has strict guidelines about whitespace, and these values are different than the ones\n    // ag-grid uses by default. We override the default ones for the sake of making it better out of the box\n    private getFromTheme(defaultValue: number, sassVariableName: SASS_PROPERTIES): number;\n    private getFromTheme(defaultValue: null, sassVariableName: SASS_PROPERTIES): number | null | undefined;\n    private getFromTheme(defaultValue: any, sassVariableName: SASS_PROPERTIES): any {\n        const { theme } = this.environment.getTheme();\n        if (theme && theme.indexOf('ag-theme') === 0) {\n            return this.environment.getSassVariable(theme, sassVariableName);\n        }\n        return defaultValue;\n    }\n\n    public getDefaultRowHeight(): number {\n        return this.getFromTheme(DEFAULT_ROW_HEIGHT, 'rowHeight');\n    }\n\n    private matchesGroupDisplayType(toMatch: RowGroupingDisplayType, supplied?: string): boolean {\n        const groupDisplayTypeValues: RowGroupingDisplayType[] = ['groupRows', 'multipleColumns', 'custom', 'singleColumn'];\n        if ((groupDisplayTypeValues as (string | undefined)[]).indexOf(supplied) < 0) {\n            console.warn(`AG Grid: '${supplied}' is not a valid groupDisplayType value - possible values are: '${groupDisplayTypeValues.join(\"', '\")}'`);\n            return false;\n        }\n        return supplied === toMatch;\n    }\n\n    private matchesTreeDataDisplayType(toMatch: TreeDataDisplayType, supplied?: string): boolean {\n        const treeDataDisplayTypeValues: TreeDataDisplayType[] = ['auto', 'custom'];\n        if ((treeDataDisplayTypeValues as (string | undefined)[]).indexOf(supplied) < 0) {\n            console.warn(`AG Grid: '${supplied}' is not a valid treeDataDisplayType value - possible values are: '${treeDataDisplayTypeValues.join(\"', '\")}'`);\n            return false;\n        }\n        return supplied === toMatch;\n    }\n}\n","import { Constants } from \"../constants/constants\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { BeanStub } from \"../context/beanStub\";\n\nexport interface LayoutView {\n    updateLayoutClasses(layoutClass: string, params: UpdateLayoutClassesParams): void;\n}\n\nexport enum LayoutCssClasses {\n    AUTO_HEIGHT = 'ag-layout-auto-height',\n    NORMAL = 'ag-layout-normal',\n    PRINT = 'ag-layout-print'\n}\n\nexport interface UpdateLayoutClassesParams {\n    autoHeight: boolean;\n    normal: boolean;\n    print: boolean;\n}\n\nexport class LayoutFeature extends BeanStub {\n\n    @Autowired('gridOptionsWrapper') protected readonly gridOptionsWrapper: GridOptionsWrapper;\n\n    private view: LayoutView;\n\n    constructor(view: LayoutView) {\n        super();\n        this.view = view;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, this.updateLayoutClasses.bind(this));\n        this.updateLayoutClasses();\n    }\n\n    private updateLayoutClasses(): void {\n        const domLayout = this.gridOptionsWrapper.getDomLayout();\n        const params = {\n            autoHeight: domLayout === Constants.DOM_LAYOUT_AUTO_HEIGHT,\n            normal: domLayout === Constants.DOM_LAYOUT_NORMAL,\n            print: domLayout === Constants.DOM_LAYOUT_PRINT\n        };\n        const cssClass = params.autoHeight ? LayoutCssClasses.AUTO_HEIGHT :\n                            params.print ? LayoutCssClasses.PRINT : LayoutCssClasses.NORMAL;\n        this.view.updateLayoutClasses(cssClass, params);\n    }\n\n}","import { BeanStub } from \"../context/beanStub\";\nimport { Autowired, Optional } from \"../context/context\";\nimport { LayoutFeature, LayoutView } from \"../styling/layoutFeature\";\nimport { Constants } from \"../constants/constants\";\nimport { Events } from \"../eventKeys\";\nimport { RowContainerHeightService } from \"../rendering/rowContainerHeightService\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { ScrollVisibleService } from \"./scrollVisibleService\";\nimport { IContextMenuFactory } from \"../interfaces/iContextMenuFactory\";\nimport { GridBodyScrollFeature } from \"./gridBodyScrollFeature\";\nimport { getInnerWidth, isVerticalScrollShowing } from \"../utils/dom\";\nimport { HeaderNavigationService } from \"../headerRendering/common/headerNavigationService\";\nimport { PaginationProxy } from \"../pagination/paginationProxy\";\nimport { RowDragFeature } from \"./rowDragFeature\";\nimport { DragAndDropService } from \"../dragAndDrop/dragAndDropService\";\nimport { PinnedRowModel } from \"../pinnedRowModel/pinnedRowModel\";\nimport { getTabIndex } from \"../utils/browser\";\nimport { RowRenderer } from \"../rendering/rowRenderer\";\nimport { PopupService } from \"../widgets/popupService\";\nimport { MouseEventService } from \"./mouseEventService\";\n\nexport enum RowAnimationCssClasses {\n    ANIMATION_ON = 'ag-row-animation',\n    ANIMATION_OFF = 'ag-row-no-animation'\n}\n\nexport const CSS_CLASS_CELL_SELECTABLE = 'ag-selectable';\nexport const CSS_CLASS_FORCE_VERTICAL_SCROLL = 'ag-force-vertical-scroll';\nexport const CSS_CLASS_COLUMN_MOVING = 'ag-column-moving';\n\nexport interface IGridBodyComp extends LayoutView {\n    setColumnMovingCss(cssClass: string | null, on: boolean): void;\n    setCellSelectableCss(cssClass: string | null, on: boolean): void;\n    setTopHeight(height: number): void;\n    setTopDisplay(display: string): void;\n    setBottomHeight(height: number): void;\n    setBottomDisplay(display: string): void;\n    setColumnCount(count: number): void;\n    setRowCount(count: number): void;\n    setRowAnimationCssOnBodyViewport(cssClass: string, animate: boolean): void;\n    setAlwaysVerticalScrollClass(cssClass: string | null, on: boolean): void;\n    setPinnedTopBottomOverflowY(overflow: string): void;\n    registerBodyViewportResizeListener(listener: (() => void)): void;\n}\n\nexport class GridBodyCtrl extends BeanStub {\n\n    @Autowired('rowContainerHeightService') private rowContainerHeightService: RowContainerHeightService;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('scrollVisibleService') private scrollVisibleService: ScrollVisibleService;\n    @Optional('contextMenuFactory') private contextMenuFactory: IContextMenuFactory;\n    @Autowired('headerNavigationService') private headerNavigationService: HeaderNavigationService;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n    @Autowired('pinnedRowModel') private pinnedRowModel: PinnedRowModel;\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n    @Autowired('popupService') public popupService: PopupService;\n    @Autowired('mouseEventService') public mouseEventService: MouseEventService;\n\n    private comp: IGridBodyComp;\n    private eGridBody: HTMLElement;\n    private eBodyViewport: HTMLElement;\n    private eTop: HTMLElement;\n    private eBottom: HTMLElement;\n\n    private bodyScrollFeature: GridBodyScrollFeature;\n    private rowDragFeature: RowDragFeature;\n\n    public getScrollFeature(): GridBodyScrollFeature {\n        return this.bodyScrollFeature;\n    }\n\n    public getBodyViewportElement(): HTMLElement {\n        return this.eBodyViewport;\n    }\n\n    public setComp(comp: IGridBodyComp, eGridBody: HTMLElement, eBodyViewport: HTMLElement,\n                   eTop: HTMLElement, eBottom: HTMLElement): void {\n        this.comp = comp;\n        this.eGridBody = eGridBody;\n        this.eBodyViewport = eBodyViewport;\n        this.eTop = eTop;\n        this.eBottom = eBottom;\n\n        this.setCellTextSelection(this.gridOptionsWrapper.isEnableCellTextSelect());\n\n        this.createManagedBean(new LayoutFeature(this.comp));\n        this.bodyScrollFeature = this.createManagedBean(new GridBodyScrollFeature(this.eBodyViewport));\n        this.addRowDragListener();\n\n        this.setupRowAnimationCssClass();\n\n        this.addEventListeners();\n        this.addFocusListeners([eTop, eBodyViewport, eBottom]);\n        this.onGridColumnsChanged();\n        this.addBodyViewportListener();\n        this.setFloatingHeights();\n        this.disableBrowserDragging();\n        this.addStopEditingWhenGridLosesFocus();\n\n        this.ctrlsService.registerGridBodyCtrl(this);\n    }\n\n    public getComp(): IGridBodyComp {\n        return this.comp;\n    }\n\n    private addEventListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.setFloatingHeights.bind(this));\n    }\n\n    private addFocusListeners(elements: HTMLElement[]): void {\n        elements.forEach(element => {\n            this.addManagedListener(element, 'focusin', () => {\n                element.classList.add('ag-has-focus');\n            });\n\n            this.addManagedListener(element, 'focusout', (e: FocusEvent) => {\n                if (!element.contains(e.relatedTarget as HTMLElement)) {\n                    element.classList.remove('ag-has-focus');\n                }\n            });\n        });\n    }\n\n    // used by ColumnAnimationService\n    public setColumnMovingCss(moving: boolean): void {\n        this.comp.setColumnMovingCss(moving ? CSS_CLASS_COLUMN_MOVING : null, moving);\n    }\n\n    public setCellTextSelection(selectable: boolean = false): void {\n        const cssClass = selectable ? CSS_CLASS_CELL_SELECTABLE : null;\n        this.comp.setCellSelectableCss(cssClass, selectable);\n    }\n\n    private onScrollVisibilityChanged(): void {\n        const visible = this.scrollVisibleService.isVerticalScrollShowing();\n        this.setVerticalScrollPaddingVisible(visible);\n    }\n\n    private onGridColumnsChanged(): void {\n        const columns = this.columnModel.getAllGridColumns();\n        this.comp.setColumnCount(columns ? columns.length : 0);\n    }\n\n    // if we do not do this, then the user can select a pic in the grid (eg an image in a custom cell renderer)\n    // and then that will start the browser native drag n' drop, which messes up with our own drag and drop.\n    private disableBrowserDragging(): void {\n        this.addManagedListener(this.eGridBody, 'dragstart', (event: MouseEvent) => {\n            if (event.target instanceof HTMLImageElement) {\n                event.preventDefault();\n                return false;\n            }\n        });\n    }\n\n    private addStopEditingWhenGridLosesFocus(): void {\n        if (!this.gridOptionsWrapper.isStopEditingWhenCellsLoseFocus()) { return; }\n\n        const focusOutListener = (event: FocusEvent): void => {\n            // this is the element the focus is moving to\n            const elementWithFocus = event.relatedTarget as HTMLElement;\n\n            if (getTabIndex(elementWithFocus) === null) {\n                this.rowRenderer.stopEditing();\n                return;\n            }\n\n            let clickInsideGrid =\n                // see if click came from inside the viewports\n                viewports.some(viewport => viewport.contains(elementWithFocus))\n                // and also that it's not from a detail grid\n                && this.mouseEventService.isElementInThisGrid(elementWithFocus);\n\n            if (!clickInsideGrid) {\n                const popupService = this.popupService;\n\n                clickInsideGrid =\n                    popupService.getActivePopups().some(popup => popup.contains(elementWithFocus)) ||\n                    popupService.isElementWithinCustomPopup(elementWithFocus);\n            }\n\n            if (!clickInsideGrid) {\n                this.rowRenderer.stopEditing();\n            }\n        };\n\n        const viewports = [this.eBodyViewport, this.eBottom, this.eTop];\n\n        viewports.forEach(viewport => this.addManagedListener(viewport, 'focusout', focusOutListener));\n    }\n\n    public updateRowCount(): void {\n        const headerCount = this.headerNavigationService.getHeaderRowCount();\n        const modelType = this.paginationProxy.getType();\n        let rowCount = -1;\n\n        if (modelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            rowCount = 0;\n            this.paginationProxy.forEachNode(node => {\n                if (!node.group) { rowCount++; }\n            });\n        }\n\n        const total = rowCount === -1 ? -1 : (headerCount + rowCount);\n\n        this.comp.setRowCount(total);\n    }\n\n    public registerBodyViewportResizeListener(listener: (() => void)): void {\n        this.comp.registerBodyViewportResizeListener(listener);\n    }\n\n    public setVerticalScrollPaddingVisible(visible: boolean): void {\n        const overflowY = visible ? 'scroll' : 'hidden';\n        this.comp.setPinnedTopBottomOverflowY(overflowY);\n    }\n\n    public isVerticalScrollShowing(): boolean {\n        const show = this.gridOptionsWrapper.isAlwaysShowVerticalScroll();\n        const cssClass = show ? CSS_CLASS_FORCE_VERTICAL_SCROLL : null;\n        this.comp.setAlwaysVerticalScrollClass(cssClass, show);\n        return show || isVerticalScrollShowing(this.eBodyViewport);\n    }\n\n    private setupRowAnimationCssClass(): void {\n        const listener = () => {\n            // we don't want to use row animation if scaling, as rows jump strangely as you scroll,\n            // when scaling and doing row animation.\n            const animateRows = this.gridOptionsWrapper.isAnimateRows() && !this.rowContainerHeightService.isStretching();\n            const animateRowsCssClass = animateRows ? RowAnimationCssClasses.ANIMATION_ON : RowAnimationCssClasses.ANIMATION_OFF;\n            this.comp.setRowAnimationCssOnBodyViewport(animateRowsCssClass, animateRows);\n        };\n\n        listener();\n\n        this.addManagedListener(this.eventService, Events.EVENT_HEIGHT_SCALE_CHANGED, listener);\n    }\n\n    public getGridBodyElement(): HTMLElement {\n        return this.eGridBody;\n    }\n\n    private addBodyViewportListener(): void {\n        // we want to listen for clicks directly on the eBodyViewport, so the user has a way of showing\n        // the context menu if no rows or columns are displayed, or user simply clicks outside of a cell\n        const listener = (mouseEvent: MouseEvent) => {\n            if (this.gridOptionsWrapper.isPreventDefaultOnContextMenu()) {\n                mouseEvent.preventDefault();\n            }\n            const { target } = mouseEvent;\n            if (target === this.eBodyViewport || target === this.ctrlsService.getCenterRowContainerCtrl().getViewportElement()) {\n                // show it\n                if (this.contextMenuFactory) {\n                    this.contextMenuFactory.onContextMenu(mouseEvent, null, null, null, null, this.eGridBody);\n                }\n            }\n        };\n\n        this.addManagedListener(this.eBodyViewport, 'contextmenu', listener);\n        this.addManagedListener(this.eBodyViewport, 'wheel', this.onWheel.bind(this));\n    }\n\n    private onWheel(e: MouseEvent): void {\n        if (!this.gridOptionsWrapper.isSuppressScrollWhenPopupsAreOpen()) { return; }\n\n        if (this.popupService.hasAnchoredPopup()) {\n            e.preventDefault();\n        }\n    }\n\n    public getGui(): HTMLElement {\n        return this.eGridBody;\n    }\n\n    // called by rowDragFeature\n    public scrollVertically(pixels: number): number {\n        const oldScrollPosition = this.eBodyViewport.scrollTop;\n\n        this.bodyScrollFeature.setVerticalScrollPosition(oldScrollPosition + pixels);\n        return this.eBodyViewport.scrollTop - oldScrollPosition;\n    }\n\n    private addRowDragListener(): void {\n        this.rowDragFeature = this.createManagedBean(new RowDragFeature(this.eBodyViewport));\n        this.dragAndDropService.addDropTarget(this.rowDragFeature);\n    }\n\n    public getRowDragFeature(): RowDragFeature {\n        return this.rowDragFeature;\n    }\n\n    private setFloatingHeights(): void {\n        const { pinnedRowModel } = this;\n\n        let floatingTopHeight = pinnedRowModel.getPinnedTopTotalHeight();\n\n        if (floatingTopHeight) {\n            // adding 1px for cell bottom border\n            floatingTopHeight += 1;\n        }\n\n        let floatingBottomHeight = pinnedRowModel.getPinnedBottomTotalHeight();\n\n        if (floatingBottomHeight) {\n            // adding 1px for cell bottom border\n            floatingBottomHeight += 1;\n        }\n\n        this.comp.setTopHeight(floatingTopHeight);\n        this.comp.setBottomHeight(floatingBottomHeight);\n\n        this.comp.setTopDisplay(floatingTopHeight ? 'inherit' : 'none');\n        this.comp.setBottomDisplay(floatingBottomHeight ? 'inherit' : 'none');\n    }\n\n    // method will call itself if no available width. this covers if the grid\n    // isn't visible, but is just about to be visible.\n    public sizeColumnsToFit(nextTimeout?: number) {\n        const removeScrollWidth = this.isVerticalScrollShowing();\n        const scrollWidthToRemove = removeScrollWidth ? this.gridOptionsWrapper.getScrollbarWidth() : 0;\n        const bodyViewportWidth = getInnerWidth(this.eBodyViewport);\n        const availableWidth = bodyViewportWidth - scrollWidthToRemove;\n\n        if (availableWidth > 0) {\n            this.columnModel.sizeColumnsToFit(availableWidth, \"sizeColumnsToFit\");\n            return;\n        }\n\n        if (nextTimeout === undefined) {\n            window.setTimeout(() => {\n                this.sizeColumnsToFit(100);\n            }, 0);\n        } else if (nextTimeout === 100) {\n            window.setTimeout(() => {\n                this.sizeColumnsToFit(500);\n            }, 100);\n        } else if (nextTimeout === 500) {\n            window.setTimeout(() => {\n                this.sizeColumnsToFit(-1);\n            }, 500);\n        } else {\n            console.warn('AG Grid: tried to call sizeColumnsToFit() but the grid is coming back with ' +\n                'zero width, maybe the grid is not visible yet on the screen?');\n        }\n    }\n\n    // + rangeService\n    public addScrollEventListener(listener: () => void): void {\n        this.eBodyViewport.addEventListener('scroll', listener);\n    }\n\n    // + focusService\n    public removeScrollEventListener(listener: () => void): void {\n        this.eBodyViewport.removeEventListener('scroll', listener);\n    }\n}\n","import { Autowired, PostConstruct } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { getInnerHeight, getScrollLeft, isRtlNegativeScroll, setScrollLeft } from \"../utils/dom\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { Events } from \"../eventKeys\";\nimport { debounce } from \"../utils/function\";\nimport { BodyScrollEvent, BodyScrollEndEvent } from \"../events\";\nimport { isIOSUserAgent } from \"../utils/browser\";\nimport { AnimationFrameService } from \"../misc/animationFrameService\";\nimport { ColumnApi } from \"../columns/columnApi\";\nimport { GridApi } from \"../gridApi\";\nimport { Constants } from \"../constants/constants\";\nimport { PaginationProxy } from \"../pagination/paginationProxy\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { RowContainerHeightService } from \"../rendering/rowContainerHeightService\";\nimport { RowRenderer } from \"../rendering/rowRenderer\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { RowContainerCtrl } from \"./rowContainer/rowContainerCtrl\";\nimport { Column } from \"../entities/column\";\n\ntype ScrollDirection = 'horizontal' | 'vertical';\n\nexport class GridBodyScrollFeature extends BeanStub {\n\n    @Autowired('ctrlsService') public ctrlsService: CtrlsService;\n    @Autowired('animationFrameService') private animationFrameService: AnimationFrameService;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('rowContainerHeightService') private heightScaler: RowContainerHeightService;\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    private enableRtl: boolean;\n\n    private lastHorizontalScrollElement: HTMLElement | undefined | null;\n\n    private eBodyViewport: HTMLElement;\n\n    private scrollLeft = -1;\n    private nextScrollTop = -1;\n    private scrollTop = -1;\n\n    private scrollTimer: number | undefined;\n\n    private readonly resetLastHorizontalScrollElementDebounced: () => void;\n\n    private centerRowContainerCtrl: RowContainerCtrl;\n\n    constructor(eBodyViewport: HTMLElement) {\n        super();\n        this.eBodyViewport = eBodyViewport;\n        this.resetLastHorizontalScrollElementDebounced = debounce(this.resetLastHorizontalScrollElement.bind(this), 500);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.enableRtl = this.gridOptionsWrapper.isEnableRtl();\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));\n\n        this.ctrlsService.whenReady(p => {\n            this.centerRowContainerCtrl = p.centerRowContainerCtrl;\n            this.onDisplayedColumnsWidthChanged();\n            this.addScrollListener();\n        });\n    }\n\n    private addScrollListener() {\n        const fakeHScroll = this.ctrlsService.getFakeHScrollCtrl();\n\n        this.addManagedListener(this.centerRowContainerCtrl.getViewportElement(), 'scroll', this.onCenterViewportScroll.bind(this));\n        this.addManagedListener(fakeHScroll.getViewport(), 'scroll', this.onFakeHorizontalScroll.bind(this));\n\n        const onVerticalScroll = this.gridOptionsWrapper.isDebounceVerticalScrollbar() ?\n            debounce(this.onVerticalScroll.bind(this), 100)\n            : this.onVerticalScroll.bind(this);\n\n        this.addManagedListener(this.eBodyViewport, 'scroll', onVerticalScroll);\n    }\n\n    private onDisplayedColumnsWidthChanged(): void {\n        if (this.enableRtl) {\n            // because RTL is all backwards, a change in the width of the row\n            // can cause a change in the scroll position, without a scroll event,\n            // because the scroll position in RTL is a function that depends on\n            // the width. to be convinced of this, take out this line, enable RTL,\n            // scroll all the way to the left and then resize a column\n            this.horizontallyScrollHeaderCenterAndFloatingCenter();\n        }\n    }\n\n    public horizontallyScrollHeaderCenterAndFloatingCenter(scrollLeft?: number): void {\n        // when doing RTL, this method gets called once prematurely\n        const notYetInitialised = this.centerRowContainerCtrl == null;\n        if (notYetInitialised) { return; }\n\n        if (scrollLeft === undefined) {\n            scrollLeft = this.centerRowContainerCtrl.getCenterViewportScrollLeft();\n        }\n\n        const offset = this.enableRtl ? scrollLeft : -scrollLeft;\n        const topCenterContainer = this.ctrlsService.getTopCenterRowContainerCtrl();\n        const bottomCenterContainer = this.ctrlsService.getBottomCenterRowContainerCtrl();\n        const fakeHScroll = this.ctrlsService.getFakeHScrollCtrl();\n        const centerHeaderContainer = this.ctrlsService.getHeaderRowContainerCtrl();\n\n        centerHeaderContainer.setHorizontalScroll(offset);\n        bottomCenterContainer.setContainerTranslateX(offset);\n        topCenterContainer.setContainerTranslateX(offset);\n\n        const partner = this.lastHorizontalScrollElement === this.centerRowContainerCtrl.getViewportElement() ?\n                fakeHScroll.getViewport() : this.centerRowContainerCtrl.getViewportElement();\n\n        setScrollLeft(partner, Math.abs(scrollLeft), this.enableRtl);\n    }\n\n    private isControllingScroll(eDiv: HTMLElement): boolean {\n        if (!this.lastHorizontalScrollElement) {\n            this.lastHorizontalScrollElement = eDiv;\n            return true;\n        }\n\n        return eDiv === this.lastHorizontalScrollElement;\n    }\n\n    private onFakeHorizontalScroll(): void {\n        const fakeHScrollViewport = this.ctrlsService.getFakeHScrollCtrl().getViewport();\n        if (!this.isControllingScroll(fakeHScrollViewport)) { return; }\n        this.onBodyHorizontalScroll(fakeHScrollViewport);\n    }\n\n    private onCenterViewportScroll(): void {\n        const centerContainerViewport = this.centerRowContainerCtrl.getViewportElement();\n        if (!this.isControllingScroll(centerContainerViewport)) { return; }\n        this.onBodyHorizontalScroll(centerContainerViewport);\n    }\n\n    private onBodyHorizontalScroll(eSource: HTMLElement): void {\n        const centerContainerViewport = this.centerRowContainerCtrl.getViewportElement();\n        const { scrollLeft } = centerContainerViewport;\n\n        if (this.shouldBlockScrollUpdate('horizontal', scrollLeft, true)) {\n            return;\n        }\n\n        // we do Math.round() rather than Math.floor(), to mirror how scroll values are applied.\n        // eg if a scale is applied (ie user has zoomed the browser), then applying scroll=200\n        // could result in 199.88, which then floor(199.88) = 199, however round(199.88) = 200.\n        // initially Math.floor() was used, however this caused (almost) infinite loop with aligned grids,\n        // as the scroll would move 1px at at time bouncing from one grid to the next (eg one grid would cause\n        // scroll to 200px, the next to 199px, then the first back to 198px and so on).\n        this.doHorizontalScroll(Math.round(getScrollLeft(eSource, this.enableRtl)));\n        this.resetLastHorizontalScrollElementDebounced();\n    }\n\n    private onVerticalScroll(): void {\n        const scrollTop: number = this.eBodyViewport.scrollTop;\n\n        if (this.shouldBlockScrollUpdate('vertical', scrollTop, true)) { return; }\n        this.animationFrameService.setScrollTop(scrollTop);\n        this.nextScrollTop = scrollTop;\n\n        if (this.gridOptionsWrapper.isSuppressAnimationFrame()) {\n            this.scrollTop = this.nextScrollTop;\n            this.redrawRowsAfterScroll();\n        } else {\n            this.animationFrameService.schedule();\n        }\n    }\n\n    private resetLastHorizontalScrollElement() {\n        this.lastHorizontalScrollElement = null;\n    }\n\n    private doHorizontalScroll(scrollLeft: number): void {\n        const fakeHScrollViewport = this.ctrlsService.getFakeHScrollCtrl().getViewport();\n        const fakeScrollLeft = getScrollLeft(fakeHScrollViewport, this.enableRtl);\n\n        if (this.scrollLeft === scrollLeft && scrollLeft === fakeScrollLeft) { return; }\n\n        this.scrollLeft = scrollLeft;\n\n        this.fireScrollEvent('horizontal');\n        this.horizontallyScrollHeaderCenterAndFloatingCenter(scrollLeft);\n        this.onHorizontalViewportChanged();\n    }\n\n    private fireScrollEvent(direction: 'horizontal' | 'vertical'): void {\n        const bodyScrollEvent: BodyScrollEvent = {\n            type: Events.EVENT_BODY_SCROLL,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            direction,\n            left: this.scrollLeft,\n            top: this.scrollTop\n        };\n\n        this.eventService.dispatchEvent(bodyScrollEvent);\n\n        window.clearTimeout(this.scrollTimer);\n        this.scrollTimer = undefined;\n\n        this.scrollTimer = window.setTimeout(() => {\n            const bodyScrollEndEvent: BodyScrollEndEvent = Object.assign({}, bodyScrollEvent, {\n                type: Events.EVENT_BODY_SCROLL_END\n            });\n            this.eventService.dispatchEvent(bodyScrollEndEvent);\n        }, 100);\n    }\n\n    private shouldBlockScrollUpdate(direction: ScrollDirection, scrollTo: number, touchOnly: boolean = false): boolean {\n        // touch devices allow elastic scroll - which temporally scrolls the panel outside of the viewport\n        // (eg user uses touch to go to the left of the grid, but drags past the left, the rows will actually\n        // scroll past the left until the user releases the mouse). when this happens, we want ignore the scroll,\n        // as otherwise it was causing the rows and header to flicker.\n\n        // sometimes when scrolling, we got values that extended the maximum scroll allowed. we used to\n        // ignore these scrolls. problem is the max scroll position could be skipped (eg the previous scroll event\n        // could be 10px before the max position, and then current scroll event could be 20px after the max position).\n        // if we just ignored the last event, we would be setting the scroll to 10px before the max position, when in\n        // actual fact the user has exceeded the max scroll and thus scroll should be set to the max.\n\n        if (touchOnly && !isIOSUserAgent()) { return false; }\n\n        if (direction === 'vertical') {\n            const clientHeight = getInnerHeight(this.eBodyViewport);\n            const { scrollHeight } = this.eBodyViewport;\n            if (scrollTo < 0 || (scrollTo + clientHeight > scrollHeight)) {\n                return true;\n            }\n        }\n\n        if (direction === 'horizontal') {\n            const clientWidth = this.centerRowContainerCtrl.getCenterWidth();\n            const { scrollWidth } = this.centerRowContainerCtrl.getViewportElement();\n\n            if (this.enableRtl && isRtlNegativeScroll()) {\n                if (scrollTo > 0) { return true; }\n            } else if (scrollTo < 0) { return true; }\n\n            if (Math.abs(scrollTo) + clientWidth > scrollWidth) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private redrawRowsAfterScroll(): void {\n        this.fireScrollEvent('vertical');\n    }\n\n    private onHorizontalViewportChanged(): void {\n        this.centerRowContainerCtrl.onHorizontalViewportChanged();\n    }\n\n    // this is to cater for AG-3274, where grid is removed from the dom and then inserted back in again.\n    // (which happens with some implementations of tabbing). this can result in horizontal scroll getting\n    // reset back to the left, however no scroll event is fired. so we need to get header to also scroll\n    // back to the left to be kept in sync.\n    // adding and removing the grid from the DOM both resets the scroll position and\n    // triggers a resize event, so notify listeners if the scroll position has changed\n    public checkScrollLeft(): void {\n        if (this.scrollLeft !== this.centerRowContainerCtrl.getCenterViewportScrollLeft()) {\n            this.onBodyHorizontalScroll(this.centerRowContainerCtrl.getViewportElement());\n        }\n    }\n\n    public executeAnimationFrameScroll(): boolean {\n        const frameNeeded = this.scrollTop != this.nextScrollTop;\n\n        if (frameNeeded) {\n            this.scrollTop = this.nextScrollTop;\n            this.redrawRowsAfterScroll();\n        }\n\n        return frameNeeded;\n    }\n\n    // called by scrollHorizontally method and alignedGridsService\n    public setHorizontalScrollPosition(hScrollPosition: number): void {\n        const minScrollLeft = 0;\n        const maxScrollLeft = this.centerRowContainerCtrl.getViewportElement().scrollWidth - this.centerRowContainerCtrl.getCenterWidth();\n\n        if (this.shouldBlockScrollUpdate('horizontal', hScrollPosition)) {\n            if (this.enableRtl && isRtlNegativeScroll()) {\n                hScrollPosition = hScrollPosition > 0 ? 0 : maxScrollLeft;\n            } else {\n                hScrollPosition = Math.min(Math.max(hScrollPosition, minScrollLeft), maxScrollLeft);\n            }\n        }\n\n        setScrollLeft(this.centerRowContainerCtrl.getViewportElement(), Math.abs(hScrollPosition), this.enableRtl);\n\n        // we need to manually do the event handling (rather than wait for the event)\n        // for the alignedGridsService, as if we don't, the aligned grid service gets\n        // notified async, and then it's 'consuming' flag doesn't get used right, and\n        // we can end up with an infinite loop\n        this.doHorizontalScroll(hScrollPosition);\n    }\n\n    public setVerticalScrollPosition(vScrollPosition: number): void {\n        this.eBodyViewport.scrollTop = vScrollPosition;\n    }\n\n    public getVScrollPosition(): { top: number, bottom: number; } {\n        const result = {\n            top: this.eBodyViewport.scrollTop,\n            bottom: this.eBodyViewport.scrollTop + this.eBodyViewport.offsetHeight\n        };\n        return result;\n    }\n\n    public getHScrollPosition(): { left: number, right: number; } {\n        return this.centerRowContainerCtrl.getHScrollPosition();\n    }\n\n    public isHorizontalScrollShowing(): boolean {\n        return this.centerRowContainerCtrl.isHorizontalScrollShowing();\n    }\n\n    // called by the headerRootComp and moveColumnController\n    public scrollHorizontally(pixels: number): number {\n        const oldScrollPosition = this.centerRowContainerCtrl.getViewportElement().scrollLeft;\n\n        this.setHorizontalScrollPosition(oldScrollPosition + pixels);\n        return this.centerRowContainerCtrl.getViewportElement().scrollLeft - oldScrollPosition;\n    }\n\n    // gets called by rowRenderer when new data loaded, as it will want to scroll to the top\n    public scrollToTop(): void {\n        this.eBodyViewport.scrollTop = 0;\n    }\n\n    // Valid values for position are bottom, middle and top\n    public ensureNodeVisible(comparator: any, position: 'top' | 'bottom' | 'middle' | null = null) {\n\n        // look for the node index we want to display\n        const rowCount = this.rowModel.getRowCount();\n        const comparatorIsAFunction = typeof comparator === 'function';\n        let indexToSelect = -1;\n        // go through all the nodes, find the one we want to show\n        for (let i = 0; i < rowCount; i++) {\n            const node = this.rowModel.getRow(i);\n            if (comparatorIsAFunction) {\n                if (comparator(node)) {\n                    indexToSelect = i;\n                    break;\n                }\n            } else {\n                // check object equality against node and data\n                if (comparator === node || comparator === node!.data) {\n                    indexToSelect = i;\n                    break;\n                }\n            }\n        }\n        if (indexToSelect >= 0) {\n            this.ensureIndexVisible(indexToSelect, position);\n        }\n    }\n\n    // Valid values for position are bottom, middle and top\n    // position should be {'top','middle','bottom', or undefined/null}.\n    // if undefined/null, then the grid will to the minimal amount of scrolling,\n    // eg if grid needs to scroll up, it scrolls until row is on top,\n    //    if grid needs to scroll down, it scrolls until row is on bottom,\n    //    if row is already in view, grid does not scroll\n    public ensureIndexVisible(index: any, position?: 'top' | 'bottom' | 'middle' | null) {\n        // if for print or auto height, everything is always visible\n        if (this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT) { return; }\n\n        const rowCount = this.paginationProxy.getRowCount();\n\n        if (typeof index !== 'number' || index < 0 || index >= rowCount) {\n            console.warn('invalid row index for ensureIndexVisible: ' + index);\n            return;\n        }\n\n        const isPaging = this.gridOptionsWrapper.isPagination();\n        const paginationPanelEnabled = isPaging && !this.gridOptionsWrapper.isSuppressPaginationPanel();\n\n        if (!paginationPanelEnabled) {\n            this.paginationProxy.goToPageWithIndex(index);\n        }\n\n        const rowNode = this.paginationProxy.getRow(index);\n        let rowGotShiftedDuringOperation: boolean;\n\n        do {\n            const startingRowTop = rowNode!.rowTop;\n            const startingRowHeight = rowNode!.rowHeight;\n\n            const paginationOffset = this.paginationProxy.getPixelOffset();\n            const rowTopPixel = rowNode!.rowTop! - paginationOffset;\n            const rowBottomPixel = rowTopPixel + rowNode!.rowHeight!;\n\n            const scrollPosition = this.getVScrollPosition();\n            const heightOffset = this.heightScaler.getDivStretchOffset();\n\n            const vScrollTop = scrollPosition.top + heightOffset;\n            const vScrollBottom = scrollPosition.bottom + heightOffset;\n\n            const viewportHeight = vScrollBottom - vScrollTop;\n\n            // work out the pixels for top, middle and bottom up front,\n            // make the if/else below easier to read\n            const pxTop = this.heightScaler.getScrollPositionForPixel(rowTopPixel);\n            const pxBottom = this.heightScaler.getScrollPositionForPixel(rowBottomPixel - viewportHeight);\n            // make sure if middle, the row is not outside the top of the grid\n            const pxMiddle = Math.min((pxTop + pxBottom) / 2, rowTopPixel);\n\n            const rowBelowViewport = vScrollTop > rowTopPixel;\n            const rowAboveViewport = vScrollBottom < rowBottomPixel;\n\n            let newScrollPosition: number | null = null;\n\n            if (position === 'top') {\n                newScrollPosition = pxTop;\n            } else if (position === 'bottom') {\n                newScrollPosition = pxBottom;\n            } else if (position === 'middle') {\n                newScrollPosition = pxMiddle;\n            } else if (rowBelowViewport) {\n                // if row is before, scroll up with row at top\n                newScrollPosition = pxTop;\n            } else if (rowAboveViewport) {\n                // if row is below, scroll down with row at bottom\n                newScrollPosition = pxBottom;\n            }\n\n            if (newScrollPosition !== null) {\n                this.eBodyViewport.scrollTop = newScrollPosition;\n                this.rowRenderer.redrawAfterScroll();\n            }\n\n            // the row can get shifted if during the rendering (during rowRenderer.redrawAfterScroll()),\n            // the height of a row changes due to lazy calculation of row heights when using\n            // colDef.autoHeight or gridOptions.getRowHeight.\n            // if row was shifted, then the position we scrolled to is incorrect.\n            rowGotShiftedDuringOperation = (startingRowTop !== rowNode!.rowTop)\n                || (startingRowHeight !== rowNode!.rowHeight);\n\n        } while (rowGotShiftedDuringOperation);\n\n        // so when we return back to user, the cells have rendered\n        this.animationFrameService.flushAllFrames();\n    }\n\n    public ensureColumnVisible(key: any, position: 'auto' | 'start' | 'middle' | 'end' = 'auto'): void {\n        const column = this.columnModel.getGridColumn(key);\n\n        if (!column) { return; }\n\n        // calling ensureColumnVisible on a pinned column doesn't make sense\n        if (column.isPinned()) { return; }\n\n        // defensive\n        if (!this.columnModel.isColumnDisplayed(column)) { return; }\n\n        const newHorizontalScroll: number | null = this.getPositionedHorizontalScroll(column, position);\n\n        if (newHorizontalScroll !== null) {\n            this.centerRowContainerCtrl.setCenterViewportScrollLeft(newHorizontalScroll);\n        }\n\n        // this will happen anyway, as the move will cause a 'scroll' event on the body, however\n        // it is possible that the ensureColumnVisible method is called from within AG Grid and\n        // the caller will need to have the columns rendered to continue, which will be before\n        // the event has been worked on (which is the case for cell navigation).\n        this.centerRowContainerCtrl.onHorizontalViewportChanged();\n\n        // so when we return back to user, the cells have rendered\n        this.animationFrameService.flushAllFrames();\n    }\n\n    private getPositionedHorizontalScroll(column: Column, position: 'auto' | 'start' | 'middle' | 'end'): number | null {\n        const { columnBeforeStart, columnAfterEnd } = this.isColumnOutsideViewport(column);\n\n        const viewportTooSmallForColumn = this.centerRowContainerCtrl.getCenterWidth() < column.getActualWidth();\n        const viewportWidth = this.centerRowContainerCtrl.getCenterWidth();\n\n        const isRtl = this.enableRtl;\n\n        let alignColToStart = (isRtl ? columnBeforeStart : columnAfterEnd) || viewportTooSmallForColumn;\n        let alignColToEnd = isRtl ? columnAfterEnd : columnBeforeStart;\n\n        if (position !== 'auto') {\n            alignColToStart = position === 'start';\n            alignColToEnd = position === 'end';\n        }\n\n        const isMiddle = position === 'middle';\n\n        if (alignColToStart || alignColToEnd || isMiddle) {\n            const { colLeft, colMiddle, colRight } = this.getColumnBounds(column);\n\n            if (isMiddle) {\n                return colMiddle - viewportWidth / 2;\n            }\n\n            if (alignColToStart) {\n                return isRtl ?  colRight : colLeft;\n            }\n\n            return isRtl ? (colLeft - viewportWidth) : (colRight - viewportWidth);\n        }\n\n        return null;\n    }\n\n    private isColumnOutsideViewport(column: Column): { columnBeforeStart: boolean, columnAfterEnd: boolean } {\n        const { start: viewportStart, end: viewportEnd } = this.getViewportBounds();\n        const { colLeft, colRight } = this.getColumnBounds(column);\n\n        const isRtl = this.enableRtl;\n\n        const columnBeforeStart = isRtl ? (viewportStart > colRight) : (viewportEnd < colRight);\n        const columnAfterEnd = isRtl ? (viewportEnd < colLeft) : (viewportStart > colLeft);\n\n        return { columnBeforeStart, columnAfterEnd };\n    }\n\n    private getColumnBounds(column: Column): { colLeft: number, colMiddle: number, colRight: number } {\n        const isRtl = this.enableRtl;\n        const bodyWidth = this.columnModel.getBodyContainerWidth();\n        const colWidth = column.getActualWidth();\n        const colLeft = column.getLeft()!;\n        const multiplier = isRtl ? -1 : 1;\n\n        const colLeftPixel = isRtl ? (bodyWidth - colLeft) : colLeft;\n        const colRightPixel = colLeftPixel + colWidth * multiplier;\n        const colMidPixel = colLeftPixel + colWidth / 2 * multiplier;\n\n        return { colLeft: colLeftPixel, colMiddle: colMidPixel, colRight: colRightPixel };\n    }\n\n    private getViewportBounds(): { start: number, end: number, width: number } {\n        const viewportWidth = this.centerRowContainerCtrl.getCenterWidth();\n        const scrollPosition = this.centerRowContainerCtrl.getCenterViewportScrollLeft();\n\n        const viewportStartPixel = scrollPosition;\n        const viewportEndPixel = viewportWidth + scrollPosition;\n\n        return { start: viewportStartPixel, end: viewportEndPixel, width: viewportWidth };\n    }\n}","export class AutoScrollService {\n\n    private tickingInterval: number | null = null;\n\n    private scrollHorizontally: boolean;\n    private scrollVertically: boolean;\n\n    private tickLeft: boolean;\n    private tickRight: boolean;\n    private tickUp: boolean;\n    private tickDown: boolean;\n\n    private scrollContainer: HTMLElement;\n    private scrollByTick: number;\n\n    private getVerticalPosition: () => number;\n    private setVerticalPosition: (position: number) => void;\n\n    private getHorizontalPosition: () => number;\n    private setHorizontalPosition: (position: number) => void;\n\n    private shouldSkipVerticalScroll: () => boolean;\n    private shouldSkipHorizontalScroll: () => boolean;\n\n    private onScrollCallback: (() => void) | null = null;\n\n    private tickCount: number;\n\n    constructor(params: {\n        scrollContainer: HTMLElement,\n        scrollAxis: 'x' | 'y' | 'xy',\n        scrollByTick?: number,\n        getVerticalPosition?: () => number,\n        setVerticalPosition?: (position: number) => void,\n        getHorizontalPosition?: () => number,\n        setHorizontalPosition?: (position: number) => void,\n        shouldSkipVerticalScroll?: () => boolean,\n        shouldSkipHorizontalScroll?: () => boolean,\n        onScrollCallback?: () => void\n    }) {\n        this.scrollContainer = params.scrollContainer;\n        this.scrollHorizontally = params.scrollAxis.indexOf('x') !== -1;\n        this.scrollVertically = params.scrollAxis.indexOf('y') !== -1;\n\n        this.scrollByTick = params.scrollByTick != null ? params.scrollByTick : 20;\n\n        if (params.onScrollCallback) {\n            this.onScrollCallback = params.onScrollCallback;\n        }\n\n        if (this.scrollVertically) {\n            this.getVerticalPosition = params.getVerticalPosition!;\n            this.setVerticalPosition = params.setVerticalPosition!;\n        }\n\n        if (this.scrollHorizontally) {\n            this.getHorizontalPosition = params.getHorizontalPosition!;\n            this.setHorizontalPosition = params.setHorizontalPosition!;\n        }\n\n        this.shouldSkipVerticalScroll = params.shouldSkipVerticalScroll || (() => false);\n        this.shouldSkipHorizontalScroll = params.shouldSkipHorizontalScroll || (() => false);\n    }\n\n    public check(mouseEvent: MouseEvent, forceSkipVerticalScroll: boolean = false): void {\n        const skipVerticalScroll = forceSkipVerticalScroll || this.shouldSkipVerticalScroll();\n\n        if (skipVerticalScroll && this.shouldSkipHorizontalScroll()) { return; }\n\n        const rect = this.scrollContainer.getBoundingClientRect();\n        const scrollTick = this.scrollByTick;\n\n        this.tickLeft = mouseEvent.clientX < (rect.left + scrollTick);\n        this.tickRight = mouseEvent.clientX > (rect.right - scrollTick);\n        this.tickUp = mouseEvent.clientY < (rect.top + scrollTick) && !skipVerticalScroll;\n        this.tickDown = mouseEvent.clientY > (rect.bottom - scrollTick) && !skipVerticalScroll;\n\n        if (this.tickLeft || this.tickRight || this.tickUp || this.tickDown) {\n            this.ensureTickingStarted();\n        } else {\n            this.ensureCleared();\n        }\n    }\n\n    private ensureTickingStarted(): void {\n        if (this.tickingInterval === null) {\n            this.tickingInterval = window.setInterval(this.doTick.bind(this), 100);\n            this.tickCount = 0;\n        }\n    }\n\n    private doTick(): void {\n        this.tickCount++;\n\n        let tickAmount: number;\n\n        tickAmount = this.tickCount > 20 ? 200 : (this.tickCount > 10 ? 80 : 40);\n\n        if (this.scrollVertically) {\n            const vScrollPosition = this.getVerticalPosition();\n            if (this.tickUp) {\n                this.setVerticalPosition(vScrollPosition - tickAmount);\n            }\n\n            if (this.tickDown) {\n                this.setVerticalPosition(vScrollPosition + tickAmount);\n            }\n        }\n\n        if (this.scrollHorizontally) {\n            const hScrollPosition = this.getHorizontalPosition();\n            if (this.tickLeft) {\n                this.setHorizontalPosition(hScrollPosition - tickAmount);\n            }\n\n            if (this.tickRight) {\n                this.setHorizontalPosition(hScrollPosition + tickAmount);\n            }\n        }\n\n        if (this.onScrollCallback) {\n            this.onScrollCallback();\n        }\n    }\n\n    public ensureCleared(): void {\n        if (this.tickingInterval) {\n            window.clearInterval(this.tickingInterval);\n            this.tickingInterval = null;\n        }\n    }\n}\n","import {\n    DragAndDropService,\n    DraggingEvent,\n    DragSourceType,\n    DropTarget,\n    VerticalDirection\n} from \"../dragAndDrop/dragAndDropService\";\nimport { Autowired, Optional, PostConstruct } from \"../context/context\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { FocusService } from \"../focusService\";\nimport { IRangeService } from \"../interfaces/IRangeService\";\nimport { RowDragEndEvent, RowDragEnterEvent, RowDragEvent, RowDragLeaveEvent, RowDragMoveEvent } from \"../events\";\nimport { Events } from \"../eventKeys\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { IClientSideRowModel } from \"../interfaces/iClientSideRowModel\";\nimport { RowHighlightPosition, RowNode } from \"../entities/rowNode\";\nimport { SelectionService } from \"../selectionService\";\nimport { MouseEventService } from \"./mouseEventService\";\nimport { last } from '../utils/array';\nimport { SortController } from \"../sortController\";\nimport { FilterManager } from \"../filter/filterManager\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { missingOrEmpty } from \"../utils/generic\";\nimport { doOnce } from \"../utils/function\";\nimport { PaginationProxy } from \"../pagination/paginationProxy\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { AutoScrollService } from \"../autoScrollService\";\n\nimport { GridApi } from \"../gridApi\";\nimport { ColumnApi } from \"../columns/columnApi\";\n\nexport interface RowDropZoneEvents {\n    /** Callback function that will be executed when the rowDrag enters the target. */\n    onDragEnter?: (params: RowDragEnterEvent) => void;\n    /** Callback function that will be executed when the rowDrag leaves the target */\n    onDragLeave?: (params: RowDragLeaveEvent) => void;\n    /**\n     * Callback function that will be executed when the rowDrag is dragged inside the target.\n     * Note: this gets called multiple times.\n     */\n    onDragging?: (params: RowDragMoveEvent) => void;\n    /** Callback function that will be executed when the rowDrag drops rows within the target. */\n    onDragStop?: (params: RowDragEndEvent) => void;\n}\n\nexport interface RowDropZoneParams extends RowDropZoneEvents {\n    /** A callback method that returns the DropZone HTMLElement. */\n    getContainer: () => HTMLElement;\n}\n\nexport class RowDragFeature extends BeanStub implements DropTarget {\n\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n    // this feature is only created when row model is ClientSide, so we can type it as ClientSide\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('sortController') private sortController: SortController;\n    @Autowired('filterManager') private filterManager: FilterManager;\n    @Autowired('selectionService') private selectionService: SelectionService;\n    @Autowired('mouseEventService') private mouseEventService: MouseEventService;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Optional('rangeService') private rangeService: IRangeService;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    private clientSideRowModel: IClientSideRowModel;\n    private eContainer: HTMLElement;\n    private isMultiRowDrag: boolean = false;\n    private isGridSorted: boolean = false;\n    private isGridFiltered: boolean = false;\n    private isRowGroupActive: boolean = false;\n    private lastDraggingEvent: DraggingEvent;\n    private autoScrollService: AutoScrollService;\n\n    constructor(eContainer: HTMLElement) {\n        super();\n        this.eContainer = eContainer;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        if (this.gridOptionsWrapper.isRowModelDefault()) {\n            this.clientSideRowModel = this.rowModel as IClientSideRowModel;\n        }\n\n        const refreshStatus = () => {\n            this.onSortChanged();\n            this.onFilterChanged();\n            this.onRowGroupChanged();\n        };\n\n        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onRowGroupChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, () => {\n            refreshStatus();\n        });\n\n        refreshStatus();\n\n        this.ctrlsService.whenReady(() => {\n            const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n            this.autoScrollService = new AutoScrollService({\n                scrollContainer: gridBodyCon.getBodyViewportElement(),\n                scrollAxis: 'y',\n                getVerticalPosition: () => gridBodyCon.getScrollFeature().getVScrollPosition().top,\n                setVerticalPosition: (position) => gridBodyCon.getScrollFeature().setVerticalScrollPosition(position),\n                onScrollCallback: () => { this.onDragging(this.lastDraggingEvent); }\n            });\n        });\n    }\n\n    private onSortChanged(): void {\n        this.isGridSorted = this.sortController.isSortActive();\n    }\n\n    private onFilterChanged(): void {\n        this.isGridFiltered = this.filterManager.isAnyFilterPresent();\n    }\n\n    private onRowGroupChanged(): void {\n        const rowGroups = this.columnModel.getRowGroupColumns();\n        this.isRowGroupActive = !missingOrEmpty(rowGroups);\n    }\n\n    public getContainer(): HTMLElement {\n        return this.eContainer;\n    }\n\n    public isInterestedIn(type: DragSourceType): boolean {\n        return type === DragSourceType.RowDrag;\n    }\n\n    public getIconName(): string {\n        const managedDrag = this.gridOptionsWrapper.isRowDragManaged();\n\n        if (managedDrag && this.shouldPreventRowMove()) {\n            return DragAndDropService.ICON_NOT_ALLOWED;\n        }\n\n        return DragAndDropService.ICON_MOVE;\n    }\n\n    public shouldPreventRowMove(): boolean {\n        return this.isGridSorted || this.isGridFiltered || this.isRowGroupActive;\n    }\n\n    private getRowNodes(draggingEvent: DraggingEvent): RowNode[] {\n        if (!this.isFromThisGrid(draggingEvent)) {\n            return draggingEvent.dragItem.rowNodes || [];\n        }\n\n        const isRowDragMultiRow = this.gridOptionsWrapper.isRowDragMultiRow();\n        const selectedNodes = [...this.selectionService.getSelectedNodes()].sort(\n            (a, b) => this.getRowIndexNumber(a) - this.getRowIndexNumber(b)\n        );\n\n        const currentNode = draggingEvent.dragItem.rowNode!;\n\n        if (isRowDragMultiRow && selectedNodes.indexOf(currentNode) !== -1) {\n            this.isMultiRowDrag = true;\n            return selectedNodes;\n        }\n\n        this.isMultiRowDrag = false;\n\n        return [currentNode];\n    }\n\n    public onDragEnter(draggingEvent: DraggingEvent): void {\n        // builds a lits of all rows being dragged before firing events\n        draggingEvent.dragItem.rowNodes = this.getRowNodes(draggingEvent);\n\n        // when entering, we fire the enter event, then in onEnterOrDragging,\n        // we also fire the move event. so we get both events when entering.\n        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_ENTER, draggingEvent);\n\n        this.getRowNodes(draggingEvent).forEach(rowNode => {\n            rowNode.setDragging(true);\n        });\n\n        this.onEnterOrDragging(draggingEvent);\n    }\n\n    public onDragging(draggingEvent: DraggingEvent): void {\n        this.onEnterOrDragging(draggingEvent);\n    }\n\n    private isFromThisGrid(draggingEvent: DraggingEvent) {\n        const { dragSourceDomDataKey } = draggingEvent.dragSource;\n\n        return dragSourceDomDataKey === this.gridOptionsWrapper.getDomDataKey();\n    }\n\n    private isDropZoneWithinThisGrid(draggingEvent: DraggingEvent): boolean {\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const gridGui = gridBodyCon.getGui();\n        const { dropZoneTarget } = draggingEvent;\n\n        return !gridGui.contains(dropZoneTarget);\n    }\n\n    private onEnterOrDragging(draggingEvent: DraggingEvent): void {\n        // this event is fired for enter and move\n        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_MOVE, draggingEvent);\n\n        this.lastDraggingEvent = draggingEvent;\n\n        const pixel = this.mouseEventService.getNormalisedPosition(draggingEvent).y;\n        const managedDrag = this.gridOptionsWrapper.isRowDragManaged();\n\n        if (managedDrag) {\n            this.doManagedDrag(draggingEvent, pixel);\n        }\n\n        this.autoScrollService.check(draggingEvent.event);\n    }\n\n    private doManagedDrag(draggingEvent: DraggingEvent, pixel: number): void {\n        const isFromThisGrid = this.isFromThisGrid(draggingEvent);\n        const managedDrag = this.gridOptionsWrapper.isRowDragManaged();\n        const rowNodes = draggingEvent.dragItem.rowNodes!;\n\n        if (managedDrag && this.shouldPreventRowMove()) {\n            return;\n        }\n\n        if (this.gridOptionsWrapper.isSuppressMoveWhenRowDragging() || !isFromThisGrid) {\n            if (!this.isDropZoneWithinThisGrid(draggingEvent)) {\n                this.clientSideRowModel.highlightRowAtPixel(rowNodes[0], pixel);\n            }\n        } else {\n            this.moveRows(rowNodes, pixel);\n        }\n    }\n\n    private getRowIndexNumber(rowNode: RowNode): number {\n        return parseInt(last(rowNode.getRowIndexString().split('-')), 10);\n    }\n\n    private moveRowAndClearHighlight(draggingEvent: DraggingEvent): void {\n        const lastHighlightedRowNode = this.clientSideRowModel.getLastHighlightedRowNode();\n        const isBelow = lastHighlightedRowNode && lastHighlightedRowNode.highlighted === RowHighlightPosition.Below;\n        const pixel = this.mouseEventService.getNormalisedPosition(draggingEvent).y;\n        const rowNodes = draggingEvent.dragItem.rowNodes;\n\n        let increment = isBelow ? 1 : 0;\n\n        if (this.isFromThisGrid(draggingEvent)) {\n            rowNodes!.forEach(rowNode => {\n                if (rowNode.rowTop! < pixel) {\n                    increment -= 1;\n                }\n            });\n            this.moveRows(rowNodes!, pixel, increment);\n        } else {\n            const getRowIdFunc = this.gridOptionsWrapper.getRowIdFunc();\n\n            let addIndex = this.clientSideRowModel.getRowIndexAtPixel(pixel) + 1;\n\n            if (this.clientSideRowModel.getHighlightPosition(pixel) === RowHighlightPosition.Above) {\n                addIndex--;\n            }\n\n            this.clientSideRowModel.updateRowData({\n                add: rowNodes!\n                    .map(node => node.data)\n                    .filter(data => !this.clientSideRowModel.getRowNode(\n                        getRowIdFunc ? getRowIdFunc({ data, level: 0 }) : data.id)\n                    ),\n                addIndex\n            });\n        }\n\n        this.clearRowHighlight();\n    }\n\n    private clearRowHighlight(): void {\n        this.clientSideRowModel.highlightRowAtPixel(null);\n    }\n\n    private moveRows(rowNodes: RowNode[], pixel: number, increment: number = 0): void {\n        const rowWasMoved = this.clientSideRowModel.ensureRowsAtPixel(rowNodes, pixel, increment);\n\n        if (rowWasMoved) {\n            this.focusService.clearFocusedCell();\n            if (this.rangeService) {\n                this.rangeService.removeAllCellRanges();\n            }\n        }\n    }\n\n    public addRowDropZone(params: RowDropZoneParams): void {\n        if (!params.getContainer()) {\n            doOnce(() => console.warn('AG Grid: addRowDropZone - A container target needs to be provided'), 'add-drop-zone-empty-target');\n            return;\n        }\n\n        if (this.dragAndDropService.findExternalZone(params)) {\n            console.warn('AG Grid: addRowDropZone - target already exists in the list of DropZones. Use `removeRowDropZone` before adding it again.');\n            return;\n        }\n\n        let processedParams: RowDropZoneParams = {\n            getContainer: params.getContainer\n        };\n\n        if ((params as any).fromGrid) {\n            (params as any).fromGrid = undefined;\n            processedParams = params;\n        } else {\n            if (params.onDragEnter) {\n                processedParams.onDragEnter = (e) => {\n                    params.onDragEnter!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_ENTER, e as any));\n                };\n            }\n            if (params.onDragLeave) {\n                processedParams.onDragLeave = (e) => {\n                    params.onDragLeave!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_LEAVE, e as any));\n                };\n            }\n            if (params.onDragging) {\n                processedParams.onDragging = (e) => {\n                    params.onDragging!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_MOVE, e as any));\n                };\n            }\n            if (params.onDragStop) {\n                processedParams.onDragStop = (e) => {\n                    params.onDragStop!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_END, e as any));\n                };\n            }\n        }\n\n        this.dragAndDropService.addDropTarget({\n            isInterestedIn: (type: DragSourceType) => type === DragSourceType.RowDrag,\n            getIconName: () => DragAndDropService.ICON_MOVE,\n            external: true,\n            ...processedParams as any\n        });\n    }\n\n    public getRowDropZone(events?: RowDropZoneEvents): RowDropZoneParams {\n        const getContainer = this.getContainer.bind(this);\n        const onDragEnter = this.onDragEnter.bind(this);\n        const onDragLeave = this.onDragLeave.bind(this);\n        const onDragging = this.onDragging.bind(this);\n        const onDragStop = this.onDragStop.bind(this);\n\n        if (!events) {\n            return { getContainer, onDragEnter, onDragLeave, onDragging, onDragStop, /* @private */ fromGrid: true } as RowDropZoneParams;\n        }\n\n        return {\n            getContainer,\n            onDragEnter: events.onDragEnter\n                ? ((e) => {\n                    onDragEnter(e);\n                    events.onDragEnter!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_ENTER, e as any));\n                })\n                : onDragEnter,\n            onDragLeave: events.onDragLeave\n                ? ((e) => {\n                    onDragLeave(e);\n                    events.onDragLeave!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_LEAVE, e as any));\n                })\n                : onDragLeave,\n            onDragging: events.onDragging\n                ? ((e) => {\n                    onDragging(e);\n                    events.onDragging!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_MOVE, e as any));\n                })\n                : onDragging,\n            onDragStop: events.onDragStop\n                ? ((e) => {\n                    onDragStop(e);\n                    events.onDragStop!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_END, e as any));\n                })\n                : onDragStop,\n            fromGrid: true /* @private */\n        } as RowDropZoneParams;\n    }\n\n    private draggingToRowDragEvent(type: string, draggingEvent: DraggingEvent): RowDragEvent {\n        const yNormalised = this.mouseEventService.getNormalisedPosition(draggingEvent).y;\n        const mouseIsPastLastRow = yNormalised > this.paginationProxy.getCurrentPageHeight();\n\n        let overIndex = -1;\n        let overNode: RowNode | undefined;\n\n        if (!mouseIsPastLastRow) {\n            overIndex = this.rowModel.getRowIndexAtPixel(yNormalised);\n            overNode = this.rowModel.getRow(overIndex);\n        }\n\n        let vDirectionString: string | null;\n\n        switch (draggingEvent.vDirection) {\n            case VerticalDirection.Down:\n                vDirectionString = 'down';\n                break;\n            case VerticalDirection.Up:\n                vDirectionString = 'up';\n                break;\n            default:\n                vDirectionString = null;\n                break;\n        }\n\n        const event: RowDragEvent = {\n            type: type,\n            api: this.gridOptionsWrapper.getApi()!,\n            columnApi: this.gridOptionsWrapper.getColumnApi()!,\n            event: draggingEvent.event,\n            node: draggingEvent.dragItem.rowNode!,\n            nodes: draggingEvent.dragItem.rowNodes!,\n            overIndex: overIndex,\n            overNode: overNode,\n            y: yNormalised,\n            vDirection: vDirectionString!\n        };\n\n        return event;\n    }\n\n    private dispatchGridEvent(type: string, draggingEvent: DraggingEvent): void {\n        const event = this.draggingToRowDragEvent(type, draggingEvent);\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public onDragLeave(draggingEvent: DraggingEvent): void {\n        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_LEAVE, draggingEvent);\n        this.stopDragging(draggingEvent);\n\n        if (this.gridOptionsWrapper.isRowDragManaged()) {\n            this.clearRowHighlight();\n        }\n\n        if (this.isFromThisGrid(draggingEvent)) {\n            this.isMultiRowDrag = false;\n        }\n    }\n\n    public onDragStop(draggingEvent: DraggingEvent): void {\n        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_END, draggingEvent);\n        this.stopDragging(draggingEvent);\n\n        if (\n            this.gridOptionsWrapper.isRowDragManaged() &&\n            (this.gridOptionsWrapper.isSuppressMoveWhenRowDragging() || !this.isFromThisGrid(draggingEvent)) &&\n            !this.isDropZoneWithinThisGrid(draggingEvent)\n        ) {\n            this.moveRowAndClearHighlight(draggingEvent);\n        }\n    }\n\n    private stopDragging(draggingEvent: DraggingEvent): void {\n        this.autoScrollService.ensureCleared();\n\n        this.getRowNodes(draggingEvent).forEach(rowNode => {\n            rowNode.setDragging(false);\n        });\n    }\n}\n","import { Column } from \"../entities/column\";\nimport { CellPosition } from \"../entities/cellPosition\";\nimport { RowPosition } from \"../entities/rowPosition\";\nimport { CellCtrl } from \"../rendering/cell/cellCtrl\";\n\nexport interface IRangeService {\n    isEmpty(): boolean;\n    removeAllCellRanges(): void;\n    getCellRangeCount(cell: CellPosition): number;\n    isCellInAnyRange(cell: CellPosition): boolean;\n    isCellInSpecificRange(cell: CellPosition, range: CellRange): boolean;\n    isBottomRightCell(cellRange: CellRange, cell: CellPosition): boolean;\n    isContiguousRange(cellRange: CellRange): boolean;\n    isMoreThanOneCell(): boolean;\n    areAllRangesAbleToMerge(): boolean;\n    onDragStart(mouseEvent: MouseEvent): void;\n    onDragStop(): void;\n    onDragging(mouseEvent: MouseEvent): void;\n    getCellRanges(): CellRange[];\n    setRangeToCell(cell: CellPosition, appendRange?: boolean): void;\n    setCellRange(params: CellRangeParams): void;\n    addCellRange(params: CellRangeParams): void;\n    extendLatestRangeInDirection(event: KeyboardEvent): CellPosition | undefined;\n    extendLatestRangeToCell(cell: CellPosition): void;\n    updateRangeEnd(cellRange: CellRange, cellPosition: CellPosition, silent?: boolean): void;\n    getRangeStartRow(cellRange: CellRange): RowPosition;\n    getRangeEndRow(cellRange: CellRange): RowPosition;\n    createCellRangeFromCellRangeParams(params: CellRangeParams): CellRange | undefined;\n    setCellRanges(cellRanges: CellRange[]): void;\n}\n\nexport interface ISelectionHandle {\n    getGui(): HTMLElement;\n    getType(): SelectionHandleType;\n    refresh(cellCtrl: CellCtrl): void;\n}\n\nexport interface ISelectionHandleFactory {\n    createSelectionHandle(type: SelectionHandleType): ISelectionHandle;\n}\n\nexport enum SelectionHandleType { FILL, RANGE }\n\nexport enum CellRangeType { VALUE, DIMENSION }\n\nexport interface CellRange {\n    id?: string;\n    type?: CellRangeType;\n    /** The start row of the range */\n    startRow?: RowPosition;\n    /** The end row of the range */\n    endRow?: RowPosition;\n    /** The columns in the range */\n    columns: Column[];\n    /** The start column for the range */\n    startColumn: Column;\n}\n\nexport interface CellRangeParams {\n    /** Start row index */\n    rowStartIndex: number | null;\n    /** Pinned state of start row. Either 'top', 'bottom' or null */\n    rowStartPinned?: string | null;\n    /** End row index */\n    rowEndIndex: number | null;\n    /** Pinned state of end row. Either 'top', 'bottom' or null */\n    rowEndPinned?: string | null;\n\n    /** Starting column for range */\n    columnStart?: string | Column;\n    /** End column for range */\n    columnEnd?: string | Column;\n    /** Specify Columns to include instead of using `columnStart` and `columnEnd` */\n    columns?: (string | Column)[];\n}\n\n/** @deprecated */\n// instead of this, we now use CellRange\nexport interface RangeSelection {\n    start: CellPosition;\n    end: CellPosition;\n    columns: Column[] | null;\n}\n\n/** @deprecated */\n// instead of this, we now use AddCellRangeParams\nexport interface AddRangeSelectionParams {\n    rowStart: number;\n    floatingStart: string;\n    rowEnd: number;\n    floatingEnd: string;\n    columnStart: string | Column;\n    columnEnd: string | Column;\n}\n","import { Beans } from \"../beans\";\nimport {\n    CellCtrl,\n    ICellComp\n} from \"./cellCtrl\";\nimport { includes, last } from \"../../utils/array\";\nimport { CellRangeType, ISelectionHandle, SelectionHandleType } from \"../../interfaces/IRangeService\";\nimport { Column } from \"../../entities/column\";\nimport { missing } from \"../../utils/generic\";\nimport { setAriaSelected } from \"../../utils/aria\";\n\nconst CSS_CELL_RANGE_SELECTED = 'ag-cell-range-selected';\nconst CSS_CELL_RANGE_CHART = 'ag-cell-range-chart';\nconst CSS_CELL_RANGE_SINGLE_CELL = 'ag-cell-range-single-cell';\nconst CSS_CELL_RANGE_CHART_CATEGORY = 'ag-cell-range-chart-category';\nconst CSS_CELL_RANGE_HANDLE = 'ag-cell-range-handle';\nconst CSS_CELL_RANGE_TOP = 'ag-cell-range-top';\nconst CSS_CELL_RANGE_RIGHT = 'ag-cell-range-right';\nconst CSS_CELL_RANGE_BOTTOM = 'ag-cell-range-bottom';\nconst CSS_CELL_RANGE_LEFT = 'ag-cell-range-left';\n\nexport class CellRangeFeature {\n\n    private beans: Beans;\n    private cellComp: ICellComp;\n    private cellCtrl: CellCtrl;\n    private eGui: HTMLElement;\n\n    private rangeCount: number;\n    private hasChartRange: boolean;\n\n    private selectionHandle: ISelectionHandle | null | undefined;\n\n    constructor(beans: Beans, ctrl: CellCtrl) {\n        this.beans = beans;\n        this.cellCtrl = ctrl;\n    }\n\n    public setComp(cellComp: ICellComp, eGui: HTMLElement): void {\n        this.cellComp = cellComp;\n        this.eGui = eGui;\n        this.onRangeSelectionChanged();\n    }\n\n    public onRangeSelectionChanged(): void {\n        // when using reactUi, given UI is async, it's possible this method is called before the comp is registered\n        if (!this.cellComp) { return; }\n\n        this.rangeCount = this.beans.rangeService.getCellRangeCount(this.cellCtrl.getCellPosition());\n        this.hasChartRange = this.getHasChartRange();\n\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SELECTED, this.rangeCount !== 0);\n        this.cellComp.addOrRemoveCssClass(`${CSS_CELL_RANGE_SELECTED}-1`, this.rangeCount === 1);\n        this.cellComp.addOrRemoveCssClass(`${CSS_CELL_RANGE_SELECTED}-2`, this.rangeCount === 2);\n        this.cellComp.addOrRemoveCssClass(`${CSS_CELL_RANGE_SELECTED}-3`, this.rangeCount === 3);\n        this.cellComp.addOrRemoveCssClass(`${CSS_CELL_RANGE_SELECTED}-4`, this.rangeCount >= 4);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_CHART, this.hasChartRange);\n\n        setAriaSelected(this.eGui, this.rangeCount > 0 ? true : undefined);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SINGLE_CELL, this.isSingleCell());\n\n        this.updateRangeBorders();\n\n        this.refreshHandle();\n    }\n\n    private updateRangeBorders(): void {\n        const rangeBorders = this.getRangeBorders();\n        const isSingleCell = this.isSingleCell();\n        const isTop = !isSingleCell && rangeBorders.top;\n        const isRight = !isSingleCell && rangeBorders.right;\n        const isBottom = !isSingleCell && rangeBorders.bottom;\n        const isLeft = !isSingleCell && rangeBorders.left;\n\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_TOP, isTop);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_RIGHT, isRight);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_BOTTOM, isBottom);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_LEFT, isLeft);\n    }\n\n    private isSingleCell(): boolean {\n        const { rangeService } = this.beans;\n        return this.rangeCount === 1 && rangeService && !rangeService.isMoreThanOneCell();\n    }\n\n    private getHasChartRange(): boolean {\n        const { rangeService } = this.beans;\n\n        if (!this.rangeCount || !rangeService) { return false; }\n\n        const cellRanges = rangeService.getCellRanges();\n\n        return cellRanges.length > 0 && cellRanges.every(range => includes([CellRangeType.DIMENSION, CellRangeType.VALUE], range.type));\n    }\n\n    public updateRangeBordersIfRangeCount(): void {\n        // we only need to update range borders if we are in a range\n        if (this.rangeCount > 0) {\n            this.updateRangeBorders();\n            this.refreshHandle();\n        }\n    }\n\n    private getRangeBorders(): {\n        top: boolean,\n        right: boolean,\n        bottom: boolean,\n        left: boolean;\n    } {\n        const isRtl = this.beans.gridOptionsWrapper.isEnableRtl();\n\n        let top = false;\n        let right = false;\n        let bottom = false;\n        let left = false;\n\n        const thisCol = this.cellCtrl.getCellPosition().column;\n        const { rangeService, columnModel } = this.beans;\n\n        let leftCol: Column | null;\n        let rightCol: Column | null;\n\n        if (isRtl) {\n            leftCol = columnModel.getDisplayedColAfter(thisCol);\n            rightCol = columnModel.getDisplayedColBefore(thisCol);\n        } else {\n            leftCol = columnModel.getDisplayedColBefore(thisCol);\n            rightCol = columnModel.getDisplayedColAfter(thisCol);\n        }\n\n        const ranges = rangeService.getCellRanges().filter(\n            range => rangeService.isCellInSpecificRange(this.cellCtrl.getCellPosition(), range)\n        );\n\n        // this means we are the first column in the grid\n        if (!leftCol) {\n            left = true;\n        }\n\n        // this means we are the last column in the grid\n        if (!rightCol) {\n            right = true;\n        }\n\n        for (let i = 0; i < ranges.length; i++) {\n            if (top && right && bottom && left) { break; }\n\n            const range = ranges[i];\n            const startRow = rangeService.getRangeStartRow(range);\n            const endRow = rangeService.getRangeEndRow(range);\n\n            if (!top && this.beans.rowPositionUtils.sameRow(startRow, this.cellCtrl.getCellPosition())) {\n                top = true;\n            }\n\n            if (!bottom && this.beans.rowPositionUtils.sameRow(endRow, this.cellCtrl.getCellPosition())) {\n                bottom = true;\n            }\n\n            if (!left && leftCol && range.columns.indexOf(leftCol) < 0) {\n                left = true;\n            }\n\n            if (!right && rightCol && range.columns.indexOf(rightCol) < 0) {\n                right = true;\n            }\n        }\n\n        return { top, right, bottom, left };\n    }\n\n    public refreshHandle(): void {\n        if (!this.beans.rangeService) { return; }\n\n        const shouldHaveSelectionHandle = this.shouldHaveSelectionHandle();\n\n        if (this.selectionHandle && !shouldHaveSelectionHandle) {\n            this.selectionHandle = this.beans.context.destroyBean(this.selectionHandle);\n        }\n\n        if (shouldHaveSelectionHandle) {\n            this.addSelectionHandle();\n        }\n\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_HANDLE, !!this.selectionHandle);\n    }\n\n    private shouldHaveSelectionHandle(): boolean {\n        const { gridOptionsWrapper, rangeService } = this.beans;\n        const cellRanges = rangeService.getCellRanges();\n        const rangesLen = cellRanges.length;\n\n        if (this.rangeCount < 1 || rangesLen < 1) {\n            return false;\n        }\n\n        const cellRange = last(cellRanges);\n        const cellPosition = this.cellCtrl.getCellPosition();\n        const isFillHandleAvailable = gridOptionsWrapper.isEnableFillHandle() && !this.cellCtrl.isSuppressFillHandle();\n        const isRangeHandleAvailable = gridOptionsWrapper.isEnableRangeHandle();\n\n        let handleIsAvailable = rangesLen === 1 && !this.cellCtrl.isEditing() && (\n            isFillHandleAvailable || isRangeHandleAvailable\n        );\n\n        if (this.hasChartRange) {\n            const hasCategoryRange = cellRanges[0].type === CellRangeType.DIMENSION;\n            const isCategoryCell = hasCategoryRange && rangeService.isCellInSpecificRange(cellPosition, cellRanges[0]);\n\n            this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_CHART_CATEGORY, isCategoryCell);\n            handleIsAvailable = cellRange.type === CellRangeType.VALUE;\n        }\n\n        return handleIsAvailable &&\n            cellRange.endRow != null &&\n            rangeService.isContiguousRange(cellRange) &&\n            rangeService.isBottomRightCell(cellRange, cellPosition);\n    }\n\n    private addSelectionHandle() {\n        const { gridOptionsWrapper, rangeService } = this.beans;\n        const cellRangeType = last(rangeService.getCellRanges()).type;\n        const selectionHandleFill = gridOptionsWrapper.isEnableFillHandle() && missing(cellRangeType);\n        const type = selectionHandleFill ? SelectionHandleType.FILL : SelectionHandleType.RANGE;\n\n        if (this.selectionHandle && this.selectionHandle.getType() !== type) {\n            this.selectionHandle = this.beans.context.destroyBean(this.selectionHandle);\n        }\n\n        if (!this.selectionHandle) {\n            this.selectionHandle = this.beans.selectionHandleFactory.createSelectionHandle(type);\n        }\n\n        this.selectionHandle.refresh(this.cellCtrl);\n    }\n\n    public destroy(): void {\n        this.beans.context.destroyBean(this.selectionHandle);\n    }\n\n}","import { ProcessRowParams } from \"../../entities/iCallbackParams\";\nimport { WithoutGridCommon } from \"../../interfaces/iCommon\";\nimport { UserCompDetails } from \"../../components/framework/userComponentFactory\";\nimport { Constants } from \"../../constants/constants\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { CellPosition } from \"../../entities/cellPosition\";\nimport { Column } from \"../../entities/column\";\nimport { RowClassParams } from \"../../entities/gridOptions\";\nimport { DataChangedEvent, RowHighlightPosition, RowNode } from \"../../entities/rowNode\";\nimport { RowPosition } from \"../../entities/rowPosition\";\nimport { CellFocusedEvent, Events, RowClickedEvent, RowDoubleClickedEvent, RowEditingStartedEvent, RowEditingStoppedEvent, RowEvent, RowValueChangedEvent, VirtualRowRemovedEvent } from \"../../events\";\nimport { RowContainerType } from \"../../gridBodyComp/rowContainer/rowContainerCtrl\";\nimport { IFrameworkOverrides } from \"../../interfaces/iFrameworkOverrides\";\nimport { ModuleNames } from \"../../modules/moduleNames\";\nimport { ModuleRegistry } from \"../../modules/moduleRegistry\";\nimport { setAriaExpanded, setAriaLabel, setAriaRowIndex, setAriaSelected } from \"../../utils/aria\";\nimport { isElementChildOfClass } from \"../../utils/dom\";\nimport { isStopPropagationForAgGrid } from \"../../utils/event\";\nimport { doOnce, executeNextVMTurn } from \"../../utils/function\";\nimport { exists, makeNull } from \"../../utils/generic\";\nimport { escapeString } from \"../../utils/string\";\nimport { Beans } from \"../beans\";\nimport { CellCtrl } from \"../cell/cellCtrl\";\nimport { ICellRenderer, ICellRendererParams } from \"../cellRenderers/iCellRenderer\";\nimport { RowCssClassCalculatorParams } from \"./rowCssClassCalculator\";\nimport { RowDragComp } from \"./rowDragComp\";\n\nexport enum RowType {\n    Normal = 'Normal',\n    FullWidth = 'FullWidth',\n    FullWidthLoading = 'FullWidthLoading',\n    FullWidthGroup = 'FullWidthGroup',\n    FullWidthDetail = 'FullWidthDetail'\n}\n\nlet instanceIdSequence = 0;\n\nexport interface IRowComp {\n    setDomOrder(domOrder: boolean): void;\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\n    setCellCtrls(cellCtrls: CellCtrl[]): void;\n    showFullWidth(compDetails: UserCompDetails): void;\n    getFullWidthCellRenderer(): ICellRenderer | null | undefined;\n    setTop(top: string): void;\n    setTransform(transform: string): void;\n    setRowIndex(rowIndex: string): void;\n    setRowId(rowId: string): void;\n    setRowBusinessKey(businessKey: string): void;\n    setTabIndex(tabIndex: number): void;\n    setUserStyles(styles: any): void;\n    setRole(role: string): void;\n}\n\ninterface RowGui {\n    rowComp: IRowComp;\n    element: HTMLElement;\n    containerType: RowContainerType;\n}\n\ninterface CellCtrlListAndMap {\n    list: CellCtrl[];\n    map: { [key: string]: CellCtrl };\n}\n\nexport class RowCtrl extends BeanStub {\n\n    public static DOM_DATA_KEY_ROW_CTRL = 'renderedRow';\n\n    private instanceId: string;\n\n    private readonly rowNode: RowNode;\n\n    private readonly beans: Beans;\n\n    private rowType: RowType;\n\n    private leftGui: RowGui;\n    private centerGui: RowGui;\n    private rightGui: RowGui;\n    private fullWidthGui: RowGui;\n\n    private allRowGuis: RowGui[] = [];\n\n    private firstRowOnPage: boolean;\n    private lastRowOnPage: boolean;\n\n    private active = true;\n\n    private editingRow: boolean;\n    private rowFocused: boolean;\n\n    private centerCellCtrls: CellCtrlListAndMap = { list: [], map: {} };\n    private leftCellCtrls: CellCtrlListAndMap = { list: [], map: {} };\n    private rightCellCtrls: CellCtrlListAndMap = { list: [], map: {} };\n\n    private fadeRowIn: boolean;\n    private slideRowIn: boolean;\n    private readonly useAnimationFrameForCreate: boolean;\n\n    private paginationPage: number;\n\n    private lastMouseDownOnDragger = false;\n\n    private rowLevel: number;\n\n    private readonly printLayout: boolean;\n\n    private updateColumnListsPending = false;\n\n    // the top needs to be set into the DOM element when the element is created, not updated afterwards.\n    // otherwise the transition would not work, as it would be transitioning from zero (the unset value).\n    // for example, suppose a row that is outside the viewport, then user does a filter to remove other rows\n    // and this row now appears in the viewport, and the row moves up (ie it was under the viewport and not rendered,\n    // but now is in the viewport) then a new RowComp is created, however it should have it's position initialised\n    // to below the viewport, so the row will appear to animate up. if we didn't set the initial position at creation\n    // time, the row would animate down (ie from position zero).\n    private initialTop: string;\n    private initialTransform: string;\n\n    constructor(\n        rowNode: RowNode,\n        beans: Beans,\n        animateIn: boolean,\n        useAnimationFrameForCreate: boolean,\n        printLayout: boolean\n    ) {\n        super();\n        this.beans = beans;\n        this.rowNode = rowNode;\n        this.paginationPage = this.beans.paginationProxy.getCurrentPage();\n        this.useAnimationFrameForCreate = useAnimationFrameForCreate;\n        this.printLayout = printLayout;\n\n        this.instanceId = rowNode.id + '-' + instanceIdSequence++;\n\n        this.setAnimateFlags(animateIn);\n\n        this.rowFocused = this.beans.focusService.isRowFocused(this.rowNode.rowIndex!, this.rowNode.rowPinned);\n        this.rowLevel = this.beans.rowCssClassCalculator.calculateRowLevel(this.rowNode);\n\n        this.setRowType();\n\n        this.addListeners();\n\n        this.setInitialRowTop();\n    }\n\n    public getBeans(): Beans {\n        return this.beans;\n    }\n\n    public getInstanceId(): string {\n        return this.instanceId;\n    }\n\n    public setComp(rowComp: IRowComp, element: HTMLElement, containerType: RowContainerType): void {\n        const gui: RowGui = { rowComp, element, containerType };\n        this.allRowGuis.push(gui);\n\n        if (containerType === RowContainerType.LEFT) {\n            this.leftGui = gui;\n        } else if (containerType === RowContainerType.RIGHT) {\n            this.rightGui = gui;\n        } else if (containerType === RowContainerType.FULL_WIDTH) {\n            this.fullWidthGui = gui;\n        } else {\n            this.centerGui = gui;\n        }\n\n        const allNormalPresent = this.leftGui != null && this.rightGui != null && this.centerGui != null;\n        const fullWidthPresent = this.fullWidthGui != null;\n        if (allNormalPresent || fullWidthPresent) {\n            this.initialiseRowComps();\n        }\n    }\n\n    public isCacheable(): boolean {\n        return this.rowType === RowType.FullWidthDetail\n            && this.beans.gridOptionsWrapper.isKeepDetailRows();\n    }\n\n    public setCached(cached: boolean): void {\n        const displayValue = cached ? 'none' : '';\n        this.allRowGuis.forEach(rg => rg.element.style.display = displayValue);\n    }\n\n    private initialiseRowComps(): void {\n        const gow = this.beans.gridOptionsWrapper;\n\n        this.onRowHeightChanged();\n        this.updateRowIndexes();\n        this.setFocusedClasses();\n        this.setStylesFromGridOptions();\n\n        if (gow.isRowSelection() && this.rowNode.selectable) {\n            this.onRowSelected();\n        }\n\n        this.updateColumnLists(!this.useAnimationFrameForCreate);\n\n        if (this.slideRowIn) {\n            executeNextVMTurn(this.onTopChanged.bind(this));\n        }\n        if (this.fadeRowIn) {\n            executeNextVMTurn(() => {\n                this.allRowGuis.forEach(gui => gui.rowComp.addOrRemoveCssClass('ag-opacity-zero', false));\n            });\n        }\n\n        const businessKey = this.getRowBusinessKey();\n        const rowIdSanitised = escapeString(this.rowNode.id!);\n        const businessKeySanitised = escapeString(businessKey!);\n\n        this.allRowGuis.forEach(gui => {\n            const comp = gui.rowComp;\n\n            comp.setRole('row');\n\n            const initialRowClasses = this.getInitialRowClasses(gui.containerType);\n            initialRowClasses.forEach(name => comp.addOrRemoveCssClass(name, true));\n\n            if (this.rowNode.group) {\n                setAriaExpanded(gui.element, this.rowNode.expanded == true);\n            }\n\n            if (rowIdSanitised != null) {\n                comp.setRowId(rowIdSanitised);\n            }\n            if (businessKeySanitised != null) {\n                comp.setRowBusinessKey(businessKeySanitised);\n            }\n\n            if (this.isFullWidth() && !this.beans.gridOptionsWrapper.isSuppressCellFocus()) {\n                comp.setTabIndex(-1);\n            }\n\n            // DOM DATA\n            gow.setDomData(gui.element, RowCtrl.DOM_DATA_KEY_ROW_CTRL, this);\n            this.addDestroyFunc(\n                () => gow.setDomData(gui.element, RowCtrl.DOM_DATA_KEY_ROW_CTRL, null)\n            );\n\n            // adding hover functionality adds listener to this row, so we\n            // do it lazily in an animation frame\n            if (this.useAnimationFrameForCreate) {\n                this.beans.animationFrameService.createTask(\n                    this.addHoverFunctionality.bind(this, gui.element),\n                    this.rowNode.rowIndex!,\n                    'createTasksP2'\n                );\n            } else {\n                this.addHoverFunctionality(gui.element);\n            }\n\n            if (this.isFullWidth()) {\n                this.setupFullWidth(gui);\n            }\n\n            if (gow.isRowDragEntireRow()) {\n                this.addRowDraggerToRow(gui);\n            }\n\n            if (this.useAnimationFrameForCreate) {\n                // the height animation we only want active after the row is alive for 1 second.\n                // this stops the row animation working when rows are initially crated. otherwise\n                // auto-height rows get inserted into the dom and resized immediately, which gives\n                // very bad UX (eg 10 rows get inserted, then all 10 expand, look particularly bad\n                // when scrolling). so this makes sure when rows are shown for the first time, they\n                // are resized immediately without animation.\n                this.beans.animationFrameService.addDestroyTask(() => {\n                    if (!this.isAlive()) { return; }\n                    gui.rowComp.addOrRemoveCssClass('ag-after-created', true);\n                });\n            }\n        });\n\n        this.executeProcessRowPostCreateFunc();\n    }\n\n    private addRowDraggerToRow(gui: RowGui) {\n        const gow = this.beans.gridOptionsWrapper;\n\n        if (gow.isEnableRangeSelection()) {\n            doOnce(() => {\n                console.warn('AG Grid: Setting `rowDragEntireRow: true` in the gridOptions doesn\\'t work with `enableRangeSelection: true`');\n            }, 'rowDragAndRangeSelectionEnabled');\n            return;\n        }\n\n        const rowDragComp = new RowDragComp(() => '1 row', this.rowNode, undefined, gui.element, undefined, true);\n        this.createManagedBean(rowDragComp, this.beans.context);\n    }\n\n    private setupFullWidth(gui: RowGui): void {\n\n        const pinned = this.getPinnedForContainer(gui.containerType);\n        const params = this.createFullWidthParams(gui.element, pinned);\n\n        const masterDetailModuleLoaded = ModuleRegistry.isRegistered(ModuleNames.MasterDetailModule);\n        if (this.rowType == RowType.FullWidthDetail && !masterDetailModuleLoaded) {\n            if (ModuleRegistry.isPackageBased()) {\n                console.warn(`AG Grid: cell renderer 'agDetailCellRenderer' (for master detail) not found. Can only be used with ag-grid-enterprise package.`);\n            } else {\n                console.warn(`AG Grid: cell renderer 'agDetailCellRenderer' (for master detail) not found. Can only be used with AG Grid Enterprise Module ${ModuleNames.MasterDetailModule}`);\n            }\n            return;\n        }\n\n        let compDetails: UserCompDetails;\n        switch (this.rowType) {\n            case RowType.FullWidthDetail:\n                compDetails = this.beans.userComponentFactory.getFullWidthDetailCellRendererDetails(params);\n                break;\n            case RowType.FullWidthGroup:\n                compDetails = this.beans.userComponentFactory.getFullWidthGroupCellRendererDetails(params);\n                break;\n            case RowType.FullWidthLoading:\n                compDetails = this.beans.userComponentFactory.getFullWidthLoadingCellRendererDetails(params);\n                break;\n            default:\n                compDetails = this.beans.userComponentFactory.getFullWidthCellRendererDetails(params);\n                break;\n        }\n\n        gui.rowComp.showFullWidth(compDetails);\n    }\n\n    public isPrintLayout(): boolean {\n        return this.printLayout;\n    }\n\n    // use by autoWidthCalculator, as it clones the elements\n    public getCellElement(column: Column): HTMLElement | null {\n        const cellCtrl = this.getCellCtrl(column);\n        return cellCtrl ? cellCtrl.getGui() : null;\n    }\n\n    public executeProcessRowPostCreateFunc(): void {\n        const func = this.beans.gridOptionsWrapper.getProcessRowPostCreateFunc();\n        if (!func) { return; }\n\n        const params: WithoutGridCommon<ProcessRowParams> = {\n            eRow: this.centerGui ? this.centerGui.element : undefined!,\n            ePinnedLeftRow: this.leftGui ? this.leftGui.element : undefined!,\n            ePinnedRightRow: this.rightGui ? this.rightGui.element : undefined!,\n            node: this.rowNode,\n            rowIndex: this.rowNode.rowIndex!,\n            addRenderedRowListener: this.addEventListener.bind(this),\n        };\n        func(params);\n    }\n\n    private setRowType(): void {\n        const isStub = this.rowNode.stub;\n        const isFullWidthCell = this.rowNode.isFullWidthCell();\n        const isDetailCell = this.beans.doingMasterDetail && this.rowNode.detail;\n        const pivotMode = this.beans.columnModel.isPivotMode();\n        // we only use full width for groups, not footers. it wouldn't make sense to include footers if not looking\n        // for totals. if users complain about this, then we should introduce a new property 'footerUseEntireRow'\n        // so each can be set independently (as a customer complained about footers getting full width, hence\n        // introducing this logic)\n        const isGroupRow = !!this.rowNode.group && !this.rowNode.footer;\n        const isFullWidthGroup = isGroupRow && this.beans.gridOptionsWrapper.isGroupUseEntireRow(pivotMode);\n\n        if (isStub) {\n            this.rowType = RowType.FullWidthLoading;\n        } else if (isDetailCell) {\n            this.rowType = RowType.FullWidthDetail;\n        } else if (isFullWidthCell) {\n            this.rowType = RowType.FullWidth;\n        } else if (isFullWidthGroup) {\n            this.rowType = RowType.FullWidthGroup;\n        } else {\n            this.rowType = RowType.Normal;\n        }\n    }\n\n    private updateColumnLists(suppressAnimationFrame = false): void {\n\n        if (this.isFullWidth()) { return; }\n\n        const noAnimation = suppressAnimationFrame\n            || this.beans.gridOptionsWrapper.isSuppressAnimationFrame()\n            || this.printLayout;\n\n        if (noAnimation) {\n            this.updateColumnListsImpl();\n            return;\n        }\n\n        if (this.updateColumnListsPending) { return; }\n        this.beans.animationFrameService.createTask(\n            () => {\n                if (!this.active) { return; }\n                this.updateColumnListsImpl();\n            },\n            this.rowNode.rowIndex!,\n            'createTasksP1'\n        );\n        this.updateColumnListsPending = true;\n    }\n\n    private createCellCtrls(prev: CellCtrlListAndMap, cols: Column[], pinned: string | null = null): CellCtrlListAndMap {\n        const res: CellCtrlListAndMap = {\n            list: [],\n            map: {}\n        };\n\n        const addCell = (colInstanceId: number, cellCtrl: CellCtrl) => {\n            res.list.push(cellCtrl);\n            res.map[colInstanceId] = cellCtrl;\n        };\n\n        cols.forEach(col => {\n            // we use instanceId's rather than colId as it's possible there is a Column with same Id,\n            // but it's referring to a different column instance. Happens a lot with pivot, as pivot col id's are\n            // reused eg pivot_0, pivot_1 etc\n            const colInstanceId = col.getInstanceId();\n            let cellCtrl = prev.map[colInstanceId];\n            if (!cellCtrl) {\n                cellCtrl = new CellCtrl(col, this.rowNode, this.beans, this);\n            }\n            addCell(colInstanceId, cellCtrl);\n        });\n\n        prev.list.forEach(prevCellCtrl => {\n            const cellInResult = res.map[prevCellCtrl.getColumn().getInstanceId()] != null;\n            if (cellInResult) { return; }\n\n            const keepCell = !this.isCellEligibleToBeRemoved(prevCellCtrl, pinned);\n            if (keepCell) {\n                addCell(prevCellCtrl.getColumn().getInstanceId(), prevCellCtrl);\n                return;\n            }\n\n            prevCellCtrl.destroy();\n        });\n\n        return res;\n    }\n\n    private updateColumnListsImpl(): void {\n        this.updateColumnListsPending = false;\n        const columnModel = this.beans.columnModel;\n        if (this.printLayout) {\n            this.centerCellCtrls = this.createCellCtrls(this.centerCellCtrls, columnModel.getAllDisplayedColumns());\n            this.leftCellCtrls = { list: [], map: {} };\n            this.rightCellCtrls = { list: [], map: {} };\n        } else {\n            const centerCols = columnModel.getViewportCenterColumnsForRow(this.rowNode);\n            this.centerCellCtrls = this.createCellCtrls(this.centerCellCtrls, centerCols);\n\n            const leftCols = columnModel.getDisplayedLeftColumnsForRow(this.rowNode);\n            this.leftCellCtrls = this.createCellCtrls(this.leftCellCtrls, leftCols, Constants.PINNED_LEFT);\n\n            const rightCols = columnModel.getDisplayedRightColumnsForRow(this.rowNode);\n            this.rightCellCtrls = this.createCellCtrls(this.rightCellCtrls, rightCols, Constants.PINNED_RIGHT);\n        }\n\n        this.allRowGuis.forEach(item => {\n            const cellControls = item.containerType === RowContainerType.LEFT ? this.leftCellCtrls :\n                item.containerType === RowContainerType.RIGHT ? this.rightCellCtrls : this.centerCellCtrls;\n            item.rowComp.setCellCtrls(cellControls.list);\n        });\n    }\n\n    private isCellEligibleToBeRemoved(cellCtrl: CellCtrl, nextContainerPinned: string | null): boolean {\n        const REMOVE_CELL = true;\n        const KEEP_CELL = false;\n\n        // always remove the cell if it's not rendered or if it's in the wrong pinned location\n        const column = cellCtrl.getColumn();\n        if (column.getPinned() != nextContainerPinned) { return REMOVE_CELL; }\n\n        // we want to try and keep editing and focused cells\n        const editing = cellCtrl.isEditing();\n        const focused = this.beans.focusService.isCellFocused(cellCtrl.getCellPosition());\n\n        const mightWantToKeepCell = editing || focused;\n\n        if (mightWantToKeepCell) {\n            const column = cellCtrl.getColumn();\n            const displayedColumns = this.beans.columnModel.getAllDisplayedColumns();\n            const cellStillDisplayed = displayedColumns.indexOf(column) >= 0;\n            return cellStillDisplayed ? KEEP_CELL : REMOVE_CELL;\n        }\n\n        return REMOVE_CELL;\n    }\n\n    private setAnimateFlags(animateIn: boolean): void {\n        if (animateIn) {\n            const oldRowTopExists = exists(this.rowNode.oldRowTop);\n            // if the row had a previous position, we slide it in (animate row top)\n            this.slideRowIn = oldRowTopExists;\n            // if the row had no previous position, we fade it in (animate\n            this.fadeRowIn = !oldRowTopExists;\n        } else {\n            this.slideRowIn = false;\n            this.fadeRowIn = false;\n        }\n    }\n\n    public isEditing(): boolean {\n        return this.editingRow;\n    }\n\n    public stopRowEditing(cancel: boolean): void {\n        this.stopEditing(cancel);\n    }\n\n    public isFullWidth(): boolean {\n        return this.rowType !== RowType.Normal;\n    }\n\n    public getRowType(): RowType {\n        return this.rowType;\n    }\n\n    public refreshFullWidth(): boolean {\n        // returns 'true' if refresh succeeded\n        const tryRefresh = (gui: RowGui, pinned: string | null): boolean => {\n            if (!gui) { return true; } // no refresh needed\n\n            const cellRenderer = gui.rowComp.getFullWidthCellRenderer();\n\n            // no cell renderer, either means comp not yet ready, or comp ready but now reference\n            // to it (happens in react when comp is stateless). if comp not ready, we don't need to\n            // refresh, however we don't know which one, so we refresh to cover the case where it's\n            // react comp without reference so need to force a refresh\n            if (!cellRenderer) { return false; }\n\n            // no refresh method present, so can't refresh, hard refresh needed\n            if (!cellRenderer.refresh) { return false; }\n\n            const params = this.createFullWidthParams(gui.element, pinned);\n            const refreshSucceeded = cellRenderer.refresh(params);\n\n            return refreshSucceeded;\n        };\n\n        const fullWidthSuccess = tryRefresh(this.fullWidthGui, null);\n        const centerSuccess = tryRefresh(this.centerGui, null);\n        const leftSuccess = tryRefresh(this.leftGui, Constants.PINNED_LEFT);\n        const rightSuccess = tryRefresh(this.rightGui, Constants.PINNED_RIGHT);\n\n        const allFullWidthRowsRefreshed = fullWidthSuccess && centerSuccess && leftSuccess && rightSuccess;\n\n        return allFullWidthRowsRefreshed;\n    }\n\n    private addListeners(): void {\n        this.addManagedListener(this.rowNode, RowNode.EVENT_HEIGHT_CHANGED, this.onRowHeightChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_INDEX_CHANGED, this.onRowIndexChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_TOP_CHANGED, this.onTopChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_EXPANDED_CHANGED, this.updateExpandedCss.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_HAS_CHILDREN_CHANGED, this.updateExpandedCss.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.onRowNodeDataChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.onRowNodeCellChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_HIGHLIGHT_CHANGED, this.onRowNodeHighlightChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_DRAGGING_CHANGED, this.onRowNodeDraggingChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_UI_LEVEL_CHANGED, this.onUiLevelChanged.bind(this));\n\n        const eventService = this.beans.eventService;\n        this.addManagedListener(eventService, Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED, this.onPaginationPixelOffsetChanged.bind(this));\n        this.addManagedListener(eventService, Events.EVENT_HEIGHT_SCALE_CHANGED, this.onTopChanged.bind(this));\n        this.addManagedListener(eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n        this.addManagedListener(eventService, Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));\n        this.addManagedListener(eventService, Events.EVENT_CELL_FOCUSED, this.onCellFocusChanged.bind(this));\n        this.addManagedListener(eventService, Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));\n        this.addManagedListener(eventService, Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));\n\n        this.addManagedListener(eventService, Events.EVENT_COLUMN_MOVED, this.onColumnMoved.bind(this));\n\n        this.addListenersForCellComps();\n    }\n\n    private onColumnMoved(): void {\n        this.updateColumnLists();\n    }\n\n    private addListenersForCellComps(): void {\n\n        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_INDEX_CHANGED, () => {\n            this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onRowIndexChanged());\n        });\n        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, event => {\n            this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onCellChanged(event));\n        });\n\n    }\n\n    private onRowNodeDataChanged(event: DataChangedEvent): void {\n        // if this is an update, we want to refresh, as this will allow the user to put in a transition\n        // into the cellRenderer refresh method. otherwise this might be completely new data, in which case\n        // we will want to completely replace the cells\n        this.getAllCellCtrls().forEach(cellCtrl =>\n            cellCtrl.refreshCell({\n                suppressFlash: !event.update,\n                newData: !event.update\n            })\n        );\n\n        // check for selected also, as this could be after lazy loading of the row data, in which case\n        // the id might of just gotten set inside the row and the row selected state may of changed\n        // as a result. this is what happens when selected rows are loaded in virtual pagination.\n        // - niall note - since moving to the stub component, this may no longer be true, as replacing\n        // the stub component now replaces the entire row\n        this.onRowSelected();\n\n        // as data has changed, then the style and class needs to be recomputed\n        this.postProcessCss();\n    }\n\n    private onRowNodeCellChanged(): void {\n        // as data has changed, then the style and class needs to be recomputed\n        this.postProcessCss();\n    }\n\n    private postProcessCss(): void {\n        this.setStylesFromGridOptions();\n        this.postProcessClassesFromGridOptions();\n        this.postProcessRowClassRules();\n        this.postProcessRowDragging();\n    }\n\n    private onRowNodeHighlightChanged(): void {\n        const highlighted = this.rowNode.highlighted;\n\n        this.allRowGuis.forEach(gui => {\n            const aboveOn = highlighted === RowHighlightPosition.Above;\n            const belowOn = highlighted === RowHighlightPosition.Below;\n            gui.rowComp.addOrRemoveCssClass('ag-row-highlight-above', aboveOn);\n            gui.rowComp.addOrRemoveCssClass('ag-row-highlight-below', belowOn);\n        });\n    }\n\n    private onRowNodeDraggingChanged(): void {\n        this.postProcessRowDragging();\n    }\n\n    private postProcessRowDragging(): void {\n        const dragging = this.rowNode.dragging;\n        this.allRowGuis.forEach(gui => gui.rowComp.addOrRemoveCssClass('ag-row-dragging', dragging));\n    }\n\n    private updateExpandedCss(): void {\n\n        const expandable = this.rowNode.isExpandable();\n        const expanded = this.rowNode.expanded == true;\n\n        this.allRowGuis.forEach(gui => {\n            gui.rowComp.addOrRemoveCssClass('ag-row-group', expandable);\n            gui.rowComp.addOrRemoveCssClass('ag-row-group-expanded', expandable && expanded);\n            gui.rowComp.addOrRemoveCssClass('ag-row-group-contracted', expandable && !expanded);\n            setAriaExpanded(gui.element, expandable && expanded);\n        });\n    }\n\n    private onDisplayedColumnsChanged(): void {\n        // we skip animations for onDisplayedColumnChanged, as otherwise the client could remove columns and\n        // then set data, and any old valueGetter's (ie from cols that were removed) would still get called.\n        this.updateColumnLists(true);\n\n        if (this.beans.columnModel.wasAutoRowHeightEverActive()) {\n            this.rowNode.checkAutoHeights();\n        }\n    }\n\n    private onVirtualColumnsChanged(): void {\n        this.updateColumnLists();\n    }\n\n    public getRowPosition(): RowPosition {\n        return {\n            rowPinned: makeNull(this.rowNode.rowPinned),\n            rowIndex: this.rowNode.rowIndex as number\n        };\n    }\n\n    public onKeyboardNavigate(keyboardEvent: KeyboardEvent) {\n        const currentFullWidthComp = this.allRowGuis.find(c => c.element.contains(keyboardEvent.target as HTMLElement));\n        const currentFullWidthContainer = currentFullWidthComp ? currentFullWidthComp.element : null;\n        const isFullWidthContainerFocused = currentFullWidthContainer === keyboardEvent.target;\n\n        if (!isFullWidthContainerFocused) { return; }\n\n        const node = this.rowNode;\n        const lastFocusedCell = this.beans.focusService.getFocusedCell();\n        const cellPosition: CellPosition = {\n            rowIndex: node.rowIndex!,\n            rowPinned: node.rowPinned,\n            column: (lastFocusedCell && lastFocusedCell.column) as Column\n        };\n\n        this.beans.navigationService.navigateToNextCell(keyboardEvent, keyboardEvent.key, cellPosition, true);\n        keyboardEvent.preventDefault();\n    }\n\n    public onTabKeyDown(keyboardEvent: KeyboardEvent) {\n        if (keyboardEvent.defaultPrevented || isStopPropagationForAgGrid(keyboardEvent)) { return; }\n        const currentFullWidthComp = this.allRowGuis.find(c => c.element.contains(keyboardEvent.target as HTMLElement));\n        const currentFullWidthContainer = currentFullWidthComp ? currentFullWidthComp.element : null;\n        const isFullWidthContainerFocused = currentFullWidthContainer === keyboardEvent.target;\n        let nextEl: HTMLElement | null = null;\n\n        if (!isFullWidthContainerFocused) {\n            nextEl = this.beans.focusService.findNextFocusableElement(currentFullWidthContainer!, false, keyboardEvent.shiftKey);\n        }\n\n        if ((this.isFullWidth() && isFullWidthContainerFocused) || !nextEl) {\n            this.beans.navigationService.onTabKeyDown(this, keyboardEvent);\n        }\n    }\n\n    public onFullWidthRowFocused(event: CellFocusedEvent) {\n        const node = this.rowNode;\n        const isFocused = this.isFullWidth() && event.rowIndex === node.rowIndex && event.rowPinned == node.rowPinned;\n\n        const element = this.fullWidthGui ? this.fullWidthGui.element : this.centerGui?.element;\n        if (!element) { return; } // can happen with react ui, comp not yet ready\n\n        element.classList.toggle('ag-full-width-focus', isFocused);\n        if (isFocused) {\n            // we don't scroll normal rows into view when we focus them, so we don't want\n            // to scroll Full Width rows either.\n            element.focus({ preventScroll: true });\n        }\n    }\n\n    public refreshCell(cellCtrl: CellCtrl) {\n        this.centerCellCtrls = this.removeCellCtrl(this.centerCellCtrls, cellCtrl);\n        this.leftCellCtrls = this.removeCellCtrl(this.leftCellCtrls, cellCtrl);\n        this.rightCellCtrls = this.removeCellCtrl(this.rightCellCtrls, cellCtrl);\n        this.updateColumnLists();\n    }\n\n    private removeCellCtrl(prev: CellCtrlListAndMap, cellCtrlToRemove: CellCtrl): CellCtrlListAndMap {\n        const res: CellCtrlListAndMap = {\n            list: [],\n            map: {}\n        };\n        prev.list.forEach(cellCtrl => {\n            if (cellCtrl === cellCtrlToRemove) { return; }\n            res.list.push(cellCtrl);\n            res.map[cellCtrl.getInstanceId()] = cellCtrl;\n        });\n        return res;\n    }\n\n    public onMouseEvent(eventName: string, mouseEvent: MouseEvent): void {\n        switch (eventName) {\n            case 'dblclick': this.onRowDblClick(mouseEvent); break;\n            case 'click': this.onRowClick(mouseEvent); break;\n            case 'touchstart':\n            case 'mousedown':\n                this.onRowMouseDown(mouseEvent);\n                break;\n        }\n    }\n\n    public createRowEvent(type: string, domEvent?: Event): RowEvent {\n        return {\n            type: type,\n            node: this.rowNode,\n            data: this.rowNode.data,\n            rowIndex: this.rowNode.rowIndex!,\n            rowPinned: this.rowNode.rowPinned,\n            context: this.beans.gridOptionsWrapper.getContext(),\n            api: this.beans.gridOptionsWrapper.getApi()!,\n            columnApi: this.beans.gridOptionsWrapper.getColumnApi()!,\n            event: domEvent\n        };\n    }\n\n    private createRowEventWithSource(type: string, domEvent: Event): RowEvent {\n        const event = this.createRowEvent(type, domEvent);\n        // when first developing this, we included the rowComp in the event.\n        // this seems very weird. so when introducing the event types, i left the 'source'\n        // out of the type, and just include the source in the two places where this event\n        // was fired (rowClicked and rowDoubleClicked). it doesn't make sense for any\n        // users to be using this, as the rowComp isn't an object we expose, so would be\n        // very surprising if a user was using it.\n        (event as any).source = this;\n        return event;\n    }\n\n    private onRowDblClick(mouseEvent: MouseEvent): void {\n        if (isStopPropagationForAgGrid(mouseEvent)) { return; }\n\n        const agEvent: RowDoubleClickedEvent = this.createRowEventWithSource(Events.EVENT_ROW_DOUBLE_CLICKED, mouseEvent);\n\n        this.beans.eventService.dispatchEvent(agEvent);\n    }\n\n    private onRowMouseDown(mouseEvent: MouseEvent) {\n        this.lastMouseDownOnDragger = isElementChildOfClass(mouseEvent.target as HTMLElement, 'ag-row-drag', 3);\n\n        if (!this.isFullWidth()) { return; }\n\n        const node = this.rowNode;\n        const columnModel = this.beans.columnModel;\n\n        this.beans.focusService.setFocusedCell(\n            node.rowIndex!,\n            columnModel.getAllDisplayedColumns()[0],\n            node.rowPinned, true\n        );\n\n    }\n\n    public onRowClick(mouseEvent: MouseEvent) {\n        const stop = isStopPropagationForAgGrid(mouseEvent) || this.lastMouseDownOnDragger;\n\n        if (stop) { return; }\n\n        const agEvent: RowClickedEvent = this.createRowEventWithSource(Events.EVENT_ROW_CLICKED, mouseEvent);\n\n        this.beans.eventService.dispatchEvent(agEvent);\n\n        // ctrlKey for windows, metaKey for Apple\n        const multiSelectKeyPressed = mouseEvent.ctrlKey || mouseEvent.metaKey;\n        const shiftKeyPressed = mouseEvent.shiftKey;\n\n        // we do not allow selecting the group by clicking, when groupSelectChildren, as the logic to\n        // handle this is broken. to observe, change the logic below and allow groups to be selected.\n        // you will see the group gets selected, then all children get selected, then the grid unselects\n        // the children (as the default behaviour when clicking is to unselect other rows) which results\n        // in the group getting unselected (as all children are unselected). the correct thing would be\n        // to change this, so that children of the selected group are not then subsequenly un-selected.\n        const groupSelectsChildren = this.beans.gridOptionsWrapper.isGroupSelectsChildren();\n\n        if (\n            // we do not allow selecting groups by clicking (as the click here expands the group), or if it's a detail row,\n            // so return if it's a group row\n            (groupSelectsChildren && this.rowNode.group) ||\n            // this is needed so we don't unselect other rows when we click this row, eg if this row is not selectable,\n            // and we click it, the selection should not change (ie any currently selected row should stay selected)\n            !this.rowNode.selectable ||\n            // we also don't allow selection of pinned rows\n            this.rowNode.rowPinned ||\n            // if no selection method enabled, do nothing\n            !this.beans.gridOptionsWrapper.isRowSelection() ||\n            // if click selection suppressed, do nothing\n            this.beans.gridOptionsWrapper.isSuppressRowClickSelection()\n        ) {\n            return;\n        }\n\n        const multiSelectOnClick = this.beans.gridOptionsWrapper.isRowMultiSelectWithClick();\n        const rowDeselectionWithCtrl = !this.beans.gridOptionsWrapper.isSuppressRowDeselection();\n\n        if (this.rowNode.isSelected()) {\n            if (multiSelectOnClick) {\n                this.rowNode.setSelectedParams({ newValue: false });\n            } else if (multiSelectKeyPressed) {\n                if (rowDeselectionWithCtrl) {\n                    this.rowNode.setSelectedParams({ newValue: false });\n                }\n            } else {\n                // selected with no multi key, must make sure anything else is unselected\n                this.rowNode.setSelectedParams({ newValue: true, clearSelection: !shiftKeyPressed, rangeSelect: shiftKeyPressed });\n            }\n        } else {\n            const clearSelection = multiSelectOnClick ? false : !multiSelectKeyPressed;\n            this.rowNode.setSelectedParams({ newValue: true, clearSelection: clearSelection, rangeSelect: shiftKeyPressed });\n        }\n    }\n\n    public setupDetailRowAutoHeight(eDetailGui: HTMLElement): void {\n\n        if (this.rowType !== RowType.FullWidthDetail) { return; }\n\n        if (!this.beans.gridOptionsWrapper.isDetailRowAutoHeight()) { return; }\n\n        const checkRowSizeFunc = () => {\n            const clientHeight = eDetailGui.clientHeight;\n\n            // if the UI is not ready, the height can be 0, which we ignore, as otherwise a flicker will occur\n            // as UI goes from the default height, to 0, then to the real height as UI becomes ready. this means\n            // it's not possible for have 0 as auto-height, however this is an improbable use case, as even an\n            // empty detail grid would still have some styling around it giving at least a few pixels.\n            if (clientHeight != null && clientHeight > 0) {\n                // we do the update in a timeout, to make sure we are not calling from inside the grid\n                // doing another update\n                const updateRowHeightFunc = () => {\n                    this.rowNode.setRowHeight(clientHeight);\n                    if (this.beans.clientSideRowModel) {\n                        this.beans.clientSideRowModel.onRowHeightChanged();\n                    } else if (this.beans.serverSideRowModel) {\n                        this.beans.serverSideRowModel.onRowHeightChanged();\n                    }\n                };\n                this.beans.frameworkOverrides.setTimeout(updateRowHeightFunc, 0);\n            }\n        };\n\n        const resizeObserverDestroyFunc = this.beans.resizeObserverService.observeResize(eDetailGui, checkRowSizeFunc);\n\n        this.addDestroyFunc(resizeObserverDestroyFunc);\n\n        checkRowSizeFunc();\n    }\n\n    public createFullWidthParams(eRow: HTMLElement, pinned: string | null): ICellRendererParams {\n        const params = {\n            fullWidth: true,\n            data: this.rowNode.data,\n            node: this.rowNode,\n            value: this.rowNode.key,\n            valueFormatted: this.rowNode.key,\n            rowIndex: this.rowNode.rowIndex!,\n            api: this.beans.gridOptionsWrapper.getApi()!,\n            columnApi: this.beans.gridOptionsWrapper.getColumnApi()!,\n            context: this.beans.gridOptionsWrapper.getContext(),\n            // these need to be taken out, as part of 'afterAttached' now\n            eGridCell: eRow,\n            eParentOfValue: eRow,\n            pinned: pinned,\n            addRenderedRowListener: this.addEventListener.bind(this),\n            registerRowDragger: (rowDraggerElement, dragStartPixels, value, suppressVisibilityChange) => this.addFullWidthRowDragging(rowDraggerElement, dragStartPixels, value, suppressVisibilityChange)\n        } as ICellRendererParams;\n\n        return params;\n    }\n\n    private addFullWidthRowDragging(\n        rowDraggerElement?: HTMLElement,\n        dragStartPixels?: number,\n        value: string = '',\n        suppressVisibilityChange?: boolean\n    ): void {\n        if (!this.isFullWidth()) { return; }\n\n        const rowDragComp = new RowDragComp(() => value, this.rowNode, undefined, rowDraggerElement, dragStartPixels, suppressVisibilityChange);\n        this.createManagedBean(rowDragComp, this.beans.context);\n    }\n\n    private onUiLevelChanged(): void {\n        const newLevel = this.beans.rowCssClassCalculator.calculateRowLevel(this.rowNode);\n        if (this.rowLevel != newLevel) {\n            const classToAdd = 'ag-row-level-' + newLevel;\n            const classToRemove = 'ag-row-level-' + this.rowLevel;\n            this.allRowGuis.forEach(gui => {\n                gui.rowComp.addOrRemoveCssClass(classToAdd, true);\n                gui.rowComp.addOrRemoveCssClass(classToRemove, false);\n            });\n        }\n        this.rowLevel = newLevel;\n    }\n\n    private isFirstRowOnPage(): boolean {\n        return this.rowNode.rowIndex === this.beans.paginationProxy.getPageFirstRow();\n    }\n\n    private isLastRowOnPage(): boolean {\n        return this.rowNode.rowIndex === this.beans.paginationProxy.getPageLastRow();\n    }\n\n    private onModelUpdated(): void {\n        this.refreshFirstAndLastRowStyles();\n    }\n\n    private refreshFirstAndLastRowStyles(): void {\n        const newFirst = this.isFirstRowOnPage();\n        const newLast = this.isLastRowOnPage();\n\n        if (this.firstRowOnPage !== newFirst) {\n            this.firstRowOnPage = newFirst;\n            this.allRowGuis.forEach(gui => gui.rowComp.addOrRemoveCssClass('ag-row-first', newFirst));\n        }\n        if (this.lastRowOnPage !== newLast) {\n            this.lastRowOnPage = newLast;\n            this.allRowGuis.forEach(gui => gui.rowComp.addOrRemoveCssClass('ag-row-last', newLast));\n        }\n    }\n\n    public stopEditing(cancel = false): void {\n        const cellEdits = this.getAllCellCtrls().map(cellCtrl => cellCtrl.stopEditing(cancel));\n\n        if (!this.editingRow) { return; }\n\n        if (!cancel && cellEdits.some(edit => edit)) {\n            const event: RowValueChangedEvent = this.createRowEvent(Events.EVENT_ROW_VALUE_CHANGED);\n            this.beans.eventService.dispatchEvent(event);\n        }\n        this.setEditingRow(false);\n    }\n\n    public setInlineEditingCss(editing: boolean): void {\n        this.allRowGuis.forEach(gui => {\n            gui.rowComp.addOrRemoveCssClass(\"ag-row-inline-editing\", editing);\n            gui.rowComp.addOrRemoveCssClass(\"ag-row-not-inline-editing\", !editing);\n        });\n    }\n\n    private setEditingRow(value: boolean): void {\n        this.editingRow = value;\n        this.allRowGuis.forEach(gui => gui.rowComp.addOrRemoveCssClass('ag-row-editing', value));\n\n        const event: RowEvent = value ?\n            this.createRowEvent(Events.EVENT_ROW_EDITING_STARTED) as RowEditingStartedEvent\n            : this.createRowEvent(Events.EVENT_ROW_EDITING_STOPPED) as RowEditingStoppedEvent;\n\n        this.beans.eventService.dispatchEvent(event);\n    }\n\n    public startRowEditing(key: string | null = null, charPress: string | null = null, sourceRenderedCell: CellCtrl | null = null, event: KeyboardEvent | null = null): void {\n        // don't do it if already editing\n        if (this.editingRow) { return; }\n\n        this.getAllCellCtrls().forEach(cellCtrl => {\n            const cellStartedEdit = cellCtrl === sourceRenderedCell;\n            if (cellStartedEdit) {\n                cellCtrl.startEditing(key, charPress, cellStartedEdit, event);\n            } else {\n                cellCtrl.startEditing(null, null, cellStartedEdit, event);\n            }\n        });\n        this.setEditingRow(true);\n    }\n\n    public getAllCellCtrls(): CellCtrl[] {\n        const res = [...this.centerCellCtrls.list, ...this.leftCellCtrls.list, ...this.rightCellCtrls.list];\n        return res;\n    }\n\n    private postProcessClassesFromGridOptions(): void {\n        const cssClasses = this.beans.rowCssClassCalculator.processClassesFromGridOptions(this.rowNode);\n        if (!cssClasses || !cssClasses.length) { return; }\n\n        cssClasses.forEach(classStr => {\n            this.allRowGuis.forEach(c => c.rowComp.addOrRemoveCssClass(classStr, true));\n        });\n    }\n\n    private postProcessRowClassRules(): void {\n        this.beans.rowCssClassCalculator.processRowClassRules(\n            this.rowNode, (className: string) => {\n                this.allRowGuis.forEach(gui => gui.rowComp.addOrRemoveCssClass(className, true));\n            },\n            (className: string) => {\n                this.allRowGuis.forEach(gui => gui.rowComp.addOrRemoveCssClass(className, false));\n            }\n        );\n    }\n\n    private setStylesFromGridOptions(): void {\n        const rowStyles = this.processStylesFromGridOptions();\n        this.allRowGuis.forEach(gui => gui.rowComp.setUserStyles(rowStyles));\n    }\n\n    public getRowBusinessKey(): string | undefined {\n        const businessKeyForNodeFunc = this.beans.gridOptionsWrapper.getBusinessKeyForNodeFunc();\n        if (typeof businessKeyForNodeFunc !== 'function') { return; }\n\n        return businessKeyForNodeFunc(this.rowNode);\n    }\n\n    private getPinnedForContainer(rowContainerType: RowContainerType): string | null {\n        const pinned = rowContainerType === RowContainerType.LEFT ? Constants.PINNED_LEFT :\n            rowContainerType === RowContainerType.RIGHT ? Constants.PINNED_RIGHT : null;\n        return pinned;\n    }\n\n    public getInitialRowClasses(rowContainerType: RowContainerType): string[] {\n        const pinned = this.getPinnedForContainer(rowContainerType);\n\n        const params: RowCssClassCalculatorParams = {\n            rowNode: this.rowNode,\n            rowFocused: this.rowFocused,\n            fadeRowIn: this.fadeRowIn,\n            rowIsEven: this.rowNode.rowIndex! % 2 === 0,\n            rowLevel: this.rowLevel,\n            fullWidthRow: this.isFullWidth(),\n            firstRowOnPage: this.isFirstRowOnPage(),\n            lastRowOnPage: this.isLastRowOnPage(),\n            printLayout: this.printLayout,\n            expandable: this.rowNode.isExpandable(),\n            pinned: pinned\n        };\n        return this.beans.rowCssClassCalculator.getInitialRowClasses(params);\n    }\n\n    public processStylesFromGridOptions(): any {\n        // part 1 - rowStyle\n        const rowStyle = this.beans.gridOptionsWrapper.getRowStyle();\n\n        if (rowStyle && typeof rowStyle === 'function') {\n            console.warn('AG Grid: rowStyle should be an object of key/value styles, not be a function, use getRowStyle() instead');\n            return;\n        }\n\n        // part 1 - rowStyleFunc\n        const rowStyleFunc = this.beans.gridOptionsWrapper.getRowStyleFunc();\n        let rowStyleFuncResult: any;\n\n        if (rowStyleFunc) {\n            const params: WithoutGridCommon<RowClassParams> = {\n                data: this.rowNode.data,\n                node: this.rowNode,\n                rowIndex: this.rowNode.rowIndex!\n            };\n            rowStyleFuncResult = rowStyleFunc(params);\n        }\n\n        return Object.assign({}, rowStyle, rowStyleFuncResult);\n    }\n\n    private onRowSelected(): void {\n        // Treat undefined as false, if we pass undefined down it gets treated as toggle class, rather than explicitly\n        // setting the required value\n        const selected = !!this.rowNode.isSelected();\n        this.allRowGuis.forEach(gui => {\n            gui.rowComp.addOrRemoveCssClass('ag-row-selected', selected);\n            setAriaSelected(gui.element, selected ? true : undefined);\n\n            const ariaLabel = this.createAriaLabel();\n            setAriaLabel(gui.element, ariaLabel == null ? '' : ariaLabel);\n        });\n    }\n\n    private createAriaLabel(): string | undefined {\n        const selected = this.rowNode.isSelected()!;\n        if (selected && this.beans.gridOptionsWrapper.isSuppressRowDeselection()) {\n            return undefined;\n        }\n\n        const translate = this.beans.gridOptionsWrapper.getLocaleTextFunc();\n        const label = translate(\n            selected ? 'ariaRowDeselect' : 'ariaRowSelect',\n            `Press SPACE to ${selected ? 'deselect' : 'select'} this row.`\n        );\n\n        return label;\n    }\n\n    public isUseAnimationFrameForCreate(): boolean {\n        return this.useAnimationFrameForCreate;\n    }\n\n    public addHoverFunctionality(eRow: HTMLElement): void {\n        // because we use animation frames to do this, it's possible the row no longer exists\n        // by the time we get to add it\n        if (!this.active) { return; }\n\n        // because mouseenter and mouseleave do not propagate, we cannot listen on the gridPanel\n        // like we do for all the other mouse events.\n\n        // because of the pinning, we cannot simply add / remove the class based on the eRow. we\n        // have to check all eRow's (body & pinned). so the trick is if any of the rows gets a\n        // mouse hover, it sets such in the rowNode, and then all three reflect the change as\n        // all are listening for event on the row node.\n\n        // step 1 - add listener, to set flag on row node\n        this.addManagedListener(eRow, 'mouseenter', () => this.rowNode.onMouseEnter());\n        this.addManagedListener(eRow, 'mouseleave', () => this.rowNode.onMouseLeave());\n\n        // step 2 - listen for changes on row node (which any eRow can trigger)\n        this.addManagedListener(this.rowNode, RowNode.EVENT_MOUSE_ENTER, () => {\n            // if hover turned off, we don't add the class. we do this here so that if the application\n            // toggles this property mid way, we remove the hover form the last row, but we stop\n            // adding hovers from that point onwards.\n            if (!this.beans.gridOptionsWrapper.isSuppressRowHoverHighlight()) {\n                eRow.classList.add('ag-row-hover');\n            }\n        });\n\n        this.addManagedListener(this.rowNode, RowNode.EVENT_MOUSE_LEAVE, () => {\n            eRow.classList.remove('ag-row-hover');\n        });\n    }\n\n    // for animation, we don't want to animate entry or exit to a very far away pixel,\n    // otherwise the row would move so fast, it would appear to disappear. so this method\n    // moves the row closer to the viewport if it is far away, so the row slide in / out\n    // at a speed the user can see.\n    public roundRowTopToBounds(rowTop: number): number {\n        const gridBodyCon = this.beans.ctrlsService.getGridBodyCtrl();\n        const range = gridBodyCon.getScrollFeature().getVScrollPosition();\n        const minPixel = this.applyPaginationOffset(range.top, true) - 100;\n        const maxPixel = this.applyPaginationOffset(range.bottom, true) + 100;\n\n        return Math.min(Math.max(minPixel, rowTop), maxPixel);\n    }\n\n    protected getFrameworkOverrides(): IFrameworkOverrides {\n        return this.beans.frameworkOverrides;\n    }\n\n    private onRowHeightChanged(): void {\n        // check for exists first - if the user is resetting the row height, then\n        // it will be null (or undefined) momentarily until the next time the flatten\n        // stage is called where the row will then update again with a new height\n        if (this.rowNode.rowHeight == null) { return; }\n\n        const rowHeight = this.rowNode.rowHeight;\n\n        const defaultRowHeight = this.beans.gridOptionsWrapper.getDefaultRowHeight();\n        const isHeightFromFunc = this.beans.gridOptionsWrapper.isGetRowHeightFunction();\n        const heightFromFunc = isHeightFromFunc ? this.beans.gridOptionsWrapper.getRowHeightForNode(this.rowNode).height : undefined;\n        const lineHeight = heightFromFunc ? `${Math.min(defaultRowHeight, heightFromFunc) - 2}px` : undefined;\n\n        this.allRowGuis.forEach(gui => {\n            gui.element.style.height = `${rowHeight}px`;\n\n            // If the row height is coming from a function, this means some rows can\n            // be smaller than the theme had intended. so we set --ag-line-height on\n            // the row, which is picked up by the theme CSS and is used in a calc\n            // for the CSS line-height property, which makes sure the line-height is\n            // not bigger than the row height, otherwise the row text would not fit.\n            // We do not use rowNode.rowHeight here, as this could be the result of autoHeight,\n            // and we found using the autoHeight result causes a loop, where changing the\n            // line-height them impacts the cell height, resulting in a new autoHeight,\n            // resulting in a new line-height and so on loop. \n            // const heightFromFunc = this.beans.gridOptionsWrapper.getRowHeightForNode(this.rowNode).height;\n            if (lineHeight) {\n                gui.element.style.setProperty('--ag-line-height', lineHeight);\n            }\n        });\n    }\n\n    public addEventListener(eventType: string, listener: Function): void {\n        if (eventType === 'renderedRowRemoved' || eventType === 'rowRemoved') {\n            eventType = Events.EVENT_VIRTUAL_ROW_REMOVED;\n            console.warn('AG Grid: Since version 11, event renderedRowRemoved is now called ' + Events.EVENT_VIRTUAL_ROW_REMOVED);\n        }\n        super.addEventListener(eventType, listener);\n    }\n\n    public removeEventListener(eventType: string, listener: Function): void {\n        if (eventType === 'renderedRowRemoved' || eventType === 'rowRemoved') {\n            eventType = Events.EVENT_VIRTUAL_ROW_REMOVED;\n            console.warn('AG Grid: Since version 11, event renderedRowRemoved and rowRemoved is now called ' + Events.EVENT_VIRTUAL_ROW_REMOVED);\n        }\n        super.removeEventListener(eventType, listener);\n    }\n\n    // note - this is NOT called by context, as we don't wire / unwire the CellComp for performance reasons.\n    public destroyFirstPass(): void {\n        this.active = false;\n\n        // why do we have this method? shouldn't everything below be added as a destroy func beside\n        // the corresponding create logic?\n\n        this.setupRemoveAnimation();\n\n        const event: VirtualRowRemovedEvent = this.createRowEvent(Events.EVENT_VIRTUAL_ROW_REMOVED);\n\n        this.dispatchEvent(event);\n        this.beans.eventService.dispatchEvent(event);\n        super.destroy();\n    }\n\n    private setupRemoveAnimation(): void {\n        const rowStillVisibleJustNotInViewport = this.rowNode.rowTop != null;\n        if (rowStillVisibleJustNotInViewport) {\n            // if the row is not rendered, but in viewport, it means it has moved,\n            // so we animate the row out. if the new location is very far away,\n            // the animation will be so fast the row will look like it's just disappeared,\n            // so instead we animate to a position just outside the viewport.\n            const rowTop = this.roundRowTopToBounds(this.rowNode.rowTop!);\n            this.setRowTop(rowTop);\n        } else {\n            this.allRowGuis.forEach(gui => gui.rowComp.addOrRemoveCssClass('ag-opacity-zero', true));\n        }\n    }\n\n    public destroySecondPass(): void {\n        this.allRowGuis.length = 0;\n\n        const destroyCellCtrls = (ctrls: CellCtrlListAndMap): CellCtrlListAndMap => {\n            ctrls.list.forEach(c => c.destroy());\n            return { list: [], map: {} };\n        };\n\n        this.centerCellCtrls = destroyCellCtrls(this.centerCellCtrls);\n        this.leftCellCtrls = destroyCellCtrls(this.leftCellCtrls);\n        this.rightCellCtrls = destroyCellCtrls(this.rightCellCtrls);\n    }\n\n    private setFocusedClasses(): void {\n        this.allRowGuis.forEach(gui => {\n            gui.rowComp.addOrRemoveCssClass('ag-row-focus', this.rowFocused);\n            gui.rowComp.addOrRemoveCssClass('ag-row-no-focus', !this.rowFocused);\n        });\n    }\n\n    private onCellFocusChanged(): void {\n        const rowFocused = this.beans.focusService.isRowFocused(this.rowNode.rowIndex!, this.rowNode.rowPinned);\n\n        if (rowFocused !== this.rowFocused) {\n            this.rowFocused = rowFocused;\n            this.setFocusedClasses();\n        }\n\n        // if we are editing, then moving the focus out of a row will stop editing\n        if (!rowFocused && this.editingRow) {\n            this.stopEditing(false);\n        }\n    }\n\n    private onPaginationChanged(): void {\n        const currentPage = this.beans.paginationProxy.getCurrentPage();\n        // it is possible this row is in the new page, but the page number has changed, which means\n        // it needs to reposition itself relative to the new page\n        if (this.paginationPage !== currentPage) {\n            this.paginationPage = currentPage;\n            this.onTopChanged();\n        }\n\n        this.refreshFirstAndLastRowStyles();\n    }\n\n    private onTopChanged(): void {\n        this.setRowTop(this.rowNode.rowTop!);\n    }\n\n    private onPaginationPixelOffsetChanged(): void {\n        // the pixel offset is used when calculating rowTop to set on the row DIV\n        this.onTopChanged();\n    }\n\n    // applies pagination offset, eg if on second page, and page height is 500px, then removes\n    // 500px from the top position, so a row with rowTop 600px is displayed at location 100px.\n    // reverse will take the offset away rather than add.\n    private applyPaginationOffset(topPx: number, reverse = false): number {\n        if (this.rowNode.isRowPinned()) {\n            return topPx;\n        }\n\n        const pixelOffset = this.beans.paginationProxy.getPixelOffset();\n        const multiplier = reverse ? 1 : -1;\n\n        return topPx + (pixelOffset * multiplier);\n    }\n\n    public setRowTop(pixels: number): void {\n        // print layout uses normal flow layout for row positioning\n        if (this.printLayout) { return; }\n\n        // need to make sure rowTop is not null, as this can happen if the node was once\n        // visible (ie parent group was expanded) but is now not visible\n        if (exists(pixels)) {\n            const afterPaginationPixels = this.applyPaginationOffset(pixels);\n            const afterScalingPixels = this.rowNode.isRowPinned() ? afterPaginationPixels : this.beans.rowContainerHeightService.getRealPixelPosition(afterPaginationPixels);\n            const topPx = `${afterScalingPixels}px`;\n            this.setRowTopStyle(topPx);\n        }\n    }\n\n    public getInitialRowTop(): string | undefined {\n        return this.initialTop;\n    }\n\n    public getInitialTransform(): string | undefined {\n        return this.initialTransform;\n    }\n\n    private setInitialRowTop() {\n        // print layout uses normal flow layout for row positioning\n        if (this.printLayout) { return ''; }\n\n        // if sliding in, we take the old row top. otherwise we just set the current row top.\n        const pixels = this.slideRowIn ? this.roundRowTopToBounds(this.rowNode.oldRowTop!) : this.rowNode.rowTop;\n        const afterPaginationPixels = this.applyPaginationOffset(pixels!);\n        // we don't apply scaling if row is pinned\n        const afterScalingPixels = this.rowNode.isRowPinned() ? afterPaginationPixels : this.beans.rowContainerHeightService.getRealPixelPosition(afterPaginationPixels);\n\n        const res = afterScalingPixels + 'px';\n\n        const suppressRowTransform = this.beans.gridOptionsWrapper.isSuppressRowTransform();\n        if (suppressRowTransform) {\n            this.initialTop = res;\n        } else {\n            this.initialTransform = `translateY(${res})`;\n        }\n    }\n\n    private setRowTopStyle(topPx: string): void {\n        const suppressRowTransform = this.beans.gridOptionsWrapper.isSuppressRowTransform();\n        this.allRowGuis.forEach(\n            gui => suppressRowTransform ?\n                gui.rowComp.setTop(topPx) :\n                gui.rowComp.setTransform(`translateY(${topPx})`)\n        );\n    }\n\n    public getRowNode(): RowNode {\n        return this.rowNode;\n    }\n\n    public getCellCtrl(column: Column): CellCtrl | null {\n        // first up, check for cell directly linked to this column\n        let res: CellCtrl | null = null;\n        this.getAllCellCtrls().forEach(cellCtrl => {\n            if (cellCtrl.getColumn() == column) {\n                res = cellCtrl;\n            }\n        });\n\n        if (res != null) { return res; }\n\n        // second up, if not found, then check for spanned cols.\n        // we do this second (and not at the same time) as this is\n        // more expensive, as spanning cols is a\n        // infrequently used feature so we don't need to do this most\n        // of the time\n        this.getAllCellCtrls().forEach(cellCtrl => {\n            if (cellCtrl.getColSpanningList().indexOf(column) >= 0) {\n                res = cellCtrl;\n            }\n        });\n\n        return res;\n    }\n\n    private onRowIndexChanged(): void {\n        // we only bother updating if the rowIndex is present. if it is not present, it means this row\n        // is child of a group node, and the group node was closed, it's the only way to have no row index.\n        // when this happens, row is about to be de-rendered, so we don't care, rowComp is about to die!\n        if (this.rowNode.rowIndex != null) {\n            this.onCellFocusChanged();\n            this.updateRowIndexes();\n            this.postProcessCss();\n        }\n    }\n\n    private updateRowIndexes(): void {\n        const rowIndexStr = this.rowNode.getRowIndexString();\n        const headerRowCount = this.beans.headerNavigationService.getHeaderRowCount();\n        const rowIsEven = this.rowNode.rowIndex! % 2 === 0;\n        const ariaRowIndex = headerRowCount + this.rowNode.rowIndex! + 1;\n\n        this.allRowGuis.forEach(c => {\n            c.rowComp.setRowIndex(rowIndexStr);\n            c.rowComp.addOrRemoveCssClass('ag-row-even', rowIsEven);\n            c.rowComp.addOrRemoveCssClass('ag-row-odd', !rowIsEven);\n            setAriaRowIndex(c.element, ariaRowIndex);\n        });\n    }\n\n    // returns the pinned left container, either the normal one, or the embedded full with one if exists\n    public getPinnedLeftRowElement(): HTMLElement {\n        return this.leftGui ? this.leftGui.element : undefined!;\n    }\n\n    // returns the pinned right container, either the normal one, or the embedded full with one if exists\n    public getPinnedRightRowElement(): HTMLElement {\n        return this.rightGui ? this.rightGui.element : undefined!;\n    }\n\n    // returns the body container, either the normal one, or the embedded full with one if exists\n    public getBodyRowElement(): HTMLElement {\n        return this.centerGui ? this.centerGui.element : undefined!;\n    }\n\n    // returns the full width container\n    public getFullWidthRowElement(): HTMLElement {\n        return this.fullWidthGui ? this.fullWidthGui.element : undefined!;\n    }\n\n}\n","import { CellCtrl, ICellComp } from \"./cellCtrl\";\nimport { Column } from \"../../entities/column\";\nimport { areEqual, last } from \"../../utils/array\";\nimport { Events } from \"../../eventKeys\";\nimport { missing } from \"../../utils/generic\";\nimport { Constants } from \"../../constants/constants\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Beans } from \"../beans\";\nimport { RowNode } from \"../../entities/rowNode\";\n\n/**\n * Takes care of:\n *  #) Cell Width (including when doing cell spanning, which makes width cover many columns)\n *  #) Cell Height (when doing row span, otherwise we don't touch the height as it's just row height)\n *  #) Cell Left (the horizontal positioning of the cell, the vertical positioning is on the row)\n */\nexport class CellPositionFeature extends BeanStub {\n\n    private cellCtrl: CellCtrl;\n    private eGui: HTMLElement;\n\n    private readonly column: Column;\n    private readonly rowNode: RowNode;\n\n    private colsSpanning: Column[];\n    private rowSpan: number;\n\n    private beans: Beans;\n\n    constructor(ctrl: CellCtrl, beans: Beans) {\n        super();\n\n        this.cellCtrl = ctrl;\n        this.beans = beans;\n\n        this.column = ctrl.getColumn();\n        this.rowNode = ctrl.getRowNode();\n\n        this.setupColSpan();\n        this.setupRowSpan();\n    }\n\n    private setupRowSpan(): void {\n        this.rowSpan = this.column.getRowSpan(this.rowNode);\n    }\n\n    public setComp(eGui: HTMLElement): void {\n        this.eGui = eGui;\n        this.onLeftChanged();\n        this.onWidthChanged();\n        this.applyRowSpan();\n    }\n\n    private onDisplayColumnsChanged(): void {\n        const colsSpanning: Column[] = this.getColSpanningList();\n\n        if (!areEqual(this.colsSpanning, colsSpanning)) {\n            this.colsSpanning = colsSpanning;\n            this.onWidthChanged();\n            this.onLeftChanged(); // left changes when doing RTL\n        }\n    }\n\n    private setupColSpan(): void {\n        // if no col span is active, then we don't set it up, as it would be wasteful of CPU\n        if (this.column.getColDef().colSpan == null) { return; }\n\n        this.colsSpanning = this.getColSpanningList();\n\n        // because we are col spanning, a reorder of the cols can change what cols we are spanning over\n        this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayColumnsChanged.bind(this));\n        // because we are spanning over multiple cols, we check for width any time any cols width changes.\n        // this is expensive - really we should be explicitly checking only the cols we are spanning over\n        // instead of every col, however it would be tricky code to track the cols we are spanning over, so\n        // because hardly anyone will be using colSpan, am favouring this easier way for more maintainable code.\n        this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onWidthChanged.bind(this));\n    }\n\n    public onWidthChanged(): void {\n        if (!this.eGui) { return; }\n        const width = this.getCellWidth();\n        this.eGui.style.width = `${width}px`;\n    }\n\n    private getCellWidth(): number {\n        if (!this.colsSpanning) {\n            return this.column.getActualWidth();\n        }\n\n        return this.colsSpanning.reduce((width, col) => width + col.getActualWidth(), 0);\n    }\n\n    public getColSpanningList(): Column[] {\n        const colSpan = this.column.getColSpan(this.rowNode);\n        const colsSpanning: Column[] = [];\n\n        // if just one col, the col span is just the column we are in\n        if (colSpan === 1) {\n            colsSpanning.push(this.column);\n        } else {\n            let pointer: Column | null = this.column;\n            const pinned = this.column.getPinned();\n            for (let i = 0; pointer && i < colSpan; i++) {\n                colsSpanning.push(pointer);\n                pointer = this.beans.columnModel.getDisplayedColAfter(pointer);\n                if (!pointer || missing(pointer)) {\n                    break;\n                }\n                // we do not allow col spanning to span outside of pinned areas\n                if (pinned !== pointer.getPinned()) {\n                    break;\n                }\n            }\n        }\n\n        return colsSpanning;\n    }\n\n    public onLeftChanged(): void {\n        if (!this.eGui) { return; }\n        const left = this.modifyLeftForPrintLayout(this.getCellLeft());\n        this.eGui.style.left = left + 'px';\n    }\n\n    private getCellLeft(): number | null {\n        let mostLeftCol: Column;\n\n        if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {\n            mostLeftCol = last(this.colsSpanning);\n        } else {\n            mostLeftCol = this.column;\n        }\n\n        return mostLeftCol.getLeft();\n    }\n\n    private modifyLeftForPrintLayout(leftPosition: number | null): number | null {\n        if (!this.cellCtrl.isPrintLayout() || this.column.getPinned() === Constants.PINNED_LEFT) {\n            return leftPosition;\n        }\n\n        const leftWidth = this.beans.columnModel.getDisplayedColumnsLeftWidth();\n\n        if (this.column.getPinned() === Constants.PINNED_RIGHT) {\n            const bodyWidth = this.beans.columnModel.getBodyContainerWidth();\n            return leftWidth + bodyWidth + (leftPosition || 0);\n        }\n\n        // is in body\n        return leftWidth + (leftPosition || 0);\n    }\n\n    private applyRowSpan(): void {\n\n        if (this.rowSpan === 1) { return; }\n\n        const singleRowHeight = this.beans.gridOptionsWrapper.getRowHeightAsNumber();\n        const totalRowHeight = singleRowHeight * this.rowSpan;\n\n        this.eGui.style.height = `${totalRowHeight}px`;\n        this.eGui.style.zIndex = '1';\n    }\n\n    // overriding to make public, as we don't dispose this bean via context\n    public destroy() {\n        super.destroy();\n    }\n}","import { BeanStub } from \"../../context/beanStub\";\nimport { CellClassParams } from \"../../entities/colDef\";\nimport { CellCtrl, ICellComp } from \"./cellCtrl\";\nimport { Column } from \"../../entities/column\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { Beans } from \"../beans\";\nimport { CellStyleFunc, CellStyle } from \"../../entities/colDef\";\n\nexport class CellCustomStyleFeature extends BeanStub {\n\n    private readonly cellCtrl: CellCtrl;\n    private readonly column: Column;\n    private readonly rowNode: RowNode;\n    private readonly beans: Beans;\n    private staticClasses: string[] = [];\n\n    private cellComp: ICellComp;\n\n    constructor(ctrl: CellCtrl, beans: Beans) {\n        super();\n\n        this.cellCtrl = ctrl;\n        this.beans = beans;\n\n        this.column = ctrl.getColumn();\n        this.rowNode = ctrl.getRowNode();\n    }\n\n    public setComp(comp: ICellComp): void {\n        this.cellComp = comp;\n\n        this.applyUserStyles();\n        this.applyCellClassRules();\n        this.applyClassesFromColDef();\n    }\n\n    public applyCellClassRules(): void {\n        const colDef = this.column.getColDef();\n        const cellClassParams: CellClassParams = {\n            value: this.cellCtrl.getValue(),\n            data: this.rowNode.data,\n            node: this.rowNode,\n            colDef: colDef,\n            rowIndex: this.rowNode.rowIndex!,\n            api: this.beans.gridOptionsWrapper.getApi()!,\n            columnApi: this.beans.gridOptionsWrapper.getColumnApi()!,\n            context: this.beans.gridOptionsWrapper.getContext()\n        };\n\n        this.beans.stylingService.processClassRules(\n            colDef.cellClassRules,\n            cellClassParams,\n            className => this.cellComp.addOrRemoveCssClass(className, true),\n            className => this.cellComp.addOrRemoveCssClass(className, false)\n        );\n    }\n\n    public applyUserStyles() {\n        const colDef = this.column.getColDef();\n\n        if (!colDef.cellStyle) { return; }\n\n        let styles: CellStyle | null | undefined;\n\n        if (typeof colDef.cellStyle === 'function') {\n            const cellStyleParams = {\n                column: this.column,\n                value: this.cellCtrl.getValue(),\n                colDef: colDef,\n                data: this.rowNode.data,\n                node: this.rowNode,\n                rowIndex: this.rowNode.rowIndex!,\n                api: this.beans.gridOptionsWrapper.getApi()!,\n                columnApi: this.beans.gridOptionsWrapper.getColumnApi()!,\n                context: this.beans.gridOptionsWrapper.getContext(),\n            } as CellClassParams;\n            const cellStyleFunc = colDef.cellStyle as CellStyleFunc;\n            styles = cellStyleFunc(cellStyleParams);\n        } else {\n            styles = colDef.cellStyle;\n        }\n\n        this.cellComp.setUserStyles(styles);\n    }\n\n    public applyClassesFromColDef() {\n        const colDef = this.column.getColDef();\n        const cellClassParams: CellClassParams = {\n            value: this.cellCtrl.getValue(),\n            data: this.rowNode.data,\n            node: this.rowNode,\n            colDef: colDef,\n            rowIndex: this.rowNode.rowIndex!,\n            api: this.beans.gridOptionsWrapper.getApi()!,\n            columnApi: this.beans.gridOptionsWrapper.getColumnApi()!,\n            context: this.beans.gridOptionsWrapper.getContext()\n        };\n\n        if (this.staticClasses.length) {\n            this.staticClasses.forEach(className => this.cellComp.addOrRemoveCssClass(className, false));\n        }\n\n        this.staticClasses = this.beans.stylingService.getStaticCellClasses(colDef, cellClassParams);\n\n        if (this.staticClasses.length) {\n            this.staticClasses.forEach(className => this.cellComp.addOrRemoveCssClass(className, true));\n        }\n    }\n\n    // overriding to make public, as we don't dispose this bean via context\n    public destroy() {\n        super.destroy();\n    }\n}\n","import { BeanStub } from \"../context/beanStub\";\nimport { Column } from \"../entities/column\";\nimport { ColumnGroup } from \"../entities/columnGroup\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { Beans } from \"../rendering/beans\";\nimport { CustomTooltipFeature, TooltipParentComp } from \"./customTooltipFeature\";\nimport { ITooltipParams } from \"../rendering/tooltipComponent\";\nimport { ColDef, ColGroupDef } from \"../entities/colDef\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\n\nexport interface ITooltipFeatureCtrl {\n    getTooltipValue(): any;\n    getGui(): HTMLElement;\n    getLocation(): string;\n\n    getColumn?(): Column | ColumnGroup;\n    getColDef?(): ColDef | ColGroupDef;\n    getRowIndex?(): number;\n    getRowNode?(): RowNode;\n\n    // this makes no sense, why is the cell formatted value passed to the tooltip???\n    getValueFormatted?(): string;\n}\n\nexport interface ITooltipFeatureComp {\n    setTitle(title: string | undefined): void;\n}\n\nexport class TooltipFeature extends BeanStub {\n\n    private readonly ctrl: ITooltipFeatureCtrl;\n    private readonly beans: Beans;\n\n    private comp: ITooltipFeatureComp;\n\n    private tooltip: any;\n\n    private genericTooltipFeature: CustomTooltipFeature;\n    private browserTooltips: boolean;\n\n    constructor(ctrl: ITooltipFeatureCtrl, beans: Beans) {\n        super();\n\n        this.ctrl = ctrl;\n        this.beans = beans;\n    }\n\n    public setComp(comp: ITooltipFeatureComp): void {\n        this.comp = comp;\n        this.setupTooltip();\n    }\n\n    private setupTooltip(): void {\n        this.browserTooltips = this.beans.gridOptionsWrapper.isEnableBrowserTooltips();\n        this.updateTooltipText();\n\n        if (this.browserTooltips) {\n            this.comp.setTitle(this.tooltip != null ? this.tooltip : undefined);\n        } else {\n            this.createTooltipFeatureIfNeeded();\n        }\n    }\n\n    private updateTooltipText(): void {\n        this.tooltip = this.ctrl.getTooltipValue();\n    }\n\n    private createTooltipFeatureIfNeeded(): void {\n        if (this.genericTooltipFeature != null) { return; }\n\n        const parent: TooltipParentComp = {\n            getTooltipParams: () => this.getTooltipParams(),\n            getGui: () => this.ctrl.getGui()\n        };\n\n        this.genericTooltipFeature = this.createManagedBean(new CustomTooltipFeature(parent), this.beans.context);\n    }\n\n    public refreshToolTip() {\n        this.updateTooltipText();\n\n        if (this.browserTooltips) {\n            this.comp.setTitle(this.tooltip != null ? this.tooltip : undefined);\n        }\n    }\n\n    public getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        const ctrl = this.ctrl;\n        const column = ctrl.getColumn ? ctrl.getColumn() : undefined;\n        const colDef = ctrl.getColDef ? ctrl.getColDef() : undefined;\n        const rowNode = ctrl.getRowNode ? ctrl.getRowNode() : undefined;\n\n        return {\n            location: ctrl.getLocation(), //'cell',\n            colDef: colDef,\n            column: column,\n            rowIndex: ctrl.getRowIndex ? ctrl.getRowIndex() : undefined,\n            node: rowNode,\n            data: rowNode ? rowNode.data : undefined,\n            value: this.getTooltipText(),\n            valueFormatted: ctrl.getValueFormatted ? ctrl.getValueFormatted() : undefined,\n        };\n\n    }\n\n    private getTooltipText() {\n        return this.tooltip;\n    }\n\n    // overriding to make public, as we don't dispose this bean via context\n    public destroy() {\n        super.destroy();\n    }\n}","import { Autowired, Bean, Context, Optional, PostConstruct } from \"../context/context\";\nimport { ColumnApi } from \"../columns/columnApi\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { HeaderNavigationService } from \"../headerRendering/common/headerNavigationService\";\nimport { GridApi } from \"../gridApi\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { ExpressionService } from \"../valueService/expressionService\";\nimport { RowRenderer } from \"./rowRenderer\";\nimport { TemplateService } from \"../templateService\";\nimport { ValueService } from \"../valueService/valueService\";\nimport { EventService } from \"../eventService\";\nimport { ColumnAnimationService } from \"./columnAnimationService\";\nimport { IRangeService, ISelectionHandleFactory } from \"../interfaces/IRangeService\";\nimport { FocusService } from \"../focusService\";\nimport { IContextMenuFactory } from \"../interfaces/iContextMenuFactory\";\nimport { PopupService } from \"../widgets/popupService\";\nimport { ValueFormatterService } from \"./valueFormatterService\";\nimport { StylingService } from \"../styling/stylingService\";\nimport { ColumnHoverService } from \"./columnHoverService\";\nimport { PaginationProxy } from \"../pagination/paginationProxy\";\nimport { AnimationFrameService } from \"../misc/animationFrameService\";\nimport { UserComponentFactory } from \"../components/framework/userComponentFactory\";\nimport { DragAndDropService } from \"../dragAndDrop/dragAndDropService\";\nimport { SortController } from \"../sortController\";\nimport { FilterManager } from \"../filter/filterManager\";\nimport { RowContainerHeightService } from \"./rowContainerHeightService\";\nimport { IFrameworkOverrides } from \"../interfaces/iFrameworkOverrides\";\nimport { CellPositionUtils } from \"../entities/cellPosition\";\nimport { RowPositionUtils } from \"../entities/rowPosition\";\nimport { SelectionService } from \"../selectionService\";\nimport { RowCssClassCalculator } from \"./row/rowCssClassCalculator\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { IClientSideRowModel } from \"../interfaces/iClientSideRowModel\";\nimport { IServerSideRowModel } from \"../interfaces/iServerSideRowModel\";\nimport { ResizeObserverService } from \"../misc/resizeObserverService\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { NavigationService } from \"../gridBodyComp/navigationService\";\nimport { AgStackComponentsRegistry } from \"../components/agStackComponentsRegistry\";\nimport { CtrlsFactory } from \"../ctrlsFactory\";\nimport { UserComponentRegistry } from \"../components/framework/userComponentRegistry\";\nimport { ValueCache } from \"../valueService/valueCache\";\nimport { RowNodeEventThrottle } from \"../entities/rowNodeEventThrottle\";\n\n/** Using the IoC has a slight performance consideration, which is no problem most of the\n * time, unless we are trashing objects - which is the case when scrolling and rowComp\n * and cellComp. So for performance reasons, RowComp and CellComp do not get autowired\n * with the IoC. Instead they get passed this object which is all the beans the RowComp\n * and CellComp need. Not autowiring all the cells gives performance improvement. */\n@Bean('beans')\nexport class Beans {\n\n    @Autowired('resizeObserverService') public resizeObserverService: ResizeObserverService;\n    @Autowired('paginationProxy') public paginationProxy: PaginationProxy;\n    @Autowired('context') public context: Context;\n    @Autowired('columnApi') public columnApi: ColumnApi;\n    @Autowired('gridApi') public gridApi: GridApi;\n    @Autowired('gridOptionsWrapper') public gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('expressionService') public expressionService: ExpressionService;\n    @Autowired('rowRenderer') public rowRenderer: RowRenderer;\n    @Autowired('templateService') public templateService: TemplateService;\n    @Autowired('valueService') public valueService: ValueService;\n    @Autowired('eventService') public eventService: EventService;\n    @Autowired('columnModel') public columnModel: ColumnModel;\n    @Autowired('headerNavigationService') public headerNavigationService: HeaderNavigationService;\n    @Autowired('navigationService') public navigationService: NavigationService;\n    @Autowired('columnAnimationService') public columnAnimationService: ColumnAnimationService;\n    @Optional('rangeService') public rangeService: IRangeService;\n    @Autowired('focusService') public focusService: FocusService;\n    @Optional('contextMenuFactory') public contextMenuFactory: IContextMenuFactory;\n    @Autowired('popupService') public popupService: PopupService;\n    @Autowired('valueFormatterService') public valueFormatterService: ValueFormatterService;\n    @Autowired('stylingService') public stylingService: StylingService;\n    @Autowired('columnHoverService') public columnHoverService: ColumnHoverService;\n    @Autowired('userComponentFactory') public userComponentFactory: UserComponentFactory;\n    @Autowired('userComponentRegistry') public userComponentRegistry: UserComponentRegistry;\n    @Autowired('animationFrameService') public animationFrameService: AnimationFrameService;\n    @Autowired('dragAndDropService') public dragAndDropService: DragAndDropService;\n    @Autowired('sortController') public sortController: SortController;\n    @Autowired('filterManager') public filterManager: FilterManager;\n    @Autowired('rowContainerHeightService') public rowContainerHeightService: RowContainerHeightService;\n    @Autowired('frameworkOverrides') public frameworkOverrides: IFrameworkOverrides;\n    @Autowired('cellPositionUtils') public cellPositionUtils: CellPositionUtils;\n    @Autowired('rowPositionUtils') public rowPositionUtils: RowPositionUtils;\n    @Autowired('selectionService') public selectionService: SelectionService;\n    @Optional('selectionHandleFactory') public selectionHandleFactory: ISelectionHandleFactory;\n    @Autowired('rowCssClassCalculator') public rowCssClassCalculator: RowCssClassCalculator;\n    @Autowired('rowModel') public rowModel: IRowModel;\n    @Autowired('ctrlsService') public ctrlsService: CtrlsService;\n    @Autowired('ctrlsFactory') public ctrlsFactory: CtrlsFactory;\n    @Autowired('agStackComponentsRegistry') public agStackComponentsRegistry: AgStackComponentsRegistry;\n    @Autowired('valueCache') public valueCache: ValueCache;\n    @Autowired('rowNodeEventThrottle') public rowNodeEventThrottle: RowNodeEventThrottle;\n\n    public doingMasterDetail: boolean;\n\n    public clientSideRowModel: IClientSideRowModel;\n    public serverSideRowModel: IServerSideRowModel;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();\n\n        if (this.gridOptionsWrapper.isRowModelDefault()) {\n            this.clientSideRowModel = this.rowModel as IClientSideRowModel;\n        }\n        if (this.gridOptionsWrapper.isRowModelServerSide()) {\n            this.serverSideRowModel = this.rowModel as IServerSideRowModel;\n        }\n    }\n}\n","import { Column } from \"../../entities/column\";\nimport { CellClickedEvent, CellDoubleClickedEvent, CellMouseOutEvent, CellMouseOverEvent, Events } from \"../../events\";\nimport { isBrowserEdge, isIOSUserAgent } from \"../../utils/browser\";\nimport { isElementChildOfClass, isFocusableFormField } from \"../../utils/dom\";\nimport { isEventSupported, isStopPropagationForAgGrid } from \"../../utils/event\";\nimport { Beans } from \"../beans\";\nimport { CellCtrl } from \"./cellCtrl\";\n\nexport class CellMouseListenerFeature extends Beans {\n\n    private readonly cellCtrl: CellCtrl;\n    private readonly beans: Beans;\n    private readonly column: Column;\n\n    private lastIPadMouseClickEvent: number;\n\n    constructor(ctrl: CellCtrl, beans: Beans, column: Column) {\n        super();\n        this.cellCtrl = ctrl;\n        this.beans = beans;\n        this.column = column;\n    }\n\n    public onMouseEvent(eventName: string, mouseEvent: MouseEvent): void {\n        if (isStopPropagationForAgGrid(mouseEvent)) { return; }\n\n        switch (eventName) {\n            case 'click':\n                this.onCellClicked(mouseEvent);\n                break;\n            case 'mousedown':\n            case 'touchstart':\n                this.onMouseDown(mouseEvent);\n                break;\n            case 'dblclick':\n                this.onCellDoubleClicked(mouseEvent);\n                break;\n            case 'mouseout':\n                this.onMouseOut(mouseEvent);\n                break;\n            case 'mouseover':\n                this.onMouseOver(mouseEvent);\n                break;\n        }\n    }\n\n    private onCellClicked(mouseEvent: MouseEvent): void {\n        // iPad doesn't have double click - so we need to mimic it to enable editing for iPad.\n        if (this.isDoubleClickOnIPad()) {\n            this.onCellDoubleClicked(mouseEvent);\n            mouseEvent.preventDefault(); // if we don't do this, then iPad zooms in\n\n            return;\n        }\n\n        const { eventService, gridOptionsWrapper } = this.beans;\n\n        const cellClickedEvent: CellClickedEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_CLICKED);\n        eventService.dispatchEvent(cellClickedEvent);\n\n        const colDef = this.column.getColDef();\n\n        if (colDef.onCellClicked) {\n            // to make callback async, do in a timeout\n            window.setTimeout(() => colDef.onCellClicked!(cellClickedEvent), 0);\n        }\n\n        const editOnSingleClick = (gridOptionsWrapper.isSingleClickEdit() || colDef.singleClickEdit)\n            && !gridOptionsWrapper.isSuppressClickEdit();\n\n        if (editOnSingleClick) {\n            this.cellCtrl.startRowOrCellEdit();\n        }\n    }\n\n    // returns true if on iPad and this is second 'click' event in 200ms\n    private isDoubleClickOnIPad(): boolean {\n        if (!isIOSUserAgent() || isEventSupported('dblclick')) { return false; }\n\n        const nowMillis = new Date().getTime();\n        const res = nowMillis - this.lastIPadMouseClickEvent < 200;\n        this.lastIPadMouseClickEvent = nowMillis;\n\n        return res;\n    }\n\n    private onCellDoubleClicked(mouseEvent: MouseEvent) {\n        const colDef = this.column.getColDef();\n        // always dispatch event to eventService\n        const cellDoubleClickedEvent: CellDoubleClickedEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_DOUBLE_CLICKED);\n        this.beans.eventService.dispatchEvent(cellDoubleClickedEvent);\n\n        // check if colDef also wants to handle event\n        if (typeof colDef.onCellDoubleClicked === 'function') {\n            // to make the callback async, do in a timeout\n            window.setTimeout(() => (colDef.onCellDoubleClicked as any)(cellDoubleClickedEvent), 0);\n        }\n\n        const editOnDoubleClick = !this.beans.gridOptionsWrapper.isSingleClickEdit()\n            && !this.beans.gridOptionsWrapper.isSuppressClickEdit();\n        if (editOnDoubleClick) {\n            this.cellCtrl.startRowOrCellEdit(null, null, mouseEvent);\n        }\n    }\n\n    private onMouseDown(mouseEvent: MouseEvent): void {\n        const { ctrlKey, metaKey, shiftKey } = mouseEvent;\n        const target = mouseEvent.target as HTMLElement;\n        const { eventService, rangeService } = this.beans;\n\n        // do not change the range for right-clicks inside an existing range\n        if (this.isRightClickInExistingRange(mouseEvent)) {\n            return;\n        }\n\n        const ranges = rangeService && rangeService.getCellRanges().length != 0;\n\n        if (!shiftKey || !ranges) {\n            // We only need to pass true to focusCell when the browser is IE/Edge and we are trying\n            // to focus the cell itself. This should never be true if the mousedown was triggered\n            // due to a click on a cell editor for example.\n            const forceBrowserFocus = (isBrowserEdge()) && !this.cellCtrl.isEditing() && !isFocusableFormField(target);\n\n            this.cellCtrl.focusCell(forceBrowserFocus);\n        }\n\n        // if shift clicking, and a range exists, we keep the focus on the cell that started the\n        // range as the user then changes the range selection.\n        if (shiftKey && ranges) {\n            // this stops the cell from getting focused\n            mouseEvent.preventDefault();\n        }\n\n        // if we are clicking on a checkbox, we need to make sure the cell wrapping that checkbox\n        // is focused but we don't want to change the range selection, so return here.\n        if (this.containsWidget(target)) { return; }\n\n        if (rangeService) {\n            const thisCell = this.cellCtrl.getCellPosition();\n\n            if (shiftKey) {\n                rangeService.extendLatestRangeToCell(thisCell);\n            } else {\n                const ctrlKeyPressed = ctrlKey || metaKey;\n                rangeService.setRangeToCell(thisCell, ctrlKeyPressed);\n            }\n        }\n\n        eventService.dispatchEvent(this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_DOWN));\n    }\n\n    private isRightClickInExistingRange(mouseEvent: MouseEvent): boolean {\n        const { rangeService } = this.beans;\n\n        if (rangeService) {\n            const cellInRange = rangeService.isCellInAnyRange(this.cellCtrl.getCellPosition());\n\n            if (cellInRange && mouseEvent.button === 2) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private containsWidget(target: HTMLElement): boolean {\n        return isElementChildOfClass(target, 'ag-selection-checkbox', 3);\n    }\n\n    private onMouseOut(mouseEvent: MouseEvent): void {\n        if (this.mouseStayingInsideCell(mouseEvent)) { return; }\n        const cellMouseOutEvent: CellMouseOutEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_OUT);\n        this.beans.eventService.dispatchEvent(cellMouseOutEvent);\n        this.beans.columnHoverService.clearMouseOver();\n    }\n\n    private onMouseOver(mouseEvent: MouseEvent): void {\n        if (this.mouseStayingInsideCell(mouseEvent)) { return; }\n        const cellMouseOverEvent: CellMouseOverEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_OVER);\n        this.beans.eventService.dispatchEvent(cellMouseOverEvent);\n        this.beans.columnHoverService.setMouseOver([this.column]);\n    }\n\n    private mouseStayingInsideCell(e: MouseEvent): boolean {\n        if (!e.target || !e.relatedTarget) { return false; }\n        const eGui = this.cellCtrl.getGui();\n        const cellContainsTarget = eGui.contains(e.target as Node);\n        const cellContainsRelatedTarget = eGui.contains(e.relatedTarget as Node);\n        return cellContainsTarget && cellContainsRelatedTarget;\n    }\n\n    public destroy(): void {\n    }\n}","import { BeanStub } from \"../../context/beanStub\";\nimport { CellCtrl } from \"./cellCtrl\";\nimport { Beans } from \"../beans\";\nimport { Column } from \"../../entities/column\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { KeyCode } from \"../../constants/keyCode\";\nimport { RowCtrl } from \"../row/rowCtrl\";\nimport { isEventFromPrintableCharacter } from \"../../utils/keyboard\";\n\nexport class CellKeyboardListenerFeature extends BeanStub {\n\n    private readonly cellCtrl: CellCtrl;\n    private readonly beans: Beans;\n    private readonly rowNode: RowNode;\n    private readonly rowCtrl: RowCtrl;\n\n    private eGui: HTMLElement;\n\n    constructor(ctrl: CellCtrl, beans: Beans, column: Column, rowNode: RowNode, rowCtrl: RowCtrl) {\n        super();\n        this.cellCtrl = ctrl;\n        this.beans = beans;\n        this.rowNode = rowNode;\n        this.rowCtrl = rowCtrl;\n    }\n\n    public setComp(eGui: HTMLElement): void {\n        this.eGui = eGui;\n    }\n\n    public onKeyDown(event: KeyboardEvent): void {\n        const key = event.key;\n\n        switch (key) {\n            case KeyCode.ENTER:\n                this.onEnterKeyDown(event);\n                break;\n            case KeyCode.F2:\n                this.onF2KeyDown(event);\n                break;\n            case KeyCode.ESCAPE:\n                this.onEscapeKeyDown(event);\n                break;\n            case KeyCode.TAB:\n                this.onTabKeyDown(event);\n                break;\n            case KeyCode.BACKSPACE:\n            case KeyCode.DELETE:\n                this.onBackspaceOrDeleteKeyPressed(key, event);\n                break;\n            case KeyCode.DOWN:\n            case KeyCode.UP:\n            case KeyCode.RIGHT:\n            case KeyCode.LEFT:\n                this.onNavigationKeyPressed(event, key);\n                break;\n        }\n    }\n\n    private onNavigationKeyPressed(event: KeyboardEvent, key: string): void {\n        if (this.cellCtrl.isEditing()) { return; }\n\n        if (event.shiftKey && this.cellCtrl.isRangeSelectionEnabled()) {\n            this.onShiftRangeSelect(event);\n        } else {\n            this.beans.navigationService.navigateToNextCell(event, key, this.cellCtrl.getCellPosition(), true);\n        }\n\n        // if we don't prevent default, the grid will scroll with the navigation keys\n        event.preventDefault();\n    }\n\n    private onShiftRangeSelect(event: KeyboardEvent): void {\n        if (!this.beans.rangeService) { return; }\n\n        const endCell = this.beans.rangeService.extendLatestRangeInDirection(event);\n\n        if (endCell) {\n            this.beans.navigationService.ensureCellVisible(endCell);\n        }\n    }\n\n    private onTabKeyDown(event: KeyboardEvent): void {\n        this.beans.navigationService.onTabKeyDown(this.cellCtrl, event);\n    }\n\n    private onBackspaceOrDeleteKeyPressed(key: string, event: KeyboardEvent): void {\n        if (!this.cellCtrl.isEditing()) {\n            this.cellCtrl.startRowOrCellEdit(key, undefined, event);\n        }\n    }\n\n    private onEnterKeyDown(e: KeyboardEvent): void {\n        if (this.cellCtrl.isEditing() || this.rowCtrl.isEditing()) {\n            this.cellCtrl.stopEditingAndFocus();\n        } else {\n            if (this.beans.gridOptionsWrapper.isEnterMovesDown()) {\n                this.beans.navigationService.navigateToNextCell(null, KeyCode.DOWN, this.cellCtrl.getCellPosition(), false);\n            } else {\n                this.cellCtrl.startRowOrCellEdit(KeyCode.ENTER, undefined, e);\n                if (this.cellCtrl.isEditing()) {\n                    // if we started editing, then we need to prevent default, otherwise the Enter action can get\n                    // applied to the cell editor. this happened, for example, with largeTextCellEditor where not\n                    // preventing default results in a 'new line' character getting inserted in the text area\n                    // when the editing was started\n                    e.preventDefault();\n                }\n            }\n        }\n    }\n\n    private onF2KeyDown(event: KeyboardEvent): void {\n        if (!this.cellCtrl.isEditing()) {\n            this.cellCtrl.startRowOrCellEdit(KeyCode.F2, undefined, event);\n        }\n    }\n\n    private onEscapeKeyDown(event: KeyboardEvent): void {\n        if (this.cellCtrl.isEditing()) {\n            this.cellCtrl.stopRowOrCellEdit(true);\n            this.cellCtrl.focusCell(true);\n        }\n    }\n\n    public onKeyPress(event: KeyboardEvent): void {\n        // check this, in case focus is on a (for example) a text field inside the cell,\n        // in which cse we should not be listening for these key pressed\n        const eventTarget = event.target;\n        const eventOnChildComponent = eventTarget !== this.eGui;\n\n        if (eventOnChildComponent || this.cellCtrl.isEditing()) { return; }\n\n        const pressedChar = String.fromCharCode(event.charCode);\n        if (pressedChar === ' ') {\n            this.onSpaceKeyPressed(event);\n        } else if (isEventFromPrintableCharacter(event)) {\n            this.cellCtrl.startRowOrCellEdit(null, pressedChar, event);\n            // if we don't prevent default, then the keypress also gets applied to the text field\n            // (at least when doing the default editor), but we need to allow the editor to decide\n            // what it wants to do. we only do this IF editing was started - otherwise it messes\n            // up when the use is not doing editing, but using rendering with text fields in cellRenderer\n            // (as it would block the the user from typing into text fields).\n            event.preventDefault();\n        }\n    }\n\n    private onSpaceKeyPressed(event: KeyboardEvent): void {\n        const { gridOptionsWrapper } = this.beans;\n\n        if (!this.cellCtrl.isEditing() && gridOptionsWrapper.isRowSelection()) {\n            const currentSelection = this.rowNode.isSelected();\n            const newSelection = !currentSelection;\n            if (newSelection || !gridOptionsWrapper.isSuppressRowDeselection()) {\n                const groupSelectsFiltered = this.beans.gridOptionsWrapper.isGroupSelectsFiltered();\n                const updatedCount = this.rowNode.setSelectedParams({\n                    newValue: newSelection,\n                    rangeSelect: event.shiftKey,\n                    groupSelectsFiltered: groupSelectsFiltered\n                });\n                if (currentSelection === undefined && updatedCount === 0) {\n                    this.rowNode.setSelectedParams({\n                        newValue: false,\n                        rangeSelect: event.shiftKey,\n                        groupSelectsFiltered: groupSelectsFiltered\n                    });\n                }\n            }\n        }\n\n        // prevent default as space key, by default, moves browser scroll down\n        event.preventDefault();\n    }\n\n    public destroy(): void {\n    }\n\n}\n","import { Component } from \"../widgets/component\";\nimport { PostConstruct } from \"../context/context\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { Beans } from \"./beans\";\nimport { Column } from \"../entities/column\";\nimport { createIconNoSpan } from \"../utils/icon\";\nimport { DndSourceOnRowDragParams } from \"../entities/colDef\";\n\nexport class DndSourceComp extends Component {\n\n    private readonly beans: Beans;\n\n    private readonly rowNode: RowNode;\n    private readonly column: Column;\n    private readonly eCell: HTMLElement;\n\n    constructor(rowNode: RowNode, column: Column, beans: Beans, eCell: HTMLElement) {\n        super(`<div class=\"ag-drag-handle ag-row-drag\" draggable=\"true\"></div>`);\n        this.rowNode = rowNode;\n        this.column = column;\n        this.beans = beans;\n        this.eCell = eCell;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const eGui = this.getGui();\n        eGui.appendChild(createIconNoSpan('rowDrag', this.beans.gridOptionsWrapper, null)!);\n        // we need to stop the event propagation here to avoid starting a range selection while dragging\n        this.addGuiEventListener('mousedown', (e: MouseEvent) => {\n            e.stopPropagation();\n        });\n        this.addDragSource();\n        this.checkVisibility();\n    }\n\n    private addDragSource(): void {\n        this.addGuiEventListener('dragstart', this.onDragStart.bind(this));\n    }\n\n    private onDragStart(dragEvent: DragEvent): void {\n\n        const providedOnRowDrag = this.column.getColDef().dndSourceOnRowDrag;\n\n        dragEvent.dataTransfer!.setDragImage(this.eCell, 0, 0);\n\n        // default behaviour is to convert data to json and set into drag component\n        const defaultOnRowDrag = () => {\n            try {\n                const jsonData = JSON.stringify(this.rowNode.data);\n\n                dragEvent.dataTransfer!.setData('application/json', jsonData);\n                dragEvent.dataTransfer!.setData('text/plain', jsonData);\n\n            } catch (e) {\n                // if we cannot convert the data to json, then we do not set the type\n            }\n        };\n\n        if (providedOnRowDrag) {\n            const params: DndSourceOnRowDragParams = {\n                rowNode: this.rowNode, dragEvent: dragEvent,\n                api: this.gridOptionsWrapper.getApi()!,\n                columnApi: this.gridOptionsWrapper.getColumnApi()!,\n                context: this.gridOptionsWrapper.getContext()\n            }\n            providedOnRowDrag(params);\n        } else {\n            defaultOnRowDrag();\n        }\n    }\n\n    private checkVisibility(): void {\n        const visible = this.column.isDndSource(this.rowNode);\n        this.setDisplayed(visible);\n    }\n}\n","import { Beans } from \"./../beans\";\nimport { Column } from \"../../entities/column\";\nimport { NewValueParams } from \"../../entities/colDef\";\nimport { CellChangedEvent, RowNode } from \"../../entities/rowNode\";\nimport { CellPosition } from \"../../entities/cellPosition\";\nimport {\n    CellContextMenuEvent,\n    CellEditingStartedEvent,\n    CellEvent,\n    CellFocusedEvent,\n    Events,\n    FlashCellsEvent,\n    CellEditRequestEvent\n} from \"../../events\";\nimport { GridOptionsWrapper } from \"../../gridOptionsWrapper\";\nimport { CellRangeFeature } from \"./cellRangeFeature\";\nimport { exists, makeNull } from \"../../utils/generic\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { CellPositionFeature } from \"./cellPositionFeature\";\nimport { escapeString } from \"../../utils/string\";\nimport { CellCustomStyleFeature } from \"./cellCustomStyleFeature\";\nimport { TooltipFeature, ITooltipFeatureCtrl } from \"../../widgets/tooltipFeature\";\nimport { RowPosition } from \"../../entities/rowPosition\";\nimport { RowCtrl } from \"../row/rowCtrl\";\nimport { CellMouseListenerFeature } from \"./cellMouseListenerFeature\";\nimport { CellKeyboardListenerFeature } from \"./cellKeyboardListenerFeature\";\nimport { ICellRenderer, ICellRendererParams } from \"../cellRenderers/iCellRenderer\";\nimport { ICellEditor, ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { KeyCode } from \"../../constants/keyCode\";\nimport { UserCompDetails } from \"../../components/framework/userComponentFactory\";\nimport { CheckboxSelectionComponent } from \"../checkboxSelectionComponent\";\nimport { DndSourceComp } from \"../dndSourceComp\";\nimport { doOnce } from \"../../utils/function\";\nimport { RowDragComp } from \"../row/rowDragComp\";\nimport { getValueUsingField } from \"../../utils/object\";\nimport { getElementSize } from \"../../utils/dom\";\nimport { setAriaColIndex } from \"../../utils/aria\";\n\nconst CSS_CELL = 'ag-cell';\nconst CSS_AUTO_HEIGHT = 'ag-cell-auto-height';\nconst CSS_NORMAL_HEIGHT = 'ag-cell-normal-height';\nconst CSS_CELL_FOCUS = 'ag-cell-focus';\nconst CSS_CELL_FIRST_RIGHT_PINNED = 'ag-cell-first-right-pinned';\nconst CSS_CELL_LAST_LEFT_PINNED = 'ag-cell-last-left-pinned';\nconst CSS_CELL_NOT_INLINE_EDITING = 'ag-cell-not-inline-editing';\nconst CSS_CELL_INLINE_EDITING = 'ag-cell-inline-editing';\nconst CSS_CELL_POPUP_EDITING = 'ag-cell-popup-editing';\nconst CSS_COLUMN_HOVER = 'ag-column-hover';\nconst CSS_CELL_WRAP_TEXT = 'ag-cell-wrap-text';\n\nexport interface ICellComp {\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\n    setUserStyles(styles: any): void;\n    getFocusableElement(): HTMLElement;\n\n    setTabIndex(tabIndex: number): void;\n    setRole(role: string): void;\n    setColId(colId: string): void;\n    setTitle(title: string | undefined): void;\n\n    setIncludeSelection(include: boolean): void;\n    setIncludeRowDrag(include: boolean): void;\n    setIncludeDndSource(include: boolean): void;\n\n    getCellEditor(): ICellEditor | null;\n    getCellRenderer(): ICellRenderer | null;\n    getParentOfValue(): HTMLElement | null;\n\n    setRenderDetails(compDetails: UserCompDetails | undefined, valueToDisplay: any, forceNewCellRendererInstance: boolean): void;\n    setEditDetails(compDetails?: UserCompDetails, popup?: boolean, position?: string): void;\n}\n\nlet instanceIdSequence = 0;\n\nexport class CellCtrl extends BeanStub {\n\n    public static DOM_DATA_KEY_CELL_CTRL = 'cellCtrl';\n\n    private instanceId: string;\n\n    private eGui: HTMLElement;\n    private eCellWrapper: HTMLElement | undefined;\n    private cellComp: ICellComp;\n    private beans: Beans;\n    private gow: GridOptionsWrapper;\n    private column: Column;\n    private rowNode: RowNode;\n    private rowCtrl: RowCtrl;\n\n    private printLayout: boolean;\n\n    private value: any;\n    private valueFormatted: any;\n\n    private cellRangeFeature: CellRangeFeature;\n    private cellPositionFeature: CellPositionFeature;\n    private cellCustomStyleFeature: CellCustomStyleFeature;\n    private tooltipFeature: TooltipFeature;\n    private cellMouseListenerFeature: CellMouseListenerFeature;\n    private cellKeyboardListenerFeature: CellKeyboardListenerFeature;\n\n    private cellPosition: CellPosition;\n\n    private editing: boolean;\n    private editingInPopup: boolean;\n\n    private includeSelection: boolean;\n    private includeDndSource: boolean;\n    private includeRowDrag: boolean;\n\n    private suppressRefreshCell = false;\n\n    // this comp used only for custom row drag handle (ie when user calls params.registerRowDragger)\n    private customRowDragComp: RowDragComp;\n\n    constructor(column: Column, rowNode: RowNode, beans: Beans, rowCtrl: RowCtrl) {\n        super();\n        this.column = column;\n        this.rowNode = rowNode;\n        this.beans = beans;\n        this.rowCtrl = rowCtrl;\n\n        // unique id to this instance, including the column ID to help with debugging in React as it's used in 'key'\n        this.instanceId = column.getId() + '-' + instanceIdSequence++;\n\n        this.createCellPosition();\n        this.addFeatures();\n    }\n\n    private addFeatures(): void {\n        this.cellPositionFeature = new CellPositionFeature(this, this.beans);\n        this.addDestroyFunc(() => this.cellPositionFeature.destroy());\n\n        this.cellCustomStyleFeature = new CellCustomStyleFeature(this, this.beans);\n        this.addDestroyFunc(() => this.cellCustomStyleFeature.destroy());\n\n        this.cellMouseListenerFeature = new CellMouseListenerFeature(this, this.beans, this.column);\n        this.addDestroyFunc(() => this.cellMouseListenerFeature.destroy());\n\n        this.cellKeyboardListenerFeature = new CellKeyboardListenerFeature(this, this.beans, this.column, this.rowNode, this.rowCtrl);\n        this.addDestroyFunc(() => this.cellKeyboardListenerFeature.destroy());\n\n        const rangeSelectionEnabled = this.beans.rangeService && this.beans.gridOptionsWrapper.isEnableRangeSelection();\n        if (rangeSelectionEnabled) {\n            this.cellRangeFeature = new CellRangeFeature(this.beans, this);\n            this.addDestroyFunc(() => this.cellRangeFeature.destroy());\n        }\n\n        this.addTooltipFeature();\n    }\n\n    private addTooltipFeature(): void {\n        const getTooltipValue = () => {\n            const colDef = this.column.getColDef();\n            const data = this.rowNode.data;\n\n            if (colDef.tooltipField && exists(data)) {\n                return getValueUsingField(data, colDef.tooltipField, this.column.isTooltipFieldContainsDots());\n            }\n\n            const valueGetter = colDef.tooltipValueGetter;\n\n            if (valueGetter) {\n                return valueGetter({\n                    location: 'cell',\n                    api: this.beans.gridOptionsWrapper.getApi()!,\n                    columnApi: this.beans.gridOptionsWrapper.getColumnApi()!,\n                    context: this.beans.gridOptionsWrapper.getContext(),\n                    colDef: this.column.getColDef(),\n                    column: this.column,\n                    rowIndex: this.cellPosition.rowIndex,\n                    node: this.rowNode,\n                    data: this.rowNode.data,\n                    value: this.value,\n                    valueFormatted: this.valueFormatted,\n                });\n            }\n\n            return null;\n        };\n\n        const tooltipCtrl: ITooltipFeatureCtrl = {\n            getColumn: () => this.column,\n            getColDef: () => this.column.getColDef(),\n            getRowIndex: () => this.cellPosition.rowIndex,\n            getRowNode: () => this.rowNode,\n            getGui: () => this.getGui(),\n            getLocation: () => 'cell',\n            getTooltipValue: getTooltipValue,\n\n            // this makes no sense, why is the cell formatted value passed to the tooltip???\n            getValueFormatted: () => this.valueFormatted\n        };\n\n        this.tooltipFeature = new TooltipFeature(tooltipCtrl, this.beans);\n        this.addDestroyFunc(() => this.tooltipFeature.destroy());\n    }\n\n    public setComp(\n        comp: ICellComp,\n        eGui: HTMLElement,\n        eCellWrapper: HTMLElement | undefined,\n        printLayout: boolean,\n        startEditing: boolean\n    ): void {\n        this.cellComp = comp;\n        this.gow = this.beans.gridOptionsWrapper;\n        this.eGui = eGui;\n        this.eCellWrapper = eCellWrapper;\n        this.printLayout = printLayout;\n\n        // we force to make sure formatter gets called at least once,\n        // even if value has not changed (is is undefined)\n        this.updateAndFormatValue(true);\n\n        this.addDomData();\n\n        this.onCellFocused();\n        this.applyStaticCssClasses();\n        this.setWrapText();\n\n        this.onFirstRightPinnedChanged();\n        this.onLastLeftPinnedChanged();\n        this.onColumnHover();\n        this.setupControlComps();\n        this.setupAutoHeight();\n        this.setAriaColIndex();\n\n        if (!this.gow.isSuppressCellFocus()) {\n            this.cellComp.setTabIndex(-1);\n        }\n\n        const colIdSanitised = escapeString(this.column.getId());\n        this.cellComp.setColId(colIdSanitised!);\n        this.cellComp.setRole('gridcell');\n\n        this.cellPositionFeature.setComp(eGui);\n        this.cellCustomStyleFeature.setComp(comp);\n        this.tooltipFeature.setComp(comp);\n        this.cellKeyboardListenerFeature.setComp(this.eGui);\n\n        if (this.cellRangeFeature) { this.cellRangeFeature.setComp(comp, eGui); }\n\n        if (startEditing && this.isCellEditable()) {\n            this.startEditing();\n        } else {\n            this.showValue();\n        }\n    }\n\n    private setupAutoHeight(): void {\n        if (!this.column.isAutoHeight()) { return; }\n\n        const eAutoHeightContainer = this.eCellWrapper!;\n        const eParentCell = eAutoHeightContainer.parentElement!;\n        // taking minRowHeight from getRowHeightForNode means the getRowHeight() callback is used,\n        // thus allowing different min heights for different rows.\n        const minRowHeight = this.beans.gridOptionsWrapper.getRowHeightForNode(this.rowNode).height;\n\n        const measureHeight = (timesCalled: number) => {\n            if (this.editing) { return; }\n            // because of the retry's below, it's possible the retry's go beyond\n            // the rows life.\n            if (!this.isAlive()) { return; }\n\n            const { paddingTop, paddingBottom } = getElementSize(eParentCell);\n            const wrapperHeight = eAutoHeightContainer.offsetHeight;\n            const autoHeight = wrapperHeight + paddingTop + paddingBottom;\n\n            if (timesCalled<5) {\n                // if not in doc yet, means framework not yet inserted, so wait for next VM turn,\n                // maybe it will be ready next VM turn\n                const doc = this.beans.gridOptionsWrapper.getDocument();\n                const notYetInDom = !doc || !doc.contains(eAutoHeightContainer);\n\n                // this happens in React, where React hasn't put any content in. we say 'possibly'\n                // as a) may not be React and b) the cell could be empty anyway\n                const possiblyNoContentYet = autoHeight==0;\n\n                if (notYetInDom || possiblyNoContentYet) {\n                    this.beans.frameworkOverrides.setTimeout(() => measureHeight(timesCalled + 1), 0);\n                    return;\n                }\n            }\n\n            const newHeight = Math.max(autoHeight, minRowHeight);\n            this.rowNode.setRowAutoHeight(newHeight, this.column);\n        };\n\n        const listener = () => measureHeight(0);\n\n        // do once to set size in case size doesn't change, common when cell is blank\n        listener();\n\n        const destroyResizeObserver = this.beans.resizeObserverService.observeResize(eAutoHeightContainer, listener);\n\n        this.addDestroyFunc(() => {\n            destroyResizeObserver();\n            this.rowNode.setRowAutoHeight(undefined, this.column);\n        });\n    }\n\n    public getInstanceId(): string {\n        return this.instanceId;\n    }\n\n    private showValue(forceNewCellRendererInstance = false): void {\n        const valueToDisplay = this.valueFormatted != null ? this.valueFormatted : this.value;\n        const params = this.createCellRendererParams();\n        const compDetails = this.beans.userComponentFactory.getCellRendererDetails(this.column.getColDef(), params);\n        this.cellComp.setRenderDetails(compDetails, valueToDisplay, forceNewCellRendererInstance);\n        this.refreshHandle();\n    }\n\n    private setupControlComps(): void {\n        const colDef = this.column.getColDef();\n        this.includeSelection = this.isIncludeControl(colDef.checkboxSelection);\n        this.includeRowDrag = this.isIncludeControl(colDef.rowDrag);\n        this.includeDndSource = this.isIncludeControl(colDef.dndSource);\n\n        this.cellComp.setIncludeSelection(this.includeSelection);\n        this.cellComp.setIncludeDndSource(this.includeDndSource);\n        this.cellComp.setIncludeRowDrag(this.includeRowDrag);\n    }\n\n    public isForceWrapper(): boolean {\n        // text selection requires the value to be wrapped in another element\n        const forceWrapper = this.beans.gridOptionsWrapper.isEnableCellTextSelection() || this.column.isAutoHeight();\n        return forceWrapper;\n    }\n\n    private isIncludeControl(value: boolean | Function | undefined): boolean {\n        const rowNodePinned = this.rowNode.rowPinned != null;\n        const isFunc = typeof value === 'function';\n        const res = rowNodePinned ? false : isFunc || value === true;\n\n        return res;\n    }\n\n    public refreshShouldDestroy(): boolean {\n        const colDef = this.column.getColDef();\n        const selectionChanged = this.includeSelection != this.isIncludeControl(colDef.checkboxSelection);\n        const rowDragChanged = this.includeRowDrag != this.isIncludeControl(colDef.rowDrag);\n        const dndSourceChanged = this.includeDndSource != this.isIncludeControl(colDef.dndSource);\n\n        return selectionChanged || rowDragChanged || dndSourceChanged;\n    }\n\n    // either called internally if single cell editing, or called by rowRenderer if row editing\n    public startEditing(key: string | null = null, charPress: string | null = null, cellStartedEdit = false, event: KeyboardEvent | MouseEvent | null = null): void {\n        if (!this.isCellEditable() || this.editing) { return; }\n\n        const editorParams = this.createCellEditorParams(key, charPress, cellStartedEdit);\n        const colDef = this.column.getColDef();\n        const compDetails = this.beans.userComponentFactory.getCellEditorDetails(colDef, editorParams);\n\n        // if cellEditorSelector was used, we give preference to popup and popupPosition from the selector\n        const popup = compDetails?.popupFromSelector != null ? compDetails.popupFromSelector : !!colDef.cellEditorPopup ;\n        const position = compDetails?.popupPositionFromSelector != null ? compDetails.popupPositionFromSelector : colDef.cellEditorPopupPosition;\n\n        this.setEditing(true, popup);\n        this.cellComp.setEditDetails(compDetails!, popup, position);\n\n        const e: CellEditingStartedEvent = this.createEvent(event, Events.EVENT_CELL_EDITING_STARTED);\n        this.beans.eventService.dispatchEvent(e);\n    }\n\n    private setEditing(editing: boolean, inPopup = false): void {\n        if (this.editing === editing) { return; }\n\n        this.editing = editing;\n        this.editingInPopup = inPopup;\n        this.setInlineEditingClass();\n    }\n\n    // pass in 'true' to cancel the editing.\n    public stopRowOrCellEdit(cancel: boolean = false) {\n        if (this.beans.gridOptionsWrapper.isFullRowEdit()) {\n            this.rowCtrl.stopRowEditing(cancel);\n        } else {\n            this.stopEditing(cancel);\n        }\n    }\n\n    public onPopupEditorClosed(): void {\n        if (!this.isEditing()) { return; }\n        // note: this happens because of a click outside of the grid or if the popupEditor\n        // is closed with `Escape` key. if another cell was clicked, then the editing will\n        // have already stopped and returned on the conditional above.\n        this.stopEditingAndFocus();\n    }\n\n    private takeValueFromCellEditor(cancel: boolean): { newValue?: any, newValueExists: boolean } {\n        const noValueResult = { newValueExists: false };\n\n        if (cancel) { return noValueResult; }\n\n        const cellEditor =  this.cellComp.getCellEditor();\n\n        if (!cellEditor) { return noValueResult; }\n\n        const userWantsToCancel = cellEditor.isCancelAfterEnd && cellEditor.isCancelAfterEnd();\n\n        if (userWantsToCancel) { return noValueResult; }\n\n        const newValue = cellEditor.getValue();\n\n        return {\n            newValue: newValue,\n            newValueExists: true\n        };\n    }\n\n    /**\n     * @returns `True` if the value changes, otherwise `False`.\n     */\n    private saveNewValue(oldValue: any, newValue: any): boolean {\n        if (newValue === oldValue) { return false; }\n\n        if (this.beans.gridOptionsWrapper.isReadOnlyEdit()) {\n            this.dispatchEventForSaveValueReadOnly(oldValue, newValue);\n            return false;\n        }\n\n        // we suppressRefreshCell because the call to rowNode.setDataValue() results in change detection\n        // getting triggered, which results in all cells getting refreshed. we do not want this refresh\n        // to happen on this call as we want to call it explicitly below. otherwise refresh gets called twice.\n        // if we only did this refresh (and not the one below) then the cell would flash and not be forced.\n        this.suppressRefreshCell = true;\n        const valueChanged = this.rowNode.setDataValue(this.column, newValue);\n        this.suppressRefreshCell = false;\n\n        return valueChanged;\n    }\n\n    private dispatchEventForSaveValueReadOnly(oldValue: any, newValue: any): void {\n        const rowNode = this.rowNode;\n        const event: CellEditRequestEvent = {\n            type: Events.EVENT_CELL_EDIT_REQUEST,\n            event: null,\n            rowIndex: rowNode.rowIndex!,\n            rowPinned: rowNode.rowPinned,\n            column: this.column,\n            api: this.beans.gridApi,\n            columnApi: this.beans.columnApi,\n            colDef: this.column.getColDef(),\n            context: this.beans.gridOptionsWrapper.getContext(),\n            data: rowNode.data,\n            node: rowNode,\n            oldValue,\n            newValue,\n            value: newValue,\n            source: undefined\n        };\n        this.beans.eventService.dispatchEvent(event);\n    }\n\n    /**\n     * Ends the Cell Editing\n     * @param cancel `True` if the edit process is being canceled.\n     * @returns `True` if the value of the `GridCell` has been updated, otherwise `False`.\n     */\n    public stopEditing(cancel = false): boolean {\n        if (!this.editing) { return false; }\n\n        const { newValue, newValueExists } = this.takeValueFromCellEditor(cancel);\n        const oldValue = this.getValueFromValueService();\n        let valueChanged = false;\n\n        if (newValueExists) {\n            valueChanged = this.saveNewValue(oldValue, newValue);\n        }\n\n        this.setEditing(false);\n        this.cellComp.setEditDetails(); // passing nothing stops editing\n        this.updateAndFormatValue();\n        this.refreshCell({ forceRefresh: true, suppressFlash: true });\n        this.dispatchEditingStoppedEvent(oldValue, newValue);\n\n        return valueChanged;\n    }\n\n    private dispatchEditingStoppedEvent(oldValue: any, newValue: any): void {\n        const editingStoppedEvent = {\n            ...this.createEvent(null, Events.EVENT_CELL_EDITING_STOPPED),\n            oldValue,\n            newValue\n        };\n\n        this.beans.eventService.dispatchEvent(editingStoppedEvent);\n    }\n\n    // if we are editing inline, then we don't have the padding in the cell (set in the themes)\n    // to allow the text editor full access to the entire cell\n    private setInlineEditingClass(): void {\n        if (!this.isAlive()) { return; }\n\n        // ag-cell-inline-editing - appears when user is inline editing\n        // ag-cell-not-inline-editing - appears when user is no inline editing\n        // ag-cell-popup-editing - appears when user is editing cell in popup (appears on the cell, not on the popup)\n\n        // note: one of {ag-cell-inline-editing, ag-cell-not-inline-editing} is always present, they toggle.\n        //       however {ag-cell-popup-editing} shows when popup, so you have both {ag-cell-popup-editing}\n        //       and {ag-cell-not-inline-editing} showing at the same time.\n        const editingInline = this.editing && !this.editingInPopup;\n        const popupEditorShowing = this.editing && this.editingInPopup;\n\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_INLINE_EDITING, editingInline);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_NOT_INLINE_EDITING, !editingInline);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_POPUP_EDITING, popupEditorShowing);\n\n        this.rowCtrl.setInlineEditingCss(this.editing);\n    }\n\n    // this is needed as the JS CellComp still allows isPopup() on the CellEditor class, so\n    // it's possible the editor is in a popup even though it's not configured via the colDef as so\n    public hackSayEditingInPopup(): void {\n        if (this.editingInPopup) { return; }\n        this.editingInPopup = true;\n        this.setInlineEditingClass();\n    }\n\n    private createCellEditorParams(key: string | null, charPress: string | null, cellStartedEdit: boolean): ICellEditorParams {\n        const res: any = {\n            value: this.getValueFromValueService(),\n            key: key,\n            eventKey: key,\n            charPress: charPress,\n            column: this.column,\n            colDef: this.column.getColDef(),\n            rowIndex: this.getCellPosition().rowIndex,\n            node: this.rowNode,\n            data: this.rowNode.data,\n            api: this.beans.gridOptionsWrapper.getApi()!,\n            cellStartedEdit: cellStartedEdit,\n            columnApi: this.beans.gridOptionsWrapper.getColumnApi()!,\n            context: this.beans.gridOptionsWrapper.getContext(),\n            onKeyDown: this.onKeyDown.bind(this),\n            stopEditing: this.stopEditingAndFocus.bind(this),\n            eGridCell: this.getGui(),\n            parseValue: this.parseValue.bind(this),\n            formatValue: this.formatValue.bind(this)\n        };\n        return res as ICellEditorParams;\n    }\n\n    private createCellRendererParams(): ICellRendererParams {\n        const addRowCompListener = (eventType: string, listener: Function) => {\n            console.warn('AG Grid: since AG Grid v26, params.addRowCompListener() is deprecated. If you need this functionality, please contact AG Grid support and advise why so that we can revert with an appropriate workaround, as we dont have any valid use cases for it. This method was originally provided as a work around to know when cells were destroyed in AG Grid before custom Cell Renderers could be provided.');\n            this.rowCtrl.addEventListener(eventType, listener);\n        };\n\n        const res: any = {\n            value: this.value,\n            valueFormatted: this.valueFormatted,\n            getValue: this.getValueFromValueService.bind(this),\n            setValue: (value:any) => this.beans.valueService.setValue(this.rowNode, this.column, value),\n            formatValue: this.formatValue.bind(this),\n            data: this.rowNode.data,\n            node: this.rowNode,\n            colDef: this.column.getColDef(),\n            column: this.column,\n            rowIndex: this.getCellPosition().rowIndex,\n            api: this.beans.gridOptionsWrapper.getApi(),\n            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),\n            context: this.beans.gridOptionsWrapper.getContext(),\n            refreshCell: this.refreshCell.bind(this),\n            eGridCell: this.getGui(),\n            eParentOfValue: this.cellComp.getParentOfValue(),\n\n            registerRowDragger: (rowDraggerElement: HTMLElement, dragStartPixels: number, value?: string, suppressVisibilityChange?: boolean) => this.registerRowDragger(rowDraggerElement, dragStartPixels, suppressVisibilityChange),\n\n            // this function is not documented anywhere, so we could drop it\n            // it was in the olden days to allow user to register for when rendered\n            // row was removed (the row comp was removed), however now that the user\n            // can provide components for cells, the destroy method gets call when this\n            // happens so no longer need to fire event.\n            addRowCompListener: addRowCompListener\n        };\n\n        return res as ICellRendererParams;\n    }\n\n    private parseValue(newValue: any): any {\n        const colDef = this.column.getColDef();\n        const params: NewValueParams = {\n            node: this.rowNode,\n            data: this.rowNode.data,\n            oldValue: this.getValue(),\n            newValue: newValue,\n            colDef: colDef,\n            column: this.column,\n            api: this.beans.gridOptionsWrapper.getApi()!,\n            columnApi: this.beans.gridOptionsWrapper.getColumnApi()!,\n            context: this.beans.gridOptionsWrapper.getContext()\n        };\n\n        const valueParser = colDef.valueParser;\n\n        return exists(valueParser) ? this.beans.expressionService.evaluate(valueParser, params) : newValue;\n    }\n\n    public setFocusOutOnEditor(): void {\n        if (!this.editing) { return; }\n\n        const cellEditor = this.cellComp.getCellEditor();\n\n        if (cellEditor && cellEditor.focusOut) {\n            cellEditor.focusOut();\n        }\n    }\n\n    public setFocusInOnEditor(): void {\n        if (!this.editing) { return; }\n\n        const cellEditor = this.cellComp.getCellEditor();\n\n        if (cellEditor && cellEditor.focusIn) {\n            // if the editor is present, then we just focus it\n            cellEditor.focusIn();\n        } else {\n            // if the editor is not present, it means async cell editor (eg React fibre)\n            // and we are trying to set focus before the cell editor is present, so we\n            // focus the cell instead\n            this.focusCell(true);\n        }\n    }\n\n    public onCellChanged(event: CellChangedEvent): void {\n        // because of async in React, the cellComp may not be set yet, if no cellComp then we are\n        // yet to initialise the cell, so no need to refresh.\n        if (!this.cellComp) { return; }\n\n        const eventImpactsThisCell = event.column === this.column;\n\n        if (eventImpactsThisCell) {\n            this.refreshCell({});\n        }\n    }\n\n    // + stop editing {forceRefresh: true, suppressFlash: true}\n    // + event cellChanged {}\n    // + cellRenderer.params.refresh() {} -> method passes 'as is' to the cellRenderer, so params could be anything\n    // + rowCtrl: event dataChanged {suppressFlash: !update, newData: !update}\n    // + rowCtrl: api refreshCells() {animate: true/false}\n    // + rowRenderer: api softRefreshView() {}\n    public refreshCell(params?: { suppressFlash?: boolean, newData?: boolean, forceRefresh?: boolean; }) {\n        // if we are in the middle of 'stopEditing', then we don't refresh here, as refresh gets called explicitly\n        if (this.suppressRefreshCell || this.editing) { return; }\n\n        // In React, due to async, it's possible a refresh was asked for before the CellComp\n        // has been set. If this happens, we skip the refresh, as the cell is going to be\n        // initialised anyway once the CellComp is set.\n        if (!this.cellComp) { return; }\n\n        const colDef = this.column.getColDef();\n        const newData = params != null && !!params.newData;\n        const suppressFlash = (params != null && !!params.suppressFlash) || !!colDef.suppressCellFlash;\n        // we always refresh if cell has no value - this can happen when user provides Cell Renderer and the\n        // cell renderer doesn't rely on a value, instead it could be looking directly at the data, or maybe\n        // printing the current time (which would be silly)???. Generally speaking\n        // non of {field, valueGetter, showRowGroup} is bad in the users application, however for this edge case, it's\n        // best always refresh and take the performance hit rather than never refresh and users complaining in support\n        // that cells are not updating.\n        const noValueProvided = colDef.field == null && colDef.valueGetter == null && colDef.showRowGroup == null;\n        const forceRefresh = (params && params.forceRefresh) || noValueProvided || newData;\n\n        const valuesDifferent = this.updateAndFormatValue();\n        const dataNeedsUpdating = forceRefresh || valuesDifferent;\n\n        if (dataNeedsUpdating) {\n\n            // if it's 'new data', then we don't refresh the cellRenderer, even if refresh method is available.\n            // this is because if the whole data is new (ie we are showing stock price 'BBA' now and not 'SSD')\n            // then we are not showing a movement in the stock price, rather we are showing different stock.\n            this.showValue(newData);\n\n            // we don't want to flash the cells when processing a filter change, as otherwise the UI would\n            // be to busy. see comment in FilterManager with regards processingFilterChange\n            const processingFilterChange = this.beans.filterManager.isSuppressFlashingCellsBecauseFiltering();\n\n            const flashCell = !suppressFlash && !processingFilterChange &&\n                (this.beans.gridOptionsWrapper.isEnableCellChangeFlash() || colDef.enableCellChangeFlash);\n\n            if (flashCell) {\n                this.flashCell();\n            }\n\n            this.cellCustomStyleFeature.applyUserStyles();\n            this.cellCustomStyleFeature.applyClassesFromColDef();\n        }\n\n        this.refreshToolTip();\n\n        // we do cellClassRules even if the value has not changed, so that users who have rules that\n        // look at other parts of the row (where the other part of the row might of changed) will work.\n        this.cellCustomStyleFeature.applyCellClassRules();\n    }\n\n    // cell editors call this, when they want to stop for reasons other\n    // than what we pick up on. eg selecting from a dropdown ends editing.\n    public stopEditingAndFocus(suppressNavigateAfterEdit = false): void {\n        this.stopRowOrCellEdit();\n        this.focusCell(true);\n\n        if (!suppressNavigateAfterEdit) {\n            this.navigateAfterEdit();\n        }\n    }\n\n    private navigateAfterEdit(): void {\n        const fullRowEdit = this.beans.gridOptionsWrapper.isFullRowEdit();\n\n        if (fullRowEdit) { return; }\n\n        const enterMovesDownAfterEdit = this.beans.gridOptionsWrapper.isEnterMovesDownAfterEdit();\n\n        if (enterMovesDownAfterEdit) {\n            this.beans.navigationService.navigateToNextCell(null, KeyCode.DOWN, this.getCellPosition(), false);\n        }\n    }\n\n    // user can also call this via API\n    public flashCell(delays?: { flashDelay?: number | null; fadeDelay?: number | null; }): void {\n        const flashDelay = delays && delays.flashDelay;\n        const fadeDelay = delays && delays.fadeDelay;\n\n        this.animateCell('data-changed', flashDelay, fadeDelay);\n    }\n\n    private animateCell(cssName: string, flashDelay?: number | null, fadeDelay?: number | null): void {\n        const fullName = `ag-cell-${cssName}`;\n        const animationFullName = `ag-cell-${cssName}-animation`;\n        const { gridOptionsWrapper } = this.beans;\n\n        if (!flashDelay) {\n            flashDelay = gridOptionsWrapper.getCellFlashDelay();\n        }\n\n        if (!exists(fadeDelay)) {\n            fadeDelay = gridOptionsWrapper.getCellFadeDelay();\n        }\n\n        // we want to highlight the cells, without any animation\n        this.cellComp.addOrRemoveCssClass(fullName, true);\n        this.cellComp.addOrRemoveCssClass(animationFullName, false);\n\n        // then once that is applied, we remove the highlight with animation\n        window.setTimeout(() => {\n            this.cellComp.addOrRemoveCssClass(fullName, false);\n            this.cellComp.addOrRemoveCssClass(animationFullName, true);\n\n            this.eGui.style.transition = `background-color ${fadeDelay}ms`;\n            window.setTimeout(() => {\n                // and then to leave things as we got them, we remove the animation\n                this.cellComp.addOrRemoveCssClass(animationFullName, false);\n                this.eGui.style.transition = '';\n            }, fadeDelay!);\n        }, flashDelay);\n    }\n\n    public onFlashCells(event: FlashCellsEvent): void {\n        if (!this.cellComp) { return; }\n        const cellId = this.beans.cellPositionUtils.createId(this.getCellPosition());\n        const shouldFlash = event.cells[cellId];\n        if (shouldFlash) {\n            this.animateCell('highlight');\n        }\n    }\n\n    public isCellEditable(): boolean {\n        return this.column.isCellEditable(this.rowNode);\n    }\n\n    public isSuppressFillHandle(): boolean {\n        return this.column.isSuppressFillHandle();\n    }\n\n    private formatValue(value: any): any {\n        const res = this.callValueFormatter(value);\n        return res != null ? res : value;\n    }\n\n    private callValueFormatter(value: any): any {\n        return this.beans.valueFormatterService.formatValue(this.column, this.rowNode, value);\n    }\n\n    public updateAndFormatValue(force = false): boolean {\n        const oldValue = this.value;\n        const oldValueFormatted = this.valueFormatted;\n\n        this.value = this.getValueFromValueService();\n        this.valueFormatted = this.callValueFormatter(this.value);\n\n        const valuesDifferent = force ? true :\n            !this.valuesAreEqual(oldValue, this.value) || this.valueFormatted != oldValueFormatted;\n\n        return valuesDifferent;\n    }\n\n    private valuesAreEqual(val1: any, val2: any): boolean {\n        // if the user provided an equals method, use that, otherwise do simple comparison\n        const colDef = this.column.getColDef();\n        return colDef.equals ? colDef.equals(val1, val2) : val1 === val2;\n    }\n\n    public getComp(): ICellComp {\n        return this.cellComp;\n    }\n\n    public getValueFromValueService(): any {\n        // if we don't check this, then the grid will render leaf groups as open even if we are not\n        // allowing the user to open leaf groups. confused? remember for pivot mode we don't allow\n        // opening leaf groups, so we have to force leafGroups to be closed in case the user expanded\n        // them via the API, or user user expanded them in the UI before turning on pivot mode\n        const lockedClosedGroup = this.rowNode.leafGroup && this.beans.columnModel.isPivotMode();\n\n        const isOpenGroup = this.rowNode.group && this.rowNode.expanded && !this.rowNode.footer && !lockedClosedGroup;\n\n        // are we showing group footers\n        const groupFootersEnabled = this.beans.gridOptionsWrapper.isGroupIncludeFooter();\n\n        // if doing footers, we normally don't show agg data at group level when group is open\n        const groupAlwaysShowAggData = this.beans.gridOptionsWrapper.isGroupSuppressBlankHeader();\n\n        // if doing grouping and footers, we don't want to include the agg value\n        // in the header when the group is open\n        const ignoreAggData = (isOpenGroup && groupFootersEnabled) && !groupAlwaysShowAggData;\n\n        const value = this.beans.valueService.getValue(this.column, this.rowNode, false, ignoreAggData);\n\n        return value;\n    }\n\n    public getValue(): any {\n        return this.value;\n    }\n\n    public getValueFormatted(): string {\n        return this.valueFormatted;\n    }\n\n    private addDomData(): void {\n        const element = this.getGui();\n\n        this.beans.gridOptionsWrapper.setDomData(element, CellCtrl.DOM_DATA_KEY_CELL_CTRL, this);\n        this.addDestroyFunc(() => this.beans.gridOptionsWrapper.setDomData(element, CellCtrl.DOM_DATA_KEY_CELL_CTRL, null));\n    }\n\n    public createEvent(domEvent: Event | null, eventType: string): CellEvent {\n        const event: CellEvent = {\n            type: eventType,\n            node: this.rowNode,\n            data: this.rowNode.data,\n            value: this.value,\n            column: this.column,\n            colDef: this.column.getColDef(),\n            context: this.beans.gridOptionsWrapper.getContext(),\n            api: this.beans.gridApi,\n            columnApi: this.beans.columnApi,\n            rowPinned: this.rowNode.rowPinned,\n            event: domEvent,\n            rowIndex: this.rowNode.rowIndex!\n        };\n\n        return event;\n    }\n\n    public onKeyPress(event: KeyboardEvent): void {\n        this.cellKeyboardListenerFeature.onKeyPress(event);\n    }\n\n    public onKeyDown(event: KeyboardEvent): void {\n        this.cellKeyboardListenerFeature.onKeyDown(event);\n    }\n\n    public onMouseEvent(eventName: string, mouseEvent: MouseEvent): void {\n        this.cellMouseListenerFeature.onMouseEvent(eventName, mouseEvent);\n    }\n\n    public getGui(): HTMLElement {\n        return this.eGui;\n    }\n\n    public refreshToolTip(): void {\n        this.tooltipFeature.refreshToolTip();\n    }\n\n    public getColSpanningList(): Column[] {\n        return this.cellPositionFeature.getColSpanningList();\n    }\n\n    public onLeftChanged(): void {\n        if (!this.cellComp) { return; }\n        this.cellPositionFeature.onLeftChanged();\n    }\n\n    public onDisplayedColumnsChanged(): void {\n        if (!this.eGui) { return; }\n        this.setAriaColIndex();\n    }\n\n    private setAriaColIndex(): void {\n        const colIdx = this.beans.columnModel.getAriaColumnIndex(this.column);\n        setAriaColIndex(this.getGui(), colIdx); // for react, we don't use JSX, as it slowed down column moving\n    }\n\n    public isSuppressNavigable(): boolean {\n        return this.column.isSuppressNavigable(this.rowNode);\n    }\n\n    public onWidthChanged(): void {\n        return this.cellPositionFeature.onWidthChanged();\n    }\n\n    public getColumn(): Column {\n        return this.column;\n    }\n\n    public getRowNode(): RowNode {\n        return this.rowNode;\n    }\n\n    public getBeans(): Beans {\n        return this.beans;\n    }\n\n    public isPrintLayout(): boolean {\n        return this.printLayout;\n    }\n\n    public appendChild(htmlElement: HTMLElement): void {\n        this.eGui.appendChild(htmlElement);\n    }\n\n    public refreshHandle(): void {\n        if (this.editing) { return; }\n        if (this.cellRangeFeature) {\n            this.cellRangeFeature.refreshHandle();\n        }\n    }\n\n    public getCellPosition(): CellPosition {\n        return this.cellPosition;\n    }\n\n    public isEditing(): boolean {\n        return this.editing;\n    }\n\n    // called by rowRenderer when user navigates via tab key\n    public startRowOrCellEdit(key?: string | null, charPress?: string | null, event: KeyboardEvent | MouseEvent | null = null): void {\n        if (this.beans.gridOptionsWrapper.isFullRowEdit()) {\n            this.rowCtrl.startRowEditing(key, charPress, this);\n        } else {\n            this.startEditing(key, charPress, true, event);\n        }\n    }\n\n    public getRowCtrl(): RowCtrl {\n        return this.rowCtrl;\n    }\n\n    public getRowPosition(): RowPosition {\n        return {\n            rowIndex: this.cellPosition.rowIndex,\n            rowPinned: this.cellPosition.rowPinned\n        };\n    }\n\n    public updateRangeBordersIfRangeCount(): void {\n        if (!this.cellComp) { return; }\n        if (this.cellRangeFeature) {\n            this.cellRangeFeature.updateRangeBordersIfRangeCount();\n        }\n    }\n\n    public onRangeSelectionChanged(): void {\n        if (!this.cellComp) { return; }\n        if (this.cellRangeFeature) {\n            this.cellRangeFeature.onRangeSelectionChanged();\n        }\n    }\n\n    public isRangeSelectionEnabled(): boolean {\n        return this.cellRangeFeature != null;\n    }\n\n    public focusCell(forceBrowserFocus = false): void {\n        this.beans.focusService.setFocusedCell(this.getCellPosition().rowIndex, this.column, this.rowNode.rowPinned, forceBrowserFocus);\n    }\n\n    public onRowIndexChanged(): void {\n        // when index changes, this influences items that need the index, so we update the\n        // grid cell so they are working off the new index.\n        this.createCellPosition();\n        // when the index of the row changes, ie means the cell may have lost or gained focus\n        this.onCellFocused();\n        // check range selection\n        if (this.cellRangeFeature) {\n            this.cellRangeFeature.onRangeSelectionChanged();\n        }\n    }\n\n    public onFirstRightPinnedChanged(): void {\n        if (!this.cellComp) { return; }\n        const firstRightPinned = this.column.isFirstRightPinned();\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_FIRST_RIGHT_PINNED, firstRightPinned);\n    }\n\n    public onLastLeftPinnedChanged(): void {\n        if (!this.cellComp) { return; }\n        const lastLeftPinned = this.column.isLastLeftPinned();\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_LAST_LEFT_PINNED, lastLeftPinned);\n    }\n\n    public onCellFocused(event?: CellFocusedEvent): void {\n        if (!this.cellComp || this.gow.isSuppressCellFocus()) { return; }\n\n        const cellFocused = this.beans.focusService.isCellFocused(this.cellPosition);\n\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_FOCUS, cellFocused);\n\n        // see if we need to force browser focus - this can happen if focus is programmatically set\n        if (cellFocused && event && event.forceBrowserFocus) {\n            const focusEl = this.cellComp.getFocusableElement();\n            focusEl.focus();\n        }\n\n        // if another cell was focused, and we are editing, then stop editing\n        const fullRowEdit = this.beans.gridOptionsWrapper.isFullRowEdit();\n\n        if (!cellFocused && !fullRowEdit && this.editing) {\n            this.stopRowOrCellEdit();\n        }\n    }\n\n    private createCellPosition(): void {\n        this.cellPosition = {\n            rowIndex: this.rowNode.rowIndex!,\n            rowPinned: makeNull(this.rowNode.rowPinned),\n            column: this.column\n        };\n    }\n\n    // CSS Classes that only get applied once, they never change\n    private applyStaticCssClasses(): void {\n        this.cellComp.addOrRemoveCssClass(CSS_CELL, true);\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_NOT_INLINE_EDITING, true);\n\n        // normal cells fill the height of the row. autoHeight cells have no height to let them\n        // fit the height of content.\n\n        const autoHeight = this.column.isAutoHeight() == true;\n        this.cellComp.addOrRemoveCssClass(CSS_AUTO_HEIGHT, autoHeight);\n        this.cellComp.addOrRemoveCssClass(CSS_NORMAL_HEIGHT, !autoHeight);\n    }\n\n    public onColumnHover(): void {\n        if (!this.cellComp) { return; }\n        if (!this.beans.gridOptionsWrapper.isColumnHoverHighlight()) { return; }\n\n        const isHovered = this.beans.columnHoverService.isHovered(this.column);\n        this.cellComp.addOrRemoveCssClass(CSS_COLUMN_HOVER, isHovered);\n    }\n\n    public onNewColumnsLoaded(): void {\n        if (!this.cellComp) { return; }\n\n        this.setWrapText();\n\n        if (!this.editing) {\n            this.refreshCell({forceRefresh: true, suppressFlash: true});\n        }\n    }\n\n    private setWrapText(): void {\n        const value = this.column.getColDef().wrapText == true;\n\n        this.cellComp.addOrRemoveCssClass(CSS_CELL_WRAP_TEXT, value);\n    }\n\n    public dispatchCellContextMenuEvent(event: Event | null) {\n        const colDef = this.column.getColDef();\n        const cellContextMenuEvent: CellContextMenuEvent = this.createEvent(event, Events.EVENT_CELL_CONTEXT_MENU);\n\n        this.beans.eventService.dispatchEvent(cellContextMenuEvent);\n\n        if (colDef.onCellContextMenu) {\n            // to make the callback async, do in a timeout\n            window.setTimeout(() => (colDef.onCellContextMenu as any)(cellContextMenuEvent), 0);\n        }\n    }\n\n    public getCellRenderer(): ICellRenderer | null {\n        return this.cellComp ? this.cellComp.getCellRenderer() : null;\n    }\n\n    public getCellEditor(): ICellEditor | null {\n        return this.cellComp ? this.cellComp.getCellEditor() : null;\n    }\n\n    public destroy(): void {\n        super.destroy();\n    }\n\n    public createSelectionCheckbox(): CheckboxSelectionComponent {\n        const cbSelectionComponent = new CheckboxSelectionComponent();\n\n        this.beans.context.createBean(cbSelectionComponent);\n        cbSelectionComponent.init({ rowNode: this.rowNode, column: this.column });\n\n        // put the checkbox in before the value\n        return cbSelectionComponent;\n    }\n\n    public createDndSource(): DndSourceComp {\n        const dndSourceComp = new DndSourceComp(this.rowNode, this.column, this.beans, this.eGui);\n        this.beans.context.createBean(dndSourceComp);\n\n        return dndSourceComp;\n    }\n\n    public registerRowDragger(\n        customElement: HTMLElement,\n        dragStartPixels?: number,\n        suppressVisibilityChange?: boolean\n    ): void {\n        // if previously existed, then we are only updating\n        if (this.customRowDragComp) {\n            this.customRowDragComp.setDragElement(customElement, dragStartPixels);\n            return;\n        }\n\n        const newComp = this.createRowDragComp(customElement, dragStartPixels, suppressVisibilityChange);\n\n        if (newComp) {\n            this.customRowDragComp = newComp;\n            this.addDestroyFunc(() => this.beans.context.destroyBean(newComp));\n        }\n    }\n\n    public createRowDragComp(\n        customElement?: HTMLElement,\n        dragStartPixels?: number,\n        suppressVisibilityChange?: boolean\n    ): RowDragComp | undefined {\n        const pagination = this.beans.gridOptionsWrapper.isPagination();\n        const rowDragManaged = this.beans.gridOptionsWrapper.isRowDragManaged();\n        const clientSideRowModelActive = this.beans.gridOptionsWrapper.isRowModelDefault();\n\n        if (rowDragManaged) {\n            // row dragging only available in default row model\n            if (!clientSideRowModelActive) {\n                doOnce(() => console.warn('AG Grid: managed row dragging is only allowed in the Client Side Row Model'),\n                    'CellComp.addRowDragging');\n\n                return;\n            }\n\n            if (pagination) {\n                doOnce(() => console.warn('AG Grid: managed row dragging is not possible when doing pagination'),\n                    'CellComp.addRowDragging');\n\n                return;\n            }\n        }\n\n        // otherwise (normal case) we are creating a RowDraggingComp for the first time\n        const rowDragComp = new RowDragComp(() => this.value, this.rowNode, this.column, customElement, dragStartPixels, suppressVisibilityChange);\n        this.beans.context.createBean(rowDragComp);\n\n        return rowDragComp;\n    }\n}\n","import { BeanStub } from \"../../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../../context/context\";\nimport { ScrollVisibleService } from \"../../gridBodyComp/scrollVisibleService\";\nimport { Events } from \"../../eventKeys\";\nimport { RowContainerEventsFeature } from \"./rowContainerEventsFeature\";\nimport { DragService } from \"../../dragAndDrop/dragService\";\nimport { CtrlsService } from \"../../ctrlsService\";\nimport { getInnerWidth, getScrollLeft, isHorizontalScrollShowing, isVisible, setScrollLeft } from \"../../utils/dom\";\nimport { ColumnModel } from \"../../columns/columnModel\";\nimport { ResizeObserverService } from \"../../misc/resizeObserverService\";\nimport { ViewportSizeFeature } from \"../viewportSizeFeature\";\nimport { convertToMap } from \"../../utils/map\";\nimport { SetPinnedLeftWidthFeature } from \"./setPinnedLeftWidthFeature\";\nimport { SetPinnedRightWidthFeature } from \"./setPinnedRightWidthFeature\";\nimport { SetHeightFeature } from \"./setHeightFeature\";\nimport { DragListenerFeature } from \"./dragListenerFeature\";\nimport { CenterWidthFeature } from \"../centerWidthFeature\";\nimport { RowCtrl } from \"../../rendering/row/rowCtrl\";\nimport { Constants } from \"../../constants/constants\";\nimport { RowRenderer } from \"../../rendering/rowRenderer\";\nimport { GridOptionsWrapper } from \"../../gridOptionsWrapper\";\n\nexport enum RowContainerName {\n    LEFT = 'left',\n    RIGHT = 'right',\n    CENTER = 'center',\n    FULL_WIDTH = 'fullWidth',\n\n    TOP_LEFT = 'topLeft',\n    TOP_RIGHT = 'topRight',\n    TOP_CENTER = 'topCenter',\n    TOP_FULL_WIDTH = 'topFullWidth',\n\n    BOTTOM_LEFT = 'bottomLeft',\n    BOTTOM_RIGHT = 'bottomRight',\n    BOTTOM_CENTER = 'bottomCenter',\n    BOTTOM_FULL_WIDTH = 'bottomFullWidth'\n}\n\nexport enum RowContainerType {\n    LEFT = 'left',\n    RIGHT = 'right',\n    CENTER = 'center',\n    FULL_WIDTH = 'fullWidth'\n}\n\nexport function getRowContainerTypeForName(name: RowContainerName): RowContainerType {\n    switch (name) {\n        case RowContainerName.CENTER:\n        case RowContainerName.TOP_CENTER:\n        case RowContainerName.BOTTOM_CENTER:\n            return RowContainerType.CENTER;\n        case RowContainerName.LEFT:\n        case RowContainerName.TOP_LEFT:\n        case RowContainerName.BOTTOM_LEFT:\n            return RowContainerType.LEFT;\n        case RowContainerName.RIGHT:\n        case RowContainerName.TOP_RIGHT:\n        case RowContainerName.BOTTOM_RIGHT:\n            return RowContainerType.RIGHT;\n        case RowContainerName.FULL_WIDTH:\n        case RowContainerName.TOP_FULL_WIDTH:\n        case RowContainerName.BOTTOM_FULL_WIDTH:\n            return RowContainerType.FULL_WIDTH;\n        default :\n            throw Error('Invalid Row Container Type');\n    }\n}\n\nconst ContainerCssClasses: Map<RowContainerName, string> = convertToMap([\n    [RowContainerName.CENTER, 'ag-center-cols-container'],\n    [RowContainerName.LEFT, 'ag-pinned-left-cols-container'],\n    [RowContainerName.RIGHT, 'ag-pinned-right-cols-container'],\n    [RowContainerName.FULL_WIDTH, 'ag-full-width-container'],\n\n    [RowContainerName.TOP_CENTER, 'ag-floating-top-container'],\n    [RowContainerName.TOP_LEFT, 'ag-pinned-left-floating-top'],\n    [RowContainerName.TOP_RIGHT, 'ag-pinned-right-floating-top'],\n    [RowContainerName.TOP_FULL_WIDTH, 'ag-floating-top-full-width-container'],\n\n    [RowContainerName.BOTTOM_CENTER, 'ag-floating-bottom-container'],\n    [RowContainerName.BOTTOM_LEFT, 'ag-pinned-left-floating-bottom'],\n    [RowContainerName.BOTTOM_RIGHT, 'ag-pinned-right-floating-bottom'],\n    [RowContainerName.BOTTOM_FULL_WIDTH, 'ag-floating-bottom-full-width-container'],\n]);\n\nconst ViewportCssClasses: Map<RowContainerName, string> = convertToMap([\n    [RowContainerName.CENTER, 'ag-center-cols-viewport'],\n    [RowContainerName.TOP_CENTER, 'ag-floating-top-viewport'],\n    [RowContainerName.BOTTOM_CENTER, 'ag-floating-bottom-viewport'],\n]);\n\nconst WrapperCssClasses: Map<RowContainerName, string> = convertToMap([\n    [RowContainerName.CENTER, 'ag-center-cols-clipper'],\n]);\n\nexport interface IRowContainerComp {\n    setViewportHeight(height: string): void;\n    setRowCtrls(rowCtrls: RowCtrl[]): void;\n    setDomOrder(domOrder: boolean): void;\n    setContainerWidth(width: string): void;\n}\n\nexport class RowContainerCtrl extends BeanStub {\n\n    public static getRowContainerCssClasses(name: RowContainerName): {container?: string, viewport?: string, wrapper?: string} {\n        const containerClass = ContainerCssClasses.get(name);\n        const viewportClass = ViewportCssClasses.get(name);\n        const wrapperClass = WrapperCssClasses.get(name);\n        return {container: containerClass, viewport: viewportClass, wrapper: wrapperClass};\n    }\n\n    public static getPinned(name: RowContainerName): string | null {\n        switch (name) {\n            case RowContainerName.BOTTOM_LEFT:\n            case RowContainerName.TOP_LEFT:\n            case RowContainerName.LEFT:\n                return Constants.PINNED_LEFT;\n            case RowContainerName.BOTTOM_RIGHT:\n            case RowContainerName.TOP_RIGHT:\n            case RowContainerName.RIGHT:\n                return Constants.PINNED_RIGHT;\n            default:\n                return null;\n        }\n\n    }\n\n    @Autowired('scrollVisibleService') private scrollVisibleService: ScrollVisibleService;\n    @Autowired('dragService') private dragService: DragService;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('resizeObserverService') private resizeObserverService: ResizeObserverService;\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n\n    private readonly name: RowContainerName;\n\n    private comp: IRowContainerComp;\n    private eContainer: HTMLElement;\n    private eViewport: HTMLElement;\n    private eWrapper: HTMLElement;\n    private enableRtl: boolean;\n    private embedFullWidthRows: boolean;\n\n    private viewportSizeFeature: ViewportSizeFeature; // only center has this\n\n    constructor(name: RowContainerName) {\n        super();\n        this.name = name;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.enableRtl = this.gridOptionsWrapper.isEnableRtl();\n        this.embedFullWidthRows = this.gridOptionsWrapper.isEmbedFullWidthRows();\n\n        this.forContainers([RowContainerName.CENTER],\n            () => this.viewportSizeFeature = this.createManagedBean(new ViewportSizeFeature(this)));\n    }\n\n    private registerWithCtrlsService(): void {\n        switch (this.name) {\n            case RowContainerName.CENTER: this.ctrlsService.registerCenterRowContainerCtrl(this); break;\n            case RowContainerName.LEFT: this.ctrlsService.registerLeftRowContainerCtrl(this); break;\n            case RowContainerName.RIGHT: this.ctrlsService.registerRightRowContainerCtrl(this); break;\n            case RowContainerName.TOP_CENTER: this.ctrlsService.registerTopCenterRowContainerCtrl(this); break;\n            case RowContainerName.TOP_LEFT: this.ctrlsService.registerTopLeftRowContainerCon(this); break;\n            case RowContainerName.TOP_RIGHT: this.ctrlsService.registerTopRightRowContainerCtrl(this); break;\n            case RowContainerName.BOTTOM_CENTER: this.ctrlsService.registerBottomCenterRowContainerCtrl(this); break;\n            case RowContainerName.BOTTOM_LEFT: this.ctrlsService.registerBottomLeftRowContainerCtrl(this); break;\n            case RowContainerName.BOTTOM_RIGHT: this.ctrlsService.registerBottomRightRowContainerCtrl(this); break;\n        }\n    }\n\n    private forContainers(names: RowContainerName[], callback: (() => void)): void {\n        if (names.indexOf(this.name) >= 0) {\n            callback();\n        }\n    }\n\n    public getContainerElement(): HTMLElement {\n        return this.eContainer;\n    }\n\n    public getViewportSizeFeature(): ViewportSizeFeature {\n        return this.viewportSizeFeature;\n    }\n\n    public setComp(view: IRowContainerComp, eContainer: HTMLElement, eViewport: HTMLElement, eWrapper: HTMLElement): void {\n        this.comp = view;\n        this.eContainer = eContainer;\n        this.eViewport = eViewport;\n        this.eWrapper = eWrapper;\n\n        this.createManagedBean(new RowContainerEventsFeature(this.eContainer));\n        this.addPreventScrollWhileDragging();\n        this.listenOnDomOrder();\n        this.stopHScrollOnPinnedRows();\n\n        const allTopNoFW = [RowContainerName.TOP_CENTER, RowContainerName.TOP_LEFT, RowContainerName.TOP_RIGHT];\n        const allBottomNoFW = [RowContainerName.BOTTOM_CENTER, RowContainerName.BOTTOM_LEFT, RowContainerName.BOTTOM_RIGHT];\n        const allMiddleNoFW = [RowContainerName.CENTER, RowContainerName.LEFT, RowContainerName.RIGHT];\n        const allNoFW = [...allTopNoFW, ...allBottomNoFW, ...allMiddleNoFW];\n\n        const allMiddle = [RowContainerName.CENTER, RowContainerName.LEFT, RowContainerName.RIGHT, RowContainerName.FULL_WIDTH];\n\n        const allCenter = [RowContainerName.CENTER, RowContainerName.TOP_CENTER, RowContainerName.BOTTOM_CENTER];\n        const allLeft = [RowContainerName.LEFT, RowContainerName.BOTTOM_LEFT, RowContainerName.TOP_LEFT];\n        const allRight = [RowContainerName.RIGHT, RowContainerName.BOTTOM_RIGHT, RowContainerName.TOP_RIGHT];\n\n        this.forContainers(allLeft, () => this.createManagedBean(new SetPinnedLeftWidthFeature(this.eContainer)));\n        this.forContainers(allRight, () => this.createManagedBean(new SetPinnedRightWidthFeature(this.eContainer)));\n        this.forContainers(allMiddle, () => this.createManagedBean(new SetHeightFeature(this.eContainer, this.eWrapper)));\n        this.forContainers(allNoFW, () => this.createManagedBean(new DragListenerFeature(this.eContainer)));\n\n        this.forContainers(allCenter, () => this.createManagedBean(\n            new CenterWidthFeature(width => this.comp.setContainerWidth(`${width}px`))\n        ));\n\n        this.addListeners();\n        this.registerWithCtrlsService();\n    }\n\n    private addListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, ()=> this.onScrollVisibilityChanged());\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, ()=> this.onDisplayedColumnsChanged());\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, ()=> this.onDisplayedColumnsWidthChanged());\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_ROWS_CHANGED, ()=> this.onDisplayedRowsChanged());\n\n        this.onScrollVisibilityChanged();\n        this.onDisplayedColumnsChanged();\n        this.onDisplayedColumnsWidthChanged();\n        this.onDisplayedRowsChanged();\n    }\n\n    private listenOnDomOrder(): void {\n        const listener = () => this.comp.setDomOrder(this.gridOptionsWrapper.isEnsureDomOrder());\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, listener);\n        listener();\n    }\n\n    // when editing a pinned row, if the cell is half outside the scrollable area, the browser can\n    // scroll the column into view. we do not want this, the pinned sections should never scroll.\n    // so we listen to scrolls on these containers and reset the scroll if we find one.\n    private stopHScrollOnPinnedRows(): void {\n        this.forContainers([RowContainerName.TOP_CENTER, RowContainerName.BOTTOM_CENTER], () => {\n            const resetScrollLeft = () => this.eViewport.scrollLeft = 0;\n            this.addManagedListener(this.eViewport, 'scroll', resetScrollLeft);\n        });\n    }\n\n    public onDisplayedColumnsChanged(): void {\n        this.forContainers([RowContainerName.CENTER], () => this.onHorizontalViewportChanged());\n    }\n\n    private onDisplayedColumnsWidthChanged(): void {\n        this.forContainers([RowContainerName.CENTER], () => this.onHorizontalViewportChanged());\n    }\n\n    private onScrollVisibilityChanged(): void {\n        if (this.name !== RowContainerName.CENTER) { return; }\n\n        const visible = this.scrollVisibleService.isHorizontalScrollShowing();\n        const scrollbarWidth = visible ? (this.gridOptionsWrapper.getScrollbarWidth() || 0) : 0;\n        const height = scrollbarWidth == 0 ? '100%' : `calc(100% + ${scrollbarWidth}px)`;\n        this.comp.setViewportHeight(height);\n    }\n\n    // this methods prevents the grid views from being scrolled while the dragService is being used\n    // eg. the view should not scroll up and down while dragging rows using the rowDragComp.\n    private addPreventScrollWhileDragging(): void {\n        const preventScroll = (e: TouchEvent) => {\n            if (this.dragService.isDragging()) {\n                if (e.cancelable) { e.preventDefault(); }\n            }\n        };\n\n        this.eContainer.addEventListener('touchmove', preventScroll, { passive: false });\n        this.addDestroyFunc(() => this.eContainer.removeEventListener('touchmove', preventScroll));\n    }\n\n    // this gets called whenever a change in the viewport, so we can inform column controller it has to work\n    // out the virtual columns again. gets called from following locations:\n    // + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged, API (doLayout)\n    public onHorizontalViewportChanged(): void {\n        const scrollWidth = this.getCenterWidth();\n        const scrollPosition = this.getCenterViewportScrollLeft();\n\n        this.columnModel.setViewportPosition(scrollWidth, scrollPosition);\n    }\n\n    public getCenterWidth(): number {\n        return getInnerWidth(this.eViewport);\n    }\n\n    public getCenterViewportScrollLeft(): number {\n        // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser\n        return getScrollLeft(this.eViewport, this.enableRtl);\n    }\n\n    public registerViewportResizeListener(listener: (() => void)) {\n        const unsubscribeFromResize = this.resizeObserverService.observeResize(this.eViewport, listener);\n        this.addDestroyFunc(() => unsubscribeFromResize());\n    }\n\n    public isViewportVisible(): boolean {\n        return isVisible(this.eViewport);\n    }\n\n    public isViewportHScrollShowing(): boolean {\n        return isHorizontalScrollShowing(this.eViewport);\n    }\n\n    public getViewportScrollLeft(): number {\n        return getScrollLeft(this.eViewport, this.enableRtl);\n    }\n\n    public isHorizontalScrollShowing(): boolean {\n        const isAlwaysShowHorizontalScroll = this.gridOptionsWrapper.isAlwaysShowHorizontalScroll();\n        return isAlwaysShowHorizontalScroll || isHorizontalScrollShowing(this.eViewport);\n    }\n\n    public getViewportElement(): HTMLElement {\n        return this.eViewport;\n    }\n\n    public setContainerTranslateX(amount: number): void {\n        this.eContainer.style.transform = `translateX(${amount}px)`;\n    }\n\n    public getHScrollPosition(): { left: number, right: number; } {\n        const res = {\n            left: this.eViewport.scrollLeft,\n            right: this.eViewport.scrollLeft + this.eViewport.offsetWidth\n        };\n        return res;\n    }\n\n    public setCenterViewportScrollLeft(value: number): void {\n        // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser\n        setScrollLeft(this.eViewport, value, this.enableRtl);\n    }\n\n    private onDisplayedRowsChanged(): void {\n        const fullWithContainer =\n            this.name === RowContainerName.TOP_FULL_WIDTH\n            || this.name === RowContainerName.BOTTOM_FULL_WIDTH\n            || this.name === RowContainerName.FULL_WIDTH;\n\n        const doesRowMatch = (rowCtrl: RowCtrl) => {\n            const fullWidthRow = rowCtrl.isFullWidth();\n\n            const printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;\n\n            const embedFW = this.embedFullWidthRows || printLayout;\n\n            const match = fullWithContainer ?\n                !embedFW && fullWidthRow\n                : embedFW || !fullWidthRow;\n\n            return match;\n        };\n\n        // this list contains either all pinned top, center or pinned bottom rows\n        const allRowsRegardlessOfFullWidth = this.getRowCtrls();\n        // this filters out rows not for this container, eg if it's a full with row, but we are not full with container\n        const rowsThisContainer = allRowsRegardlessOfFullWidth.filter(doesRowMatch);\n\n        this.comp.setRowCtrls(rowsThisContainer);\n    }\n\n    private getRowCtrls(): RowCtrl[] {\n        switch (this.name) {\n            case RowContainerName.TOP_CENTER:\n            case RowContainerName.TOP_LEFT:\n            case RowContainerName.TOP_RIGHT:\n            case RowContainerName.TOP_FULL_WIDTH:\n                return this.rowRenderer.getTopRowCtrls();\n\n            case RowContainerName.BOTTOM_CENTER:\n            case RowContainerName.BOTTOM_LEFT:\n            case RowContainerName.BOTTOM_RIGHT:\n            case RowContainerName.BOTTOM_FULL_WIDTH:\n                return this.rowRenderer.getBottomRowCtrls();\n\n            default:\n                return this.rowRenderer.getRowCtrls();\n        }\n    }\n}","import { BeanStub } from \"../../context/beanStub\";\nimport { getCtrlForEvent, isStopPropagationForAgGrid, isEventSupported } from \"../../utils/event\";\nimport { Autowired, Optional, PostConstruct } from \"../../context/context\";\nimport { MouseEventService } from \"./../mouseEventService\";\nimport { RowCtrl } from \"../../rendering/row/rowCtrl\";\nimport { ValueService } from \"../../valueService/valueService\";\nimport { Column } from \"../../entities/column\";\nimport { IContextMenuFactory } from \"../../interfaces/iContextMenuFactory\";\nimport { isIOSUserAgent } from \"../../utils/browser\";\nimport { LongTapEvent, TouchListener } from \"../../widgets/touchListener\";\nimport { CtrlsService } from \"../../ctrlsService\";\nimport { isUserSuppressingKeyboardEvent } from \"../../utils/keyboard\";\nimport { CellKeyDownEvent, CellKeyPressEvent, Events, FullWidthCellKeyDownEvent, FullWidthCellKeyPressEvent } from \"../../events\";\nimport { NavigationService } from \"./../navigationService\";\nimport { FocusService } from \"../../focusService\";\nimport { KeyCode } from \"../../constants/keyCode\";\nimport { UndoRedoService } from \"../../undoRedo/undoRedoService\";\nimport { Constants } from \"../../constants/constants\";\nimport { missingOrEmpty } from \"../../utils/generic\";\nimport { last } from \"../../utils/array\";\nimport { ColumnModel } from \"../../columns/columnModel\";\nimport { PaginationProxy } from \"../../pagination/paginationProxy\";\nimport { PinnedRowModel } from \"../../pinnedRowModel/pinnedRowModel\";\nimport { IRangeService } from \"../../interfaces/IRangeService\";\nimport { ModuleRegistry } from \"../../modules/moduleRegistry\";\nimport { ModuleNames } from \"../../modules/moduleNames\";\nimport { IClipboardService } from \"../../interfaces/iClipboardService\";\nimport { CellCtrl } from \"../../rendering/cell/cellCtrl\";\n\nexport class RowContainerEventsFeature extends BeanStub {\n\n    @Autowired('mouseEventService') private mouseEventService: MouseEventService;\n    @Autowired('valueService') private valueService: ValueService;\n    @Optional('contextMenuFactory') private contextMenuFactory: IContextMenuFactory;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('navigationService') private navigationService: NavigationService;\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('undoRedoService') private undoRedoService: UndoRedoService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n    @Autowired('pinnedRowModel') private pinnedRowModel: PinnedRowModel;\n    @Optional('rangeService') private rangeService: IRangeService;\n    @Optional('clipboardService') private clipboardService: IClipboardService;\n\n    private element: HTMLElement;\n\n    constructor(element: HTMLElement) {\n        super();\n        this.element = element;\n    }\n\n    @PostConstruct\n    public postConstruct(): void {\n        this.addMouseListeners();\n        this.mockContextMenuForIPad();\n        this.addKeyboardEvents();\n    }\n\n    private addKeyboardEvents(): void {\n        const eventNames = ['keydown', 'keypress'];\n\n        eventNames.forEach(eventName => {\n            const listener = this.processKeyboardEvent.bind(this, eventName);\n            this.addManagedListener(this.element, eventName, listener);\n        });\n    }\n\n    private addMouseListeners(): void {\n        const mouseDownEvent = isEventSupported('touchstart') ? 'touchstart' : 'mousedown';\n        const eventNames = ['dblclick', 'contextmenu', 'mouseover', 'mouseout', 'click', mouseDownEvent];\n\n        eventNames.forEach(eventName => {\n            const listener = this.processMouseEvent.bind(this, eventName);\n            this.addManagedListener(this.element, eventName, listener);\n        });\n    }\n\n    private processMouseEvent(eventName: string, mouseEvent: MouseEvent): void {\n        if (\n            !this.mouseEventService.isEventFromThisGrid(mouseEvent) ||\n            isStopPropagationForAgGrid(mouseEvent)\n        ) {\n            return;\n        }\n\n        const rowComp = this.getRowForEvent(mouseEvent);\n        const cellCtrl = this.mouseEventService.getRenderedCellForEvent(mouseEvent)!;\n\n        if (eventName === \"contextmenu\") {\n            this.handleContextMenuMouseEvent(mouseEvent, null, rowComp, cellCtrl);\n        } else {\n            if (cellCtrl) {\n                cellCtrl.onMouseEvent(eventName, mouseEvent);\n            }\n            if (rowComp) {\n                rowComp.onMouseEvent(eventName, mouseEvent);\n            }\n        }\n    }\n\n    private mockContextMenuForIPad(): void {\n        // we do NOT want this when not in iPad, otherwise we will be doing\n        if (!isIOSUserAgent()) { return; }\n\n        const touchListener = new TouchListener(this.element);\n        const longTapListener = (event: LongTapEvent) => {\n            const rowComp = this.getRowForEvent(event.touchEvent);\n            const cellComp = this.mouseEventService.getRenderedCellForEvent(event.touchEvent)!;\n\n            this.handleContextMenuMouseEvent(null, event.touchEvent, rowComp, cellComp);\n        };\n\n        this.addManagedListener(touchListener, TouchListener.EVENT_LONG_TAP, longTapListener);\n        this.addDestroyFunc(() => touchListener.destroy());\n    }\n\n    private getRowForEvent(event: Event): RowCtrl | null {\n        let sourceElement: HTMLElement | null = event.target as HTMLElement | null;\n\n        while (sourceElement) {\n            const rowCon = this.gridOptionsWrapper.getDomData(sourceElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL);\n            if (rowCon) {\n                return rowCon;\n            }\n\n            sourceElement = sourceElement.parentElement;\n        }\n\n        return null;\n    }\n\n    private handleContextMenuMouseEvent(mouseEvent: MouseEvent | null, touchEvent: TouchEvent | null, rowComp: RowCtrl | null, cellCtrl: CellCtrl) {\n        const rowNode = rowComp ? rowComp.getRowNode() : null;\n        const column = cellCtrl ? cellCtrl.getColumn() : null;\n        let value = null;\n\n        if (column) {\n            const event = mouseEvent ? mouseEvent : touchEvent;\n            cellCtrl.dispatchCellContextMenuEvent(event);\n            value = this.valueService.getValue(column, rowNode);\n        }\n\n        // if user clicked on a cell, anchor to that cell, otherwise anchor to the grid panel\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const anchorToElement = cellCtrl ? cellCtrl.getGui() : gridBodyCon.getGridBodyElement();\n\n        if (this.contextMenuFactory) {\n            this.contextMenuFactory.onContextMenu(mouseEvent, touchEvent, rowNode, column, value, anchorToElement);\n        }\n    }\n\n    private processKeyboardEvent(eventName: string, keyboardEvent: KeyboardEvent): void {\n        const cellComp = getCtrlForEvent<CellCtrl>(this.gridOptionsWrapper, keyboardEvent, CellCtrl.DOM_DATA_KEY_CELL_CTRL);\n        const rowComp = getCtrlForEvent<RowCtrl>(this.gridOptionsWrapper, keyboardEvent, RowCtrl.DOM_DATA_KEY_ROW_CTRL);\n\n        if (keyboardEvent.defaultPrevented) { return; }\n        if (cellComp) {\n            this.processCellKeyboardEvent(cellComp, eventName, keyboardEvent);\n        } else if (rowComp && rowComp.isFullWidth()) {\n            this.processFullWidthRowKeyboardEvent(rowComp, eventName, keyboardEvent);\n        }\n    }\n\n    private processCellKeyboardEvent(cellCtrl: CellCtrl, eventName: string, keyboardEvent: KeyboardEvent): void {\n        const rowNode = cellCtrl.getRowNode();\n        const column = cellCtrl.getColumn();\n        const editing = cellCtrl.isEditing();\n\n        const gridProcessingAllowed = !isUserSuppressingKeyboardEvent(this.gridOptionsWrapper, keyboardEvent, rowNode, column, editing);\n\n        if (gridProcessingAllowed) {\n            switch (eventName) {\n                case 'keydown':\n                    // first see if it's a scroll key, page up / down, home / end etc\n                    const wasScrollKey = !editing && this.navigationService.handlePageScrollingKey(keyboardEvent);\n\n                    // if not a scroll key, then we pass onto cell\n                    if (!wasScrollKey) {\n                        cellCtrl.onKeyDown(keyboardEvent);\n                    }\n\n                    // perform clipboard and undo / redo operations\n                    this.doGridOperations(keyboardEvent, cellCtrl.isEditing());\n\n                    break;\n                case 'keypress':\n                    cellCtrl.onKeyPress(keyboardEvent);\n                    break;\n            }\n        }\n\n        if (eventName === 'keydown') {\n            const cellKeyDownEvent: CellKeyDownEvent = cellCtrl.createEvent(keyboardEvent, Events.EVENT_CELL_KEY_DOWN);\n            this.eventService.dispatchEvent(cellKeyDownEvent);\n        }\n\n        if (eventName === 'keypress') {\n            const cellKeyPressEvent: CellKeyPressEvent = cellCtrl.createEvent(keyboardEvent, Events.EVENT_CELL_KEY_PRESS);\n            this.eventService.dispatchEvent(cellKeyPressEvent);\n        }\n    }\n\n    private processFullWidthRowKeyboardEvent(rowComp: RowCtrl, eventName: string, keyboardEvent: KeyboardEvent) {\n        const rowNode = rowComp.getRowNode();\n        const focusedCell = this.focusService.getFocusedCell();\n        const column = (focusedCell && focusedCell.column) as Column;\n        const gridProcessingAllowed = !isUserSuppressingKeyboardEvent(this.gridOptionsWrapper, keyboardEvent, rowNode, column, false);\n\n        if (gridProcessingAllowed) {\n            const key = keyboardEvent.key;\n            if (eventName === 'keydown') {\n                switch (key) {\n                    case KeyCode.UP:\n                    case KeyCode.DOWN:\n                        rowComp.onKeyboardNavigate(keyboardEvent);\n                        break;\n                    case KeyCode.TAB:\n                        rowComp.onTabKeyDown(keyboardEvent);\n                    default:\n                }\n            }\n        }\n\n        if (eventName === 'keydown') {\n            const cellKeyDownEvent: FullWidthCellKeyDownEvent = rowComp.createRowEvent(Events.EVENT_CELL_KEY_DOWN, keyboardEvent);\n            this.eventService.dispatchEvent(cellKeyDownEvent);\n        }\n\n        if (eventName === 'keypress') {\n            const cellKeyPressEvent: FullWidthCellKeyPressEvent = rowComp.createRowEvent(Events.EVENT_CELL_KEY_PRESS, keyboardEvent);\n            this.eventService.dispatchEvent(cellKeyPressEvent);\n        }\n    }\n\n    private doGridOperations(keyboardEvent: KeyboardEvent, editing: boolean): void {\n        // check if ctrl or meta key pressed\n        if (!keyboardEvent.ctrlKey && !keyboardEvent.metaKey) { return; }\n\n        // if the cell the event came from is editing, then we do not\n        // want to do the default shortcut keys, otherwise the editor\n        // (eg a text field) would not be able to do the normal cut/copy/paste\n        if (editing) { return; }\n\n        // for copy / paste, we don't want to execute when the event\n        // was from a child grid (happens in master detail)\n        if (!this.mouseEventService.isEventFromThisGrid(keyboardEvent)) { return; }\n\n        switch (keyboardEvent.code) {\n            case KeyCode.A:\n                return this.onCtrlAndA(keyboardEvent);\n            case KeyCode.C:\n                return this.onCtrlAndC(keyboardEvent);\n            case KeyCode.V:\n                return this.onCtrlAndV();\n            case KeyCode.D:\n                return this.onCtrlAndD(keyboardEvent);\n            case KeyCode.Z:\n                return keyboardEvent.shiftKey ? this.undoRedoService.redo() : this.undoRedoService.undo();\n            case KeyCode.Y:\n                return this.undoRedoService.redo();\n        }\n    }\n\n    private onCtrlAndA(event: KeyboardEvent): void {\n\n        const { pinnedRowModel, paginationProxy, rangeService } = this;\n        const { PINNED_BOTTOM, PINNED_TOP } = Constants;\n\n        if (rangeService && paginationProxy.isRowsToRender()) {\n            const [isEmptyPinnedTop, isEmptyPinnedBottom] = [\n                pinnedRowModel.isEmpty(PINNED_TOP),\n                pinnedRowModel.isEmpty(PINNED_BOTTOM)\n            ];\n\n            const floatingStart = isEmptyPinnedTop ? null : PINNED_TOP;\n            let floatingEnd: string | null;\n            let rowEnd: number;\n\n            if (isEmptyPinnedBottom) {\n                floatingEnd = null;\n                rowEnd = this.paginationProxy.getRowCount() - 1;\n            } else {\n                floatingEnd = PINNED_BOTTOM;\n                rowEnd = pinnedRowModel.getPinnedBottomRowData().length - 1;\n            }\n\n            const allDisplayedColumns = this.columnModel.getAllDisplayedColumns();\n            if (missingOrEmpty(allDisplayedColumns)) { return; }\n\n            rangeService.setCellRange({\n                rowStartIndex: 0,\n                rowStartPinned: floatingStart,\n                rowEndIndex: rowEnd,\n                rowEndPinned: floatingEnd,\n                columnStart: allDisplayedColumns[0],\n                columnEnd: last(allDisplayedColumns)\n            });\n        }\n        event.preventDefault();\n    }\n\n    private onCtrlAndC(event: KeyboardEvent): void {\n\n        if (!this.clipboardService || this.gridOptionsWrapper.isEnableCellTextSelection()) { return; }\n\n        this.clipboardService.copyToClipboard();\n        event.preventDefault();\n    }\n\n    private onCtrlAndV(): void {\n        if (ModuleRegistry.isRegistered(ModuleNames.ClipboardModule) && !this.gridOptionsWrapper.isSuppressClipboardPaste()) {\n            this.clipboardService.pasteFromClipboard();\n        }\n    }\n\n    private onCtrlAndD(event: KeyboardEvent): void {\n        if (ModuleRegistry.isRegistered(ModuleNames.ClipboardModule) && !this.gridOptionsWrapper.isSuppressClipboardPaste()) {\n            this.clipboardService.copyRangeDown();\n        }\n        event.preventDefault();\n    }\n\n}","import { BeanStub } from \"../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { ScrollVisibleService, SetScrollsVisibleParams } from \"../gridBodyComp/scrollVisibleService\";\nimport { GridBodyCtrl } from \"./gridBodyCtrl\";\nimport { BodyHeightChangedEvent, Events } from \"../events\";\nimport { ColumnApi } from \"../columns/columnApi\";\nimport { GridApi } from \"../gridApi\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { RowContainerCtrl } from \"./rowContainer/rowContainerCtrl\";\nimport { getInnerHeight } from \"../utils/dom\";\n\n// listens to changes in the center viewport size, for column and row virtualisation,\n// and adjusts grid as necessary. there are two viewports, one for horizontal and one for\n// vertical scrolling.\nexport class ViewportSizeFeature extends BeanStub {\n\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('scrollVisibleService') private scrollVisibleService: ScrollVisibleService;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    private centerContainerCtrl: RowContainerCtrl;\n    private gridBodyCtrl: GridBodyCtrl;\n\n    private centerWidth: number;\n    private bodyHeight: number;\n\n    constructor(centerContainerCtrl: RowContainerCtrl) {\n        super();\n        this.centerContainerCtrl = centerContainerCtrl;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.ctrlsService.whenReady(() => {\n            this.gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n            this.listenForResize();\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, this.onScrollbarWidthChanged.bind(this));\n    }\n\n    private listenForResize(): void {\n        const listener = ()=> this.onCenterViewportResized();\n\n        // centerContainer gets horizontal resizes\n        this.centerContainerCtrl.registerViewportResizeListener(listener);\n\n        // eBodyViewport gets vertical resizes\n        this.gridBodyCtrl.registerBodyViewportResizeListener(listener);\n    }\n\n    private onScrollbarWidthChanged() {\n        this.checkViewportAndScrolls();\n    }\n\n    private onCenterViewportResized(): void {\n        if (this.centerContainerCtrl.isViewportVisible()) {\n            this.checkViewportAndScrolls();\n\n            const newWidth = this.centerContainerCtrl.getCenterWidth();\n\n            if (newWidth !== this.centerWidth) {\n                this.centerWidth = newWidth;\n                this.columnModel.refreshFlexedColumns(\n                    { viewportWidth: this.centerWidth, updateBodyWidths: true, fireResizedEvent: true }\n                );\n            }\n        } else {\n            this.bodyHeight = 0;\n        }\n    }\n\n    // gets called every time the viewport size changes. we use this to check visibility of scrollbars\n    // in the grid panel, and also to check size and position of viewport for row and column virtualisation.\n    private checkViewportAndScrolls(): void {\n        // results in updating anything that depends on scroll showing\n        this.updateScrollVisibleService();\n\n        // fires event if height changes, used by PaginationService, HeightScalerService, RowRenderer\n        this.checkBodyHeight();\n\n        // check for virtual columns for ColumnController\n        this.onHorizontalViewportChanged();\n\n        this.gridBodyCtrl.getScrollFeature().checkScrollLeft();\n    }\n\n    public getBodyHeight(): number {\n        return this.bodyHeight;\n    }\n\n    private checkBodyHeight(): void {\n        const eBodyViewport = this.gridBodyCtrl.getBodyViewportElement();\n        const bodyHeight = getInnerHeight(eBodyViewport);\n\n        if (this.bodyHeight !== bodyHeight) {\n            this.bodyHeight = bodyHeight;\n            const event: BodyHeightChangedEvent = {\n                type: Events.EVENT_BODY_HEIGHT_CHANGED,\n                api: this.gridApi,\n                columnApi: this.columnApi\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    private updateScrollVisibleService(): void {\n        // because of column animation (which takes 200ms), we have to do this twice.\n        // eg if user removes cols anywhere except at the RHS, then the cols on the RHS\n        // will animate to the left to fill the gap. this animation means just after\n        // the cols are removed, the remaining cols are still in the original location\n        // at the start of the animation, so pre animation the H scrollbar is still needed,\n        // but post animation it is not.\n        this.updateScrollVisibleServiceImpl();\n        setTimeout(this.updateScrollVisibleServiceImpl.bind(this), 500);\n    }\n\n    private updateScrollVisibleServiceImpl(): void {\n        const params: SetScrollsVisibleParams = {\n            horizontalScrollShowing: this.isHorizontalScrollShowing(),\n            verticalScrollShowing: this.gridBodyCtrl.isVerticalScrollShowing()\n        };\n\n        this.scrollVisibleService.setScrollsVisible(params);\n\n        // fix - gridComp should just listen to event from above\n        this.gridBodyCtrl.setVerticalScrollPaddingVisible(params.verticalScrollShowing);\n    }\n\n    private isHorizontalScrollShowing(): boolean {\n        const isAlwaysShowHorizontalScroll = this.gridOptionsWrapper.isAlwaysShowHorizontalScroll();\n        return isAlwaysShowHorizontalScroll || this.centerContainerCtrl.isViewportHScrollShowing();\n    }\n\n    // this gets called whenever a change in the viewport, so we can inform column controller it has to work\n    // out the virtual columns again. gets called from following locations:\n    // + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged, API (doLayout)\n    private onHorizontalViewportChanged(): void {\n        const scrollWidth = this.centerContainerCtrl.getCenterWidth();\n        const scrollPosition = this.centerContainerCtrl.getViewportScrollLeft();\n\n        this.columnModel.setViewportPosition(scrollWidth, scrollPosition);\n    }\n}","import { BeanStub } from \"../../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../../context/context\";\nimport { Events } from \"../../eventKeys\";\nimport { setDisplayed, setFixedWidth } from \"../../utils/dom\";\nimport { PinnedWidthService } from \"../pinnedWidthService\";\n\nexport class SetPinnedLeftWidthFeature extends BeanStub {\n\n    @Autowired('pinnedWidthService') private pinnedWidthService: PinnedWidthService;\n\n    private element: HTMLElement;\n\n    constructor(element: HTMLElement) {\n        super();\n        this.element = element;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, this.onPinnedLeftWidthChanged.bind(this));\n    }\n\n    private onPinnedLeftWidthChanged(): void {\n        const leftWidth = this.pinnedWidthService.getPinnedLeftWidth();\n        const displayed = leftWidth > 0;\n        setDisplayed(this.element, displayed);\n        if (displayed) {\n            setFixedWidth(this.element, leftWidth);\n        }\n    }\n}","import { Autowired, PostConstruct } from \"../../context/context\";\nimport { PinnedWidthService } from \"../pinnedWidthService\";\nimport { Events } from \"../../eventKeys\";\nimport { setDisplayed, setFixedWidth } from \"../../utils/dom\";\nimport { BeanStub } from \"../../context/beanStub\";\n\nexport class SetPinnedRightWidthFeature extends BeanStub {\n\n    @Autowired('pinnedWidthService') private pinnedWidthService: PinnedWidthService;\n\n    private element: HTMLElement;\n\n    constructor(element: HTMLElement) {\n        super();\n        this.element = element;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, this.onPinnedRightWidthChanged.bind(this));\n    }\n\n    private onPinnedRightWidthChanged(): void {\n        const rightWidth = this.pinnedWidthService.getPinnedRightWidth();\n        const displayed = rightWidth > 0;\n        setDisplayed(this.element, displayed);\n        if (displayed) {\n            setFixedWidth(this.element, rightWidth);\n        }\n    }\n}","import { BeanStub } from \"../../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../../context/context\";\nimport { RowContainerHeightService } from \"../../rendering/rowContainerHeightService\";\nimport { Events } from \"../../eventKeys\";\n\nexport class SetHeightFeature extends BeanStub {\n\n    @Autowired(\"rowContainerHeightService\") private maxDivHeightScaler: RowContainerHeightService;\n\n    private eContainer: HTMLElement;\n    private eWrapper: HTMLElement;\n\n    constructor(eContainer: HTMLElement, eWrapper: HTMLElement) {\n        super();\n        this.eContainer = eContainer;\n        this.eWrapper = eWrapper;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED, this.onHeightChanged.bind(this));\n    }\n\n    private onHeightChanged(): void {\n        const height = this.maxDivHeightScaler.getUiContainerHeight();\n        const heightString = height != null ? `${height}px` : ``;\n\n        this.eContainer.style.height = heightString;\n        if (this.eWrapper) {\n            this.eWrapper.style.height = heightString;\n        }\n    }\n}","import { BeanStub } from \"../../context/beanStub\";\nimport { missing } from \"../../utils/generic\";\nimport { Autowired, Optional, PostConstruct } from \"../../context/context\";\nimport { IRangeService } from \"../../interfaces/IRangeService\";\nimport { DragListenerParams, DragService } from \"../../dragAndDrop/dragService\";\n\nexport class DragListenerFeature extends BeanStub {\n\n    @Optional('rangeService') private rangeService: IRangeService;\n    @Autowired('dragService') private dragService: DragService;\n\n    private eContainer: HTMLElement;\n\n    constructor(eContainer: HTMLElement) {\n        super();\n        this.eContainer = eContainer;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        if (\n            !this.gridOptionsWrapper.isEnableRangeSelection() || // no range selection if no property\n            missing(this.rangeService) // no range selection if not enterprise version\n        ) {\n            return;\n        }\n\n        const params: DragListenerParams = {\n            dragStartPixels: 0,\n            eElement: this.eContainer,\n            onDragStart: this.rangeService.onDragStart.bind(this.rangeService),\n            onDragStop: this.rangeService.onDragStop.bind(this.rangeService),\n            onDragging: this.rangeService.onDragging.bind(this.rangeService)\n        };\n\n        this.dragService.addDragSource(params);\n        this.addDestroyFunc(() => this.dragService.removeDragSource(params));\n    }\n\n}","import { BeanStub } from \"../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { Constants } from \"../constants/constants\";\nimport { Events } from \"../eventKeys\";\n\nexport class CenterWidthFeature extends BeanStub {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    private callback: (width: number) => void;\n\n    constructor(callback: (width: number) => void) {\n        super();\n        this.callback = callback;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const listener = this.setWidth.bind(this);\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, listener);\n\n        this.setWidth();\n    }\n\n    private setWidth(): void {\n        const {columnModel} = this;\n\n        const printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;\n\n        const centerWidth = columnModel.getBodyContainerWidth();\n        const leftWidth = columnModel.getDisplayedColumnsLeftWidth();\n        const rightWidth = columnModel.getDisplayedColumnsRightWidth();\n\n        const totalWidth = printLayout ? centerWidth + leftWidth + rightWidth : centerWidth;\n\n        this.callback(totalWidth);\n    }\n}","import { Autowired, Optional, PostConstruct } from '../context/context';\nimport { GridHeaderComp } from '../headerRendering/gridHeaderComp';\nimport { IRangeService } from '../interfaces/IRangeService';\nimport { ResizeObserverService } from '../misc/resizeObserverService';\nimport { LayoutCssClasses } from \"../styling/layoutFeature\";\nimport { setAriaColCount, setAriaMultiSelectable, setAriaRowCount } from '../utils/aria';\nimport { Component } from '../widgets/component';\nimport { RefSelector } from '../widgets/componentAnnotations';\nimport {\n    CSS_CLASS_CELL_SELECTABLE,\n    CSS_CLASS_COLUMN_MOVING,\n    CSS_CLASS_FORCE_VERTICAL_SCROLL,\n    GridBodyCtrl,\n    IGridBodyComp,\n    RowAnimationCssClasses\n} from \"./gridBodyCtrl\";\nimport { RowContainerName } from \"./rowContainer/rowContainerCtrl\";\n\nconst GRID_BODY_TEMPLATE = /* html */\n    `<div class=\"ag-root ag-unselectable\" role=\"grid\">\n        <ag-header-root ref=\"gridHeader\"></ag-header-root>\n        <div class=\"ag-floating-top\" ref=\"eTop\" role=\"presentation\">\n            <ag-row-container ref=\"topLeftContainer\" name=\"${RowContainerName.TOP_LEFT}\"></ag-row-container>\n            <ag-row-container ref=\"topCenterContainer\" name=\"${RowContainerName.TOP_CENTER}\"></ag-row-container>\n            <ag-row-container ref=\"topRightContainer\" name=\"${RowContainerName.TOP_RIGHT}\"></ag-row-container>\n            <ag-row-container ref=\"topFullWidthContainer\" name=\"${RowContainerName.TOP_FULL_WIDTH}\"></ag-row-container>\n        </div>\n        <div class=\"ag-body-viewport\" ref=\"eBodyViewport\" role=\"presentation\">\n            <ag-row-container ref=\"leftContainer\" name=\"${RowContainerName.LEFT}\"></ag-row-container>\n            <ag-row-container ref=\"centerContainer\" name=\"${RowContainerName.CENTER}\"></ag-row-container>\n            <ag-row-container ref=\"rightContainer\" name=\"${RowContainerName.RIGHT}\"></ag-row-container>\n            <ag-row-container ref=\"fullWidthContainer\" name=\"${RowContainerName.FULL_WIDTH}\"></ag-row-container>\n        </div>\n        <div class=\"ag-floating-bottom\" ref=\"eBottom\" role=\"presentation\">\n            <ag-row-container ref=\"bottomLeftContainer\" name=\"${RowContainerName.BOTTOM_LEFT}\"></ag-row-container>\n            <ag-row-container ref=\"bottomCenterContainer\" name=\"${RowContainerName.BOTTOM_CENTER}\"></ag-row-container>\n            <ag-row-container ref=\"bottomRightContainer\" name=\"${RowContainerName.BOTTOM_RIGHT}\"></ag-row-container>\n            <ag-row-container ref=\"bottomFullWidthContainer\" name=\"${RowContainerName.BOTTOM_FULL_WIDTH}\"></ag-row-container>\n        </div>\n        <ag-fake-horizontal-scroll></ag-fake-horizontal-scroll>\n        <ag-overlay-wrapper></ag-overlay-wrapper>\n    </div>`;\n\nexport class GridBodyComp extends Component {\n\n    @Autowired('resizeObserverService') private resizeObserverService: ResizeObserverService;\n\n    @Optional('rangeService') private rangeService: IRangeService;\n\n    @RefSelector('eBodyViewport') private eBodyViewport: HTMLElement;\n    @RefSelector('eTop') private eTop: HTMLElement;\n    @RefSelector('eBottom') private eBottom: HTMLElement;\n    @RefSelector('gridHeader') headerRootComp: GridHeaderComp;\n\n    private ctrl: GridBodyCtrl;\n\n    constructor() {\n        super(GRID_BODY_TEMPLATE);\n    }\n\n    @PostConstruct\n    private init() {\n\n        const setHeight = (height: number, element: HTMLElement) => {\n            const heightString = `${height}px`;\n            element.style.minHeight = heightString;\n            element.style.height = heightString;\n        };\n\n        const compProxy: IGridBodyComp = {\n            setRowAnimationCssOnBodyViewport: (cssClass, animate) => this.setRowAnimationCssOnBodyViewport(cssClass, animate),\n            setColumnCount: count => setAriaColCount(this.getGui(), count),\n            setRowCount: count => setAriaRowCount(this.getGui(), count),\n            setTopHeight: height => setHeight(height, this.eTop),\n            setBottomHeight: height => setHeight(height, this.eBottom),\n            setTopDisplay: display => this.eTop.style.display = display,\n            setBottomDisplay: display => this.eBottom.style.display = display,\n            setColumnMovingCss: (cssClass, flag) => this.addOrRemoveCssClass(CSS_CLASS_COLUMN_MOVING, flag),\n            updateLayoutClasses: (cssClass, params) => {\n                const bodyViewportClassList = this.eBodyViewport.classList;\n                bodyViewportClassList.toggle(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n                bodyViewportClassList.toggle(LayoutCssClasses.NORMAL, params.normal);\n                bodyViewportClassList.toggle(LayoutCssClasses.PRINT, params.print);\n\n                this.addOrRemoveCssClass(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n                this.addOrRemoveCssClass(LayoutCssClasses.NORMAL, params.normal);\n                this.addOrRemoveCssClass(LayoutCssClasses.PRINT, params.print);\n            },\n            setAlwaysVerticalScrollClass: (cssClass, on) =>\n                this.eBodyViewport.classList.toggle(CSS_CLASS_FORCE_VERTICAL_SCROLL, on),\n            registerBodyViewportResizeListener: listener => {\n                const unsubscribeFromResize = this.resizeObserverService.observeResize(this.eBodyViewport, listener);\n                this.addDestroyFunc(() => unsubscribeFromResize());\n            },\n            setPinnedTopBottomOverflowY: overflow => this.eTop.style.overflowY = this.eBottom.style.overflowY = overflow,\n            setCellSelectableCss: (cssClass, selectable) => {\n                [this.eTop, this.eBodyViewport, this.eBottom]\n                    .forEach(ct => ct.classList.toggle(CSS_CLASS_CELL_SELECTABLE, selectable));\n            },\n        };\n\n        this.ctrl = this.createManagedBean(new GridBodyCtrl());\n        this.ctrl.setComp(compProxy, this.getGui(), this.eBodyViewport, this.eTop, this.eBottom);\n\n        if (this.rangeService || this.gridOptionsWrapper.isRowSelectionMulti()) {\n            setAriaMultiSelectable(this.getGui(), true);\n        }\n    }\n\n    private setRowAnimationCssOnBodyViewport(cssClass: string, animateRows: boolean): void {\n        const bodyViewportClassList = this.eBodyViewport.classList;\n        bodyViewportClassList.toggle(RowAnimationCssClasses.ANIMATION_ON, animateRows);\n        bodyViewportClassList.toggle(RowAnimationCssClasses.ANIMATION_OFF, !animateRows);\n    }\n\n    public getFloatingTopBottom(): HTMLElement[] {\n        return [this.eTop, this.eBottom];\n    }\n}\n","import { Bean, Autowired, PostConstruct } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { Events, ScrollVisibilityChangedEvent } from \"../events\";\nimport { ColumnApi } from \"../columns/columnApi\";\nimport { GridApi } from \"../gridApi\";\nimport { CtrlsService } from \"../ctrlsService\";\n\nexport interface SetScrollsVisibleParams {\n    horizontalScrollShowing: boolean;\n    verticalScrollShowing: boolean;\n}\n\n@Bean('scrollVisibleService')\nexport class ScrollVisibleService extends BeanStub {\n\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('ctrlsService') public ctrlsService: CtrlsService;\n\n    private horizontalScrollShowing: boolean;\n    private verticalScrollShowing: boolean;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));\n\n    }\n\n    public onDisplayedColumnsChanged(): void {\n        this.update();\n    }\n\n    private onDisplayedColumnsWidthChanged(): void {\n        this.update();\n    }\n\n    private update(): void {\n        // because of column animation (which takes 200ms), we have to do this twice.\n        // eg if user removes cols anywhere except at the RHS, then the cols on the RHS\n        // will animate to the left to fill the gap. this animation means just after\n        // the cols are removed, the remaining cols are still in the original location\n        // at the start of the animation, so pre animation the H scrollbar is still needed,\n        // but post animation it is not.\n        this.updateImpl();\n        setTimeout(this.updateImpl.bind(this), 500);\n    }\n\n    private updateImpl(): void {\n        const centerRowCtrl = this.ctrlsService.getCenterRowContainerCtrl();\n\n        if (!centerRowCtrl) { return; }\n\n        const params: SetScrollsVisibleParams = {\n            horizontalScrollShowing: centerRowCtrl.isHorizontalScrollShowing(),\n            verticalScrollShowing: this.isVerticalScrollShowing()\n        };\n\n        this.setScrollsVisible(params);\n    }\n\n    public setScrollsVisible(params: SetScrollsVisibleParams): void {\n        const atLeastOneDifferent =\n            this.horizontalScrollShowing !== params.horizontalScrollShowing ||\n            this.verticalScrollShowing !== params.verticalScrollShowing;\n\n        if (atLeastOneDifferent) {\n            this.horizontalScrollShowing = params.horizontalScrollShowing;\n            this.verticalScrollShowing = params.verticalScrollShowing;\n\n            const event: ScrollVisibilityChangedEvent = {\n                type: Events.EVENT_SCROLL_VISIBILITY_CHANGED,\n                api: this.gridApi,\n                columnApi: this.columnApi\n            };\n            this.eventService.dispatchEvent(event);\n        }\n    }\n\n    // used by pagination service - to know page height\n    public isHorizontalScrollShowing(): boolean {\n        return this.horizontalScrollShowing;\n    }\n\n    // used by header container\n    public isVerticalScrollShowing(): boolean {\n        return this.verticalScrollShowing;\n    }\n}\n","import { Bean } from \"../context/context\";\nimport { Autowired } from \"../context/context\";\nimport { CellPosition } from \"../entities/cellPosition\";\nimport { NumberSequence } from '../utils';\nimport { Constants } from \"../constants/constants\";\nimport { DraggingEvent } from \"../dragAndDrop/dragAndDropService\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { getCtrlForEvent } from \"../utils/event\";\nimport { exists } from \"../utils/generic\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { CellCtrl } from \"../rendering/cell/cellCtrl\";\n\n@Bean('mouseEventService')\nexport class MouseEventService extends BeanStub {\n\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private static gridInstanceSequence = new NumberSequence();\n    private static GRID_DOM_KEY = '__ag_grid_instance';\n\n    private gridInstanceId = MouseEventService.gridInstanceSequence.next();\n\n    // we put the instance id onto the main DOM element. this is used for events, when grids are inside grids,\n    // so the grid can work out if the even came from this grid or a grid inside this one. see the ctrl+v logic\n    // for where this is used.\n    public stampTopLevelGridCompWithGridInstance(eGridDiv: HTMLElement): void {\n        (eGridDiv as any)[MouseEventService.GRID_DOM_KEY] = this.gridInstanceId;\n    }\n\n    public getRenderedCellForEvent(event: Event): CellCtrl | null {\n        return getCtrlForEvent<CellCtrl>(this.gridOptionsWrapper, event, CellCtrl.DOM_DATA_KEY_CELL_CTRL);\n    }\n\n    // walks the path of the event, and returns true if this grid is the first one that it finds. if doing\n    // master / detail grids, and a child grid is found, then it returns false. this stops things like copy/paste\n    // getting executed on many grids at the same time.\n    public isEventFromThisGrid(event: UIEvent): boolean {\n        const res = this.isElementInThisGrid(event.target as HTMLElement);\n        return res;\n    }\n\n    public isElementInThisGrid(element: HTMLElement): boolean {\n        let pointer: HTMLElement | null = element;\n        while (pointer) {\n            const instanceId = (pointer as any)[MouseEventService.GRID_DOM_KEY];\n            if (exists(instanceId)) {\n                const eventFromThisGrid = instanceId === this.gridInstanceId;\n                return eventFromThisGrid;\n            }\n            pointer = pointer.parentElement;\n        }\n        return false;\n    }\n\n    public getCellPositionForEvent(event: MouseEvent | KeyboardEvent): CellPosition | null {\n        const cellComp = this.getRenderedCellForEvent(event);\n        return cellComp ? cellComp.getCellPosition() : null;\n    }\n\n    public getNormalisedPosition(event: MouseEvent | DraggingEvent): { x: number, y: number; } {\n        const gridPanelHasScrolls = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_NORMAL;\n        const e = event as MouseEvent;\n        let x: number;\n        let y: number;\n\n        if (e.clientX != null || e.clientY != null) {\n            x = e.clientX;\n            y = e.clientY;\n        } else {\n            x = e.x;\n            y = e.y;\n        }\n\n        if (gridPanelHasScrolls) {\n            const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n            const vRange = gridBodyCon.getScrollFeature().getVScrollPosition();\n            const hRange = gridBodyCon.getScrollFeature().getHScrollPosition();\n            x += hRange.left;\n            y += vRange.top;\n        }\n\n        return { x, y };\n    }\n\n}\n","import { Autowired, Bean, Optional, PostConstruct } from \"../context/context\";\nimport { CellPosition } from \"../entities/cellPosition\";\nimport { MouseEventService } from \"./mouseEventService\";\nimport { PaginationProxy } from \"../pagination/paginationProxy\";\nimport { Column } from \"../entities/column\";\nimport { FocusService } from \"../focusService\";\nimport { AnimationFrameService } from \"../misc/animationFrameService\";\nimport { IRangeService } from \"../interfaces/IRangeService\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { exists, missing } from \"../utils/generic\";\nimport { last } from \"../utils/array\";\nimport { KeyCode } from '../constants/keyCode';\nimport { CtrlsService } from \"../ctrlsService\";\nimport { GridBodyCtrl } from \"./gridBodyCtrl\";\nimport { CellCtrl } from \"../rendering/cell/cellCtrl\";\nimport { RowCtrl } from \"../rendering/row/rowCtrl\";\nimport { doOnce, throttle } from \"../utils/function\";\nimport { Constants } from \"../constants/constants\";\nimport { RowPosition, RowPositionUtils } from \"../entities/rowPosition\";\nimport { RowRenderer } from \"../rendering/rowRenderer\";\nimport { HeaderNavigationService } from \"../headerRendering/common/headerNavigationService\";\nimport { CellNavigationService } from \"../cellNavigationService\";\nimport { PinnedRowModel } from \"../pinnedRowModel/pinnedRowModel\";\nimport { NavigateToNextCellParams, TabToNextCellParams } from \"../entities/iCallbackParams\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\nimport { Events } from \"../eventKeys\";\nimport { FullWidthRowFocusedEvent } from \"../events\";\nimport { GridApi } from \"../gridApi\";\nimport { ColumnApi } from \"../columns/columnApi\";\n\ninterface NavigateParams {\n    /** The rowIndex to vertically scroll to. */\n    scrollIndex: number;\n    /** The position to put scroll index. */\n    scrollType: 'top' | 'bottom' | null;\n    /**  The column to horizontally scroll to. */\n    scrollColumn: Column | null;\n    /** For page up/down, we want to scroll to one row/column but focus another (ie. scrollRow could be stub). */\n    focusIndex: number;\n    focusColumn: Column;\n}\n\n@Bean('navigationService')\nexport class NavigationService extends BeanStub {\n\n    @Autowired('columnApi') private readonly columnApi: ColumnApi;\n    @Autowired('gridApi') private readonly gridApi: GridApi;\n    @Autowired('mouseEventService') private mouseEventService: MouseEventService;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('animationFrameService') private animationFrameService: AnimationFrameService;\n    @Optional('rangeService') private rangeService: IRangeService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('ctrlsService') public ctrlsService: CtrlsService;\n    @Autowired('rowRenderer') public rowRenderer: RowRenderer;\n    @Autowired('headerNavigationService') public headerNavigationService: HeaderNavigationService;\n    @Autowired(\"rowPositionUtils\") private rowPositionUtils: RowPositionUtils;\n    @Autowired(\"cellNavigationService\") private cellNavigationService: CellNavigationService;\n    @Autowired(\"pinnedRowModel\") private pinnedRowModel: PinnedRowModel;\n\n    private gridBodyCon: GridBodyCtrl;\n\n    constructor() {\n        super();\n        this.onPageDown = throttle(this.onPageDown, 100);\n        this.onPageUp = throttle(this.onPageUp, 100);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.ctrlsService.whenReady(p => {\n            this.gridBodyCon = p.gridBodyCtrl;\n        });\n    }\n\n    public handlePageScrollingKey(event: KeyboardEvent): boolean {\n        const key = event.key;\n        const alt = event.altKey;\n        const ctrl = event.ctrlKey || event.metaKey;\n        const rangeServiceShouldHandleShift = !!this.rangeService && event.shiftKey;\n\n        const currentCell: CellPosition | null = this.mouseEventService.getCellPositionForEvent(event);\n        if (!currentCell) { return false; }\n\n        let processed = false;\n\n        switch (key) {\n            case KeyCode.PAGE_HOME:\n            case KeyCode.PAGE_END:\n                // handle home and end when ctrl & alt are NOT pressed\n                if (!ctrl && !alt) {\n                    this.onHomeOrEndKey(key);\n                    processed = true;\n                }\n                break;\n            case KeyCode.LEFT:\n            case KeyCode.RIGHT:\n            case KeyCode.UP:\n            case KeyCode.DOWN:\n                // handle when ctrl is pressed only, if shift is pressed\n                // it will be handled by the rangeService\n                if (ctrl && !alt && !rangeServiceShouldHandleShift) {\n                    this.onCtrlUpDownLeftRight(key, currentCell);\n                    processed = true;\n                }\n                break;\n            case KeyCode.PAGE_DOWN:\n                // handle page up and page down when ctrl & alt are NOT pressed\n                if (!ctrl && !alt) {\n                    this.onPageDown(currentCell);\n                    processed = true;\n                }\n                break;\n            case KeyCode.PAGE_UP:\n                // handle page up and page down when ctrl & alt are NOT pressed\n                if (!ctrl && !alt) {\n                    this.onPageUp(currentCell);\n                    processed = true;\n                }\n                break;\n        }\n\n        if (processed) {\n            event.preventDefault();\n        }\n\n        return processed;\n    }\n\n    private navigateTo(navigateParams: NavigateParams): void {\n        const { scrollIndex, scrollType, scrollColumn, focusIndex, focusColumn } = navigateParams;\n\n        if (exists(scrollColumn) && !scrollColumn.isPinned()) {\n            this.gridBodyCon.getScrollFeature().ensureColumnVisible(scrollColumn);\n        }\n\n        if (exists(scrollIndex)) {\n            this.gridBodyCon.getScrollFeature().ensureIndexVisible(scrollIndex, scrollType);\n        }\n\n        // make sure the cell is rendered, needed if we are to focus\n        this.animationFrameService.flushAllFrames();\n\n        // if we don't do this, the range will be left on the last cell, which will leave the last focused cell\n        // highlighted.\n        this.focusService.setFocusedCell(focusIndex, focusColumn, null, true);\n\n        if (this.rangeService) {\n            const cellPosition: CellPosition = { rowIndex: focusIndex, rowPinned: null, column: focusColumn };\n            this.rangeService.setRangeToCell(cellPosition);\n        }\n    }\n\n    private onPageDown(gridCell: CellPosition): void {\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const scrollPosition = gridBodyCon.getScrollFeature().getVScrollPosition();\n        const pixelsInOnePage = this.getViewportHeight();\n\n        const pagingPixelOffset = this.paginationProxy.getPixelOffset();\n\n        const currentPageBottomPixel = scrollPosition.top + pixelsInOnePage;\n        const currentPageBottomRow = this.paginationProxy.getRowIndexAtPixel(currentPageBottomPixel + pagingPixelOffset);\n\n        if (this.columnModel.isAutoRowHeightActive()) {\n            this.navigateToNextPageWithAutoHeight(gridCell, currentPageBottomRow);\n        } else {\n            this.navigateToNextPage(gridCell, currentPageBottomRow);\n        }\n    }\n\n    private onPageUp(gridCell: CellPosition): void {\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const scrollPosition = gridBodyCon.getScrollFeature().getVScrollPosition();\n\n        const pagingPixelOffset = this.paginationProxy.getPixelOffset();\n\n        const currentPageTopPixel = scrollPosition.top;\n        const currentPageTopRow = this.paginationProxy.getRowIndexAtPixel(currentPageTopPixel + pagingPixelOffset);\n\n        if (this.columnModel.isAutoRowHeightActive()) {\n            this.navigateToNextPageWithAutoHeight(gridCell, currentPageTopRow, true);\n        } else {\n            this.navigateToNextPage(gridCell, currentPageTopRow, true);\n        }\n    }\n\n    private navigateToNextPage(gridCell: CellPosition, scrollIndex: number, up: boolean = false): void {\n        const pixelsInOnePage = this.getViewportHeight();\n        const firstRow = this.paginationProxy.getPageFirstRow();\n        const lastRow = this.paginationProxy.getPageLastRow();\n        const pagingPixelOffset = this.paginationProxy.getPixelOffset();\n        const currentRowNode = this.paginationProxy.getRow(gridCell.rowIndex);\n\n        const rowPixelDiff = up\n            ? (currentRowNode?.rowHeight! - pixelsInOnePage - pagingPixelOffset)\n            : (pixelsInOnePage - pagingPixelOffset);\n\n        const nextCellPixel = currentRowNode?.rowTop! + rowPixelDiff;\n\n        let focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);\n\n        if (focusIndex === gridCell.rowIndex) {\n            const diff = up ? -1 : 1;\n            scrollIndex = focusIndex = gridCell.rowIndex + diff;\n        }\n\n        let scrollType: 'top' | 'bottom';\n\n        if (up) {\n            scrollType = 'bottom';\n            if (focusIndex < firstRow) { focusIndex = firstRow; }\n            if (scrollIndex < firstRow) { scrollIndex = firstRow; }\n        } else {\n            scrollType = 'top';\n            if (focusIndex > lastRow) { focusIndex = lastRow; }\n            if (scrollIndex > lastRow) { scrollIndex = lastRow; }\n        }\n\n        if (this.isRowTallerThanView(focusIndex)) {\n            scrollIndex = focusIndex;\n            scrollType = 'top';\n        }\n\n        this.navigateTo({\n            scrollIndex,\n            scrollType,\n            scrollColumn: null,\n            focusIndex,\n            focusColumn: gridCell.column\n        });\n    }\n\n    private navigateToNextPageWithAutoHeight(gridCell: CellPosition, scrollIndex: number, up: boolean = false): void {\n        // because autoHeight will calculate the height of rows after scroll\n        // first we scroll towards the required point, then we add a small\n        // delay to allow the height to be recalculated, check which index\n        // should be focused and then finally navigate to that index.\n        // TODO: we should probably have an event fired once to scrollbar has\n        // settled and all rowHeights have been calculated instead of relying\n        // on a setTimeout of 50ms.\n        this.navigateTo({\n            scrollIndex: scrollIndex,\n            scrollType: up ? 'bottom' : 'top',\n            scrollColumn: null,\n            focusIndex: scrollIndex,\n            focusColumn: gridCell.column\n        });\n        setTimeout(() => {\n            const focusIndex = this.getNextFocusIndexForAutoHeight(gridCell, up);\n\n            this.navigateTo({\n                scrollIndex: scrollIndex,\n                scrollType: up ? 'bottom' : 'top',\n                scrollColumn: null,\n                focusIndex: focusIndex,\n                focusColumn: gridCell.column\n            });\n        }, 50);\n    }\n\n    private getNextFocusIndexForAutoHeight(gridCell: CellPosition, up: boolean = false): number {\n        const step = up ? -1 : 1;\n        const pixelsInOnePage = this.getViewportHeight();\n        const lastRowIndex = this.paginationProxy.getPageLastRow();\n\n        let pixelSum = 0;\n        let currentIndex = gridCell.rowIndex;\n\n        while (currentIndex >= 0 && currentIndex <= lastRowIndex) {\n            const currentCell = this.paginationProxy.getRow(currentIndex);\n\n            if (currentCell) {\n                const currentCellHeight = currentCell.rowHeight ?? 0;\n\n                if (pixelSum + currentCellHeight > pixelsInOnePage) { break; }\n                pixelSum += currentCellHeight;\n            }\n\n            currentIndex += step;\n        }\n\n        return Math.max(0, Math.min(currentIndex, lastRowIndex));\n    }\n\n    private getViewportHeight(): number {\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const scrollPosition = gridBodyCon.getScrollFeature().getVScrollPosition();\n        const scrollbarWidth = this.gridOptionsWrapper.getScrollbarWidth();\n        let pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;\n\n        if (this.ctrlsService.getCenterRowContainerCtrl().isHorizontalScrollShowing()) {\n            pixelsInOnePage -= scrollbarWidth;\n        }\n\n        return pixelsInOnePage;\n    }\n\n    private isRowTallerThanView(rowIndex: number): boolean {\n        const rowNode = this.paginationProxy.getRow(rowIndex);\n        if (!rowNode) { return false; }\n\n        const rowHeight = rowNode.rowHeight;\n\n        if (typeof rowHeight !== 'number') { return false; }\n\n        return rowHeight > this.getViewportHeight();\n    }\n\n    private onCtrlUpDownLeftRight(key: string, gridCell: CellPosition): void {\n        const cellToFocus = this.cellNavigationService.getNextCellToFocus(key, gridCell, true)!;\n        const { rowIndex, column } = cellToFocus;\n\n        this.navigateTo({\n            scrollIndex: rowIndex,\n            scrollType: null,\n            scrollColumn: column,\n            focusIndex: rowIndex,\n            focusColumn: column\n        });\n    }\n\n    // home brings focus to top left cell, end brings focus to bottom right, grid scrolled to bring\n    // same cell into view (which means either scroll all the way up, or all the way down).\n    private onHomeOrEndKey(key: string): void {\n        const homeKey = key === KeyCode.PAGE_HOME;\n        const allColumns: Column[] = this.columnModel.getAllDisplayedColumns();\n        const columnToSelect = homeKey ? allColumns[0] : last(allColumns);\n        const scrollIndex = homeKey ? this.paginationProxy.getPageFirstRow() : this.paginationProxy.getPageLastRow();\n\n        this.navigateTo({\n            scrollIndex: scrollIndex,\n            scrollType: null,\n            scrollColumn: columnToSelect,\n            focusIndex: scrollIndex,\n            focusColumn: columnToSelect\n        });\n    }\n\n    // result of keyboard event\n    public onTabKeyDown(previous: CellCtrl | RowCtrl, keyboardEvent: KeyboardEvent): void {\n        const backwards = keyboardEvent.shiftKey;\n        const movedToNextCell = this.tabToNextCellCommon(previous, backwards, keyboardEvent);\n\n        if (movedToNextCell) {\n            // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default\n            // to the normal tabbing so user can exit the grid.\n            keyboardEvent.preventDefault();\n            return;\n        }\n\n        // if we didn't move to next cell, then need to tab out of the cells, ie to the header (if going\n        // backwards)\n        if (backwards) {\n            const { rowIndex, rowPinned } = previous.getRowPosition();\n            const firstRow = rowPinned ? rowIndex === 0 : rowIndex === this.paginationProxy.getPageFirstRow();\n            if (firstRow) {\n                keyboardEvent.preventDefault();\n                this.focusService.focusLastHeader(keyboardEvent);\n            }\n        } else {\n            // if the case it's a popup editor, the focus is on the editor and not the previous cell.\n            // in order for the tab navigation to work, we need to focus the browser back onto the\n            // previous cell.\n            if (previous instanceof CellCtrl) {\n                previous.focusCell(true);\n            }\n\n            if (this.focusService.focusNextGridCoreContainer(backwards)) {\n                keyboardEvent.preventDefault();\n            }\n        }\n    }\n\n    // comes from API\n    public tabToNextCell(backwards: boolean, event?: KeyboardEvent): boolean {\n        const focusedCell = this.focusService.getFocusedCell();\n        // if no focus, then cannot navigate\n        if (!focusedCell) { return false; }\n\n        let cellOrRow: CellCtrl | RowCtrl | null = this.getCellByPosition(focusedCell);\n\n        // if cell is not rendered, means user has scrolled away from the cell\n        // or that the focusedCell is a Full Width Row\n        if (!cellOrRow) {\n            cellOrRow = this.rowRenderer.getRowByPosition(focusedCell);\n            if (!cellOrRow || !cellOrRow.isFullWidth()) {\n                return false;\n            }\n        }\n\n        return this.tabToNextCellCommon(cellOrRow, backwards, event);\n    }\n\n    private tabToNextCellCommon(previous: CellCtrl | RowCtrl, backwards: boolean, event?: KeyboardEvent): boolean {\n        let editing = previous.isEditing();\n\n        // if cell is not editing, there is still chance row is editing if it's Full Row Editing\n        if (!editing && previous instanceof CellCtrl) {\n            const cell = previous as CellCtrl;\n            const row = cell.getRowCtrl();\n            if (row) {\n                editing = row.isEditing();\n            }\n        }\n\n        let res: boolean;\n\n        if (editing) {\n            // if we are editing, we know it's not a Full Width Row (RowComp)\n            if (this.gridOptionsWrapper.isFullRowEdit()) {\n                res = this.moveToNextEditingRow(previous as CellCtrl, backwards, event);\n            } else {\n                res = this.moveToNextEditingCell(previous as CellCtrl, backwards, event);\n            }\n        } else {\n            res = this.moveToNextCellNotEditing(previous, backwards);\n        }\n\n        // if a cell wasn't found, it's possible that focus was moved to the header\n        return res || !!this.focusService.getFocusedHeader();\n    }\n\n    private moveToNextEditingCell(previousCell: CellCtrl, backwards: boolean, event: KeyboardEvent | null = null): boolean {\n        const previousPos = previousCell.getCellPosition();\n\n        // need to do this before getting next cell to edit, in case the next cell\n        // has editable function (eg colDef.editable=func() ) and it depends on the\n        // result of this cell, so need to save updates from the first edit, in case\n        // the value is referenced in the function.\n        previousCell.stopEditing();\n\n        // find the next cell to start editing\n        const nextCell = this.findNextCellToFocusOn(previousPos, backwards, true) as CellCtrl;\n\n        if (nextCell == null) { return false; }\n\n        // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default\n        // to the normal tabbing so user can exit the grid.\n        nextCell.startEditing(null, null, true, event);\n        nextCell.focusCell(false);\n        return true;\n    }\n\n    private moveToNextEditingRow(previousCell: CellCtrl, backwards: boolean, event: KeyboardEvent | null = null): boolean {\n        const previousPos = previousCell.getCellPosition();\n\n        // find the next cell to start editing\n        const nextCell = this.findNextCellToFocusOn(previousPos, backwards, true) as CellCtrl;\n        if (nextCell == null) { return false; }\n\n        const nextPos = nextCell.getCellPosition();\n\n        const previousEditable = this.isCellEditable(previousPos);\n        const nextEditable = this.isCellEditable(nextPos);\n\n        const rowsMatch = nextPos && previousPos.rowIndex === nextPos.rowIndex && previousPos.rowPinned === nextPos.rowPinned;\n\n        if (previousEditable) {\n            previousCell.setFocusOutOnEditor();\n        }\n\n        if (!rowsMatch) {\n            const pRow = previousCell.getRowCtrl();\n            pRow!.stopEditing();\n\n            const nRow = nextCell.getRowCtrl();\n            nRow!.startRowEditing(undefined, undefined, undefined, event);\n        }\n\n        if (nextEditable) {\n            nextCell.setFocusInOnEditor();\n            nextCell.focusCell();\n        } else {\n            nextCell.focusCell(true);\n        }\n\n        return true;\n    }\n\n    private moveToNextCellNotEditing(previousCell: CellCtrl | RowCtrl, backwards: boolean): boolean {\n        const displayedColumns = this.columnModel.getAllDisplayedColumns();\n        let cellPos: CellPosition;\n\n        if (previousCell instanceof RowCtrl) {\n            cellPos = {\n                ...previousCell.getRowPosition(),\n                column: backwards ? displayedColumns[0] : last(displayedColumns)\n            };\n        } else {\n            cellPos = previousCell.getCellPosition();\n        }\n        // find the next cell to start editing\n        const nextCell = this.findNextCellToFocusOn(cellPos, backwards, false);\n\n        // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default\n        // to the normal tabbing so user can exit the grid.\n        if (nextCell instanceof CellCtrl) {\n            nextCell.focusCell(true);\n        } else if (nextCell) {\n            return this.tryToFocusFullWidthRow(nextCell.getRowPosition(), backwards);\n        }\n\n        return exists(nextCell);\n    }\n\n    // called by the cell, when tab is pressed while editing.\n    // @return: RenderedCell when navigation successful, otherwise null\n    private findNextCellToFocusOn(previousPosition: CellPosition, backwards: boolean, startEditing: boolean): CellCtrl | RowCtrl | null {\n        let nextPosition: CellPosition | null = previousPosition;\n\n        while (true) {\n            if (previousPosition !== nextPosition) { previousPosition = nextPosition; }\n\n            if (!backwards) {\n                nextPosition = this.getLastCellOfColSpan(nextPosition);\n            }\n            nextPosition = this.cellNavigationService.getNextTabbedCell(nextPosition, backwards);\n\n            // allow user to override what cell to go to next\n            const userFunc = this.gridOptionsWrapper.getTabToNextCellFunc();\n\n            if (exists(userFunc)) {\n                const params: WithoutGridCommon<TabToNextCellParams> = {\n                    backwards: backwards,\n                    editing: startEditing,\n                    previousCellPosition: previousPosition,\n                    nextCellPosition: nextPosition ? nextPosition : null\n                };\n                const userCell = userFunc(params);\n                if (exists(userCell)) {\n                    if ((userCell as any).floating) {\n                        doOnce(() => { console.warn(`AG Grid: tabToNextCellFunc return type should have attributes: rowIndex, rowPinned, column. However you had 'floating', maybe you meant 'rowPinned'?`); }, 'no floating in userCell');\n                        userCell.rowPinned = (userCell as any).floating;\n                    }\n                    nextPosition = {\n                        rowIndex: userCell.rowIndex,\n                        column: userCell.column,\n                        rowPinned: userCell.rowPinned\n                    } as CellPosition;\n                } else {\n                    nextPosition = null;\n                }\n            }\n\n            // if no 'next cell', means we have got to last cell of grid, so nothing to move to,\n            // so bottom right cell going forwards, or top left going backwards\n            if (!nextPosition) { return null; }\n\n            if (nextPosition.rowIndex < 0) {\n                const headerLen = this.headerNavigationService.getHeaderRowCount();\n\n                this.focusService.focusHeaderPosition({\n                    headerPosition: {\n                        headerRowIndex: headerLen + (nextPosition.rowIndex),\n                        column: nextPosition.column\n                    }\n                });\n\n                return null;\n            }\n\n            // if editing, but cell not editable, skip cell. we do this before we do all of\n            // the 'ensure index visible' and 'flush all frames', otherwise if we are skipping\n            // a bunch of cells (eg 10 rows) then all the work on ensuring cell visible is useless\n            // (except for the last one) which causes grid to stall for a while.\n            // note - for full row edit, we do focus non-editable cells, as the row stays in edit mode.\n            const fullRowEdit = this.gridOptionsWrapper.isFullRowEdit();\n            if (startEditing && !fullRowEdit) {\n                const cellIsEditable = this.isCellEditable(nextPosition);\n                if (!cellIsEditable) { continue; }\n            }\n\n            this.ensureCellVisible(nextPosition);\n\n            // we have to call this after ensureColumnVisible - otherwise it could be a virtual column\n            // or row that is not currently in view, hence the renderedCell would not exist\n            const nextCell = this.getCellByPosition(nextPosition);\n\n            // if next cell is fullWidth row, then no rendered cell,\n            // as fullWidth rows have no cells, so we skip it\n            if (!nextCell) {\n                const row = this.rowRenderer.getRowByPosition(nextPosition);\n                if (!row || !row.isFullWidth()) {\n                    continue;\n                } else {\n                    return row;\n                }\n            }\n\n            if (nextCell.isSuppressNavigable()) { continue; }\n\n            // by default, when we click a cell, it gets selected into a range, so to keep keyboard navigation\n            // consistent, we set into range here also.\n            if (this.rangeService) {\n                this.rangeService.setRangeToCell(nextPosition);\n            }\n\n            // we successfully tabbed onto a grid cell, so return true\n            return nextCell;\n        }\n    }\n\n    private isCellEditable(cell: CellPosition): boolean {\n        const rowNode = this.lookupRowNodeForCell(cell);\n\n        if (rowNode) {\n            return cell.column.isCellEditable(rowNode);\n        }\n\n        return false;\n    }\n\n    public getCellByPosition(cellPosition: CellPosition): CellCtrl | null {\n        const rowCtrl = this.rowRenderer.getRowByPosition(cellPosition);\n        if (!rowCtrl) { return null; }\n        return rowCtrl.getCellCtrl(cellPosition.column);\n    }\n\n    private lookupRowNodeForCell(cell: CellPosition) {\n        if (cell.rowPinned === Constants.PINNED_TOP) {\n            return this.pinnedRowModel.getPinnedTopRow(cell.rowIndex);\n        }\n\n        if (cell.rowPinned === Constants.PINNED_BOTTOM) {\n            return this.pinnedRowModel.getPinnedBottomRow(cell.rowIndex);\n        }\n\n        return this.paginationProxy.getRow(cell.rowIndex);\n    }\n\n    // we use index for rows, but column object for columns, as the next column (by index) might not\n    // be visible (header grouping) so it's not reliable, so using the column object instead.\n    public navigateToNextCell(event: KeyboardEvent | null, key: string, currentCell: CellPosition, allowUserOverride: boolean) {\n        // we keep searching for a next cell until we find one. this is how the group rows get skipped\n        let nextCell: CellPosition | null = currentCell;\n        let hitEdgeOfGrid = false;\n\n        while (nextCell && (nextCell === currentCell || !this.isValidNavigateCell(nextCell))) {\n            // if the current cell is spanning across multiple columns, we need to move\n            // our current position to be the last cell on the right before finding the\n            // the next target.\n            if (this.gridOptionsWrapper.isEnableRtl()) {\n                if (key === KeyCode.LEFT) {\n                    nextCell = this.getLastCellOfColSpan(nextCell);\n                }\n            } else if (key === KeyCode.RIGHT) {\n                nextCell = this.getLastCellOfColSpan(nextCell);\n            }\n\n            nextCell = this.cellNavigationService.getNextCellToFocus(key, nextCell);\n\n            // eg if going down, and nextCell=undefined, means we are gone past the last row\n            hitEdgeOfGrid = missing(nextCell);\n        }\n\n        if (hitEdgeOfGrid && event && event.key === KeyCode.UP) {\n            nextCell = {\n                rowIndex: -1,\n                rowPinned: null,\n                column: currentCell.column\n            };\n        }\n\n        // allow user to override what cell to go to next. when doing normal cell navigation (with keys)\n        // we allow this, however if processing 'enter after edit' we don't allow override\n        if (allowUserOverride) {\n            const userFunc = this.gridOptionsWrapper.getNavigateToNextCellFunc();\n            if (exists(userFunc)) {\n                const params: WithoutGridCommon<NavigateToNextCellParams> = {\n                    key: key,\n                    previousCellPosition: currentCell,\n                    nextCellPosition: nextCell ? nextCell : null,\n                    event: event\n                };\n                const userCell = userFunc(params);\n                if (exists(userCell)) {\n                    if ((userCell as any).floating) {\n                        doOnce(() => { console.warn(`AG Grid: tabToNextCellFunc return type should have attributes: rowIndex, rowPinned, column. However you had 'floating', maybe you meant 'rowPinned'?`); }, 'no floating in userCell');\n                        userCell.rowPinned = (userCell as any).floating;\n                    }\n                    nextCell = {\n                        rowPinned: userCell.rowPinned,\n                        rowIndex: userCell.rowIndex,\n                        column: userCell.column\n                    } as CellPosition;\n                } else {\n                    nextCell = null;\n                }\n            }\n        }\n\n        // no next cell means we have reached a grid boundary, eg left, right, top or bottom of grid\n        if (!nextCell) { return; }\n\n        if (nextCell.rowIndex < 0) {\n            const headerLen = this.headerNavigationService.getHeaderRowCount();\n\n            this.focusService.focusHeaderPosition({\n                headerPosition: { headerRowIndex: headerLen + (nextCell.rowIndex), column: currentCell.column },\n                event: event || undefined\n            });\n\n            return;\n        }\n\n        // in case we have col spanning we get the cellComp and use it to get the\n        // position. This was we always focus the first cell inside the spanning.\n        const normalisedPosition = this.getNormalisedPosition(nextCell);\n        if (normalisedPosition) {\n            this.focusPosition(normalisedPosition);\n        } else {\n            this.tryToFocusFullWidthRow(nextCell);\n        }\n    }\n\n    private getNormalisedPosition(cellPosition: CellPosition): CellPosition | null {\n        // ensureCellVisible first, to make sure cell at position is rendered.\n        this.ensureCellVisible(cellPosition);\n        const cellComp = this.getCellByPosition(cellPosition);\n\n        // not guaranteed to have a cellComp when using the SSRM as blocks are loading.\n        if (!cellComp) { return null; }\n\n        cellPosition = cellComp.getCellPosition();\n        // we call this again, as nextCell can be different to it's previous value due to Column Spanning\n        // (ie if cursor moving from right to left, and cell is spanning columns, then nextCell was the\n        // last column in the group, however now it's the first column in the group). if we didn't do\n        // ensureCellVisible again, then we could only be showing the last portion (last column) of the\n        // merged cells.\n        this.ensureCellVisible(cellPosition);\n\n        return cellPosition;\n    }\n\n    private tryToFocusFullWidthRow(position: CellPosition | RowPosition, backwards: boolean = false): boolean {\n        const displayedColumns = this.columnModel.getAllDisplayedColumns();\n        const rowComp = this.rowRenderer.getRowByPosition(position);\n        if (!rowComp || !rowComp.isFullWidth()) { return false; }\n\n        const currentCellFocused = this.focusService.getFocusedCell();\n\n        const cellPosition: CellPosition = {\n            rowIndex: position.rowIndex,\n            rowPinned: position.rowPinned,\n            column: (position as CellPosition).column || (backwards ? last(displayedColumns) : displayedColumns[0])\n        };\n\n        this.focusPosition(cellPosition);\n\n        const fromBelow = currentCellFocused != null ? this.rowPositionUtils.before(cellPosition, currentCellFocused) : false;\n\n        const focusEvent: FullWidthRowFocusedEvent = {\n            type: Events.EVENT_FULL_WIDTH_ROW_FOCUSED,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            rowIndex: cellPosition.rowIndex,\n            rowPinned: cellPosition.rowPinned,\n            column: cellPosition.column,\n            isFullWidthCell: true,\n            floating: cellPosition.rowPinned,\n            fromBelow\n        };\n\n        this.eventService.dispatchEvent(focusEvent);\n\n        return true;\n    }\n\n    private focusPosition(cellPosition: CellPosition) {\n        this.focusService.setFocusedCell(cellPosition.rowIndex, cellPosition.column, cellPosition.rowPinned, true);\n\n        if (this.rangeService) {\n            this.rangeService.setRangeToCell(cellPosition);\n        }\n    }\n\n    private isValidNavigateCell(cell: CellPosition): boolean {\n        const rowNode = this.rowPositionUtils.getRowNode(cell);\n\n        // we do not allow focusing on detail rows and full width rows\n        return !!rowNode;\n    }\n\n    private getLastCellOfColSpan(cell: CellPosition): CellPosition {\n        const cellCtrl = this.getCellByPosition(cell);\n\n        if (!cellCtrl) { return cell; }\n\n        const colSpanningList = cellCtrl.getColSpanningList();\n\n        if (colSpanningList.length === 1) { return cell; }\n\n        return {\n            rowIndex: cell.rowIndex,\n            column: last(colSpanningList),\n            rowPinned: cell.rowPinned\n        };\n    }\n\n    public ensureCellVisible(gridCell: CellPosition): void {\n        // this scrolls the row into view\n        if (missing(gridCell.rowPinned)) {\n            this.gridBodyCon.getScrollFeature().ensureIndexVisible(gridCell.rowIndex);\n        }\n\n        if (!gridCell.column.isPinned()) {\n            this.gridBodyCon.getScrollFeature().ensureColumnVisible(gridCell.column);\n        }\n\n        // need to nudge the scrolls for the floating items. otherwise when we set focus on a non-visible\n        // floating cell, the scrolls get out of sync\n        this.gridBodyCon.getScrollFeature().horizontallyScrollHeaderCenterAndFloatingCenter();\n\n        // need to flush frames, to make sure the correct cells are rendered\n        this.animationFrameService.flushAllFrames();\n    }\n}\n","import { PopupComponent } from \"../../widgets/popupComponent\";\nimport { ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { isUserSuppressingKeyboardEvent } from \"../../utils/keyboard\";\nimport { PostConstruct } from \"../../context/context\";\n\nexport class PopupEditorWrapper extends PopupComponent {\n\n    public static DOM_KEY_POPUP_EDITOR_WRAPPER = 'popupEditorWrapper';\n\n    constructor(private readonly params: ICellEditorParams) {\n        super(/* html */`<div class=\"ag-popup-editor\" tabindex=\"-1\"/>`);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.gridOptionsWrapper.setDomData(this.getGui(), PopupEditorWrapper.DOM_KEY_POPUP_EDITOR_WRAPPER, true);\n        this.addKeyDownListener();\n    }\n\n    private addKeyDownListener(): void {\n        const eGui = this.getGui();\n        const params = this.params;\n        const listener = (event: KeyboardEvent) => {\n            if (!isUserSuppressingKeyboardEvent(this.gridOptionsWrapper, event, params.node, params.column, true)) {\n                params.onKeyDown(event);\n            }\n        };\n\n        this.addManagedListener(eGui, 'keydown', listener);\n    }\n}\n","import { Column } from \"../../entities/column\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { Beans } from \"./../beans\";\nimport { Component } from \"../../widgets/component\";\nimport { ICellEditorComp, ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { ICellRendererComp } from \"./../cellRenderers/iCellRenderer\";\nimport { CheckboxSelectionComponent } from \"./../checkboxSelectionComponent\";\nimport { RowCtrl } from \"./../row/rowCtrl\";\nimport { RowDragComp } from \"./../row/rowDragComp\";\nimport { PopupEditorWrapper } from \"./../cellEditors/popupEditorWrapper\";\nimport { DndSourceComp } from \"./../dndSourceComp\";\nimport { TooltipParentComp } from \"../../widgets/customTooltipFeature\";\nimport { setAriaColIndex, setAriaDescribedBy, setAriaRole } from \"../../utils/aria\";\nimport { escapeString } from \"../../utils/string\";\nimport { missing } from \"../../utils/generic\";\nimport { addStylesToElement, clearElement, loadTemplate, removeFromParent } from \"../../utils/dom\";\nimport { CellCtrl, ICellComp } from \"./cellCtrl\";\nimport { UserCompDetails } from \"../../components/framework/userComponentFactory\";\nimport { _ } from \"../../utils\";\n\nexport class CellComp extends Component implements TooltipParentComp {\n\n    private eCellWrapper: HTMLElement | undefined;\n    private eCellValue: HTMLElement | undefined;\n\n    private beans: Beans;\n    private column: Column;\n    private rowNode: RowNode;\n    private eRow: HTMLElement;\n\n    private includeSelection: boolean;\n    private includeRowDrag: boolean;\n    private includeDndSource: boolean;\n\n    private forceWrapper: boolean;\n\n    private checkboxSelectionComp: CheckboxSelectionComponent | undefined;\n    private dndSourceComp: DndSourceComp | undefined;\n    private rowDraggingComp: RowDragComp | undefined;\n\n    private hideEditorPopup: Function | null | undefined;\n    private cellEditorPopupWrapper: PopupEditorWrapper | undefined;\n    private cellEditor: ICellEditorComp | null | undefined;\n    private cellEditorGui: HTMLElement | null;\n\n    private cellRenderer: ICellRendererComp | null | undefined;\n    private cellRendererGui: HTMLElement | null;\n    private cellRendererClass: any;\n\n    private rowCtrl: RowCtrl | null;\n\n    private cellCtrl: CellCtrl;\n\n    private firstRender: boolean;\n\n    // every time we go into edit mode, or back again, this gets incremented.\n    // it's the components way of dealing with the async nature of framework components,\n    // so if a framework component takes a while to be created, we know if the object\n    // is still relevant when creating is finished. eg we could click edit / un-edit 20\n    // times before the first React edit component comes back - we should discard\n    // the first 19.\n    private rendererVersion = 0;\n    private editorVersion = 0;\n\n    constructor(beans: Beans, cellCtrl: CellCtrl,\n        printLayout: boolean, eRow: HTMLElement, editingRow: boolean) {\n        super();\n        this.beans = beans;\n        this.column = cellCtrl.getColumn();\n        this.rowNode = cellCtrl.getRowNode();\n        this.rowCtrl = cellCtrl.getRowCtrl();\n        this.eRow = eRow;\n\n        this.setTemplate(/* html */`<div comp-id=\"${this.getCompId()}\"/>`);\n\n        const eGui = this.getGui();\n\n        this.forceWrapper = cellCtrl.isForceWrapper();\n\n        this.refreshWrapper(false);\n\n        const setAttribute = (name: string, value: string | null | undefined, element?: HTMLElement) => {\n            const actualElement = element ? element : eGui;\n            if (value != null && value != '') {\n                actualElement.setAttribute(name, value);\n            } else {\n                actualElement.removeAttribute(name);\n            }\n        };\n\n        const compProxy: ICellComp = {\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\n            setUserStyles: styles => addStylesToElement(eGui, styles),\n            getFocusableElement: () => this.getFocusableElement(),\n            setTabIndex: tabIndex => setAttribute('tabindex', tabIndex.toString()),\n            setRole: role => setAriaRole(eGui, role),\n            setColId: colId => setAttribute('col-id', colId),\n            setTitle: title => setAttribute('title', title),\n\n            setIncludeSelection: include => this.includeSelection = include,\n            setIncludeRowDrag: include => this.includeRowDrag = include,\n            setIncludeDndSource: include => this.includeDndSource = include,\n\n            setRenderDetails: (compDetails, valueToDisplay, force) =>\n                this.setRenderDetails(compDetails, valueToDisplay, force),\n            setEditDetails: (compDetails, popup, position) =>\n                this.setEditDetails(compDetails, popup, position),\n\n            getCellEditor: () => this.cellEditor || null,\n            getCellRenderer: () => this.cellRenderer || null,\n            getParentOfValue: () => this.getParentOfValue()\n        };\n\n        this.cellCtrl = cellCtrl;\n        cellCtrl.setComp(compProxy, this.getGui(), this.eCellWrapper, printLayout, editingRow);\n    }\n\n    private getParentOfValue(): HTMLElement {\n        if (this.eCellValue) {\n            // if not editing, and using wrapper, then value goes in eCellValue\n            return this.eCellValue;\n        }\n        if (this.eCellWrapper) {\n            // if editing, and using wrapper, value (cell editor) goes in eCellWrapper\n            return this.eCellWrapper;\n        }\n\n        // if editing or rendering, and not using wrapper, value (or comp) is directly inside cell\n        return this.getGui();\n    }\n\n    private setRenderDetails(compDetails: UserCompDetails | undefined, valueToDisplay: any, forceNewCellRendererInstance: boolean): void {\n        // this can happen if the users asks for the cell to refresh, but we are not showing the vale as we are editing\n        const isInlineEditing = this.cellEditor && !this.cellEditorPopupWrapper;\n        if (isInlineEditing) { return; }\n\n        // this means firstRender will be true for one pass only, as it's initialised to undefined\n        this.firstRender = this.firstRender == null;\n\n\n        // if display template has changed, means any previous Cell Renderer is in the wrong location\n        const controlWrapperChanged = this.refreshWrapper(false);\n\n        // all of these have dependencies on the eGui, so only do them after eGui is set\n        if (compDetails) {\n            const neverRefresh = forceNewCellRendererInstance || controlWrapperChanged;\n            const cellRendererRefreshSuccessful = neverRefresh ? false : this.refreshCellRenderer(compDetails);\n            if (!cellRendererRefreshSuccessful) {\n                this.destroyRenderer();\n                this.createCellRendererInstance(compDetails);\n            }\n        } else {\n            this.destroyRenderer();\n            this.insertValueWithoutCellRenderer(valueToDisplay);\n        }\n    }\n\n    private setEditDetails(compDetails: UserCompDetails | undefined, popup?: boolean, position?: string): void {\n        if (compDetails) {\n            this.createCellEditorInstance(compDetails, popup, position);\n        } else {\n            this.destroyEditor();\n        }\n    }\n\n    private removeControls(): void {\n        this.checkboxSelectionComp = this.beans.context.destroyBean(this.checkboxSelectionComp);\n        this.dndSourceComp = this.beans.context.destroyBean(this.dndSourceComp);\n        this.rowDraggingComp = this.beans.context.destroyBean(this.rowDraggingComp);\n    }\n\n    // returns true if wrapper was changed\n    private refreshWrapper(editing: boolean): boolean {\n        const providingControls = this.includeRowDrag || this.includeDndSource || this.includeSelection;\n        const usingWrapper = providingControls || this.forceWrapper;\n\n        const putWrapperIn = usingWrapper && this.eCellWrapper == null;\n        if (putWrapperIn) {\n            this.eCellWrapper = loadTemplate(`<div class=\"ag-cell-wrapper\" role=\"presentation\"></div>`);\n            this.getGui().appendChild(this.eCellWrapper);\n        }\n        const takeWrapperOut = !usingWrapper && this.eCellWrapper != null;\n        if (takeWrapperOut) {\n            removeFromParent(this.eCellWrapper!);\n            this.eCellWrapper = undefined;\n        }\n\n        this.addOrRemoveCssClass('ag-cell-value', !usingWrapper);\n\n        const usingCellValue = !editing && usingWrapper;\n        const putCellValueIn = usingCellValue && this.eCellValue == null;\n        if (putCellValueIn) {\n            this.eCellValue = loadTemplate(`<span class=\"ag-cell-value\" role=\"presentation\"></span>`);\n            this.eCellWrapper!.appendChild(this.eCellValue);\n        }\n        const takeCellValueOut = !usingCellValue && this.eCellValue != null;\n        if (takeCellValueOut) {\n            removeFromParent(this.eCellValue!);\n            this.eCellValue = undefined;\n        }\n\n        const templateChanged = putWrapperIn || takeWrapperOut || putCellValueIn || takeCellValueOut;\n\n        if (templateChanged) {\n            this.removeControls();\n        }\n\n        if (!editing && providingControls) {\n            this.addControls();\n        }\n\n        return templateChanged;\n    }\n\n    private addControls(): void {\n        const id = this.eCellValue!.id = `cell-${this.getCompId()}`;\n        const describedByIds: string[] = [];\n\n        if (this.includeRowDrag) {\n            if (this.rowDraggingComp == null) {\n                this.rowDraggingComp = this.cellCtrl.createRowDragComp();\n                if (this.rowDraggingComp) {\n                    // put the checkbox in before the value\n                    this.eCellWrapper!.insertBefore(this.rowDraggingComp.getGui(), this.eCellValue!);\n                }\n            }\n        }\n\n        if (this.includeDndSource) {\n            if (this.dndSourceComp == null) {\n                this.dndSourceComp = this.cellCtrl.createDndSource();\n                // put the checkbox in before the value\n                this.eCellWrapper!.insertBefore(this.dndSourceComp.getGui(), this.eCellValue!);\n            }\n        }\n\n        if (this.includeSelection) {\n            if (this.checkboxSelectionComp == null) {\n                this.checkboxSelectionComp = this.cellCtrl.createSelectionCheckbox();\n                this.eCellWrapper!.insertBefore(this.checkboxSelectionComp.getGui(), this.eCellValue!);\n            }\n            describedByIds.push(this.checkboxSelectionComp.getCheckboxId());\n        }\n\n        describedByIds.push(id);\n\n        setAriaDescribedBy(this.getGui(), describedByIds.join(' '));\n    }\n\n    private createCellEditorInstance(compDetails: UserCompDetails, popup?: boolean, position?: string): void {\n        const versionCopy = this.editorVersion;\n\n        const cellEditorPromise = compDetails.newAgStackInstance();\n        if (!cellEditorPromise) { return; } // if empty, userComponentFactory already did a console message\n\n        const { params } = compDetails;\n        cellEditorPromise.then(c => this.afterCellEditorCreated(versionCopy, c!, params, popup, position));\n\n        // if we don't do this, and editor component is async, then there will be a period\n        // when the component isn't present and keyboard navigation won't work - so example\n        // of user hitting tab quickly (more quickly than renderers getting created) won't work\n        const cellEditorAsync = missing(this.cellEditor);\n        if (cellEditorAsync && params.cellStartedEdit) {\n            this.cellCtrl.focusCell(true);\n        }\n    }\n\n    private insertValueWithoutCellRenderer(valueToDisplay: any): void {\n        const eParent = this.getParentOfValue();\n        clearElement(eParent);\n\n        const escapedValue = valueToDisplay != null ? escapeString(valueToDisplay) : null;\n        if (escapedValue != null) {\n            eParent.innerHTML = escapedValue;\n        }\n    }\n\n    private destroyEditorAndRenderer(): void {\n        this.destroyRenderer();\n        this.destroyEditor();\n    }\n\n    private destroyRenderer(): void {\n        const {context} = this.beans;\n        this.cellRenderer = context.destroyBean(this.cellRenderer);\n        removeFromParent(this.cellRendererGui);\n        this.cellRendererGui = null;\n        this.rendererVersion++;\n    }\n\n    private destroyEditor(): void {\n        const {context} = this.beans;\n\n        if (this.hideEditorPopup) { this.hideEditorPopup(); }\n        this.hideEditorPopup = undefined;\n\n        this.cellEditor = context.destroyBean(this.cellEditor);\n        this.cellEditorPopupWrapper = context.destroyBean(this.cellEditorPopupWrapper);\n\n        removeFromParent(this.cellEditorGui);\n        this.cellEditorGui = null;\n\n        this.editorVersion++;\n    }\n\n    private refreshCellRenderer(compClassAndParams: UserCompDetails): boolean {\n        if (this.cellRenderer == null || this.cellRenderer.refresh == null) { return false; }\n\n        // if different Cell Renderer configured this time (eg user is using selector, and\n        // returns different component) then don't refresh, force recreate of Cell Renderer\n        if (this.cellRendererClass !== compClassAndParams.componentClass) { return false; }\n\n        // take any custom params off of the user\n        const result = this.cellRenderer.refresh(compClassAndParams.params);\n\n        // NOTE on undefined: previous version of the cellRenderer.refresh() interface\n        // returned nothing, if the method existed, we assumed it refreshed. so for\n        // backwards compatibility, we assume if method exists and returns nothing,\n        // that it was successful.\n        return result === true || result === undefined;\n    }\n\n    private createCellRendererInstance(compDetails: UserCompDetails): void {\n        // never use task service if angularCompileRows=true, as that assume the cell renderers\n        // are finished when the row is created. also we never use it if animation frame service\n        // is turned off.\n        // and lastly we never use it if doing auto-height, as the auto-height service checks the\n        // row height directly after the cell is created, it doesn't wait around for the tasks to complete\n        const angularCompileRows = this.beans.gridOptionsWrapper.isAngularCompileRows();\n        const suppressAnimationFrame = this.beans.gridOptionsWrapper.isSuppressAnimationFrame();\n        const useTaskService = !angularCompileRows && !suppressAnimationFrame;\n\n        const displayComponentVersionCopy = this.rendererVersion;\n\n        const {componentClass} = compDetails;\n\n        const createCellRendererFunc = () => {\n            const staleTask = this.rendererVersion !== displayComponentVersionCopy || !this.isAlive();\n            if (staleTask) { return; }\n\n            // this can return null in the event that the user has switched from a renderer component to nothing, for example\n            // when using a cellRendererSelect to return a component or null depending on row data etc\n            const componentPromise = compDetails.newAgStackInstance();\n            const callback = this.afterCellRendererCreated.bind(this, displayComponentVersionCopy, componentClass);\n            if (componentPromise) {\n                componentPromise.then(callback);\n            }\n        };\n\n        // we only use task service when rendering for first time, which means it is not used when doing edits.\n        // if we changed this (always use task service) would make sense, however it would break tests, possibly\n        // test of users.\n        if (useTaskService && this.firstRender) {\n            this.beans.animationFrameService.createTask(createCellRendererFunc, this.rowNode.rowIndex!, 'createTasksP2');\n        } else {\n            createCellRendererFunc();\n        }\n    }\n\n    public getCtrl(): CellCtrl {\n        return this.cellCtrl;\n    }\n\n    public getRowCtrl(): RowCtrl | null {\n        return this.rowCtrl;\n    }\n\n    public getCellRenderer(): ICellRendererComp | null | undefined {\n        return this.cellRenderer;\n    }\n\n    public getCellEditor(): ICellEditorComp | null | undefined {\n        return this.cellEditor;\n    }\n\n    private afterCellRendererCreated(cellRendererVersion: number, cellRendererClass: any, cellRenderer: ICellRendererComp): void {\n        const staleTask = !this.isAlive() || cellRendererVersion !== this.rendererVersion;\n\n        if (staleTask) {\n            this.beans.context.destroyBean(cellRenderer);\n            return;\n        }\n\n        this.cellRenderer = cellRenderer;\n        this.cellRendererClass = cellRendererClass;\n        this.cellRendererGui = this.cellRenderer.getGui();\n\n        if (this.cellRendererGui != null) {\n            const eParent = this.getParentOfValue();\n            clearElement(eParent);\n            eParent.appendChild(this.cellRendererGui);\n        }\n    }\n\n    private afterCellEditorCreated(requestVersion: number, cellEditor: ICellEditorComp, params: ICellEditorParams, popup?: boolean, position?: string): void {\n\n        // if editingCell=false, means user cancelled the editor before component was ready.\n        // if versionMismatch, then user cancelled the edit, then started the edit again, and this\n        //   is the first editor which is now stale.\n        const staleComp = requestVersion !== this.editorVersion;\n\n        if (staleComp) {\n            this.beans.context.destroyBean(cellEditor);\n            return;\n        }\n\n        const editingCancelledByUserComp = cellEditor.isCancelBeforeStart && cellEditor.isCancelBeforeStart();\n        if (editingCancelledByUserComp) {\n            this.beans.context.destroyBean(cellEditor);\n            this.cellCtrl.stopEditing();\n            return;\n        }\n\n        if (!cellEditor.getGui) {\n            console.warn(`AG Grid: cellEditor for column ${this.column.getId()} is missing getGui() method`);\n            this.beans.context.destroyBean(cellEditor);\n            return;\n        }\n\n        this.cellEditor = cellEditor;\n        this.cellEditorGui = cellEditor.getGui();\n\n        const cellEditorInPopup = popup || (cellEditor.isPopup !== undefined && cellEditor.isPopup());\n        if (cellEditorInPopup) {\n            if (!popup) {\n                this.cellCtrl.hackSayEditingInPopup();\n            }\n            this.addPopupCellEditor(params, position);\n        } else {\n            this.addInCellEditor();\n        }\n\n        if (cellEditor.afterGuiAttached) {\n            cellEditor.afterGuiAttached();\n        }\n    }\n\n    private addInCellEditor(): void {\n        const eGui = this.getGui();\n\n        // if focus is inside the cell, we move focus to the cell itself\n        // before removing it's contents, otherwise errors could be thrown.\n        const eDocument = this.beans.gridOptionsWrapper.getDocument();\n        if (eGui.contains(eDocument.activeElement)) {\n            eGui.focus();\n        }\n\n        this.destroyRenderer();\n        this.refreshWrapper(true);\n        this.clearParentOfValue();\n        if (this.cellEditorGui) {\n            const eParent = this.getParentOfValue();\n            eParent.appendChild(this.cellEditorGui);\n        }\n    }\n\n    private addPopupCellEditor(params: ICellEditorParams, position?: string): void {\n        if (this.beans.gridOptionsWrapper.isFullRowEdit()) {\n            console.warn('AG Grid: popup cellEditor does not work with fullRowEdit - you cannot use them both ' +\n                '- either turn off fullRowEdit, or stop using popup editors.');\n        }\n\n        const cellEditor = this.cellEditor!;\n\n        // if a popup, then we wrap in a popup editor and return the popup\n        this.cellEditorPopupWrapper = this.beans.context.createBean(new PopupEditorWrapper(params));\n        const ePopupGui = this.cellEditorPopupWrapper.getGui();\n        if (this.cellEditorGui) {\n            ePopupGui.appendChild(this.cellEditorGui);\n        }\n\n        const popupService = this.beans.popupService;\n\n        const useModelPopup = this.beans.gridOptionsWrapper.isStopEditingWhenCellsLoseFocus();\n\n        // see if position provided by colDef, if not then check old way of method on cellComp\n        const positionToUse = position != null ? position : cellEditor.getPopupPosition ? cellEditor.getPopupPosition() : 'over';\n\n        const positionParams = {\n            column: this.column,\n            rowNode: this.rowNode,\n            type: 'popupCellEditor',\n            eventSource: this.getGui(),\n            ePopup: ePopupGui,\n            keepWithinBounds: true\n        };\n\n        const positionCallback = positionToUse === 'under' ?\n            popupService.positionPopupUnderComponent.bind(popupService, positionParams)\n            : popupService.positionPopupOverComponent.bind(popupService, positionParams);\n\n        const translate = this.beans.gridOptionsWrapper.getLocaleTextFunc();\n\n        const addPopupRes = popupService.addPopup({\n            modal: useModelPopup,\n            eChild: ePopupGui,\n            closeOnEsc: true,\n            closedCallback: () => { this.cellCtrl.onPopupEditorClosed(); },\n            anchorToElement: this.getGui(),\n            positionCallback,\n            ariaLabel: translate('ariaLabelCellEditor', 'Cell Editor')\n        });\n        if (addPopupRes) {\n            this.hideEditorPopup = addPopupRes.hideFunc;\n        }\n    }\n\n    public detach(): void {\n        this.eRow.removeChild(this.getGui());\n    }\n\n    // if the row is also getting destroyed, then we don't need to remove from dom,\n    // as the row will also get removed, so no need to take out the cells from the row\n    // if the row is going (removing is an expensive operation, so only need to remove\n    // the top part)\n    //\n    // note - this is NOT called by context, as we don't wire / unwire the CellComp for performance reasons.\n    public destroy(): void {\n        this.cellCtrl.stopEditing();\n\n        this.destroyEditorAndRenderer();\n        this.removeControls();\n\n        super.destroy();\n    }\n\n    private clearParentOfValue(): void {\n        const eGui = this.getGui();\n\n        // if focus is inside the cell, we move focus to the cell itself\n        // before removing it's contents, otherwise errors could be thrown.\n        const eDocument = this.beans.gridOptionsWrapper.getDocument();\n        if (eGui.contains(eDocument.activeElement)) {\n            eGui.focus({\n                preventScroll: true\n            });\n        }\n\n        clearElement(this.getParentOfValue());\n    }\n}\n","import { Component } from \"../../widgets/component\";\nimport { ICellRendererComp } from \"../cellRenderers/iCellRenderer\";\nimport { Beans } from \"../beans\";\nimport { addStylesToElement, setDomChildOrder } from \"../../utils/dom\";\nimport { IRowComp, RowCtrl, RowType } from \"./rowCtrl\";\nimport { CellComp } from \"../cell/cellComp\";\nimport { getAllValuesInObject } from \"../../utils/object\";\nimport { setAriaRole } from \"../../utils/aria\";\nimport { CellCtrl } from \"../cell/cellCtrl\";\nimport { UserCompDetails } from \"../../components/framework/userComponentFactory\";\nimport { RowContainerType } from \"../../gridBodyComp/rowContainer/rowContainerCtrl\";\n\nexport class RowComp extends Component {\n\n    private fullWidthCellRenderer: ICellRendererComp | null | undefined;\n\n    private beans: Beans;\n\n    private rowCtrl: RowCtrl;\n\n    private domOrder: boolean;\n    private cellComps: { [key: string]: CellComp | null; } = {};\n\n    constructor(ctrl: RowCtrl, beans: Beans, containerType: RowContainerType) {\n        super();\n\n        this.beans = beans;\n        this.rowCtrl = ctrl;\n\n        this.setTemplate(/* html */`<div comp-id=\"${this.getCompId()}\" style=\"${this.getInitialStyle()}\"/>`);\n\n        const eGui = this.getGui();\n        const style = eGui.style;\n\n        const compProxy: IRowComp = {\n            setDomOrder: domOrder => this.domOrder = domOrder,\n            setCellCtrls: cellCtrls => this.setCellCtrls(cellCtrls),\n            showFullWidth: compDetails => this.showFullWidth(compDetails),\n            getFullWidthCellRenderer: () => this.getFullWidthCellRenderer(),\n            addOrRemoveCssClass: (name, on) => this.addOrRemoveCssClass(name, on),\n            setUserStyles: styles => addStylesToElement(eGui, styles),\n            setTop: top => style.top = top,\n            setTransform: transform => style.transform = transform,\n            setRowIndex: rowIndex => eGui.setAttribute('row-index', rowIndex),\n            setRole: role => setAriaRole(eGui, role),\n            setRowId: (rowId: string) => eGui.setAttribute('row-id', rowId),\n            setRowBusinessKey: businessKey => eGui.setAttribute('row-business-key', businessKey),\n            setTabIndex: tabIndex => eGui.setAttribute('tabindex', tabIndex.toString())\n        };\n\n        ctrl.setComp(compProxy, this.getGui(), containerType);\n    }\n\n    private getInitialStyle(): string {\n        const transform = this.rowCtrl.getInitialTransform();\n        const top = this.rowCtrl.getInitialRowTop();\n        return transform ? `transform: ${transform}` : `top: ${top}`;\n    }\n\n    private showFullWidth(compDetails: UserCompDetails): void {\n        const callback = (cellRenderer: ICellRendererComp) => {\n            if (this.isAlive()) {\n                const eGui = cellRenderer.getGui();\n                this.getGui().appendChild(eGui);\n                this.rowCtrl.setupDetailRowAutoHeight(eGui);\n                this.setFullWidthRowComp(cellRenderer);\n            } else {\n                this.beans.context.destroyBean(cellRenderer);\n            }\n        };\n\n        // if not in cache, create new one\n        const res = compDetails.newAgStackInstance();\n\n        if (!res) { return; }\n\n        res.then(callback);\n    }\n\n    private setCellCtrls(cellCtrls: CellCtrl[]): void {\n        const cellsToRemove = Object.assign({}, this.cellComps);\n\n        cellCtrls.forEach(cellCtrl => {\n            const key = cellCtrl.getInstanceId();\n            const existingCellComp = this.cellComps[key];\n\n            if (existingCellComp == null) {\n                this.newCellComp(cellCtrl);\n            } else {\n                cellsToRemove[key] = null;\n            }\n        });\n\n        const cellCompsToRemove = getAllValuesInObject(cellsToRemove)\n            .filter(cellComp => cellComp != null);\n\n        this.destroyCells(cellCompsToRemove as CellComp[]);\n        this.ensureDomOrder(cellCtrls);\n    }\n\n    private ensureDomOrder(cellCtrls: CellCtrl[]): void {\n        if (!this.domOrder) { return; }\n\n        const elementsInOrder: HTMLElement[] = [];\n        cellCtrls.forEach(cellCtrl => {\n            const cellComp = this.cellComps[cellCtrl.getInstanceId()];\n            if (cellComp) {\n                elementsInOrder.push(cellComp.getGui());\n            }\n        });\n\n        setDomChildOrder(this.getGui(), elementsInOrder);\n    }\n\n    private newCellComp(cellCtrl: CellCtrl): void {\n        const cellComp = new CellComp(this.beans, cellCtrl,\n            this.rowCtrl.isPrintLayout(), this.getGui(), this.rowCtrl.isEditing());\n        this.cellComps[cellCtrl.getInstanceId()] = cellComp;\n        this.getGui().appendChild(cellComp.getGui());\n    }\n\n    public destroy(): void {\n        super.destroy();\n        this.destroyAllCells();\n    }\n\n    private destroyAllCells(): void {\n        const cellsToDestroy = getAllValuesInObject(this.cellComps).filter(cp => cp != null);\n        this.destroyCells(cellsToDestroy as CellComp[]);\n    }\n\n    private setFullWidthRowComp(fullWidthRowComponent: ICellRendererComp): void {\n        if (this.fullWidthCellRenderer) {\n            console.error('AG Grid - should not be setting fullWidthRowComponent twice');\n        }\n\n        this.fullWidthCellRenderer = fullWidthRowComponent;\n        this.addDestroyFunc(() => {\n            this.fullWidthCellRenderer = this.beans.context.destroyBean(this.fullWidthCellRenderer);\n        });\n    }\n\n    private getFullWidthCellRenderer(): ICellRendererComp | null | undefined {\n        return this.fullWidthCellRenderer;\n    }\n\n    private destroyCells(cellComps: CellComp[]): void {\n        cellComps.forEach(cellComp => {\n\n            // could be old reference, ie removed cell\n            if (!cellComp) { return; }\n\n            // check cellComp belongs in this container\n            const instanceId = cellComp.getCtrl().getInstanceId();\n            if (this.cellComps[instanceId] !== cellComp) {return; }\n\n            cellComp.detach();\n            cellComp.destroy();\n            this.cellComps[instanceId] = null;\n        });\n    }\n}\n","import { Component } from \"../../widgets/component\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { Autowired, PostConstruct, PreDestroy } from \"../../context/context\";\nimport { getRowContainerTypeForName, IRowContainerComp, RowContainerCtrl, RowContainerName, RowContainerType } from \"./rowContainerCtrl\";\nimport { ensureDomOrder, insertWithDomOrder } from \"../../utils/dom\";\nimport { RowComp } from \"../../rendering/row/rowComp\";\nimport { RowCtrl } from \"../../rendering/row/rowCtrl\";\nimport { Beans } from \"../../rendering/beans\";\nimport { getAllValuesInObject } from \"../../utils/object\";\nimport { setAriaRole } from \"../../utils/aria\";\n\nfunction templateFactory(): string {\n    const name = Component.elementGettingCreated.getAttribute('name') as RowContainerName;\n\n    const cssClasses = RowContainerCtrl.getRowContainerCssClasses(name);\n\n    let res: string;\n\n    const template1 = name === RowContainerName.CENTER;\n    const template2 = name === RowContainerName.TOP_CENTER || name === RowContainerName.BOTTOM_CENTER;\n\n    if (template1) {\n        res = /* html */\n            `<div class=\"${cssClasses.wrapper}\" ref=\"eWrapper\" role=\"presentation\">\n                <div class=\"${cssClasses.viewport}\" ref=\"eViewport\" role=\"presentation\">\n                    <div class=\"${cssClasses.container}\" ref=\"eContainer\"></div>\n                </div>\n            </div>`;\n    } else if (template2) {\n        res = /* html */\n            `<div class=\"${cssClasses.viewport}\" ref=\"eViewport\" role=\"presentation\">\n                <div class=\"${cssClasses.container}\" ref=\"eContainer\"></div>\n            </div>`;\n    } else {\n        res = /* html */\n            `<div class=\"${cssClasses.container}\" ref=\"eContainer\"></div>`;\n    }\n\n    return res;\n}\n\nexport class RowContainerComp extends Component {\n\n    @Autowired('beans') private beans: Beans;\n\n    @RefSelector('eViewport') private eViewport: HTMLElement;\n    @RefSelector('eContainer') private eContainer: HTMLElement;\n    @RefSelector('eWrapper') private eWrapper: HTMLElement;\n\n    private readonly name: RowContainerName;\n    private readonly type: RowContainerType;\n\n    private rowComps: {[id: string]: RowComp} = {};\n\n    // we ensure the rows are in the dom in the order in which they appear on screen when the\n    // user requests this via gridOptions.ensureDomOrder. this is typically used for screen readers.\n    private domOrder: boolean;\n    private lastPlacedElement: HTMLElement | null;\n\n    constructor() {\n        super(templateFactory());\n        this.name = Component.elementGettingCreated.getAttribute('name') as RowContainerName;\n        this.type = getRowContainerTypeForName(this.name);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const compProxy: IRowContainerComp = {\n            setViewportHeight: height => this.eViewport.style.height = height,\n            setRowCtrls: rowCtrls => this.setRowCtrls(rowCtrls),\n            setDomOrder: domOrder => {\n                this.domOrder = domOrder;\n            },\n            setContainerWidth: width => this.eContainer.style.width = width\n        };\n\n        const ctrl = this.createManagedBean(new RowContainerCtrl(this.name));\n        ctrl.setComp(compProxy, this.eContainer, this.eViewport, this.eWrapper);\n    }\n\n    @PreDestroy\n    private preDestroy(): void {\n        // destroys all row comps\n        this.setRowCtrls([]);\n    }\n\n    private setRowCtrls(rowCtrls: RowCtrl[]): void {\n        const oldRows = {...this.rowComps};\n        this.rowComps = {};\n\n        this.lastPlacedElement = null;\n\n        const processRow = (rowCon: RowCtrl) => {\n            const instanceId = rowCon.getInstanceId();\n            const existingRowComp = oldRows[instanceId];\n            if (existingRowComp) {\n                this.rowComps[instanceId] = existingRowComp;\n                delete oldRows[instanceId];\n                this.ensureDomOrder(existingRowComp.getGui());\n            } else {\n                const rowComp = this.newRowComp(rowCon);\n                this.rowComps[instanceId] = rowComp;\n                this.appendRow(rowComp.getGui());\n            }\n        };\n\n        rowCtrls.forEach(processRow);\n        getAllValuesInObject(oldRows).forEach(oldRowComp => {\n            this.eContainer.removeChild(oldRowComp.getGui());\n            oldRowComp.destroy();\n        });\n\n        setAriaRole(this.eContainer, rowCtrls.length ? \"rowgroup\" :  \"presentation\");\n    }\n\n    public appendRow(element: HTMLElement) {\n        if (this.domOrder) {\n            insertWithDomOrder(this.eContainer, element, this.lastPlacedElement);\n        } else {\n            this.eContainer.appendChild(element);\n        }\n        this.lastPlacedElement = element;\n    }\n\n    private ensureDomOrder(eRow: HTMLElement): void {\n        if (this.domOrder) {\n            ensureDomOrder(this.eContainer, eRow, this.lastPlacedElement);\n            this.lastPlacedElement = eRow;\n        }\n    }\n\n    private newRowComp(rowCtrl: RowCtrl): RowComp {\n        const pinned = RowContainerCtrl.getPinned(this.name);\n        const res = new RowComp(rowCtrl, this.beans, this.type);\n        return res;\n    }\n\n}","import { PostConstruct, PreDestroy } from '../../context/context';\nimport { setAriaRowIndex } from '../../utils/aria';\nimport { setDomChildOrder } from '../../utils/dom';\nimport { getAllValuesInObject, iterateObject } from '../../utils/object';\nimport { Component } from '../../widgets/component';\nimport { AbstractHeaderCellComp } from '../cells/abstractCell/abstractHeaderCellComp';\nimport { AbstractHeaderCellCtrl } from '../cells/abstractCell/abstractHeaderCellCtrl';\nimport { HeaderCellComp } from '../cells/column/headerCellComp';\nimport { HeaderCellCtrl } from '../cells/column/headerCellCtrl';\nimport { HeaderGroupCellComp } from '../cells/columnGroup/headerGroupCellComp';\nimport { HeaderGroupCellCtrl } from '../cells/columnGroup/headerGroupCellCtrl';\nimport { HeaderFilterCellComp } from '../cells/floatingFilter/headerFilterCellComp';\nimport { HeaderFilterCellCtrl } from '../cells/floatingFilter/headerFilterCellCtrl';\nimport { HeaderRowCtrl, IHeaderRowComp } from './headerRowCtrl';\n\nexport enum HeaderRowType {\n    COLUMN_GROUP = 'group',\n    COLUMN = 'column',\n    FLOATING_FILTER = 'filter'\n}\n\nexport class HeaderRowComp extends Component {\n\n    private ctrl: HeaderRowCtrl;\n\n    private headerComps: { [key: string]: AbstractHeaderCellComp<AbstractHeaderCellCtrl>; } = {};\n\n    constructor(ctrl: HeaderRowCtrl) {\n        super();\n\n        const extraClass = ctrl.getType() == HeaderRowType.COLUMN_GROUP ? `ag-header-row-column-group` :\n                            ctrl.getType() == HeaderRowType.FLOATING_FILTER ? `ag-header-row-column-filter` : `ag-header-row-column`;\n\n        this.setTemplate(/* html */`<div class=\"ag-header-row ${extraClass}\" role=\"row\"></div>`);\n\n        this.ctrl = ctrl;\n    }\n\n    //noinspection JSUnusedLocalSymbols\n    @PostConstruct\n    private init(): void {\n\n        const compProxy: IHeaderRowComp = {\n            setTransform: transform => this.getGui().style.transform = transform,\n            setHeight: height => this.getGui().style.height = height,\n            setTop: top => this.getGui().style.top = top,\n            setHeaderCtrls: ctrls => this.setHeaderCtrls(ctrls),\n            setWidth: width => this.getGui().style.width = width,\n            setAriaRowIndex: rowIndex => setAriaRowIndex(this.getGui(), rowIndex)\n        };\n\n        this.ctrl.setComp(compProxy);\n    }\n\n    @PreDestroy\n    private destroyHeaderCtrls(): void {\n        this.setHeaderCtrls([]);\n    }\n\n    private setHeaderCtrls(ctrls: AbstractHeaderCellCtrl[]): void {\n        if (!this.isAlive()) { return; }\n\n        const oldComps = this.headerComps;\n        this.headerComps = {};\n\n        ctrls.forEach(ctrl => {\n            const id = ctrl.getInstanceId();\n            let comp = oldComps[id];\n            delete oldComps[id];\n\n            if (comp == null) {\n                comp = this.createHeaderComp(ctrl);\n                this.getGui().appendChild(comp.getGui());\n            }\n\n            this.headerComps[id] = comp;\n        });\n\n        iterateObject(oldComps, (id: string, comp: AbstractHeaderCellComp<AbstractHeaderCellCtrl>) => {\n            this.getGui().removeChild(comp.getGui());\n            this.destroyBean(comp);\n        });\n\n        const ensureDomOrder = this.gridOptionsWrapper.isEnsureDomOrder();\n        if (ensureDomOrder) {\n            const comps = getAllValuesInObject(this.headerComps);\n            // ordering the columns by left position orders them in the order they appear on the screen\n            comps.sort((a: AbstractHeaderCellComp<AbstractHeaderCellCtrl>, b: AbstractHeaderCellComp<AbstractHeaderCellCtrl>) => {\n                const leftA = a.getCtrl().getColumnGroupChild().getLeft()!;\n                const leftB = b.getCtrl().getColumnGroupChild().getLeft()!;\n                return leftA - leftB;\n            });\n            const elementsInOrder = comps.map(c => c.getGui());\n            setDomChildOrder(this.getGui(), elementsInOrder);\n        }\n    }\n\n    private createHeaderComp(headerCtrl: AbstractHeaderCellCtrl): AbstractHeaderCellComp<AbstractHeaderCellCtrl> {\n\n        let result: AbstractHeaderCellComp<AbstractHeaderCellCtrl>;\n\n        switch (this.ctrl.getType()) {\n            case HeaderRowType.COLUMN_GROUP:\n                result = new HeaderGroupCellComp(headerCtrl as HeaderGroupCellCtrl);\n                break;\n            case HeaderRowType.FLOATING_FILTER:\n                result = new HeaderFilterCellComp(headerCtrl as HeaderFilterCellCtrl);\n                break;\n            default:\n                result = new HeaderCellComp(headerCtrl as HeaderCellCtrl);\n                break;\n        }\n\n        this.createBean(result);\n        result.setParentComponent(this);\n\n        return result;\n    }\n}\n","import { DraggingEvent, DragAndDropService } from \"../../dragAndDrop/dragAndDropService\";\nimport { Column } from \"../../entities/column\";\nimport { ColumnModel } from \"../../columns/columnModel\";\nimport { Autowired } from \"../../context/context\";\nimport { GridOptionsWrapper } from \"../../gridOptionsWrapper\";\nimport { DropListener } from \"./bodyDropTarget\";\n\nexport class BodyDropPivotTarget implements DropListener {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n\n    private columnsToAggregate: Column[] = [];\n    private columnsToGroup: Column[] = [];\n    private columnsToPivot: Column[] = [];\n\n    private pinned: string | null;\n\n    constructor(pinned: string | null) {\n        this.pinned = pinned;\n    }\n\n    /** Callback for when drag enters */\n    public onDragEnter(draggingEvent: DraggingEvent): void {\n        this.clearColumnsList();\n\n        // in pivot mode, we don't accept any drops if functions are read only\n        if (this.gridOptionsWrapper.isFunctionsReadOnly()) { return; }\n\n        const dragColumns: Column[] | undefined = draggingEvent.dragItem.columns;\n\n        if (!dragColumns) { return; }\n\n        dragColumns.forEach(column => {\n            // we don't allow adding secondary columns\n            if (!column.isPrimary()) { return; }\n\n            if (column.isAnyFunctionActive()) { return; }\n\n            if (column.isAllowValue()) {\n                this.columnsToAggregate.push(column);\n            } else if (column.isAllowRowGroup()) {\n                this.columnsToGroup.push(column);\n            } else if (column.isAllowPivot()) {\n                this.columnsToPivot.push(column);\n            }\n\n        });\n    }\n\n    public getIconName(): string | null {\n        const totalColumns = this.columnsToAggregate.length + this.columnsToGroup.length + this.columnsToPivot.length;\n        if (totalColumns > 0) {\n            return this.pinned ? DragAndDropService.ICON_PINNED : DragAndDropService.ICON_MOVE;\n        }\n\n        return null;\n    }\n\n    /** Callback for when drag leaves */\n    public onDragLeave(draggingEvent: DraggingEvent): void {\n        // if we are taking columns out of the center, then we remove them from the report\n        this.clearColumnsList();\n    }\n\n    private clearColumnsList(): void {\n        this.columnsToAggregate.length = 0;\n        this.columnsToGroup.length = 0;\n        this.columnsToPivot.length = 0;\n    }\n\n    /** Callback for when dragging */\n    public onDragging(draggingEvent: DraggingEvent): void {\n    }\n\n    /** Callback for when drag stops */\n    public onDragStop(draggingEvent: DraggingEvent): void {\n        if (this.columnsToAggregate.length > 0) {\n            this.columnModel.addValueColumns(this.columnsToAggregate, \"toolPanelDragAndDrop\");\n        }\n        if (this.columnsToGroup.length > 0) {\n            this.columnModel.addRowGroupColumns(this.columnsToGroup, \"toolPanelDragAndDrop\");\n        }\n        if (this.columnsToPivot.length > 0) {\n            this.columnModel.addPivotColumns(this.columnsToPivot, \"toolPanelDragAndDrop\");\n        }\n    }\n\n}","import { Autowired, PostConstruct } from \"../../context/context\";\nimport { Constants } from \"../../constants/constants\";\nimport { ColumnModel } from \"../../columns/columnModel\";\nimport { Column } from \"../../entities/column\";\nimport { DragAndDropService, DraggingEvent, DragSourceType, HorizontalDirection } from \"../../dragAndDrop/dragAndDropService\";\nimport { DropListener } from \"./bodyDropTarget\";\nimport { GridOptionsWrapper } from \"../../gridOptionsWrapper\";\nimport { Logger, LoggerFactory } from \"../../logger\";\nimport { ColumnEventType } from \"../../events\";\nimport { missing, exists } from \"../../utils/generic\";\nimport { sortNumerically, last, includes } from \"../../utils/array\";\nimport { CtrlsService } from \"../../ctrlsService\";\nimport { GridBodyCtrl } from \"../../gridBodyComp/gridBodyCtrl\";\n\nexport class MoveColumnFeature implements DropListener {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('ctrlsService') public ctrlsService: CtrlsService;\n\n    private gridBodyCon: GridBodyCtrl;\n\n    private needToMoveLeft = false;\n    private needToMoveRight = false;\n    private movingIntervalId: number | null;\n    private intervalCount: number;\n\n    private pinned: string | null;\n    private centerContainer: boolean;\n\n    private lastDraggingEvent: DraggingEvent;\n\n    // this counts how long the user has been trying to scroll by dragging and failing,\n    // if they fail x amount of times, then the column will get pinned. this is what gives\n    // the 'hold and pin' functionality\n    private failedMoveAttempts: number;\n\n    private eContainer: HTMLElement;\n\n    constructor(pinned: string | null, eContainer: HTMLElement) {\n        this.pinned = pinned;\n        this.eContainer = eContainer;\n        this.centerContainer = !exists(pinned);\n    }\n\n    @PostConstruct\n    public init(): void {\n        this.ctrlsService.whenReady(() => {\n            this.gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        });\n    }\n\n    public getIconName(): string {\n        return this.pinned ? DragAndDropService.ICON_PINNED : DragAndDropService.ICON_MOVE;\n    }\n\n    public onDragEnter(draggingEvent: DraggingEvent): void {\n        // we do dummy drag, so make sure column appears in the right location when first placed\n\n        const columns = draggingEvent.dragItem.columns;\n        const dragCameFromToolPanel = draggingEvent.dragSource.type === DragSourceType.ToolPanel;\n\n        if (dragCameFromToolPanel) {\n            // the if statement doesn't work if drag leaves grid, then enters again\n            this.setColumnsVisible(columns, true, \"uiColumnDragged\");\n        } else {\n            // restore previous state of visible columns upon re-entering. this means if the user drags\n            // a group out, and then drags the group back in, only columns that were originally visible\n            // will be visible again. otherwise a group with three columns (but only two visible) could\n            // be dragged out, then when it's dragged in again, all three are visible. this stops that.\n            const visibleState = draggingEvent.dragItem.visibleState;\n            const visibleColumns: Column[] = (columns || []).filter(column => visibleState![column.getId()]);\n            this.setColumnsVisible(visibleColumns, true, \"uiColumnDragged\");\n        }\n\n        this.setColumnsPinned(columns, this.pinned, \"uiColumnDragged\");\n        this.onDragging(draggingEvent, true);\n    }\n\n    public onDragLeave(draggingEvent: DraggingEvent): void {\n        const hideColumnOnExit = !this.gridOptionsWrapper.isSuppressDragLeaveHidesColumns() && !draggingEvent.fromNudge;\n\n        if (hideColumnOnExit) {\n            const dragItem = draggingEvent.dragSource.getDragItem();\n            const columns = dragItem.columns;\n            this.setColumnsVisible(columns, false, \"uiColumnDragged\");\n        }\n\n        this.ensureIntervalCleared();\n    }\n\n    public setColumnsVisible(columns: Column[] | null | undefined, visible: boolean, source: ColumnEventType = \"api\") {\n        if (columns) {\n            const allowedCols = columns.filter(c => !c.getColDef().lockVisible);\n            this.columnModel.setColumnsVisible(allowedCols, visible, source);\n        }\n    }\n\n    public setColumnsPinned(columns: Column[] | null | undefined, pinned: string | null, source: ColumnEventType = \"api\") {\n        if (columns) {\n            const allowedCols = columns.filter(c => !c.getColDef().lockPinned);\n            this.columnModel.setColumnsPinned(allowedCols, pinned, source);\n        }\n    }\n\n    public onDragStop(): void {\n        this.ensureIntervalCleared();\n    }\n\n    private normaliseX(x: number): number {\n        // flip the coordinate if doing RTL\n        if (this.gridOptionsWrapper.isEnableRtl()) {\n            const clientWidth = this.eContainer.clientWidth;\n            x = clientWidth - x;\n        }\n\n        // adjust for scroll only if centre container (the pinned containers don't scroll)\n        if (this.centerContainer) {\n            x += this.ctrlsService.getCenterRowContainerCtrl().getCenterViewportScrollLeft();\n        }\n\n        return x;\n    }\n\n    private checkCenterForScrolling(xAdjustedForScroll: number): void {\n        if (this.centerContainer) {\n            // scroll if the mouse has gone outside the grid (or just outside the scrollable part if pinning)\n            // putting in 50 buffer, so even if user gets to edge of grid, a scroll will happen\n            const firstVisiblePixel = this.ctrlsService.getCenterRowContainerCtrl().getCenterViewportScrollLeft();\n            const lastVisiblePixel = firstVisiblePixel + this.ctrlsService.getCenterRowContainerCtrl().getCenterWidth();\n\n            if (this.gridOptionsWrapper.isEnableRtl()) {\n                this.needToMoveRight = xAdjustedForScroll < (firstVisiblePixel + 50);\n                this.needToMoveLeft = xAdjustedForScroll > (lastVisiblePixel - 50);\n            } else {\n                this.needToMoveLeft = xAdjustedForScroll < (firstVisiblePixel + 50);\n                this.needToMoveRight = xAdjustedForScroll > (lastVisiblePixel - 50);\n            }\n\n            if (this.needToMoveLeft || this.needToMoveRight) {\n                this.ensureIntervalStarted();\n            } else {\n                this.ensureIntervalCleared();\n            }\n        }\n    }\n\n    public onDragging(draggingEvent: DraggingEvent, fromEnter = false): void {\n\n        this.lastDraggingEvent = draggingEvent;\n\n        // if moving up or down (ie not left or right) then do nothing\n        if (missing(draggingEvent.hDirection)) {\n            return;\n        }\n\n        const mouseXNormalised = this.normaliseX(draggingEvent.x);\n\n        // if the user is dragging into the panel, ie coming from the side panel into the main grid,\n        // we don't want to scroll the grid this time, it would appear like the table is jumping\n        // each time a column is dragged in.\n        if (!fromEnter) {\n            this.checkCenterForScrolling(mouseXNormalised);\n        }\n\n        const hDirectionNormalised = this.normaliseDirection(draggingEvent.hDirection);\n\n        const dragSourceType: DragSourceType = draggingEvent.dragSource.type;\n        let columnsToMove = draggingEvent.dragSource.getDragItem().columns;\n\n        columnsToMove = columnsToMove!.filter(col => {\n            if (col.getColDef().lockPinned) {\n                // if locked return true only if both col and container are same pin type.\n                // double equals (==) here on purpose so that null==undefined is true (for not pinned options)\n                return col.getPinned() == this.pinned;\n            }\n            // if not pin locked, then always allowed to be in this container\n            return true;\n        });\n\n        this.attemptMoveColumns(dragSourceType, columnsToMove, hDirectionNormalised, mouseXNormalised, fromEnter);\n    }\n\n    private normaliseDirection(hDirection: HorizontalDirection): HorizontalDirection | undefined {\n        if (this.gridOptionsWrapper.isEnableRtl()) {\n            switch (hDirection) {\n                case HorizontalDirection.Left: return HorizontalDirection.Right;\n                case HorizontalDirection.Right: return HorizontalDirection.Left;\n                default: console.error(`AG Grid: Unknown direction ${hDirection}`);\n            }\n        } else {\n            return hDirection;\n        }\n    }\n\n    // returns the index of the first column in the list ONLY if the cols are all beside\n    // each other. if the cols are not beside each other, then returns null\n    private calculateOldIndex(movingCols: Column[]): number | null {\n        const gridCols: Column[] = this.columnModel.getAllGridColumns();\n        const indexes = sortNumerically(movingCols.map(col => gridCols.indexOf(col)));\n        const firstIndex = indexes[0];\n        const lastIndex = last(indexes);\n        const spread = lastIndex - firstIndex;\n        const gapsExist = spread !== indexes.length - 1;\n\n        return gapsExist ? null : firstIndex;\n    }\n\n    private attemptMoveColumns(dragSourceType: DragSourceType, allMovingColumns: Column[], hDirection: HorizontalDirection | undefined, mouseX: number, fromEnter: boolean): void {\n        const draggingLeft = hDirection === HorizontalDirection.Left;\n        const draggingRight = hDirection === HorizontalDirection.Right;\n\n        // it is important to sort the moving columns as they are in grid columns, as the list of moving columns\n        // could themselves be part of 'married children' groups, which means we need to maintain the order within\n        // the moving list.\n        const allMovingColumnsOrdered = allMovingColumns.slice();\n        this.columnModel.sortColumnsLikeGridColumns(allMovingColumnsOrdered);\n\n        const validMoves = this.calculateValidMoves(allMovingColumnsOrdered, draggingRight, mouseX);\n\n        // if cols are not adjacent, then this returns null. when moving, we constrain the direction of the move\n        // (ie left or right) to the mouse direction. however\n        const oldIndex = this.calculateOldIndex(allMovingColumnsOrdered);\n\n        if (validMoves.length === 0) { return; }\n\n        const firstValidMove = validMoves[0];\n\n        // the two check below stop an error when the user grabs a group my a middle column, then\n        // it is possible the mouse pointer is to the right of a column while been dragged left.\n        // so we need to make sure that the mouse pointer is actually left of the left most column\n        // if moving left, and right of the right most column if moving right\n\n        // we check 'fromEnter' below so we move the column to the new spot if the mouse is coming from\n        // outside the grid, eg if the column is moving from side panel, mouse is moving left, then we should\n        // place the column to the RHS even if the mouse is moving left and the column is already on\n        // the LHS. otherwise we stick to the rule described above.\n\n        let constrainDirection = oldIndex !== null && !fromEnter;\n\n        // don't consider 'fromEnter' when dragging header cells, otherwise group can jump to opposite direction of drag\n        if (dragSourceType == DragSourceType.HeaderCell) {\n            constrainDirection = oldIndex !== null;\n        }\n\n        if (constrainDirection) {\n            // only allow left drag if this column is moving left\n            if (draggingLeft && firstValidMove >= (oldIndex as number)) { return; }\n\n            // only allow right drag if this column is moving right\n            if (draggingRight && firstValidMove <= (oldIndex as number)) { return; }\n        }\n\n        for (let i = 0; i < validMoves.length; i++) {\n            const move: number = validMoves[i];\n\n            if (!this.columnModel.doesMovePassRules(allMovingColumnsOrdered, move)) {\n                continue;\n            }\n\n            this.columnModel.moveColumns(allMovingColumnsOrdered, move, \"uiColumnDragged\");\n\n            // important to return here, so once we do the first valid move, we don't try do any more\n            return;\n        }\n    }\n\n    private calculateValidMoves(movingCols: Column[], draggingRight: boolean, mouseX: number): number[] {\n        const isMoveBlocked = this.gridOptionsWrapper.isSuppressMovableColumns() || movingCols.some(col => col.getColDef().suppressMovable);\n\n        if (isMoveBlocked) { return []; }\n        // this is the list of cols on the screen, so it's these we use when comparing the x mouse position\n        const allDisplayedCols = this.columnModel.getDisplayedColumns(this.pinned);\n        // but this list is the list of all cols, when we move a col it's the index within this list that gets used,\n        // so the result we return has to be and index location for this list\n        const allGridCols = this.columnModel.getAllGridColumns();\n\n        const movingDisplayedCols = allDisplayedCols.filter(col => includes(movingCols, col));\n        const otherDisplayedCols = allDisplayedCols.filter(col => !includes(movingCols, col));\n        const otherGridCols = allGridCols.filter(col => !includes(movingCols, col));\n\n        // work out how many DISPLAYED columns fit before the 'x' position. this gives us the displayIndex.\n        // for example, if cols are a,b,c,d and we find a,b fit before 'x', then we want to place the moving\n        // col between b and c (so that it is under the mouse position).\n        let displayIndex = 0;\n        let availableWidth = mouseX;\n\n        // if we are dragging right, then the columns will be to the left of the mouse, so we also want to\n        // include the width of the moving columns\n        if (draggingRight) {\n            let widthOfMovingDisplayedCols = 0;\n            movingDisplayedCols.forEach(col => widthOfMovingDisplayedCols += col.getActualWidth());\n            availableWidth -= widthOfMovingDisplayedCols;\n        }\n\n        if (availableWidth > 0) {\n            // now count how many of the displayed columns will fit to the left\n            for (let i = 0; i < otherDisplayedCols.length; i++) {\n                const col = otherDisplayedCols[i];\n                availableWidth -= col.getActualWidth();\n                if (availableWidth < 0) { break; }\n                displayIndex++;\n            }\n            // trial and error, if going right, we adjust by one, i didn't manage to quantify why, but it works\n            if (draggingRight) {\n                displayIndex++;\n            }\n        }\n\n        // the display index is with respect to all the showing columns, however when we move, it's with\n        // respect to all grid columns, so we need to translate from display index to grid index\n\n        let firstValidMove: number;\n        if (displayIndex > 0) {\n            const leftColumn = otherDisplayedCols[displayIndex - 1];\n            firstValidMove = otherGridCols.indexOf(leftColumn) + 1;\n        } else {\n            firstValidMove = otherGridCols.indexOf(otherDisplayedCols[0]);\n            if (firstValidMove === -1) {\n                firstValidMove = 0;\n            }\n        }\n\n        const validMoves = [firstValidMove];\n        const numberComparator = (a: number, b:number) => a - b;\n\n        // add in other valid moves due to hidden columns and married children. for example, a particular\n        // move might break a group that has married children (so move isn't valid), however there could\n        // be hidden columns (not displayed) that we could jump over to make the move valid. because\n        // they are hidden, user doesn't see any different, however it allows moves that would otherwise\n        // not work. for example imagine a group with 9 columns and all columns are hidden except the\n        // middle one (so 4 hidden to left, 4 hidden to right), then when moving 'firstValidMove' will\n        // be relative to the not-shown column, however we need to consider the move jumping over all the\n        // hidden children. if we didn't do this, then if the group just described was at the end (RHS) of the\n        // grid, there would be no way to put a column after it (as the grid would only consider beside the\n        // visible column, which would fail valid move rules).\n        if (draggingRight) {\n            // if dragging right, then we add all the additional moves to the right. so in other words\n            // if the next move is not valid, find the next move to the right that is valid.\n            let pointer = firstValidMove + 1;\n            const lastIndex = allGridCols.length - 1;\n            while (pointer <= lastIndex) {\n                validMoves.push(pointer);\n                pointer++;\n            }\n\n            // adding columns here means the order is now messed up\n            validMoves.sort(numberComparator);\n        } else {\n            // if dragging left we do the reverse of dragging right, we add in all the valid moves to the\n            // left. however we also have to consider moves to the right for all hidden columns first.\n            // (this logic is hard to reason with, it was worked out with trial and error,\n            // more observation rather than science).\n\n            // add moves to the right\n            let pointer = firstValidMove;\n            const lastIndex = allGridCols.length - 1;\n            let displacedCol = allGridCols[pointer];\n            while (pointer <= lastIndex && this.isColumnHidden(allDisplayedCols, displacedCol)) {\n                pointer++;\n                validMoves.push(pointer);\n                displacedCol = allGridCols[pointer];\n            }\n\n            // add moves to the left\n            pointer = firstValidMove - 1;\n            const firstDisplayIndex = 0;\n            while (pointer >= firstDisplayIndex) {\n                validMoves.push(pointer);\n                pointer--;\n            }\n\n            // adding columns here means the order is now messed up\n            validMoves.sort(numberComparator).reverse();\n        }\n\n        return validMoves;\n    }\n\n    // isHidden takes into account visible=false and group=closed, ie it is not displayed\n    private isColumnHidden(displayedColumns: Column[], col: Column) {\n        return displayedColumns.indexOf(col) < 0;\n    }\n\n    private ensureIntervalStarted(): void {\n        if (!this.movingIntervalId) {\n            this.intervalCount = 0;\n            this.failedMoveAttempts = 0;\n            this.movingIntervalId = window.setInterval(this.moveInterval.bind(this), 100);\n            if (this.needToMoveLeft) {\n                this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_LEFT, true);\n            } else {\n                this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_RIGHT, true);\n            }\n        }\n    }\n\n    private ensureIntervalCleared(): void {\n        if (this.movingIntervalId) {\n            window.clearInterval(this.movingIntervalId);\n            this.movingIntervalId = null;\n            this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_MOVE);\n        }\n    }\n\n    private moveInterval(): void {\n        // the amounts we move get bigger at each interval, so the speed accelerates, starting a bit slow\n        // and getting faster. this is to give smoother user experience. we max at 100px to limit the speed.\n        let pixelsToMove: number;\n        this.intervalCount++;\n        pixelsToMove = 10 + (this.intervalCount * 5);\n        if (pixelsToMove > 100) {\n            pixelsToMove = 100;\n        }\n\n        let pixelsMoved: number | null = null;\n        const scrollFeature = this.gridBodyCon.getScrollFeature();\n        if (this.needToMoveLeft) {\n            pixelsMoved = scrollFeature.scrollHorizontally(-pixelsToMove);\n        } else if (this.needToMoveRight) {\n            pixelsMoved = scrollFeature.scrollHorizontally(pixelsToMove);\n        }\n\n        if (pixelsMoved !== 0) {\n            this.onDragging(this.lastDraggingEvent);\n            this.failedMoveAttempts = 0;\n        } else {\n            // we count the failed move attempts. if we fail to move 7 times, then we pin the column.\n            // this is how we achieve pining by dragging the column to the edge of the grid.\n            this.failedMoveAttempts++;\n\n            const columns = this.lastDraggingEvent.dragItem.columns;\n            const columnsThatCanPin = columns!.filter(c => !c.getColDef().lockPinned);\n\n            if (columnsThatCanPin.length > 0) {\n                this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_PINNED);\n                if (this.failedMoveAttempts > 7) {\n                    const pinType = this.needToMoveLeft ? Constants.PINNED_LEFT : Constants.PINNED_RIGHT;\n                    this.setColumnsPinned(columnsThatCanPin, pinType, \"uiColumnDragged\");\n                    this.dragAndDropService.nudge();\n                }\n            }\n        }\n    }\n}","import { DragAndDropService, DraggingEvent, DragSourceType, DropTarget } from \"../../dragAndDrop/dragAndDropService\";\nimport { Autowired, PostConstruct } from \"../../context/context\";\nimport { MoveColumnFeature } from \"./moveColumnFeature\";\nimport { BodyDropPivotTarget } from \"./bodyDropPivotTarget\";\nimport { ColumnModel } from \"../../columns/columnModel\";\nimport { Constants } from \"../../constants/constants\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { CtrlsService } from \"../../ctrlsService\";\n\nexport interface DropListener {\n    getIconName(): string | null;\n    onDragEnter(params: DraggingEvent): void;\n    onDragLeave(params: DraggingEvent): void;\n    onDragging(params: DraggingEvent): void;\n    onDragStop(params: DraggingEvent): void;\n}\n\nexport class BodyDropTarget extends BeanStub implements DropTarget {\n\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private pinned: string | null;\n    // public because it's part of the DropTarget interface\n    private eContainer: HTMLElement;\n    // public because it's part of the DropTarget interface\n    private eSecondaryContainers: HTMLElement[][];\n    private currentDropListener: DropListener;\n\n    private moveColumnFeature: MoveColumnFeature;\n    private bodyDropPivotTarget: BodyDropPivotTarget;\n\n    constructor(pinned: string | null, eContainer: HTMLElement) {\n        super();\n        this.pinned = pinned;\n        this.eContainer = eContainer;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.ctrlsService.whenReady(p => {\n            switch (this.pinned) {\n                case Constants.PINNED_LEFT:\n                    this.eSecondaryContainers = [\n                        [p.gridBodyCtrl.getBodyViewportElement(), p.leftRowContainerCtrl.getContainerElement()],\n                        [p.bottomLeftRowContainerCtrl.getContainerElement()],\n                        [p.topLeftRowContainerCtrl.getContainerElement()]\n                    ];\n                    break;\n                case Constants.PINNED_RIGHT:\n                    this.eSecondaryContainers = [\n                        [p.gridBodyCtrl.getBodyViewportElement(), p.rightRowContainerCtrl.getContainerElement()],\n                        [p.bottomRightRowContainerCtrl.getContainerElement()],\n                        [p.topRightRowContainerCtrl.getContainerElement()]\n                    ];\n                    break;\n                default:\n                    this.eSecondaryContainers = [\n                        [p.gridBodyCtrl.getBodyViewportElement(), p.centerRowContainerCtrl.getViewportElement()],\n                        [p.bottomCenterRowContainerCtrl.getViewportElement()],\n                        [p.topCenterRowContainerCtrl.getViewportElement()]\n                    ];\n                    break;\n            }\n        });\n    }\n\n    public isInterestedIn(type: DragSourceType): boolean {\n        return type === DragSourceType.HeaderCell ||\n            (type === DragSourceType.ToolPanel && this.gridOptionsWrapper.isAllowDragFromColumnsToolPanel());\n    }\n\n    public getSecondaryContainers(): HTMLElement[][] {\n        return this.eSecondaryContainers;\n    }\n\n    public getContainer(): HTMLElement {\n        return this.eContainer;\n    }\n\n    @PostConstruct\n    private init(): void {\n        this.moveColumnFeature = this.createManagedBean(new MoveColumnFeature(this.pinned, this.eContainer));\n        this.bodyDropPivotTarget = this.createManagedBean(new BodyDropPivotTarget(this.pinned));\n\n        this.dragAndDropService.addDropTarget(this);\n    }\n\n    public getIconName(): string | null {\n        return this.currentDropListener.getIconName();\n    }\n\n    // we want to use the bodyPivotTarget if the user is dragging columns in from the toolPanel\n    // and we are in pivot mode, as it has to logic to set pivot/value/group on the columns when\n    // dropped into the grid's body.\n    private isDropColumnInPivotMode(draggingEvent: DraggingEvent): boolean {\n        // in pivot mode, then if moving a column (ie didn't come from toolpanel) then it's\n        // a standard column move, however if it came from the toolpanel, then we are introducing\n        // dimensions or values to the grid\n        return this.columnModel.isPivotMode() && draggingEvent.dragSource.type === DragSourceType.ToolPanel;\n    }\n\n    public onDragEnter(draggingEvent: DraggingEvent): void {\n        // we pick the drop listener depending on whether we are in pivot mode are not. if we are\n        // in pivot mode, then dropping cols changes the row group, pivot, value stats. otherwise\n        // we change visibility state and position.\n        this.currentDropListener = this.isDropColumnInPivotMode(draggingEvent) ? this.bodyDropPivotTarget : this.moveColumnFeature;\n        this.currentDropListener.onDragEnter(draggingEvent);\n    }\n\n    public onDragLeave(params: DraggingEvent): void {\n        this.currentDropListener.onDragLeave(params);\n    }\n\n    public onDragging(params: DraggingEvent): void {\n        this.currentDropListener.onDragging(params);\n    }\n\n    public onDragStop(params: DraggingEvent): void {\n        this.currentDropListener.onDragStop(params);\n    }\n\n}\n","import { AbstractColDef, HeaderClassParams, ToolPanelClassParams } from \"../../entities/colDef\";\nimport { GridOptionsWrapper } from \"../../gridOptionsWrapper\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { Column } from \"../../entities/column\";\nimport { ProvidedColumnGroup } from \"../../entities/providedColumnGroup\";\nimport { missing } from \"../../utils/generic\";\n\nexport class CssClassApplier {\n\n    public static getHeaderClassesFromColDef(\n        abstractColDef: AbstractColDef | null,\n        gridOptionsWrapper: GridOptionsWrapper,\n        column: Column | null,\n        columnGroup: ColumnGroup | null\n    ): string[] {\n        if (missing(abstractColDef)) { return []; }\n\n        return this.getColumnClassesFromCollDef(\n            abstractColDef.headerClass,\n            abstractColDef,\n            gridOptionsWrapper,\n            column,\n            columnGroup\n        );\n    }\n\n    public static getToolPanelClassesFromColDef(\n        abstractColDef: AbstractColDef | null,\n        gridOptionsWrapper: GridOptionsWrapper,\n        column: Column | null,\n        columnGroup: ProvidedColumnGroup | null\n    ): string[] {\n        if (missing(abstractColDef)) { return []; }\n\n        return this.getColumnClassesFromCollDef(\n            abstractColDef.toolPanelClass,\n            abstractColDef,\n            gridOptionsWrapper,\n            column,\n            columnGroup\n        );\n    }\n\n    private static getClassParams<T extends HeaderClassParams | ToolPanelClassParams>(abstractColDef: AbstractColDef,\n        gridOptionsWrapper: GridOptionsWrapper,\n        column: Column | null,\n        columnGroup: T['columnGroup']): T {\n        return {\n            // bad naming, as colDef here can be a group or a column,\n            // however most people won't appreciate the difference,\n            // so keeping it as colDef to avoid confusion.\n            colDef: abstractColDef,\n            column: column,\n            columnGroup: columnGroup,\n            api: gridOptionsWrapper.getApi()!,\n            columnApi: gridOptionsWrapper.getColumnApi()!,\n            context: gridOptionsWrapper.getContext()\n        } as T;\n    }\n\n    private static getColumnClassesFromCollDef<T extends HeaderClassParams | ToolPanelClassParams>(\n        classesOrFunc: string | string[] | ((params: T) => string | string[] | undefined) | null | undefined,\n        abstractColDef: AbstractColDef,\n        gridOptionsWrapper: GridOptionsWrapper,\n        column: Column | null,\n        columnGroup: ColumnGroup | ProvidedColumnGroup | null\n    ): string[] {\n        if (missing(classesOrFunc)) { return []; }\n\n        let classToUse: string | string[] | undefined;\n\n        if (typeof classesOrFunc === 'function') {\n            const params: T = this.getClassParams(abstractColDef, gridOptionsWrapper, column, columnGroup);\n            classToUse = classesOrFunc(params);\n        } else {\n            classToUse = classesOrFunc;\n        }\n\n        if (typeof classToUse === 'string') { return [classToUse]; }\n        if (Array.isArray(classToUse)) { return [...classToUse]; }\n\n        return [];\n    }\n}","import { UserCompDetails } from \"../../../components/framework/userComponentFactory\";\nimport { PostConstruct, PreDestroy } from \"../../../context/context\";\nimport { Column } from \"../../../entities/column\";\nimport { removeAriaSort, setAriaDescription, setAriaSort } from \"../../../utils/aria\";\nimport { RefSelector } from \"../../../widgets/componentAnnotations\";\nimport { AbstractHeaderCellComp } from \"../abstractCell/abstractHeaderCellComp\";\nimport { HeaderCellCtrl, IHeaderCellComp } from \"./headerCellCtrl\";\nimport { IHeaderComp } from \"./headerComp\";\n\nexport class HeaderCellComp extends AbstractHeaderCellComp<HeaderCellCtrl> {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-header-cell\" role=\"columnheader\" tabindex=\"-1\">\n            <div ref=\"eResize\" class=\"ag-header-cell-resize\" role=\"presentation\"></div>\n        </div>`;\n\n    @RefSelector('eResize') private eResize: HTMLElement;\n\n    protected readonly column: Column;\n    protected readonly pinned: string | null;\n\n    private headerComp: IHeaderComp | undefined;\n    private headerCompGui: HTMLElement | undefined;\n    private headerCompVersion = 0;\n\n    constructor(ctrl: HeaderCellCtrl) {\n        super(HeaderCellComp.TEMPLATE, ctrl);\n        this.column = ctrl.getColumnGroupChild() as Column;\n        this.pinned = ctrl.getPinned();\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n\n        const eGui = this.getGui();\n\n        const setAttribute = (name: string, value: string | null | undefined, element?: HTMLElement) => {\n            const actualElement = element ? element : eGui;\n            if (value != null && value != '') {\n                actualElement.setAttribute(name, value);\n            } else {\n                actualElement.removeAttribute(name);\n            }\n        };\n\n        const compProxy: IHeaderCellComp = {\n            setWidth: width => eGui.style.width = width,\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\n            setColId: id => setAttribute('col-id', id),\n            setTitle: title => setAttribute('title', title),\n            setAriaDescription: label => setAriaDescription(eGui, label),\n            setAriaSort: sort => sort ? setAriaSort(eGui, sort) : removeAriaSort(eGui),\n            setUserCompDetails: compDetails => this.setUserCompDetails(compDetails),\n            getUserCompInstance: () => this.headerComp\n        };\n\n        this.ctrl.setComp(compProxy, this.getGui(), this.eResize);\n\n        const selectAllGui = this.ctrl.getSelectAllGui();\n        this.eResize.insertAdjacentElement('afterend', selectAllGui);\n    }\n\n    @PreDestroy\n    private destroyHeaderComp(): void {\n        if (this.headerComp) {\n            this.getGui().removeChild(this.headerCompGui!);\n            this.headerComp = this.destroyBean(this.headerComp);\n            this.headerCompGui = undefined;\n        }\n    }\n\n    private setUserCompDetails(compDetails: UserCompDetails): void {\n        this.headerCompVersion++;\n\n        const versionCopy = this.headerCompVersion;\n\n        compDetails.newAgStackInstance()!.then(comp => this.afterCompCreated(versionCopy, comp));\n    }\n\n    private afterCompCreated(version: number, headerComp: IHeaderComp): void {\n\n        if (version != this.headerCompVersion || !this.isAlive()) {\n            this.destroyBean(headerComp);\n            return;\n        }\n\n        this.destroyHeaderComp();\n\n        this.headerComp = headerComp;\n        this.headerCompGui = headerComp.getGui();\n        this.getGui().appendChild(this.headerCompGui);\n        this.ctrl.setDragSource(this.headerCompGui!);\n    }\n}\n","import { UserCompDetails, UserComponentFactory } from \"../../../components/framework/userComponentFactory\";\nimport { Autowired, PostConstruct } from \"../../../context/context\";\nimport { RefSelector } from \"../../../widgets/componentAnnotations\";\nimport { AbstractHeaderCellComp } from \"../abstractCell/abstractHeaderCellComp\";\nimport { HeaderGroupCellCtrl, IHeaderGroupCellComp } from \"./headerGroupCellCtrl\";\nimport { IHeaderGroupComp } from \"./headerGroupComp\";\n\nexport class HeaderGroupCellComp extends AbstractHeaderCellComp<HeaderGroupCellCtrl> {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-header-group-cell\" role=\"columnheader\" tabindex=\"-1\">\n            <div ref=\"eResize\" class=\"ag-header-cell-resize\" role=\"presentation\"></div>\n        </div>`;\n\n    @Autowired('userComponentFactory') private userComponentFactory: UserComponentFactory;\n\n    @RefSelector('eResize') private eResize: HTMLElement;\n\n    constructor(ctrl: HeaderGroupCellCtrl) {\n        super(HeaderGroupCellComp.TEMPLATE, ctrl);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n\n        const eGui = this.getGui();\n\n        const setAttribute = (key: string, value: string | undefined) =>\n                value != undefined ? eGui.setAttribute(key, value) : eGui.removeAttribute(key);\n\n        const compProxy: IHeaderGroupCellComp = {\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\n            addOrRemoveResizableCssClass: (cssClassName, on) => this.eResize.classList.toggle(cssClassName, on),\n            setWidth: width => eGui.style.width = width,\n            setColId: id => eGui.setAttribute(\"col-id\", id),\n            setAriaExpanded: expanded => setAttribute('aria-expanded', expanded),\n            setTitle: title => setAttribute(\"title\", title),\n            setUserCompDetails: details => this.setUserCompDetails(details)\n        };\n\n        this.ctrl.setComp(compProxy, eGui, this.eResize);\n    }\n\n    private setUserCompDetails(details: UserCompDetails): void {\n        details.newAgStackInstance()!.then(comp => this.afterHeaderCompCreated(comp));\n    }\n\n    private afterHeaderCompCreated(headerGroupComp: IHeaderGroupComp): void {\n\n        const destroyFunc = () => this.destroyBean(headerGroupComp);\n\n        if (!this.isAlive()) {\n            destroyFunc();\n            return;\n        }\n\n        this.getGui().appendChild(headerGroupComp.getGui());\n        this.addDestroyFunc(destroyFunc);\n\n        this.ctrl.setDragSource(headerGroupComp.getGui());\n    }\n\n}\n","import { IRowModel } from './iRowModel';\nimport { RowNodeTransaction } from './rowNodeTransaction';\nimport { RowDataTransaction } from './rowDataTransaction';\nimport { RowHighlightPosition, RowNode } from '../entities/rowNode';\nimport { ChangedPath } from '../utils/changedPath';\n\nexport enum ClientSideRowModelSteps {\n    EVERYTHING = 'group',\n    FILTER = 'filter',\n    SORT = 'sort',\n    MAP = 'map',\n    AGGREGATE = 'aggregate',\n    FILTER_AGGREGATES = 'filter_aggregates',\n    PIVOT = 'pivot',\n    NOTHING = 'nothing'\n}\n\nexport interface IClientSideRowModel extends IRowModel {\n    onRowGroupOpened(): void;\n    updateRowData(rowDataTran: RowDataTransaction, rowNodeOrder?: { [id: string]: number; } | null): RowNodeTransaction | null;\n    setRowData(rowData: any[]): void;\n    refreshModel(params: RefreshModelParams): void;\n    expandOrCollapseAll(expand: boolean): void;\n    forEachLeafNode(callback: (node: RowNode, index: number) => void): void;\n    forEachNode(callback: (node: RowNode, index: number) => void): void;\n    forEachNodeAfterFilter(callback: (node: RowNode, index: number) => void): void;\n    forEachNodeAfterFilterAndSort(callback: (node: RowNode, index: number) => void): void;\n    resetRowHeights(): void;\n    onRowHeightChanged(): void;\n    batchUpdateRowData(rowDataTransaction: RowDataTransaction, callback?: (res: RowNodeTransaction) => void): void;\n    flushAsyncTransactions(): void;\n    getRootNode(): RowNode;\n    doAggregate(changedPath?: ChangedPath): void;\n    getTopLevelNodes(): RowNode[] | null;\n    forEachPivotNode(callback: (node: RowNode, index: number) => void): void;\n    ensureRowsAtPixel(rowNode: RowNode[], pixel: number, increment: number): boolean;\n    highlightRowAtPixel(rowNode: RowNode | null, pixel?: number): void;\n    getHighlightPosition(pixel: number, rowNode?: RowNode): RowHighlightPosition;\n    getLastHighlightedRowNode(): RowNode | null;\n}\n\nexport interface RefreshModelParams {\n    // how much of the pipeline to execute\n    step: ClientSideRowModelSteps;\n    // what state to reset the groups back to after the refresh\n    groupState?: any;\n    // if NOT new data, then this flag tells grid to check if rows already\n    // exist for the nodes (matching by node id) and reuses the row if it does.\n    keepRenderedRows?: boolean;\n    // if true, rows that are kept are animated to the new position\n    animate?: boolean;\n    // if true, then rows we are editing will be kept\n    keepEditingRows?: boolean;\n    // if doing delta updates, this has the changes that were done\n    rowNodeTransactions?: RowNodeTransaction[];\n    // if doing delta updates, this has the order of the nodes\n    rowNodeOrder?: { [id: string]: number };\n    // true user called setRowData() (or a new page in pagination). the grid scrolls\n    // back to the top when this is true.\n    newData?: boolean;\n    // true if this update is due to columns changing, ie no rows were changed\n    afterColumnsChanged?: boolean;\n}\n","import { BeanStub } from \"../../../context/beanStub\";\nimport { Autowired } from \"../../../context/context\";\nimport { IHeaderColumn } from \"../../../entities/iHeaderColumn\";\nimport { FocusService } from \"../../../focusService\";\nimport { isUserSuppressingHeaderKeyboardEvent } from \"../../../utils/keyboard\";\nimport { HeaderRowCtrl } from \"../../row/headerRowCtrl\";\nimport { IHeaderCellComp } from \"../column/headerCellCtrl\";\n\nlet instanceIdSequence = 0;\n\nexport interface IAbstractHeaderCellComp {\n}\n\nexport class AbstractHeaderCellCtrl extends BeanStub {\n\n    public static DOM_DATA_KEY_HEADER_CTRL = 'headerCtrl';\n\n    @Autowired('focusService') protected focusService: FocusService;\n\n    private instanceId: string;\n\n    private columnGroupChild: IHeaderColumn;\n\n    private parentRowCtrl: HeaderRowCtrl;\n\n    protected eGui: HTMLElement;\n\n    public lastFocusEvent: KeyboardEvent | null = null;\n\n    constructor(columnGroupChild: IHeaderColumn, parentRowCtrl: HeaderRowCtrl) {\n        super();\n\n        this.columnGroupChild = columnGroupChild;\n        this.parentRowCtrl = parentRowCtrl;\n\n        // unique id to this instance, including the column ID to help with debugging in React as it's used in 'key'\n        this.instanceId = columnGroupChild.getUniqueId() + '-' + instanceIdSequence++;\n    }\n\n    protected shouldStopEventPropagation(e: KeyboardEvent): boolean {\n        const { headerRowIndex, column } = this.focusService.getFocusedHeader()!;\n\n        return isUserSuppressingHeaderKeyboardEvent(\n            this.gridOptionsWrapper,\n            e,\n            headerRowIndex,\n            column\n        );\n    }\n\n    protected setGui(eGui: HTMLElement): void {\n        this.eGui = eGui;\n        this.addDomData();\n    }\n\n    private addDomData(): void {\n        const key = AbstractHeaderCellCtrl.DOM_DATA_KEY_HEADER_CTRL;\n        this.gridOptionsWrapper.setDomData(this.eGui, key, this);\n        this.addDestroyFunc(() => this.gridOptionsWrapper.setDomData(this.eGui, key, null));\n    }\n\n    public getGui(): HTMLElement {\n        return this.eGui;\n    }\n\n    public focus(event?: KeyboardEvent): boolean {\n        if (!this.eGui) { return false; }\n\n        this.lastFocusEvent = event || null;\n        this.eGui.focus();\n        return true;\n    }\n\n    public getRowIndex(): number {\n        return this.parentRowCtrl.getRowIndex();\n    }\n\n    public getParentRowCtrl(): HeaderRowCtrl {\n        return this.parentRowCtrl;\n    }\n\n    public getPinned(): string | null {\n        return this.parentRowCtrl.getPinned();\n    }\n\n    public getInstanceId(): string {\n        return this.instanceId;\n    }\n\n    public getColumnGroupChild(): IHeaderColumn {\n        return this.columnGroupChild;\n    }\n}\n","import { AlignedGridsService } from \"./alignedGridsService\";\nimport { ColumnApi } from \"./columns/columnApi\";\nimport { ColumnModel } from \"./columns/columnModel\";\nimport { FrameworkComponentWrapper } from \"./components/framework/frameworkComponentWrapper\";\nimport { Constants } from \"./constants/constants\";\nimport { Autowired, Bean, Context, Optional, PostConstruct, PreDestroy } from \"./context/context\";\nimport { CtrlsService } from \"./ctrlsService\";\nimport { DragAndDropService } from \"./dragAndDrop/dragAndDropService\";\nimport { CellPosition } from \"./entities/cellPosition\";\nimport { ColDef, ColGroupDef, IAggFunc } from \"./entities/colDef\";\nimport { Column } from \"./entities/column\";\nimport {\n    ChartRef,\n    GetChartToolbarItems,\n    GetContextMenuItems,\n    GetMainMenuItems,\n    GetRowIdFunc,\n    GetRowNodeIdFunc,\n    GetServerSideGroupKey,\n    IsApplyServerSideTransaction,\n    IsRowMaster,\n    IsRowSelectable,\n    IsServerSideGroup,\n    RowClassParams,\n    ServerSideStoreParams,\n} from \"./entities/gridOptions\";\nimport {\n    GetGroupRowAggParams,\n    GetServerSideStoreParamsParams,\n    InitialGroupOrderComparatorParams,\n    IsServerSideGroupOpenByDefaultParams,\n    NavigateToNextCellParams,\n    NavigateToNextHeaderParams,\n    PaginationNumberFormatterParams,\n    PostProcessPopupParams,\n    PostSortRowsParams,\n    ProcessRowParams,\n    RowHeightParams,\n    TabToNextCellParams,\n    TabToNextHeaderParams\n} from \"./entities/iCallbackParams\";\nimport { RowNode } from \"./entities/rowNode\";\nimport { SideBarDef, SideBarDefParser } from \"./entities/sideBar\";\nimport { AgEvent, ColumnEventType } from \"./events\";\nimport { EventService } from \"./eventService\";\nimport { FilterManager } from \"./filter/filterManager\";\nimport { FocusService } from \"./focusService\";\nimport { GridBodyCtrl } from \"./gridBodyComp/gridBodyCtrl\";\nimport { NavigationService } from \"./gridBodyComp/navigationService\";\nimport { RowDropZoneEvents, RowDropZoneParams } from \"./gridBodyComp/rowDragFeature\";\nimport { GridOptionsWrapper } from \"./gridOptionsWrapper\";\nimport { HeaderPosition } from \"./headerRendering/common/headerPosition\";\nimport { CsvExportParams, ProcessCellForExportParams } from \"./interfaces/exportParams\";\nimport { AgChartThemeOverrides, AgChartThemePalette } from \"./interfaces/iAgChartOptions\";\nimport { IAggFuncService } from \"./interfaces/iAggFuncService\";\nimport { ICellEditor } from \"./interfaces/iCellEditor\";\nimport { ChartType, CrossFilterChartType, SeriesChartType } from \"./interfaces/iChartOptions\";\nimport { ChartModel, GetChartImageDataUrlParams, IChartService } from \"./interfaces/IChartService\";\nimport { ClientSideRowModelSteps, IClientSideRowModel, RefreshModelParams } from \"./interfaces/iClientSideRowModel\";\nimport { IClipboardCopyParams, IClipboardCopyRowsParams, IClipboardService } from \"./interfaces/iClipboardService\";\nimport { IContextMenuFactory } from \"./interfaces/iContextMenuFactory\";\nimport { ICsvCreator } from \"./interfaces/iCsvCreator\";\nimport { IDatasource } from \"./interfaces/iDatasource\";\nimport {\n    ExcelExportMultipleSheetParams,\n    ExcelExportParams,\n    ExcelFactoryMode,\n    IExcelCreator\n} from \"./interfaces/iExcelCreator\";\nimport { IFilter, IFilterComp } from \"./interfaces/iFilter\";\nimport { IImmutableService } from \"./interfaces/iImmutableService\";\nimport { IInfiniteRowModel } from \"./interfaces/iInfiniteRowModel\";\nimport { IMenuFactory } from \"./interfaces/iMenuFactory\";\nimport { CellRange, CellRangeParams, IRangeService } from \"./interfaces/IRangeService\";\nimport { IRowModel } from \"./interfaces/iRowModel\";\nimport { IServerSideDatasource } from \"./interfaces/iServerSideDatasource\";\nimport {\n    IServerSideRowModel,\n    IServerSideTransactionManager,\n    RefreshStoreParams\n} from \"./interfaces/iServerSideRowModel\";\nimport { ServerSideStoreState } from \"./interfaces/IServerSideStore\";\nimport { ISideBar } from \"./interfaces/iSideBar\";\nimport { IStatusBarService } from \"./interfaces/iStatusBarService\";\nimport { IStatusPanel } from \"./interfaces/iStatusPanel\";\nimport { IToolPanel } from \"./interfaces/iToolPanel\";\nimport { IViewportDatasource } from \"./interfaces/iViewportDatasource\";\nimport { RowDataTransaction } from \"./interfaces/rowDataTransaction\";\nimport { RowNodeTransaction } from \"./interfaces/rowNodeTransaction\";\nimport { ServerSideTransaction, ServerSideTransactionResult } from \"./interfaces/serverSideTransaction\";\nimport { AnimationFrameService } from \"./misc/animationFrameService\";\nimport { ModuleNames } from \"./modules/moduleNames\";\nimport { ModuleRegistry } from \"./modules/moduleRegistry\";\nimport { PaginationProxy } from \"./pagination/paginationProxy\";\nimport { PinnedRowModel } from \"./pinnedRowModel/pinnedRowModel\";\nimport { ICellRenderer } from \"./rendering/cellRenderers/iCellRenderer\";\nimport { OverlayWrapperComponent } from \"./rendering/overlays/overlayWrapperComponent\";\nimport { RowRenderer } from \"./rendering/rowRenderer\";\nimport { RowNodeBlockLoader } from \"./rowNodeCache/rowNodeBlockLoader\";\nimport { SelectionService } from \"./selectionService\";\nimport { SortController } from \"./sortController\";\nimport { UndoRedoService } from \"./undoRedo/undoRedoService\";\nimport { doOnce } from \"./utils/function\";\nimport { exists, missing } from \"./utils/generic\";\nimport { iterateObject, removeAllReferences } from \"./utils/object\";\nimport { camelCaseToHumanText } from \"./utils/string\";\nimport { ValueCache } from \"./valueService/valueCache\";\nimport { ValueService } from \"./valueService/valueService\";\n\nexport interface StartEditingCellParams {\n    /** The row index of the row to start editing */\n    rowIndex: number;\n    /** The column key of the row to start editing */\n    colKey: string | Column;\n    /** Set to `'top'` or `'bottom'` to start editing a pinned row */\n    rowPinned?: string;\n    /** The key to pass to the cell editor */\n    key?: string;\n    /** The charPress to pass to the cell editor */\n    charPress?: string;\n}\n\nexport interface GetCellsParams {\n    /** Optional list of row nodes to restrict operation to */\n    rowNodes?: RowNode[];\n    /** Optional list of columns to restrict operation to */\n    columns?: (string | Column)[];\n}\n\nexport interface RefreshCellsParams extends GetCellsParams {\n    /** Skip change detection, refresh everything. */\n    force?: boolean;\n    /** Skip cell flashing, if cell flashing is enabled. */\n    suppressFlash?: boolean;\n}\n\nexport interface FlashCellsParams extends GetCellsParams {\n    flashDelay?: number;\n    fadeDelay?: number;\n}\n\nexport interface GetCellRendererInstancesParams extends GetCellsParams { }\n\nexport interface GetCellEditorInstancesParams extends GetCellsParams { }\n\nexport interface RedrawRowsParams {\n    /** Row nodes to redraw */\n    rowNodes?: RowNode[];\n}\n\ninterface CreateChartParams {\n    /** The type of chart to create. */\n    chartType: ChartType;\n    /** The default theme to use, either a default option or your own custom theme. */\n    chartThemeName?: string;\n    /** Provide to display the chart outside of the grid in your own container. */\n    chartContainer?: HTMLElement;\n    /** Allows specific chart options in the current theme to be overridden. */\n    chartThemeOverrides?: AgChartThemeOverrides;\n    /** When enabled the chart will be unlinked from the grid after creation, any updates to the data will not be reflected in the chart. */\n    unlinkChart?: boolean;\n}\n\nexport type ChartParamsCellRange = Partial<Omit<CellRangeParams, 'rowStartPinned' | 'rowEndPinned'>>;\nexport interface CreateRangeChartParams extends CreateChartParams {\n    /** The range of cells to be charted. If no rows / rowIndexes are specified all rows will be included. */\n    cellRange: ChartParamsCellRange;\n    /** Suppress highlighting the selected range in the grid. */\n    suppressChartRanges?: boolean;\n    /** The aggregation function that should be applied to all series data. */\n    aggFunc?: string | IAggFunc;\n    /** The series chart type configurations used in combination charts */\n    seriesChartTypes?: SeriesChartType[];\n}\nexport interface CreateCrossFilterChartParams extends CreateChartParams {\n    /** The type of cross-filter chart to create. */\n    chartType: CrossFilterChartType;\n    /** The range of cells to be charted. If no rows / rowIndexes are specified all rows will be included. */\n    cellRange: ChartParamsCellRange;\n    /** Suppress highlighting the selected range in the grid. */\n    suppressChartRanges?: boolean;\n    /** The aggregation function that should be applied to all series data. */\n    aggFunc?: string | IAggFunc;\n}\n\nexport interface CreatePivotChartParams extends CreateChartParams { }\n\nexport interface DetailGridInfo {\n    /**\n     * Id of the detail grid, the format is `detail_<ROW_ID>`,\n     * where ROW_ID is the `id` of the parent row.\n     */\n    id: string;\n    /** Grid api of the detail grid. */\n    api?: GridApi;\n    /** Column api of the detail grid. */\n    columnApi?: ColumnApi;\n}\n\nexport function unwrapUserComp<T>(comp: T): T {\n    const compAsAny = comp as any;\n    const isProxy = compAsAny != null && compAsAny.getFrameworkComponentInstance != null;\n    return isProxy ? compAsAny.getFrameworkComponentInstance() : comp;\n}\n\n@Bean('gridApi')\nexport class GridApi {\n\n    @Optional('immutableService') private immutableService: IImmutableService;\n    @Optional('csvCreator') private csvCreator: ICsvCreator;\n    @Optional('excelCreator') private excelCreator: IExcelCreator;\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n    @Autowired('navigationService') private navigationService: NavigationService;\n    @Autowired('filterManager') private filterManager: FilterManager;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('selectionService') private selectionService: SelectionService;\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('valueService') private valueService: ValueService;\n    @Autowired('alignedGridsService') private alignedGridsService: AlignedGridsService;\n    @Autowired('eventService') private eventService: EventService;\n    @Autowired('pinnedRowModel') private pinnedRowModel: PinnedRowModel;\n    @Autowired('context') private context: Context;\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('sortController') private sortController: SortController;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n    @Optional('rangeService') private rangeService: IRangeService;\n    @Optional('clipboardService') private clipboardService: IClipboardService;\n    @Optional('aggFuncService') private aggFuncService: IAggFuncService;\n    @Autowired('menuFactory') private menuFactory: IMenuFactory;\n    @Optional('contextMenuFactory') private contextMenuFactory: IContextMenuFactory;\n    @Autowired('valueCache') private valueCache: ValueCache;\n    @Autowired('animationFrameService') private animationFrameService: AnimationFrameService;\n    @Optional('statusBarService') private statusBarService: IStatusBarService;\n    @Optional('chartService') private chartService: IChartService;\n    @Optional('undoRedoService') private undoRedoService: UndoRedoService;\n    @Optional('rowNodeBlockLoader') private rowNodeBlockLoader: RowNodeBlockLoader;\n    @Optional('ssrmTransactionManager') private serverSideTransactionManager: IServerSideTransactionManager;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Optional('frameworkComponentWrapper') private frameworkComponentWrapper: FrameworkComponentWrapper;\n\n    private overlayWrapperComp: OverlayWrapperComponent;\n\n    private gridBodyCtrl: GridBodyCtrl;\n    private sideBarComp: ISideBar;\n\n    private clientSideRowModel: IClientSideRowModel;\n    private infiniteRowModel: IInfiniteRowModel;\n\n    private serverSideRowModel: IServerSideRowModel;\n\n    private detailGridInfoMap: { [id: string]: DetailGridInfo | undefined; } = {};\n\n    private destroyCalled = false;\n\n    public registerOverlayWrapperComp(overlayWrapperComp: OverlayWrapperComponent): void {\n        this.overlayWrapperComp = overlayWrapperComp;\n    }\n\n    public registerSideBarComp(sideBarComp: ISideBar): void {\n        this.sideBarComp = sideBarComp;\n    }\n\n    @PostConstruct\n    private init(): void {\n        switch (this.rowModel.getType()) {\n            case Constants.ROW_MODEL_TYPE_CLIENT_SIDE:\n                this.clientSideRowModel = this.rowModel as IClientSideRowModel;\n                break;\n            case Constants.ROW_MODEL_TYPE_INFINITE:\n                this.infiniteRowModel = this.rowModel as IInfiniteRowModel;\n                break;\n            case Constants.ROW_MODEL_TYPE_SERVER_SIDE:\n                this.serverSideRowModel = this.rowModel as IServerSideRowModel;\n                break;\n        }\n\n        this.ctrlsService.whenReady(() => {\n            this.gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n        });\n    }\n\n    /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */\n    public __getAlignedGridService(): AlignedGridsService {\n        return this.alignedGridsService;\n    }\n\n    /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */\n    public __getContext(): Context {\n        return this.context;\n    }\n\n    /** Register a detail grid with the master grid when it is created. */\n    public addDetailGridInfo(id: string, gridInfo: DetailGridInfo): void {\n        this.detailGridInfoMap[id] = gridInfo;\n    }\n\n    /** Unregister a detail grid from the master grid when it is destroyed. */\n    public removeDetailGridInfo(id: string): void {\n        this.detailGridInfoMap[id] = undefined;\n    }\n\n    /** Returns the `DetailGridInfo` corresponding to the supplied `detailGridId`. */\n    public getDetailGridInfo(id: string): DetailGridInfo | undefined {\n        return this.detailGridInfoMap[id];\n    }\n\n    /** Iterates through each `DetailGridInfo` in the grid and calls the supplied callback on each. */\n    public forEachDetailGridInfo(callback: (gridInfo: DetailGridInfo, index: number) => void) {\n        let index = 0;\n        iterateObject(this.detailGridInfoMap, (id: string, gridInfo: DetailGridInfo) => {\n            // check for undefined, as old references will still be lying around\n            if (exists(gridInfo)) {\n                callback(gridInfo, index);\n                index++;\n            }\n        });\n    }\n\n    /** Similar to `exportDataAsCsv`, except returns the result as a string rather than download it. */\n    public getDataAsCsv(params?: CsvExportParams): string | undefined {\n        if (ModuleRegistry.assertRegistered(ModuleNames.CsvExportModule, 'api.getDataAsCsv')) {\n            return this.csvCreator.getDataAsCsv(params);\n        }\n    }\n\n    /** Downloads a CSV export of the grid's data. */\n    public exportDataAsCsv(params?: CsvExportParams): void {\n        if (ModuleRegistry.assertRegistered(ModuleNames.CsvExportModule, 'api.exportDataAsCSv')) {\n            this.csvCreator.exportDataAsCsv(params);\n        }\n    }\n\n    private getExcelExportMode(params?: ExcelExportParams): 'xlsx' | 'xml' {\n        const baseParams = this.gridOptionsWrapper.getDefaultExportParams('excel');\n        const mergedParams = Object.assign({ exportMode: 'xlsx' }, baseParams, params);\n        return mergedParams.exportMode;\n    }\n\n    /** Similar to `exportDataAsExcel`, except instead of downloading a file, it will return a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) to be processed by the user. */\n    public getDataAsExcel(params?: ExcelExportParams): string | Blob | undefined {\n        if (!ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, 'api.getDataAsExcel')) { return; }\n        const exportMode = this.getExcelExportMode(params);\n        if (this.excelCreator.getFactoryMode(exportMode) === ExcelFactoryMode.MULTI_SHEET) {\n            console.warn('AG Grid: The Excel Exporter is currently on Multi Sheet mode. End that operation by calling `api.getMultipleSheetAsExcel()` or `api.exportMultipleSheetsAsExcel()`');\n            return;\n        }\n        return this.excelCreator.getDataAsExcel(params);\n    }\n\n    /** Downloads an Excel export of the grid's data. */\n    public exportDataAsExcel(params?: ExcelExportParams): void {\n        if (!ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, 'api.exportDataAsExcel')) { return; }\n        const exportMode = this.getExcelExportMode(params);\n        if (this.excelCreator.getFactoryMode(exportMode) === ExcelFactoryMode.MULTI_SHEET) {\n            console.warn('AG Grid: The Excel Exporter is currently on Multi Sheet mode. End that operation by calling `api.getMultipleSheetAsExcel()` or `api.exportMultipleSheetsAsExcel()`');\n            return;\n        }\n        this.excelCreator.exportDataAsExcel(params);\n    }\n\n    /** This is method to be used to get the grid's data as a sheet, that will later be exported either by `getMultipleSheetsAsExcel()` or `exportMultipleSheetsAsExcel()`. */\n    public getSheetDataForExcel(params?: ExcelExportParams): string | undefined {\n        if (!ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, 'api.getSheetDataForExcel')) { return; }\n        const exportMode = this.getExcelExportMode(params);\n        this.excelCreator.setFactoryMode(ExcelFactoryMode.MULTI_SHEET, exportMode);\n\n        return this.excelCreator.getSheetDataForExcel(params);\n    }\n\n    /** Similar to `exportMultipleSheetsAsExcel`, except instead of downloading a file, it will return a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) to be processed by the user. */\n    public getMultipleSheetsAsExcel(params: ExcelExportMultipleSheetParams): Blob | undefined {\n        if (ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, 'api.getMultipleSheetsAsExcel')) {\n            return this.excelCreator.getMultipleSheetsAsExcel(params);\n        }\n    }\n\n    /** Downloads an Excel export of multiple sheets in one file. */\n    public exportMultipleSheetsAsExcel(params: ExcelExportMultipleSheetParams): void {\n        if (ModuleRegistry.assertRegistered(ModuleNames.ExcelExportModule, 'api.exportMultipleSheetsAsExcel')) {\n            return this.excelCreator.exportMultipleSheetsAsExcel(params);\n        }\n    }\n\n    /** @deprecated */\n    public setEnterpriseDatasource(datasource: IServerSideDatasource) {\n        console.warn(`AG Grid: since version 18.x, api.setEnterpriseDatasource() should be replaced with api.setServerSideDatasource()`);\n        this.setServerSideDatasource(datasource);\n    }\n\n    /**\n     * Sets an ARIA property in the grid panel (element with `role=\\\"grid\\\"`), and removes an ARIA property when the value is null.\n     *\n     * Example: `api.setGridAriaProperty('label', 'my grid')` will set `aria-label=\\\"my grid\\\"`.\n     *\n     * `api.setGridAriaProperty('label', null)` will remove the `aria-label` attribute from the grid element.\n     */\n    public setGridAriaProperty(property: string, value: string | null): void {\n        if (!property) { return; }\n        const eGrid = this.ctrlsService.getGridBodyCtrl().getGui();\n        const ariaProperty = `aria-${property}`;\n\n        if (value === null) {\n            eGrid.removeAttribute(ariaProperty);\n        } else {\n            eGrid.setAttribute(ariaProperty, value);\n        }\n\n    }\n\n    /** Set new datasource for Server-Side Row Model. */\n    public setServerSideDatasource(datasource: IServerSideDatasource) {\n        if (this.serverSideRowModel) {\n            // should really have an IEnterpriseRowModel interface, so we are not casting to any\n            this.serverSideRowModel.setDatasource(datasource);\n        } else {\n            console.warn(`AG Grid: you can only use an enterprise datasource when gridOptions.rowModelType is '${Constants.ROW_MODEL_TYPE_SERVER_SIDE}'`);\n        }\n    }\n\n    /** Set new datasource for Infinite Row Model. */\n    public setDatasource(datasource: IDatasource) {\n        if (this.gridOptionsWrapper.isRowModelInfinite()) {\n            (this.rowModel as IInfiniteRowModel).setDatasource(datasource);\n        } else {\n            console.warn(`AG Grid: you can only use a datasource when gridOptions.rowModelType is '${Constants.ROW_MODEL_TYPE_INFINITE}'`);\n        }\n    }\n\n    /** Set new datasource for Viewport Row Model. */\n    public setViewportDatasource(viewportDatasource: IViewportDatasource) {\n        if (this.gridOptionsWrapper.isRowModelViewport()) {\n            // this is bad coding, because it's using an interface that's exposed in the enterprise.\n            // really we should create an interface in the core for viewportDatasource and let\n            // the enterprise implement it, rather than casting to 'any' here\n            (this.rowModel as any).setViewportDatasource(viewportDatasource);\n        } else {\n            console.warn(`AG Grid: you can only use a viewport datasource when gridOptions.rowModelType is '${Constants.ROW_MODEL_TYPE_VIEWPORT}'`);\n        }\n    }\n\n    /** Set the row data. */\n    public setRowData(rowData: any[]) {\n        // immutable service is part of the CSRM module, if missing, no CSRM\n        const missingImmutableService = this.immutableService == null;\n\n        if (missingImmutableService) {\n            console.warn('AG Grid: you can only set rowData when using the Client Side Row Model');\n            return;\n        }\n\n        // if no keys provided provided for rows, then we can tread the operation as Immutable\n        if (this.immutableService.isActive()) {\n            this.immutableService.setRowData(rowData);\n        } else {\n            this.selectionService.reset();\n            this.clientSideRowModel.setRowData(rowData);\n        }\n    }\n\n    /** @deprecated */\n    public setFloatingTopRowData(rows: any[]): void {\n        console.warn('AG Grid: since v12, api.setFloatingTopRowData() is now api.setPinnedTopRowData()');\n        this.setPinnedTopRowData(rows);\n    }\n\n    /** @deprecated */\n    public setFloatingBottomRowData(rows: any[]): void {\n        console.warn('AG Grid: since v12, api.setFloatingBottomRowData() is now api.setPinnedBottomRowData()');\n        this.setPinnedBottomRowData(rows);\n    }\n\n    /** @deprecated */\n    public getFloatingTopRowCount(): number {\n        console.warn('AG Grid: since v12, api.getFloatingTopRowCount() is now api.getPinnedTopRowCount()');\n        return this.getPinnedTopRowCount();\n    }\n\n    /** @deprecated */\n    public getFloatingBottomRowCount(): number {\n        console.warn('AG Grid: since v12, api.getFloatingBottomRowCount() is now api.getPinnedBottomRowCount()');\n        return this.getPinnedBottomRowCount();\n    }\n\n    /** @deprecated */\n    public getFloatingTopRow(index: number): RowNode | undefined {\n        console.warn('AG Grid: since v12, api.getFloatingTopRow() is now api.getPinnedTopRow()');\n        return this.getPinnedTopRow(index);\n    }\n\n    /** @deprecated */\n    public getFloatingBottomRow(index: number): RowNode | undefined {\n        console.warn('AG Grid: since v12, api.getFloatingBottomRow() is now api.getPinnedBottomRow()');\n        return this.getPinnedBottomRow(index);\n    }\n\n    /** Set the top pinned rows. Call with no rows / undefined to clear top pinned rows. */\n    public setPinnedTopRowData(rows?: any[]): void {\n        this.pinnedRowModel.setPinnedTopRowData(rows);\n    }\n\n    /** Set the bottom pinned rows. Call with no rows / undefined to clear bottom pinned rows. */\n    public setPinnedBottomRowData(rows?: any[]): void {\n        this.pinnedRowModel.setPinnedBottomRowData(rows);\n    }\n\n    /** Gets the number of top pinned rows. */\n    public getPinnedTopRowCount(): number {\n        return this.pinnedRowModel.getPinnedTopRowCount();\n    }\n\n    /** Gets the number of bottom pinned rows. */\n    public getPinnedBottomRowCount(): number {\n        return this.pinnedRowModel.getPinnedBottomRowCount();\n    }\n\n    /** Gets the top pinned row with the specified index. */\n    public getPinnedTopRow(index: number): RowNode | undefined {\n        return this.pinnedRowModel.getPinnedTopRow(index);\n    }\n\n    /** Gets the top pinned row with the specified index. */\n    public getPinnedBottomRow(index: number): RowNode | undefined {\n        return this.pinnedRowModel.getPinnedBottomRow(index);\n    }\n\n    /**\n     * Call to set new column definitions. The grid will redraw all the column headers, and then redraw all of the rows.\n     */\n    public setColumnDefs(colDefs: (ColDef | ColGroupDef)[], source: ColumnEventType = \"api\") {\n        this.columnModel.setColumnDefs(colDefs, source);\n    }\n\n    /** Call to set new auto group column definition. The grid will recreate any auto-group columns if present. */\n    public setAutoGroupColumnDef(colDef: ColDef, source: ColumnEventType = \"api\") {\n        this.gridOptionsWrapper.setProperty('autoGroupColumnDef', colDef, true);\n    }\n\n    /** Call to set new Default Column Definition. */\n    public setDefaultColDef(colDef: ColDef, source: ColumnEventType = \"api\") {\n        this.gridOptionsWrapper.setProperty('defaultColDef', colDef, true);\n    }\n\n    public expireValueCache(): void {\n        this.valueCache.expire();\n    }\n\n    /**\n     * Returns an object with two properties:\n     *  - `top`: The top pixel position of the current scroll in the grid\n     *  - `bottom`: The bottom pixel position of the current scroll in the grid\n     */\n    public getVerticalPixelRange(): { top: number, bottom: number; } {\n        return this.gridBodyCtrl.getScrollFeature().getVScrollPosition();\n    }\n\n    /**\n     * Returns an object with two properties:\n     * - `left`: The left pixel position of the current scroll in the grid\n     * - `right`: The right pixel position of the current scroll in the grid\n     */\n    public getHorizontalPixelRange(): { left: number, right: number; } {\n        return this.gridBodyCtrl.getScrollFeature().getHScrollPosition();\n    }\n\n    /** If `true`, the horizontal scrollbar will always be present, even if not required. Otherwise, it will only be displayed when necessary. */\n    public setAlwaysShowHorizontalScroll(show: boolean) {\n        this.gridOptionsWrapper.setProperty('alwaysShowHorizontalScroll', show);\n    }\n\n    /** If `true`, the vertical scrollbar will always be present, even if not required. Otherwise it will only be displayed when necessary. */\n    public setAlwaysShowVerticalScroll(show: boolean) {\n        this.gridOptionsWrapper.setProperty('alwaysShowVerticalScroll', show);\n    }\n\n    /** Force refresh all tool panels by calling their `refresh` method. */\n    public refreshToolPanel(): void {\n        if (!this.sideBarComp) { return; }\n        this.sideBarComp.refresh();\n    }\n\n    /** Performs change detection on all cells, refreshing cells where required. */\n    public refreshCells(params: RefreshCellsParams = {}): void {\n        if (Array.isArray(params)) {\n            // the old version of refreshCells() took an array of rowNodes for the first argument\n            console.warn('since AG Grid v11.1, refreshCells() now takes parameters, please see the documentation.');\n            return;\n        }\n        this.rowRenderer.refreshCells(params);\n    }\n\n    /** Flash rows, columns or individual cells. */\n    public flashCells(params: FlashCellsParams = {}): void {\n        this.rowRenderer.flashCells(params);\n    }\n\n    /** Remove row(s) from the DOM and recreate them again from scratch. */\n    public redrawRows(params: RedrawRowsParams = {}): void {\n        const rowNodes = params ? params.rowNodes : undefined;\n        this.rowRenderer.redrawRows(rowNodes);\n    }\n\n    public setFunctionsReadOnly(readOnly: boolean) {\n        this.gridOptionsWrapper.setProperty('functionsReadOnly', readOnly);\n    }\n\n    /** Redraws the header. Useful if a column name changes, or something else that changes how the column header is displayed. */\n    public refreshHeader() {\n        this.ctrlsService.getHeaderRowContainerCtrls().forEach(c => c.refresh());\n    }\n\n    /** Returns `true` if any filter is set. This includes quick filter, advanced filter or external filter. */\n    public isAnyFilterPresent(): boolean {\n        return this.filterManager.isAnyFilterPresent();\n    }\n\n    /** Returns `true` if any column filter is set, otherwise `false`. */\n    public isColumnFilterPresent(): boolean {\n        return this.filterManager.isColumnFilterPresent() || this.filterManager.isAggregateFilterPresent();\n    }\n\n    /** Returns `true` if the quick filter is set, otherwise `false`. */\n    public isQuickFilterPresent(): boolean {\n        return this.filterManager.isQuickFilterPresent();\n    }\n\n    /**\n     * Returns the row model inside the table.\n     * From here you can see the original rows, rows after filter has been applied,\n     * rows after aggregation has been applied, and the final set of 'to be displayed' rows.\n     */\n    public getModel(): IRowModel {\n        return this.rowModel;\n    }\n\n    /** Expand or collapse a specific row node. */\n    public setRowNodeExpanded(rowNode: RowNode, expanded: boolean): void {\n        if (rowNode) {\n            rowNode.setExpanded(expanded);\n        }\n    }\n\n    /**\n     *  If after getting the model, you expand or collapse a group, call this method to inform the grid.\n     *  It will work out the final set of 'to be displayed' rows again (i.e. expand or collapse the group visually).\n     */\n    public onGroupExpandedOrCollapsed(deprecated_refreshFromIndex?: any) {\n        if (missing(this.clientSideRowModel)) { console.warn('AG Grid: cannot call onGroupExpandedOrCollapsed unless using normal row model'); }\n        if (exists(deprecated_refreshFromIndex)) { console.warn('AG Grid: api.onGroupExpandedOrCollapsed - refreshFromIndex parameter is no longer used, the grid will refresh all rows'); }\n        // we don't really want the user calling this if only one rowNode was expanded, instead they should be\n        // calling rowNode.setExpanded(boolean) - this way we do a 'keepRenderedRows=false' so that the whole\n        // grid gets refreshed again - otherwise the row with the rowNodes that were changed won't get updated,\n        // and thus the expand icon in the group cell won't get 'opened' or 'closed'.\n        this.clientSideRowModel.refreshModel({ step: ClientSideRowModelSteps.MAP });\n    }\n\n    public refreshInMemoryRowModel(step?: string): any {\n        console.warn(`ag-grid: since version 18.x, api.refreshInMemoryRowModel() should be replaced with api.refreshClientSideRowModel()`);\n        this.refreshClientSideRowModel(step);\n    }\n\n    /** Gets the Client-Side Row Model to refresh, executing the grouping, filtering and sorting again. */\n    public refreshClientSideRowModel(step?: string): any {\n        if (missing(this.clientSideRowModel)) { console.warn('cannot call refreshClientSideRowModel unless using normal row model'); }\n\n        let paramsStep = ClientSideRowModelSteps.EVERYTHING;\n        const stepsMapped: any = {\n            group: ClientSideRowModelSteps.EVERYTHING,\n            filter: ClientSideRowModelSteps.FILTER,\n            map: ClientSideRowModelSteps.MAP,\n            aggregate: ClientSideRowModelSteps.AGGREGATE,\n            sort: ClientSideRowModelSteps.SORT,\n            pivot: ClientSideRowModelSteps.PIVOT\n        };\n\n        if (exists(step)) {\n            paramsStep = stepsMapped[step];\n        }\n        if (missing(paramsStep)) {\n            console.error(`AG Grid: invalid step ${step}, available steps are ${Object.keys(stepsMapped).join(', ')}`);\n            return;\n        }\n        const animate = !this.gridOptionsWrapper.isSuppressAnimationFrame();\n        const modelParams: RefreshModelParams = {\n            step: paramsStep,\n            keepRenderedRows: true,\n            keepEditingRows: true,\n            animate\n        };\n\n        this.clientSideRowModel.refreshModel(modelParams);\n    }\n\n    /** Returns `true` when there are no more animation frames left to process. */\n    public isAnimationFrameQueueEmpty(): boolean {\n        return this.animationFrameService.isQueueEmpty();\n    }\n\n    public flushAllAnimationFrames(): void {\n        this.animationFrameService.flushAllFrames();\n    }\n\n    /**\n     * Returns the row node with the given ID.\n     * The row node ID is the one you provide from the callback `getRowId(params)`,\n     * otherwise the ID is a number (cast as string) auto-generated by the grid when\n     * the row data is set.\n     */\n    public getRowNode(id: string): RowNode | undefined {\n        return this.rowModel.getRowNode(id);\n    }\n\n    /**\n     * Gets the sizes that various UI elements will be rendered at with the current theme.\n     * If you override the row or header height using `gridOptions`, the override value you provided will be returned.\n     */\n    public getSizesForCurrentTheme() {\n        return {\n            rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),\n            headerHeight: this.gridOptionsWrapper.getHeaderHeight()\n        };\n    }\n\n    /** Expand all groups. */\n    public expandAll() {\n        if (this.clientSideRowModel) {\n            this.clientSideRowModel.expandOrCollapseAll(true);\n        } else if (this.serverSideRowModel) {\n            this.serverSideRowModel.expandAll(true);\n        } else {\n            console.warn('AG Grid: expandAll only works with Client Side Row Model and Server Side Row Model');\n        }\n    }\n\n    /** Collapse all groups. */\n    public collapseAll() {\n        if (this.clientSideRowModel) {\n            this.clientSideRowModel.expandOrCollapseAll(false);\n        } else if (this.serverSideRowModel) {\n            this.serverSideRowModel.expandAll(false);\n        } else {\n            console.warn('AG Grid: collapseAll only works with Client Side Row Model and Server Side Row Model');\n        }\n    }\n\n    /** Gets the tool panel instance corresponding to the supplied `id`. */\n    public getToolPanelInstance(id: string): IToolPanel | undefined {\n        if (!this.sideBarComp) {\n            console.warn('AG Grid: toolPanel is only available in AG Grid Enterprise');\n            return;\n        }\n        const comp = this.sideBarComp.getToolPanelInstance(id);\n        return unwrapUserComp(comp);\n    }\n\n    public addVirtualRowListener(eventName: string, rowIndex: number, callback: Function) {\n        if (typeof eventName !== 'string') {\n            console.warn('AG Grid: addVirtualRowListener is deprecated, please use addRenderedRowListener.');\n        }\n        this.addRenderedRowListener(eventName, rowIndex, callback);\n    }\n\n    /**\n     * Registers a callback to a virtual row.\n     * A virtual row is a row that is visually rendered on the screen (rows that are not visible because of the scroll position are not rendered).\n     * Unlike normal events, you do not need to unregister rendered row listeners.\n     * When the rendered row is removed from the grid, all associated rendered row listeners will also be removed.\n     * Currently supports only one event, `virtualRowRemoved`;\n     * listen for this event if your `cellRenderer` needs to do cleanup when the row no longer exists.\n     */\n    public addRenderedRowListener(eventName: string, rowIndex: number, callback: Function) {\n        if (eventName === 'virtualRowSelected') {\n            console.warn(`AG Grid: event virtualRowSelected is deprecated, to register for individual row\n                selection events, add a listener directly to the row node.`);\n        }\n        this.rowRenderer.addRenderedRowListener(eventName, rowIndex, callback);\n    }\n\n    /** Pass a quick filter text into the grid for filtering. */\n    public setQuickFilter(newFilter: string): void {\n        this.filterManager.setQuickFilter(newFilter);\n    }\n\n    public selectIndex(index: any, tryMulti: any, suppressEvents: any) {\n        console.warn('AG Grid: do not use api for selection, call node.setSelected(value) instead');\n        if (suppressEvents) {\n            console.warn('AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n        }\n        this.selectionService.selectIndex(index, tryMulti);\n    }\n\n    public deselectIndex(index: number, suppressEvents: boolean = false) {\n        console.warn('AG Grid: do not use api for selection, call node.setSelected(value) instead');\n        if (suppressEvents) {\n            console.warn('AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n        }\n        this.selectionService.deselectIndex(index);\n    }\n\n    public selectNode(node: RowNode, tryMulti: boolean = false, suppressEvents: boolean = false) {\n        console.warn('AG Grid: API for selection is deprecated, call node.setSelected(value) instead');\n        if (suppressEvents) {\n            console.warn('AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n        }\n        node.setSelectedParams({ newValue: true, clearSelection: !tryMulti });\n    }\n\n    public deselectNode(node: RowNode, suppressEvents: boolean = false) {\n        console.warn('AG Grid: API for selection is deprecated, call node.setSelected(value) instead');\n        if (suppressEvents) {\n            console.warn('AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');\n        }\n        node.setSelectedParams({ newValue: false });\n    }\n\n    /** Select all rows, regardless of filtering and rows that are not visible due to grouping being enabled and their groups not expanded. */\n    public selectAll() {\n        this.selectionService.selectAllRowNodes();\n    }\n\n    /** Clear all row selections, regardless of filtering. */\n    public deselectAll() {\n        this.selectionService.deselectAllRowNodes();\n    }\n\n    /** Select all filtered rows. */\n    public selectAllFiltered() {\n        this.selectionService.selectAllRowNodes(true);\n    }\n\n    /** Clear all filtered selections. */\n    public deselectAllFiltered() {\n        this.selectionService.deselectAllRowNodes(true);\n    }\n\n    public recomputeAggregates(): void {\n        if (missing(this.clientSideRowModel)) { console.warn('cannot call recomputeAggregates unless using normal row model'); }\n        console.warn(`recomputeAggregates is deprecated, please call api.refreshClientSideRowModel('aggregate') instead`);\n        this.clientSideRowModel.refreshModel({ step: ClientSideRowModelSteps.AGGREGATE });\n    }\n\n    /** Sets columns to adjust in size to fit the grid horizontally. */\n    public sizeColumnsToFit() {\n        this.gridBodyCtrl.sizeColumnsToFit();\n    }\n\n    /** Show the 'loading' overlay. */\n    public showLoadingOverlay(): void {\n        this.overlayWrapperComp.showLoadingOverlay();\n    }\n\n    /** Show the 'no rows' overlay. */\n    public showNoRowsOverlay(): void {\n        this.overlayWrapperComp.showNoRowsOverlay();\n    }\n\n    /** Hides the overlay if showing. */\n    public hideOverlay(): void {\n        this.overlayWrapperComp.hideOverlay();\n    }\n\n    public isNodeSelected(node: any) {\n        console.warn('AG Grid: no need to call api.isNodeSelected(), just call node.isSelected() instead');\n        return node.isSelected();\n    }\n\n    public getSelectedNodesById(): { [nodeId: number]: RowNode; } | null {\n        console.error('AG Grid: since version 3.4, getSelectedNodesById no longer exists, use getSelectedNodes() instead');\n        return null;\n    }\n\n    /**\n     * Returns a list of selected nodes.\n     * Getting the underlying node (rather than the data) is useful when working with tree / aggregated data,\n     * as the node can be traversed.\n     */\n    public getSelectedNodes(): RowNode[] {\n        return this.selectionService.getSelectedNodes();\n    }\n    /** Returns a list of selected rows (i.e. row data that you provided). */\n    public getSelectedRows(): any[] {\n        return this.selectionService.getSelectedRows();\n    }\n\n    /**\n     * Returns a list of all selected nodes at 'best cost', a feature to be used with groups / trees.\n     * If a group has all its children selected, then the group appears in the result, but not the children.\n     * Designed for use with `'children'` as the group selection type, where groups don't actually appear in the selection normally.\n     */\n    public getBestCostNodeSelection(): RowNode[] | undefined {\n        return this.selectionService.getBestCostNodeSelection();\n    }\n\n    /** Retrieve rendered nodes. Due to virtualisation this will contain only the current visible rows and those in the buffer. */\n    public getRenderedNodes(): RowNode[] {\n        return this.rowRenderer.getRenderedNodes();\n    }\n\n    public ensureColIndexVisible(index: any) {\n        console.warn('AG Grid: ensureColIndexVisible(index) no longer supported, use ensureColumnVisible(colKey) instead.');\n    }\n\n    /**\n     *  Ensures the column is visible by scrolling the table if needed.\n     * @param key - The column to ensure visible\n     * @param position - Where the column will be positioned.\n     * - `auto` - Scrolls the minimum amount to make sure the column is visible.\n     * - `start` - Scrolls the column to the start of the viewport.\n     * - `middle` - Scrolls the column to the middle of the viewport.\n     * - `end` - Scrolls the column to the end of the viewport.\n    */\n    public ensureColumnVisible(key: string | Column, position: 'auto' | 'start' | 'middle' | 'end' = 'auto') {\n        this.gridBodyCtrl.getScrollFeature().ensureColumnVisible(key, position);\n    }\n\n    /**\n     * Ensures the row index is visible by vertically scrolling the grid.\n     * If a position of `'top'`, `'middle'` or `'bottom'` is supplied, the grid will scroll the grid to place the row at the top, middle or bottom respectively.\n     * Otherwise, the grid will do the minimum scrolling possible to show the row.\n     * i.e.\n     * - if the grid needs to scroll up then it will scroll so that the row is at the top,\n     * - if the grid needs to scroll down then it will scroll so that the row is at the bottom,\n     * - if the row is already in view then the grid will do nothing.\n     */\n    public ensureIndexVisible(index: any, position?: 'top' | 'bottom' | 'middle' | null) {\n        this.gridBodyCtrl.getScrollFeature().ensureIndexVisible(index, position);\n    }\n\n    /**\n     * Ensures a row node is visible, scrolling the grid if needed.\n     * Provide either:\n     * - the node,\n     * - the data object\n     * - a comparator function (that takes the node as a parameter, and returns `true` for match or `false` for no match).\n     */\n    public ensureNodeVisible(comparator: any, position: 'top' | 'bottom' | 'middle' | null = null) {\n        this.gridBodyCtrl.getScrollFeature().ensureNodeVisible(comparator, position);\n    }\n\n    /**\n     * Similar to `forEachNode`, except lists all the leaf nodes.\n     * This effectively goes through all the data that you provided to the grid before the grid performed any grouping.\n     * If using tree data, goes through all the nodes for the data you provided, including nodes that have children,\n     * but excluding groups the grid created where gaps were missing in the hierarchy.\n     */\n    public forEachLeafNode(callback: (rowNode: RowNode) => void) {\n        if (missing(this.clientSideRowModel)) { console.warn('cannot call forEachNode unless using normal row model'); }\n        this.clientSideRowModel.forEachLeafNode(callback);\n    }\n\n    /**\n     * Iterates through each node (row) in the grid and calls the callback for each node.\n     * This works similar to the `forEach` method on a JavaScript array.\n     * This is called for every node, ignoring any filtering or sorting applied within the grid.\n     * If using the Infinite Row Model, then this gets called for each page loaded in the page cache.\n     */\n    public forEachNode(callback: (rowNode: RowNode, index: number) => void) {\n        this.rowModel.forEachNode(callback);\n    }\n\n    /** Similar to `forEachNode`, except skips any filtered out data. */\n    public forEachNodeAfterFilter(callback: (rowNode: RowNode, index: number) => void) {\n        if (missing(this.clientSideRowModel)) { console.warn('cannot call forEachNodeAfterFilter unless using normal row model'); }\n        this.clientSideRowModel.forEachNodeAfterFilter(callback);\n    }\n\n    /** Similar to `forEachNodeAfterFilter`, except the callbacks are called in the order the rows are displayed in the grid. */\n    public forEachNodeAfterFilterAndSort(callback: (rowNode: RowNode, index: number) => void) {\n        if (missing(this.clientSideRowModel)) { console.warn('cannot call forEachNodeAfterFilterAndSort unless using normal row model'); }\n        this.clientSideRowModel.forEachNodeAfterFilterAndSort(callback);\n    }\n\n    /**\n     * Returns the filter component instance for a column.\n     * `key` can be a string field name or a ColDef object (matches on object reference, useful if field names are not unique).\n     * If your filter is created asynchronously, `getFilterInstance` will return `null` so you will need to use the `callback` to access the filter instance instead.\n     */\n    public getFilterInstance(key: string | Column, callback?: (filter: IFilter | null) => void): IFilter | null | undefined {\n        const res = this.getFilterInstanceImpl(key, instance => {\n            if (!callback) { return; }\n            const unwrapped = unwrapUserComp(instance);\n            callback(unwrapped);\n        });\n        const unwrapped = unwrapUserComp(res);\n        return unwrapped;\n    }\n\n    private getFilterInstanceImpl(key: string | Column, callback: (filter: IFilter) => void): IFilter | null | undefined {\n        const column = this.columnModel.getPrimaryColumn(key);\n\n        if (!column) { return undefined; }\n\n        const filterPromise = this.filterManager.getFilterComponent(column, 'NO_UI');\n        const currentValue = filterPromise && filterPromise.resolveNow<IFilterComp | null>(null, filterComp => filterComp);\n\n        if (currentValue) {\n            setTimeout(callback, 0, currentValue);\n        } else if (filterPromise) {\n            filterPromise.then(comp => {\n                callback(comp!);\n            });\n        }\n\n        return currentValue;\n    }\n\n    /** Destroys a filter. Useful to force a particular filter to be created from scratch again. */\n    public destroyFilter(key: string | Column) {\n        const column = this.columnModel.getPrimaryColumn(key);\n        if (column) {\n            return this.filterManager.destroyFilter(column, \"filterDestroyed\");\n        }\n    }\n\n    /** Gets the status panel instance corresponding to the supplied `id`. */\n    public getStatusPanel(key: string): IStatusPanel | undefined {\n        if (!this.statusBarService) { return; }\n\n        const comp = this.statusBarService.getStatusPanel(key);\n        return unwrapUserComp(comp);\n    }\n\n    public getColumnDef(key: string | Column) {\n        const column = this.columnModel.getPrimaryColumn(key);\n        if (column) {\n            return column.getColDef();\n        }\n        return null;\n    }\n\n    /**\n     * Returns the current column definitions.\n    */\n    public getColumnDefs(): (ColDef | ColGroupDef)[] | undefined { return this.columnModel.getColumnDefs(); }\n\n    /** Informs the grid that a filter has changed. This is typically called after a filter change through one of the filter APIs. */\n    public onFilterChanged() {\n        this.filterManager.onFilterChanged();\n    }\n\n    /**\n     * Gets the grid to act as if the sort was changed.\n     * Useful if you update some values and want to get the grid to reorder them according to the new values.\n     */\n    public onSortChanged() {\n        this.sortController.onSortChanged('api');\n    }\n\n    /** Sets the state of all the advanced filters. Provide it with what you get from `getFilterModel()` to restore filter state. */\n    public setFilterModel(model: any) {\n        this.filterManager.setFilterModel(model);\n    }\n\n    /** Gets the current state of all the advanced filters. Used for saving filter state. */\n    public getFilterModel(): { [key: string]: any; } {\n        return this.filterManager.getFilterModel();\n    }\n\n    /** Returns the focused cell (or the last focused cell if the grid lost focus). */\n    public getFocusedCell(): CellPosition | null {\n        return this.focusService.getFocusedCell();\n    }\n\n    /** Clears the focused cell. */\n    public clearFocusedCell(): void {\n        return this.focusService.clearFocusedCell();\n    }\n\n    /** Sets the focus to the specified cell. `rowPinned` can be either 'top', 'bottom' or null (for not pinned). */\n    public setFocusedCell(rowIndex: number, colKey: string | Column, rowPinned?: string) {\n        this.focusService.setFocusedCell(rowIndex, colKey, rowPinned, true);\n    }\n\n    /** Sets the `suppressRowDrag` property. */\n    public setSuppressRowDrag(value: boolean): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_ROW_DRAG, value);\n    }\n\n    /** Sets the `suppressMoveWhenRowDragging` property. */\n    public setSuppressMoveWhenRowDragging(value: boolean): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_MOVE_WHEN_ROW_DRAG, value);\n    }\n\n    /** Sets the `suppressRowClickSelection` property. */\n    public setSuppressRowClickSelection(value: boolean): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_ROW_CLICK_SELECTION, value);\n    }\n\n    /** Adds a drop zone outside of the grid where rows can be dropped. */\n    public addRowDropZone(params: RowDropZoneParams): void {\n        this.gridBodyCtrl.getRowDragFeature().addRowDropZone(params);\n    }\n\n    /** Removes an external drop zone added by `addRowDropZone`. */\n    public removeRowDropZone(params: RowDropZoneParams): void {\n        const activeDropTarget = this.dragAndDropService.findExternalZone(params);\n\n        if (activeDropTarget) {\n            this.dragAndDropService.removeDropTarget(activeDropTarget);\n        }\n    }\n\n    /** Returns the `RowDropZoneParams` to be used by another grid's `addRowDropZone` method. */\n    public getRowDropZoneParams(events?: RowDropZoneEvents): RowDropZoneParams {\n        return this.gridBodyCtrl.getRowDragFeature().getRowDropZone(events);\n    }\n\n    /** Sets the height in pixels for the row containing the column label header. */\n    public setHeaderHeight(headerHeight?: number) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_HEADER_HEIGHT, headerHeight);\n    }\n\n    /**\n     * Switch between layout options: `normal`, `autoHeight`, `print`.\n     * Defaults to `normal` if no domLayout provided.\n     */\n    public setDomLayout(domLayout?: 'normal' | 'autoHeight' | 'print') {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_DOM_LAYOUT, domLayout);\n    }\n\n    /** Sets the `enableCellTextSelection` property. */\n    public setEnableCellTextSelection(selectable: boolean) {\n        this.gridBodyCtrl.setCellTextSelection(selectable);\n    }\n\n    /** Sets the preferred direction for the selection fill handle. */\n    public setFillHandleDirection(direction: 'x' | 'y' | 'xy') {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_FILL_HANDLE_DIRECTION, direction);\n    }\n\n    /** Sets the height in pixels for the rows containing header column groups. */\n    public setGroupHeaderHeight(headerHeight?: number) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, headerHeight);\n    }\n\n    /** Sets the height in pixels for the row containing the floating filters. */\n    public setFloatingFiltersHeight(headerHeight?: number) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, headerHeight);\n    }\n\n    /** Sets the height in pixels for the row containing the columns when in pivot mode. */\n    public setPivotHeaderHeight(headerHeight?: number) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, headerHeight);\n    }\n\n    /** Sets the height in pixels for the row containing header column groups when in pivot mode. */\n    public setPivotGroupHeaderHeight(headerHeight?: number) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, headerHeight);\n    }\n\n    public setIsExternalFilterPresent(isExternalFilterPresentFunc: () => boolean): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_EXTERNAL_FILTER_PRESENT, isExternalFilterPresentFunc);\n    }\n\n    public setDoesExternalFilterPass(doesExternalFilterPassFunc: (node: RowNode) => boolean): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_DOES_EXTERNAL_FILTER_PASS, doesExternalFilterPassFunc);\n    }\n\n    public setNavigateToNextCell(navigateToNextCellFunc: (params: NavigateToNextCellParams) => (CellPosition | null)): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_NAVIGATE_TO_NEXT_CELL, navigateToNextCellFunc);\n    }\n\n    public setTabToNextCell(tabToNextCellFunc: (params: TabToNextCellParams) => (CellPosition | null)): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_TAB_TO_NEXT_CELL, tabToNextCellFunc);\n    }\n\n    public setTabToNextHeader(tabToNextHeaderFunc: (params: TabToNextHeaderParams) => (HeaderPosition | null)): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_TAB_TO_NEXT_HEADER, tabToNextHeaderFunc);\n    }\n\n    public setNavigateToNextHeader(navigateToNextHeaderFunc: (params: NavigateToNextHeaderParams) => (HeaderPosition | null)): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_NAVIGATE_TO_NEXT_HEADER, navigateToNextHeaderFunc);\n    }\n\n    public setGroupRowAggNodes(groupRowAggNodesFunc: (nodes: RowNode[]) => any): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_ROW_AGG_NODES, groupRowAggNodesFunc);\n    }\n    public setGetGroupRowAgg(getGroupRowAggFunc: (params: GetGroupRowAggParams) => any): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_GROUP_ROW_AGG, getGroupRowAggFunc);\n    }\n\n    public setGetBusinessKeyForNode(getBusinessKeyForNodeFunc: (nodes: RowNode) => string): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_BUSINESS_KEY_FOR_NODE, getBusinessKeyForNodeFunc);\n    }\n\n    public setGetChildCount(getChildCountFunc: (dataItem: any) => number): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_CHILD_COUNT, getChildCountFunc);\n    }\n\n    public setProcessRowPostCreate(processRowPostCreateFunc: (params: ProcessRowParams) => void): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_ROW_POST_CREATE, processRowPostCreateFunc);\n    }\n\n    public setGetRowNodeId(getRowNodeIdFunc: GetRowNodeIdFunc): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_NODE_ID, getRowNodeIdFunc);\n    }\n    public setGetRowId(getRowIdFunc: GetRowIdFunc): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_ID, getRowIdFunc);\n    }\n\n    public setGetRowClass(rowClassFunc: (params: RowClassParams) => string | string[]): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_CLASS, rowClassFunc);\n    }\n\n    public setIsFullWidthCell(isFullWidthCellFunc: (rowNode: RowNode) => boolean): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_FULL_WIDTH_CELL, isFullWidthCellFunc);\n    }\n    public setIsFullWidthRow(isFullWidthRowFunc: (rowNode: RowNode) => boolean): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_FULL_WIDTH_ROW, isFullWidthRowFunc);\n    }\n\n    public setIsRowSelectable(isRowSelectableFunc: IsRowSelectable): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_ROW_SELECTABLE, isRowSelectableFunc);\n    }\n\n    public setIsRowMaster(isRowMasterFunc: IsRowMaster): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_ROW_MASTER, isRowMasterFunc);\n    }\n\n    public setPostSort(postSortFunc: (nodes: RowNode[]) => void): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_POST_SORT, postSortFunc);\n    }\n    public setPostSortRows(postSortRowsFunc: (params: PostSortRowsParams) => void): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_POST_SORT_ROWS, postSortRowsFunc);\n    }\n\n    public setGetDocument(getDocumentFunc: () => Document): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_DOCUMENT, getDocumentFunc);\n    }\n\n    public setGetContextMenuItems(getContextMenuItemsFunc: GetContextMenuItems): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_CONTEXT_MENU_ITEMS, getContextMenuItemsFunc);\n    }\n\n    public setGetMainMenuItems(getMainMenuItemsFunc: GetMainMenuItems): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_MAIN_MENU_ITEMS, getMainMenuItemsFunc);\n    }\n\n    public setProcessCellForClipboard(processCellForClipboardFunc: (params: ProcessCellForExportParams) => any): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_CELL_FOR_CLIPBOARD, processCellForClipboardFunc);\n    }\n\n    public setSendToClipboard(sendToClipboardFunc: (params: { data: string }) => void): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SEND_TO_CLIPBOARD, sendToClipboardFunc);\n    }\n\n    public setProcessCellFromClipboard(processCellFromClipboardFunc: (params: ProcessCellForExportParams) => any): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_CELL_FROM_CLIPBOARD, processCellFromClipboardFunc);\n    }\n\n    public setProcessSecondaryColDef(processSecondaryColDefFunc: (colDef: ColDef) => void): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_TO_SECONDARY_COLDEF, processSecondaryColDefFunc);\n    }\n\n    public setProcessSecondaryColGroupDef(processSecondaryColGroupDefFunc: (colDef: ColDef) => void): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_SECONDARY_COL_GROUP_DEF, processSecondaryColGroupDefFunc);\n    }\n\n    public setPostProcessPopup(postProcessPopupFunc: (params: PostProcessPopupParams) => void): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_POST_PROCESS_POPUP, postProcessPopupFunc);\n    }\n\n    public setDefaultGroupOrderComparator(defaultGroupOrderComparatorFunc: (nodeA: RowNode, nodeB: RowNode) => number): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_DEFAULT_GROUP_ORDER_COMPARATOR, defaultGroupOrderComparatorFunc);\n    }\n    public setInitialGroupOrderComparator(initialGroupOrderComparatorFunc: (params: InitialGroupOrderComparatorParams) => number): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_INITIAL_GROUP_ORDER_COMPARATOR, initialGroupOrderComparatorFunc);\n    }\n\n    public setGetChartToolbarItems(getChartToolbarItemsFunc: GetChartToolbarItems): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_CHART_TOOLBAR_ITEMS, getChartToolbarItemsFunc);\n    }\n\n    public setPaginationNumberFormatter(paginationNumberFormatterFunc: (params: PaginationNumberFormatterParams) => string): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PAGINATION_NUMBER_FORMATTER, paginationNumberFormatterFunc);\n    }\n\n    public setGetServerSideStoreParams(getServerSideStoreParamsFunc: (params: GetServerSideStoreParamsParams) => ServerSideStoreParams): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_SERVER_SIDE_STORE_PARAMS, getServerSideStoreParamsFunc);\n    }\n\n    public setIsServerSideGroupOpenByDefault(isServerSideGroupOpenByDefaultFunc: (params: IsServerSideGroupOpenByDefaultParams) => boolean): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_SERVER_SIDE_GROUPS_OPEN_BY_DEFAULT, isServerSideGroupOpenByDefaultFunc);\n    }\n\n    public setIsApplyServerSideTransaction(isApplyServerSideTransactionFunc: IsApplyServerSideTransaction): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_APPLY_SERVER_SIDE_TRANSACTION, isApplyServerSideTransactionFunc);\n    }\n\n    public setIsServerSideGroup(isServerSideGroupFunc: IsServerSideGroup): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_SERVER_SIDE_GROUP, isServerSideGroupFunc);\n    }\n\n    public setGetServerSideGroupKey(getServerSideGroupKeyFunc: GetServerSideGroupKey): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_SERVER_SIDE_GROUP_KEY, getServerSideGroupKeyFunc);\n    }\n\n    public setGetRowStyle(rowStyleFunc: (params: RowClassParams) => {}): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_STYLE, rowStyleFunc);\n    }\n\n    public setGetRowHeight(rowHeightFunc: (params: RowHeightParams) => number): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_HEIGHT, rowHeightFunc);\n    }\n\n    /** Returns `true` if the side bar is visible. */\n    public isSideBarVisible(): boolean {\n        return this.sideBarComp ? this.sideBarComp.isDisplayed() : false;\n    }\n\n    /** Show/hide the entire side bar, including any visible panel and the tab buttons. */\n    public setSideBarVisible(show: boolean) {\n        if (!this.sideBarComp) {\n            if (show) {\n                console.warn('AG Grid: sideBar is not loaded');\n            }\n            return;\n        }\n        this.sideBarComp.setDisplayed(show);\n    }\n\n    /** Sets the side bar position relative to the grid. Possible values are `'left'` or `'right'`. */\n    public setSideBarPosition(position: 'left' | 'right') {\n        if (!this.sideBarComp) {\n            console.warn('AG Grid: sideBar is not loaded');\n            return;\n        }\n        this.sideBarComp.setSideBarPosition(position);\n    }\n\n    /** Opens a particular tool panel. Provide the ID of the tool panel to open. */\n    public openToolPanel(key: string) {\n        if (!this.sideBarComp) {\n            console.warn('AG Grid: toolPanel is only available in AG Grid Enterprise');\n            return;\n        }\n        this.sideBarComp.openToolPanel(key);\n    }\n\n    /** Closes the currently open tool panel (if any). */\n    public closeToolPanel() {\n        if (!this.sideBarComp) {\n            console.warn('AG Grid: toolPanel is only available in AG Grid Enterprise');\n            return;\n        }\n        this.sideBarComp.close();\n    }\n\n    /** Returns the ID of the currently shown tool panel if any, otherwise `null`. */\n    public getOpenedToolPanel(): string | null {\n        return this.sideBarComp ? this.sideBarComp.openedItem() : null;\n    }\n\n    /** Returns the current side bar configuration. If a shortcut was used, returns the detailed long form. */\n    public getSideBar(): SideBarDef {\n        return this.gridOptionsWrapper.getSideBar();\n    }\n\n    /** Resets the side bar to the provided configuration. The parameter is the same as the sideBar grid property. The side bar is re-created from scratch with the new config. */\n    public setSideBar(def: SideBarDef | string | string[] | boolean): void {\n        this.gridOptionsWrapper.setProperty('sideBar', SideBarDefParser.parse(def));\n    }\n\n    public setSuppressClipboardPaste(value: boolean): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_CLIPBOARD_PASTE, value);\n    }\n\n    /** Returns `true` if the tool panel is showing, otherwise `false`. */\n    public isToolPanelShowing(): boolean {\n        return this.sideBarComp.isToolPanelShowing();\n    }\n\n    public doLayout() {\n        const message = `AG Grid - since version 25.1, doLayout was taken out, as it's not needed. The grid responds to grid size changes automatically`;\n        doOnce(() => console.warn(message), 'doLayoutDeprecated');\n    }\n\n    /** Tells the grid to recalculate the row heights. */\n    public resetRowHeights() {\n        if (exists(this.clientSideRowModel)) {\n            if (this.columnModel.isAutoRowHeightActive()) {\n                console.warn('AG Grid: calling gridApi.resetRowHeights() makes no sense when using Auto Row Height.');\n                return;\n            }\n            this.clientSideRowModel.resetRowHeights();\n        }\n    }\n\n    public setGroupRemoveSingleChildren(value: boolean) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, value);\n    }\n\n    public setGroupRemoveLowestSingleChildren(value: boolean) {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, value);\n    }\n\n    /** Tells the grid a row height has changed. To be used after calling `rowNode.setRowHeight(newHeight)`. */\n    public onRowHeightChanged() {\n        if (this.clientSideRowModel) {\n            this.clientSideRowModel.onRowHeightChanged();\n        } else if (this.serverSideRowModel) {\n            this.serverSideRowModel.onRowHeightChanged();\n        }\n    }\n\n    /**\n     * Gets the value for a column for a particular `rowNode` (row).\n     * This is useful if you want the raw value of a cell e.g. if implementing your own CSV export.\n     */\n    public getValue(colKey: string | Column, rowNode: RowNode): any {\n        let column = this.columnModel.getPrimaryColumn(colKey);\n        if (missing(column)) {\n            column = this.columnModel.getGridColumn(colKey);\n        }\n        if (missing(column)) {\n            return null;\n        }\n        return this.valueService.getValue(column, rowNode);\n    }\n\n    /** Add an event listener for the specified `eventType`. Works similar to `addEventListener` for a browser DOM element. */\n    public addEventListener(eventType: string, listener: Function): void {\n        const async = this.gridOptionsWrapper.useAsyncEvents();\n        this.eventService.addEventListener(eventType, listener, async);\n    }\n\n    /** Add an event listener for all event types coming from the grid. */\n    public addGlobalListener(listener: Function): void {\n        const async = this.gridOptionsWrapper.useAsyncEvents();\n        this.eventService.addGlobalListener(listener, async);\n    }\n\n    /** Remove an event listener. */\n    public removeEventListener(eventType: string, listener: Function): void {\n        const async = this.gridOptionsWrapper.useAsyncEvents();\n        this.eventService.removeEventListener(eventType, listener, async);\n    }\n\n    /** Remove a global event listener. */\n    public removeGlobalListener(listener: Function): void {\n        const async = this.gridOptionsWrapper.useAsyncEvents();\n        this.eventService.removeGlobalListener(listener, async);\n    }\n\n    public dispatchEvent(event: AgEvent): void {\n        this.eventService.dispatchEvent(event);\n    }\n\n    /** Will destroy the grid and release resources. If you are using a framework you do not need to call this, as the grid links in with the framework lifecycle. However if you are using Web Components or native JavaScript, you do need to call this, to avoid a memory leak in your application. */\n    public destroy(): void {\n        // this is needed as GridAPI is a bean, and GridAPI.destroy() is called as part\n        // of context.destroy(). so we need to stop the infinite loop.\n        if (this.destroyCalled) { return; }\n        this.destroyCalled = true;\n\n        // destroy the UI first (as they use the services)\n        const gridCtrl = this.ctrlsService.getGridCtrl();\n\n        if (gridCtrl) {\n            gridCtrl.destroyGridUi();\n        }\n\n        // destroy the services\n        this.context.destroy();\n    }\n\n    @PreDestroy\n    private cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid(): void {\n        // some users were raising support issues with regards memory leaks. the problem was the customers applications\n        // were keeping references to the API. trying to educate them all would be difficult, easier to just remove\n        // all references in the API so at least the core grid can be garbage collected.\n        //\n        // wait about 100ms before clearing down the references, in case user has some cleanup to do,\n        // and needs to deference the API first\n        setTimeout(removeAllReferences.bind(window, this, 'Grid API'), 100);\n    }\n\n    private warnIfDestroyed(methodName: string): boolean {\n        if (this.destroyCalled) {\n            console.warn(`AG Grid: Grid API method ${methodName} was called on a grid that was destroyed.`);\n        }\n        return this.destroyCalled;\n    }\n\n    /** Reset the quick filter cache text on every rowNode. */\n    public resetQuickFilter(): void {\n        if (this.warnIfDestroyed('resetQuickFilter')) { return; }\n        this.rowModel.forEachNode(node => node.quickFilterAggregateText = null);\n    }\n\n    public getRangeSelections(): any {\n        console.warn(`AG Grid: in v20.1.x, api.getRangeSelections() is gone, please use getCellRanges() instead.\n        We had to change how cell selections works a small bit to allow charting to integrate. The return type of\n        getCellRanges() is a bit different, please check the AG Grid documentation.`);\n        return null;\n    }\n\n    /** Returns the list of selected cell ranges. */\n    public getCellRanges(): CellRange[] | null {\n        if (this.rangeService) {\n            return this.rangeService.getCellRanges();\n        }\n\n        console.warn('AG Grid: cell range selection is only available in AG Grid Enterprise');\n        return null;\n    }\n\n    public camelCaseToHumanReadable(camelCase: string): string | null {\n        return camelCaseToHumanText(camelCase);\n    }\n\n    public addRangeSelection(deprecatedNoLongerUsed: any): void {\n        console.warn('AG Grid: As of version 21.x, range selection changed slightly to allow charting integration. Please call api.addCellRange() instead of api.addRangeSelection()');\n    }\n    /** Adds the provided cell range to the selected ranges. */\n    public addCellRange(params: CellRangeParams): void {\n        if (!this.rangeService) { console.warn('AG Grid: cell range selection is only available in AG Grid Enterprise'); }\n        this.rangeService.addCellRange(params);\n    }\n\n    /** Clears the selected ranges. */\n    public clearRangeSelection(): void {\n        if (!this.rangeService) { console.warn('AG Grid: cell range selection is only available in AG Grid Enterprise'); }\n        this.rangeService.removeAllCellRanges();\n    }\n    /** Reverts the last cell edit. */\n    public undoCellEditing(): void {\n        this.undoRedoService.undo();\n    }\n    /** Re-applies the most recently undone cell edit. */\n    public redoCellEditing(): void {\n        this.undoRedoService.redo();\n    }\n\n    /** Returns current number of available cell edit undo operations. */\n    public getCurrentUndoSize(): number {\n        return this.undoRedoService.getCurrentUndoStackSize();\n    }\n    /** Returns current number of available cell edit redo operations. */\n    public getCurrentRedoSize(): number {\n        return this.undoRedoService.getCurrentRedoStackSize();\n    }\n\n    /** Returns a list of models with information about the charts that are currently rendered from the grid. */\n    public getChartModels(): ChartModel[] | undefined {\n        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.getChartModels') &&\n            ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.getChartModels')) {\n            return this.chartService.getChartModels();\n        }\n    }\n\n    /** Returns the `ChartRef` using the supplied `chartId`. */\n    public getChartRef(chartId: string): ChartRef | undefined {\n        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.getChartRef') &&\n            ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.getChartRef')) {\n            return this.chartService.getChartRef(chartId);\n        }\n    }\n\n    /** Returns a string containing the requested data URL which contains a representation of the chart image. */\n    public getChartImageDataURL(params: GetChartImageDataUrlParams): string | undefined {\n        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.getChartImageDataURL') &&\n            ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.getChartImageDataURL')) {\n            return this.chartService.getChartImageDataURL(params);\n        }\n    }\n\n    /** Used to programmatically create charts from a range. */\n    public createRangeChart(params: CreateRangeChartParams): ChartRef | undefined {\n        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.createRangeChart') &&\n            ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.createRangeChart')) {\n            return this.chartService.createRangeChart(params);\n        }\n    }\n\n    /** Used to programmatically create cross filter charts from a range. */\n    public createCrossFilterChart(params: CreateCrossFilterChartParams): ChartRef | undefined {\n        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.createCrossFilterChart') &&\n            ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.createCrossFilterChart')) {\n            return this.chartService.createCrossFilterChart(params);\n        }\n    }\n\n    /** Restores a chart using the `ChartModel` that was previously obtained from `getChartModels()`. */\n    public restoreChart(chartModel: ChartModel, chartContainer?: HTMLElement): ChartRef | undefined {\n        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.restoreChart') &&\n            ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.restoreChart')) {\n            return this.chartService.restoreChart(chartModel, chartContainer);\n        }\n    }\n\n    /** Used to programmatically create pivot charts from a grid. */\n    public createPivotChart(params: CreatePivotChartParams): ChartRef | undefined {\n        if (ModuleRegistry.assertRegistered(ModuleNames.RangeSelectionModule, 'api.createPivotChart') &&\n            ModuleRegistry.assertRegistered(ModuleNames.GridChartsModule, 'api.createPivotChart')) {\n            return this.chartService.createPivotChart(params);\n        }\n    }\n\n    /** Copies the selected rows to the clipboard. */\n    public copySelectedRowsToClipboard(params?: IClipboardCopyRowsParams): void {\n        if (!this.clipboardService) { console.warn('AG Grid: clipboard is only available in AG Grid Enterprise'); }\n        this.clipboardService.copySelectedRowsToClipboard(params);\n    }\n\n    /** Copies the selected ranges to the clipboard. */\n    public copySelectedRangeToClipboard(params?: IClipboardCopyParams): void {\n        if (!this.clipboardService) { console.warn('AG Grid: clipboard is only available in AG Grid Enterprise'); }\n        this.clipboardService.copySelectedRangeToClipboard(params);\n    }\n\n    /** Copies the selected range down, similar to `Ctrl + D` in Excel. */\n    public copySelectedRangeDown(): void {\n        if (!this.clipboardService) { console.warn('AG Grid: clipboard is only available in AG Grid Enterprise'); }\n        this.clipboardService.copyRangeDown();\n    }\n\n    /** Shows the column menu after and positions it relative to the provided button element. Use in conjunction with your own header template. */\n    public showColumnMenuAfterButtonClick(colKey: string | Column, buttonElement: HTMLElement): void {\n        // use grid column so works with pivot mode\n        const column = this.columnModel.getGridColumn(colKey);\n        this.menuFactory.showMenuAfterButtonClick(column, buttonElement, 'columnMenu');\n    }\n\n    /** Shows the column menu after and positions it relative to the mouse event. Use in conjunction with your own header template. */\n    public showColumnMenuAfterMouseClick(colKey: string | Column, mouseEvent: MouseEvent | Touch): void {\n        // use grid column so works with pivot mode\n        let column = this.columnModel.getGridColumn(colKey);\n\n        if (!column) {\n            column = this.columnModel.getPrimaryColumn(colKey);\n        }\n\n        if (!column) {\n            console.error(`AG Grid: column '${colKey}' not found`);\n            return;\n        }\n\n        this.menuFactory.showMenuAfterMouseEvent(column, mouseEvent);\n    }\n\n    /** Hides any visible context menu or column menu. */\n    public hidePopupMenu(): void {\n        // hide the context menu if in enterprise\n        if (this.contextMenuFactory) {\n            this.contextMenuFactory.hideActiveMenu();\n        }\n        // and hide the column menu always\n        this.menuFactory.hideActiveMenu();\n    }\n\n    /** DOM element to use as the popup parent for grid popups (context menu, column menu etc). */\n    public setPopupParent(ePopupParent: HTMLElement): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_POPUP_PARENT, ePopupParent);\n    }\n\n    /** Navigates the grid focus to the next cell, as if tabbing. */\n    public tabToNextCell(event?: KeyboardEvent): boolean {\n        return this.navigationService.tabToNextCell(false, event);\n    }\n\n    /** Navigates the grid focus to the previous cell, as if shift-tabbing. */\n    public tabToPreviousCell(event?: KeyboardEvent): boolean {\n        return this.navigationService.tabToNextCell(true, event);\n    }\n\n    /** Returns the list of active cell renderer instances. */\n    public getCellRendererInstances(params: GetCellRendererInstancesParams = {}): ICellRenderer[] {\n        const res = this.rowRenderer.getCellRendererInstances(params);\n        const unwrapped = res.map(unwrapUserComp);\n        return unwrapped;\n    }\n\n    /** Returns the list of active cell editor instances. Optionally provide parameters to restrict to certain columns / row nodes. */\n    public getCellEditorInstances(params: GetCellEditorInstancesParams = {}): ICellEditor[] {\n        const res = this.rowRenderer.getCellEditorInstances(params);\n        const unwrapped = res.map(unwrapUserComp);\n        return unwrapped;\n    }\n\n    /** If the grid is editing, returns back details of the editing cell(s). */\n    public getEditingCells(): CellPosition[] {\n        return this.rowRenderer.getEditingCells();\n    }\n\n    /** If a cell is editing, it stops the editing. Pass `true` if you want to cancel the editing (i.e. don't accept changes). */\n    public stopEditing(cancel: boolean = false): void {\n        this.rowRenderer.stopEditing(cancel);\n    }\n\n    /** Start editing the provided cell. If another cell is editing, the editing will be stopped in that other cell. */\n    public startEditingCell(params: StartEditingCellParams): void {\n        const column = this.columnModel.getGridColumn(params.colKey);\n        if (!column) {\n            console.warn(`AG Grid: no column found for ${params.colKey}`);\n            return;\n        }\n        const cellPosition: CellPosition = {\n            rowIndex: params.rowIndex,\n            rowPinned: params.rowPinned || null,\n            column: column\n        };\n        const notPinned = params.rowPinned == null;\n        if (notPinned) {\n            this.gridBodyCtrl.getScrollFeature().ensureIndexVisible(params.rowIndex);\n        }\n\n        const cell = this.navigationService.getCellByPosition(cellPosition);\n        if (!cell) { return; }\n        cell.startRowOrCellEdit(params.key, params.charPress);\n    }\n\n    /** Add an aggregation function with the specified key. */\n    public addAggFunc(key: string, aggFunc: IAggFunc): void {\n        if (this.aggFuncService) {\n            this.aggFuncService.addAggFunc(key, aggFunc);\n        }\n    }\n\n    /** Add aggregations function with the specified keys. */\n    public addAggFuncs(aggFuncs: { [key: string]: IAggFunc; }): void {\n        if (this.aggFuncService) {\n            this.aggFuncService.addAggFuncs(aggFuncs);\n        }\n    }\n\n    /** Clears all aggregation functions (including those provided by the grid). */\n    public clearAggFuncs(): void {\n        if (this.aggFuncService) {\n            this.aggFuncService.clear();\n        }\n    }\n\n    /** Apply transactions to the server side row model. */\n    public applyServerSideTransaction(transaction: ServerSideTransaction): ServerSideTransactionResult | undefined {\n        if (!this.serverSideTransactionManager) {\n            console.warn('AG Grid: Cannot apply Server Side Transaction if not using the Server Side Row Model.');\n            return;\n        }\n        return this.serverSideTransactionManager.applyTransaction(transaction);\n    }\n\n    public applyServerSideTransactionAsync(transaction: ServerSideTransaction, callback?: (res: ServerSideTransactionResult) => void): void {\n        if (!this.serverSideTransactionManager) {\n            console.warn('AG Grid: Cannot apply Server Side Transaction if not using the Server Side Row Model.');\n            return;\n        }\n        return this.serverSideTransactionManager.applyTransactionAsync(transaction, callback);\n    }\n\n    /** Gets all failed server side loads to retry. */\n    public retryServerSideLoads(): void {\n        if (!this.serverSideRowModel) {\n            console.warn('AG Grid: API retryServerSideLoads() can only be used when using Server-Side Row Model.');\n            return;\n        }\n        this.serverSideRowModel.retryLoads();\n    }\n\n    public flushServerSideAsyncTransactions(): void {\n        if (!this.serverSideTransactionManager) {\n            console.warn('AG Grid: Cannot flush Server Side Transaction if not using the Server Side Row Model.');\n            return;\n        }\n        return this.serverSideTransactionManager.flushAsyncTransactions();\n    }\n\n    /** Update row data. Pass a transaction object with lists for `add`, `remove` and `update`. */\n    public applyTransaction(rowDataTransaction: RowDataTransaction): RowNodeTransaction | null | undefined {\n        if (!this.clientSideRowModel) {\n            console.error('AG Grid: updateRowData() only works with ClientSideRowModel. Working with InfiniteRowModel was deprecated in v23.1 and removed in v24.1');\n            return;\n        }\n\n        const res: RowNodeTransaction | null = this.clientSideRowModel.updateRowData(rowDataTransaction);\n\n        // refresh all the full width rows\n        this.rowRenderer.refreshFullWidthRows(res!.update);\n\n        // do change detection for all present cells\n        if (!this.gridOptionsWrapper.isSuppressChangeDetection()) {\n            this.rowRenderer.refreshCells();\n        }\n\n        return res;\n    }\n\n    /** Sets the `deltaSort` property */\n    public setDeltaSort(enable: boolean): void {\n        this.gridOptionsWrapper.setProperty('deltaSort', enable);\n    }\n\n    /** @deprecated */\n    public updateRowData(rowDataTransaction: RowDataTransaction): RowNodeTransaction | null | undefined {\n        const message = 'AG Grid: as of v23.1, grid API updateRowData(transaction) is now called applyTransaction(transaction). updateRowData is deprecated and will be removed in a future major release.';\n        doOnce(() => console.warn(message), 'updateRowData deprecated');\n\n        return this.applyTransaction(rowDataTransaction);\n    }\n\n    /** Same as `applyTransaction` except executes asynchronously for efficiency. */\n    public applyTransactionAsync(rowDataTransaction: RowDataTransaction, callback?: (res: RowNodeTransaction) => void): void {\n        if (!this.clientSideRowModel) {\n            console.error('AG Grid: api.applyTransactionAsync() only works with ClientSideRowModel.');\n            return;\n        }\n        this.clientSideRowModel.batchUpdateRowData(rowDataTransaction, callback);\n    }\n\n    /** Executes any remaining asynchronous grid transactions, if any are waiting to be executed. */\n    public flushAsyncTransactions(): void {\n        if (!this.clientSideRowModel) {\n            console.error('AG Grid: api.applyTransactionAsync() only works with ClientSideRowModel.');\n            return;\n        }\n        this.clientSideRowModel.flushAsyncTransactions();\n    }\n\n    /** @deprecated */\n    public batchUpdateRowData(rowDataTransaction: RowDataTransaction, callback?: (res: RowNodeTransaction) => void): void {\n        const message = 'AG Grid: as of v23.1, grid API batchUpdateRowData(transaction, callback) is now called applyTransactionAsync(transaction, callback). batchUpdateRowData is deprecated and will be removed in a future major release.';\n        doOnce(() => console.warn(message), 'batchUpdateRowData deprecated');\n\n        this.applyTransactionAsync(rowDataTransaction, callback);\n    }\n\n    public insertItemsAtIndex(index: number, items: any[], skipRefresh = false): void {\n        console.warn('AG Grid: insertItemsAtIndex() is deprecated, use updateRowData(transaction) instead.');\n        this.updateRowData({ add: items, addIndex: index, update: null, remove: null });\n    }\n\n    public removeItems(rowNodes: RowNode[], skipRefresh = false): void {\n        console.warn('AG Grid: removeItems() is deprecated, use updateRowData(transaction) instead.');\n        const dataToRemove: any[] = rowNodes.map(rowNode => rowNode.data);\n        this.updateRowData({ add: null, addIndex: null, update: null, remove: dataToRemove });\n    }\n\n    public addItems(items: any[], skipRefresh = false): void {\n        console.warn('AG Grid: addItems() is deprecated, use updateRowData(transaction) instead.');\n        this.updateRowData({ add: items, addIndex: null, update: null, remove: null });\n    }\n\n    public refreshVirtualPageCache(): void {\n        console.warn('AG Grid: refreshVirtualPageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');\n        this.refreshInfiniteCache();\n    }\n\n    public refreshInfinitePageCache(): void {\n        console.warn('AG Grid: refreshInfinitePageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');\n        this.refreshInfiniteCache();\n    }\n\n    /**\n     * Marks all the currently loaded blocks in the cache for reload.\n     * If you have 10 blocks in the cache, all 10 will be marked for reload.\n     * The old data will continue to be displayed until the new data is loaded.\n     */\n    public refreshInfiniteCache(): void {\n        if (this.infiniteRowModel) {\n            this.infiniteRowModel.refreshCache();\n        } else {\n            console.warn(`AG Grid: api.refreshInfiniteCache is only available when rowModelType='infinite'.`);\n        }\n    }\n\n    public purgeVirtualPageCache(): void {\n        console.warn('AG Grid: purgeVirtualPageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');\n        this.purgeInfinitePageCache();\n    }\n\n    public purgeInfinitePageCache(): void {\n        console.warn('AG Grid: purgeInfinitePageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');\n        this.purgeInfiniteCache();\n    }\n\n    /**\n     * Purges the cache.\n     * The grid is then told to refresh. Only the blocks required to display the current data on screen are fetched (typically no more than 2).\n     * The grid will display nothing while the new blocks are loaded.\n     * Use this to immediately remove the old data from the user.\n     */\n    public purgeInfiniteCache(): void {\n        if (this.infiniteRowModel) {\n            this.infiniteRowModel.purgeCache();\n        } else {\n            console.warn(`AG Grid: api.purgeInfiniteCache is only available when rowModelType='infinite'.`);\n        }\n    }\n\n    /** @deprecated */\n    public purgeEnterpriseCache(route?: string[]): void {\n        console.warn(`ag-grid: since version 18.x, api.purgeEnterpriseCache() should be replaced with api.purgeServerSideCache()`);\n        this.purgeServerSideCache(route);\n    }\n\n    /** @deprecated */\n    public purgeServerSideCache(route: string[] = []): void {\n        if (this.serverSideRowModel) {\n            console.warn(`AG Grid: since v25.0, api.purgeServerSideCache is deprecated. Please use api.refreshServerSideStore({purge: true}) instead.`);\n            this.refreshServerSideStore({\n                route: route,\n                purge: true\n            });\n        } else {\n            console.warn(`AG Grid: api.purgeServerSideCache is only available when rowModelType='serverSide'.`);\n        }\n    }\n\n    /**\n     * Refresh a server-side store.\n     * If you pass no parameters, then the top level cache is purged.\n     * To purge a child cache, pass in the string of keys to get to the child cache.\n     */\n    public refreshServerSideStore(params?: RefreshStoreParams): void {\n        if (this.serverSideRowModel) {\n            this.serverSideRowModel.refreshStore(params);\n        } else {\n            console.warn(`AG Grid: api.refreshServerSideStore is only available when rowModelType='serverSide'.`);\n        }\n    }\n\n    /** Returns info on all server side stores. */\n    public getServerSideStoreState(): ServerSideStoreState[] {\n        if (this.serverSideRowModel) {\n            return this.serverSideRowModel.getStoreState();\n        } else {\n            console.warn(`AG Grid: api.getServerSideStoreState is only available when rowModelType='serverSide'.`);\n            return [];\n        }\n    }\n\n    public getVirtualRowCount(): number | null | undefined {\n        console.warn('AG Grid: getVirtualRowCount() is now called getInfiniteRowCount(), please call getInfiniteRowCount() instead');\n        return this.getInfiniteRowCount();\n    }\n\n    /** The row count defines how many rows the grid allows scrolling to. */\n    public getInfiniteRowCount(): number | undefined {\n        if (this.infiniteRowModel) {\n            return this.infiniteRowModel.getRowCount();\n        } else {\n            console.warn(`AG Grid: api.getVirtualRowCount is only available when rowModelType='virtual'.`);\n        }\n    }\n\n    public isMaxRowFound(): boolean | undefined {\n        console.warn(`AG Grid: api.isLastRowIndexKnown is deprecated, please use api.isLastRowIndexKnown()`);\n        return this.isLastRowIndexKnown();\n    }\n\n    /** Returns `true` if grid allows for scrolling past the last row to load more rows, thus providing infinite scroll. */\n    public isLastRowIndexKnown(): boolean | undefined {\n        if (this.infiniteRowModel) {\n            return this.infiniteRowModel.isLastRowIndexKnown();\n        } else {\n            console.warn(`AG Grid: api.isMaxRowFound is only available when rowModelType='virtual'.`);\n        }\n    }\n\n    public setVirtualRowCount(rowCount: number, maxRowFound?: boolean): void {\n        console.warn('AG Grid: setVirtualRowCount() is now called setInfiniteRowCount(), please call setInfiniteRowCount() instead');\n        this.setRowCount(rowCount, maxRowFound);\n    }\n\n    public setInfiniteRowCount(rowCount: number, maxRowFound?: boolean): void {\n        console.warn('AG Grid: setInfiniteRowCount() is now called setRowCount(), please call setRowCount() instead');\n        this.setRowCount(rowCount, maxRowFound);\n    }\n\n    /**\n     * Sets the `rowCount` and `lastRowIndexKnown` properties.\n     * The second parameter, `lastRowIndexKnown`, is optional and if left out, only `rowCount` is set.\n     * Set `rowCount` to adjust the height of the vertical scroll.\n     * Set `lastRowIndexKnown` to enable / disable searching for more rows.\n     * Use this method if you add or remove rows into the dataset and need to reset the number of rows or put the data back into 'look for data' mode.\n     */\n    public setRowCount(rowCount: number, maxRowFound?: boolean): void {\n        if (this.infiniteRowModel) {\n            this.infiniteRowModel.setRowCount(rowCount, maxRowFound);\n        } else {\n            console.warn(`AG Grid: api.setRowCount is only available for Infinite Row Model.`);\n        }\n    }\n\n    public getVirtualPageState(): any {\n        console.warn('AG Grid: getVirtualPageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');\n        return this.getCacheBlockState();\n    }\n\n    public getInfinitePageState(): any {\n        console.warn('AG Grid: getInfinitePageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');\n        return this.getCacheBlockState();\n    }\n\n    /**\n     * Returns an object representing the state of the cache. This is useful for debugging and understanding how the cache is working.\n     */\n    public getCacheBlockState(): any {\n        return this.rowNodeBlockLoader.getBlockState();\n    }\n\n    public checkGridSize(): void {\n        console.warn(`in AG Grid v25.2.0, checkGridSize() was removed, as it was legacy and didn't do anything uesful.`);\n    }\n\n    public getFirstRenderedRow(): number {\n        console.warn('in AG Grid v12, getFirstRenderedRow() was renamed to getFirstDisplayedRow()');\n        return this.getFirstDisplayedRow();\n    }\n\n    /** Get the index of the first displayed row due to scrolling (includes invisible rendered rows in the buffer). */\n    public getFirstDisplayedRow(): number {\n        return this.rowRenderer.getFirstVirtualRenderedRow();\n    }\n\n    public getLastRenderedRow(): number {\n        console.warn('in AG Grid v12, getLastRenderedRow() was renamed to getLastDisplayedRow()');\n        return this.getLastDisplayedRow();\n    }\n\n    /** Get the index of the last displayed row due to scrolling (includes invisible rendered rows in the buffer). */\n    public getLastDisplayedRow(): number {\n        return this.rowRenderer.getLastVirtualRenderedRow();\n    }\n\n    /** Returns the displayed `RowNode` at the given `index`. */\n    public getDisplayedRowAtIndex(index: number): RowNode | undefined {\n        return this.rowModel.getRow(index);\n    }\n\n    /** Returns the total number of displayed rows. */\n    public getDisplayedRowCount(): number {\n        return this.rowModel.getRowCount();\n    }\n\n    /**\n     * Returns `true` when the last page is known.\n     * This will always be `true` if you are using the Client-Side Row Model for pagination.\n     * Returns `false` when the last page is not known; this only happens when using Infinite Row Model.\n     */\n    public paginationIsLastPageFound(): boolean {\n        return this.paginationProxy.isLastPageFound();\n    }\n\n    /** Returns how many rows are being shown per page. */\n    public paginationGetPageSize(): number {\n        return this.paginationProxy.getPageSize();\n    }\n\n    /** Sets the `paginationPageSize`, then re-paginates the grid so the changes are applied immediately. */\n    public paginationSetPageSize(size?: number): void {\n        this.gridOptionsWrapper.setProperty('paginationPageSize', size);\n    }\n\n    /** Returns the 0-based index of the page which is showing. */\n    public paginationGetCurrentPage(): number {\n        return this.paginationProxy.getCurrentPage();\n    }\n\n    /** Returns the total number of pages. Returns `null` if `paginationIsLastPageFound() === false`. */\n    public paginationGetTotalPages(): number {\n        return this.paginationProxy.getTotalPages();\n    }\n\n    /** The total number of rows. Returns `null` if `paginationIsLastPageFound() === false`. */\n    public paginationGetRowCount(): number {\n        return this.paginationProxy.getMasterRowCount();\n    }\n\n    /** Navigates to the next page. */\n    public paginationGoToNextPage(): void {\n        this.paginationProxy.goToNextPage();\n    }\n\n    /** Navigates to the previous page. */\n    public paginationGoToPreviousPage(): void {\n        this.paginationProxy.goToPreviousPage();\n    }\n\n    /** Navigates to the first page. */\n    public paginationGoToFirstPage(): void {\n        this.paginationProxy.goToFirstPage();\n    }\n\n    /** Navigates to the last page. */\n    public paginationGoToLastPage(): void {\n        this.paginationProxy.goToLastPage();\n    }\n\n    /** Goes to the specified page. If the page requested doesn't exist, it will go to the last page. */\n    public paginationGoToPage(page: number): void {\n        this.paginationProxy.goToPage(page);\n    }\n\n    public setRowClass(className: string | undefined): void {\n        this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_ROW_CLASS, className);\n    }\n}\n","import { BeanStub } from \"../../context/beanStub\";\nimport { Autowired, Bean, PostConstruct } from \"../../context/context\";\nimport { CtrlsService } from \"../../ctrlsService\";\nimport { Column } from \"../../entities/column\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { FocusService } from \"../../focusService\";\nimport { GridBodyCtrl } from \"../../gridBodyComp/gridBodyCtrl\";\nimport { AnimationFrameService } from \"../../misc/animationFrameService\";\nimport { last } from \"../../utils/array\";\nimport { HeaderRowType } from \"../row/headerRowComp\";\nimport { HeaderPosition, HeaderPositionUtils } from \"./headerPosition\";\n\nexport enum HeaderNavigationDirection {\n    UP,\n    DOWN,\n    LEFT,\n    RIGHT\n}\n\n@Bean('headerNavigationService')\nexport class HeaderNavigationService extends BeanStub {\n\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('headerPositionUtils') private headerPositionUtils: HeaderPositionUtils;\n    @Autowired('animationFrameService') private animationFrameService: AnimationFrameService;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private gridBodyCon: GridBodyCtrl;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.ctrlsService.whenReady(p => {\n            this.gridBodyCon = p.gridBodyCtrl;\n        });\n    }\n\n    public getHeaderRowCount(): number {\n        const centerHeaderContainer = this.ctrlsService.getHeaderRowContainerCtrl();\n        return centerHeaderContainer ? centerHeaderContainer.getRowCount() : 0;\n    }\n\n    public getHeaderRowType(rowIndex: number): HeaderRowType | undefined {\n        const centerHeaderContainer = this.ctrlsService.getHeaderRowContainerCtrl();\n        if (centerHeaderContainer) {\n            return centerHeaderContainer.getRowType(rowIndex);\n        }\n    }\n\n    /*\n     * This method navigates grid header vertically\n     * @return {boolean} true to preventDefault on the event that caused this navigation.\n     */\n    public navigateVertically(direction: HeaderNavigationDirection, fromHeader: HeaderPosition | null, event: KeyboardEvent): boolean {\n        if (!fromHeader) {\n            fromHeader = this.focusService.getFocusedHeader();\n        }\n\n        if (!fromHeader) { return false; }\n\n        const { headerRowIndex, column } = fromHeader;\n        const rowLen = this.getHeaderRowCount();\n        const isUp = direction === HeaderNavigationDirection.UP ;\n        let nextRow = isUp ?  headerRowIndex - 1 : headerRowIndex + 1;\n        let nextFocusColumn: ColumnGroup | Column | null = null;\n        let skipColumn = false;\n\n        if (nextRow < 0) {\n            nextRow = 0;\n            nextFocusColumn = column;\n            skipColumn = true;\n        }\n\n        if (nextRow >= rowLen) {\n            nextRow = -1; // -1 indicates the focus should move to grid rows.\n        }\n\n        const currentRowType = this.getHeaderRowType(headerRowIndex);\n\n        if (!skipColumn) {\n            if (currentRowType === HeaderRowType.COLUMN_GROUP) {\n                const currentColumn = column as ColumnGroup;\n                nextFocusColumn = isUp ? column.getParent() : currentColumn.getDisplayedChildren()![0] as ColumnGroup;\n            } else if (currentRowType === HeaderRowType.FLOATING_FILTER) {\n                nextFocusColumn = column;\n            } else {\n                const currentColumn = column as Column;\n                nextFocusColumn = isUp ? currentColumn.getParent() : currentColumn;\n            }\n\n            if (!nextFocusColumn) { return false; }\n        }\n\n        return this.focusService.focusHeaderPosition({\n            headerPosition: { headerRowIndex: nextRow, column: nextFocusColumn! },\n            allowUserOverride:  true,\n            event\n        });\n    }\n\n    /*\n     * This method navigates grid header horizontally\n     * @return {boolean} true to preventDefault on the event that caused this navigation.\n     */\n    public navigateHorizontally(direction: HeaderNavigationDirection, fromTab: boolean = false, event: KeyboardEvent): boolean {\n        const focusedHeader = this.focusService.getFocusedHeader()!;\n        const isLeft = direction === HeaderNavigationDirection.LEFT;\n        const isRtl = this.gridOptionsWrapper.isEnableRtl();\n        let nextHeader: HeaderPosition;\n        let normalisedDirection: 'Before' |  'After';\n\n        // either navigating to the left or isRtl (cannot be both)\n        if (isLeft !== isRtl) {\n            normalisedDirection = 'Before';\n            nextHeader = this.headerPositionUtils.findHeader(focusedHeader, normalisedDirection)!;\n        } else {\n            normalisedDirection = 'After';\n            nextHeader = this.headerPositionUtils.findHeader(focusedHeader, normalisedDirection)!;\n        }\n\n        if (nextHeader) {\n            return this.focusService.focusHeaderPosition({\n                headerPosition: nextHeader,\n                direction: normalisedDirection,\n                fromTab,\n                allowUserOverride: true,\n                event\n            });\n        }\n\n        if (!fromTab) { return true; }\n\n        return this.focusNextHeaderRow(focusedHeader, normalisedDirection, event);\n    }\n\n    private focusNextHeaderRow(focusedHeader: HeaderPosition, direction: 'Before' | 'After', event: KeyboardEvent): boolean {\n        const currentIndex = focusedHeader.headerRowIndex;\n        let nextPosition: HeaderPosition | null = null;\n        let nextRowIndex: number;\n\n        if (direction === 'Before') {\n            if (currentIndex > 0) {\n                nextRowIndex = currentIndex - 1;\n                nextPosition = this.headerPositionUtils.findColAtEdgeForHeaderRow(nextRowIndex, 'end')!;\n            }\n        } else {\n            nextRowIndex = currentIndex + 1;\n            nextPosition = this.headerPositionUtils.findColAtEdgeForHeaderRow(nextRowIndex, 'start')!;\n        }\n\n        return this.focusService.focusHeaderPosition({\n            headerPosition: nextPosition,\n            direction,\n            fromTab: true,\n            allowUserOverride: true,\n            event\n        });\n    }\n\n    public scrollToColumn(column: Column | ColumnGroup, direction: 'Before' | 'After' | null = 'After'): void {\n        if (column.getPinned()) { return; }\n\n        let columnToScrollTo: Column;\n\n        if (column instanceof ColumnGroup) {\n            const columns = column.getDisplayedLeafColumns();\n            columnToScrollTo = direction === 'Before' ? last(columns) : columns[0];\n        } else {\n            columnToScrollTo = column;\n        }\n\n        this.gridBodyCon.getScrollFeature().ensureColumnVisible(columnToScrollTo);\n\n        // need to nudge the scrolls for the floating items. otherwise when we set focus on a non-visible\n        // floating cell, the scrolls get out of sync\n        this.gridBodyCon.getScrollFeature().horizontallyScrollHeaderCenterAndFloatingCenter();\n\n        // need to flush frames, to make sure the correct cells are rendered\n        this.animationFrameService.flushAllFrames();\n    }\n}\n","import { IHeaderColumn } from \"../../entities/iHeaderColumn\";\nimport { Column } from \"../../entities/column\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Beans } from \"../beans\";\nimport { Constants } from \"../../constants/constants\";\nimport { PostConstruct } from \"../../context/context\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { setAriaColIndex, setAriaColSpan } from \"../../utils/aria\";\nimport { last } from \"../../utils/array\";\nimport { exists } from \"../../utils/generic\";\nimport { Events } from \"../../eventKeys\";\nimport { GridOptionsWrapper } from \"../../gridOptionsWrapper\";\n\nexport class SetLeftFeature extends BeanStub {\n\n    private readonly columnOrGroup: IHeaderColumn;\n    private eCell: HTMLElement;\n    private ariaEl: HTMLElement;\n\n    private actualLeft: number;\n\n    // if we are spanning columns, this tells what columns,\n    // otherwise this is empty\n    private colsSpanning: Column[] | undefined;\n\n    private beans: Beans;\n\n    constructor(columnOrGroup: IHeaderColumn, eCell: HTMLElement, beans: Beans, colsSpanning?: Column[]) {\n        super();\n        this.columnOrGroup = columnOrGroup;\n        this.eCell = eCell;\n        this.ariaEl = this.eCell.querySelector('[role=columnheader]') || this.eCell;\n        this.colsSpanning = colsSpanning;\n        this.beans = beans;\n    }\n\n    public setColsSpanning(colsSpanning: Column[]): void {\n        this.colsSpanning = colsSpanning;\n        this.onLeftChanged();\n    }\n\n    public getColumnOrGroup(): IHeaderColumn {\n        if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {\n            return last(this.colsSpanning);\n        }\n        return this.columnOrGroup;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.columnOrGroup, Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));\n        this.setLeftFirstTime();\n\n        // when in print layout, the left position is also dependent on the width of the pinned sections.\n        // so additionally update left if any column width changes.\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onLeftChanged.bind(this));\n\n        // setting left has a dependency on print layout\n        this.addManagedListener(this.beans.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, this.onLeftChanged.bind(this));\n    }\n\n    private setLeftFirstTime(): void {\n        const suppressMoveAnimation = this.beans.gridOptionsWrapper.isSuppressColumnMoveAnimation();\n        const oldLeftExists = exists(this.columnOrGroup.getOldLeft());\n        const animateColumnMove = this.beans.columnAnimationService.isActive() && oldLeftExists && !suppressMoveAnimation;\n        if (animateColumnMove) {\n            this.animateInLeft();\n        } else {\n            this.onLeftChanged();\n        }\n    }\n\n    private animateInLeft(): void {\n        const colOrGroup = this.getColumnOrGroup();\n\n        const left = colOrGroup.getLeft();\n        const oldLeft = colOrGroup.getOldLeft();\n\n        const oldActualLeft = this.modifyLeftForPrintLayout(colOrGroup, oldLeft!);\n        const actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left!);\n\n        this.setLeft(oldActualLeft!);\n\n        // we must keep track of the left we want to set to, as this would otherwise lead to a race\n        // condition, if the user changed the left value many times in one VM turn, then we want to make\n        // make sure the actualLeft we set in the timeout below (in the next VM turn) is the correct left\n        // position. eg if user changes column position twice, then setLeft() below executes twice in next\n        // VM turn, but only one (the correct one) should get applied.\n        this.actualLeft = actualLeft;\n\n        this.beans.columnAnimationService.executeNextVMTurn(() => {\n            // test this left value is the latest one to be applied, and if not, do nothing\n            if (this.actualLeft === actualLeft) {\n                this.setLeft(actualLeft);\n            }\n        });\n    }\n\n    private onLeftChanged(): void {\n        const colOrGroup = this.getColumnOrGroup();\n        const left = colOrGroup.getLeft();\n        this.actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left!);\n        this.setLeft(this.actualLeft);\n    }\n\n    private modifyLeftForPrintLayout(colOrGroup: IHeaderColumn, leftPosition: number): number {\n        const printLayout = this.beans.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;\n\n        if (!printLayout) { return leftPosition; }\n\n        if (colOrGroup.getPinned() === Constants.PINNED_LEFT) {\n            return leftPosition;\n        }\n\n        const leftWidth = this.beans.columnModel.getDisplayedColumnsLeftWidth();\n\n        if (colOrGroup.getPinned() === Constants.PINNED_RIGHT) {\n            const bodyWidth = this.beans.columnModel.getBodyContainerWidth();\n            return leftWidth + bodyWidth + leftPosition;\n        }\n\n        // is in body\n        return leftWidth + leftPosition;\n    }\n\n    private setLeft(value: number): void {\n        // if the value is null, then that means the column is no longer\n        // displayed. there is logic in the rendering to fade these columns\n        // out, so we don't try and change their left positions.\n        if (exists(value)) {\n            this.eCell.style.left = `${value}px`;\n        }\n\n        let indexColumn: Column;\n\n        if (this.columnOrGroup instanceof Column) {\n            indexColumn = this.columnOrGroup;\n        } else {\n            const columnGroup = this.columnOrGroup as ColumnGroup;\n            const children = columnGroup.getLeafColumns();\n\n            if (!children.length) { return; }\n\n            if (children.length > 1) {\n                setAriaColSpan(this.ariaEl, children.length);\n            }\n\n            indexColumn = children[0];\n        }\n\n        const index = this.beans.columnModel.getAriaColumnIndex(indexColumn);\n        setAriaColIndex(this.ariaEl, index);\n    }\n}\n","import { Column } from \"../../entities/column\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../../context/context\";\nimport { ColumnHoverService } from \"../../rendering/columnHoverService\";\nimport { GridOptionsWrapper } from \"../../gridOptionsWrapper\";\n\nexport class HoverFeature extends BeanStub {\n\n    @Autowired('columnHoverService') private columnHoverService: ColumnHoverService;\n\n    private readonly columns: Column[];\n\n    private element: HTMLElement;\n\n    constructor(columns: Column[], element: HTMLElement) {\n        super();\n        this.columns = columns;\n        this.element = element;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        if (this.gridOptionsWrapper.isColumnHoverHighlight()) {\n            this.addMouseHoverListeners();\n        }\n    }\n\n    private addMouseHoverListeners(): void {\n        this.addManagedListener(this.element, 'mouseout', this.onMouseOut.bind(this));\n        this.addManagedListener(this.element, 'mouseover', this.onMouseOver.bind(this));\n    }\n\n    private onMouseOut(): void {\n        this.columnHoverService.clearMouseOver();\n    }\n\n    private onMouseOver(): void {\n        this.columnHoverService.setMouseOver(this.columns);\n    }\n\n}\n","\nimport { HeaderRowCtrl } from \"../../row/headerRowCtrl\";\nimport { AbstractHeaderCellCtrl, IAbstractHeaderCellComp } from \"../abstractCell/abstractHeaderCellCtrl\";\nimport { UserComponentFactory } from '../../../components/framework/userComponentFactory';\nimport { KeyCode } from '../../../constants/keyCode';\nimport { Autowired } from '../../../context/context';\nimport { Column } from '../../../entities/column';\nimport { Events, FilterChangedEvent } from '../../../events';\nimport { FilterManager } from '../../../filter/filterManager';\nimport { IFloatingFilter, IFloatingFilterParams, IFloatingFilterParentCallback } from '../../../filter/floating/floatingFilter';\nimport { GridApi, unwrapUserComp } from '../../../gridApi';\nimport { IFilter, IFilterComp } from '../../../interfaces/iFilter';\nimport { IMenuFactory } from '../../../interfaces/iMenuFactory';\nimport { WithoutGridCommon } from '../../../interfaces/iCommon';\nimport { Beans } from '../../../rendering/beans';\nimport { ColumnHoverService } from '../../../rendering/columnHoverService';\nimport { SetLeftFeature } from '../../../rendering/features/setLeftFeature';\nimport { AgPromise } from '../../../utils';\nimport { isElementChildOfClass } from '../../../utils/dom';\nimport { createIconNoSpan } from '../../../utils/icon';\nimport { ManagedFocusFeature } from '../../../widgets/managedFocusFeature';\nimport { HoverFeature } from '../hoverFeature';\nimport { UserCompDetails } from \"../../../components/framework/userComponentFactory\";\nimport { FilterComponent } from \"../../../components/framework/componentTypes\";\n\nexport interface IHeaderFilterCellComp extends IAbstractHeaderCellComp {\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\n    addOrRemoveBodyCssClass(cssClassName: string, on: boolean): void;\n    addOrRemoveButtonWrapperCssClass(cssClassName: string, on: boolean): void;\n    setCompDetails(compDetails: UserCompDetails): void;\n    getFloatingFilterComp(): AgPromise<IFloatingFilter> | null;\n    setWidth(width: string): void;\n    setMenuIcon(icon: HTMLElement): void;\n}\n\nexport class HeaderFilterCellCtrl extends AbstractHeaderCellCtrl {\n\n    @Autowired('userComponentFactory') private readonly userComponentFactory: UserComponentFactory;\n    @Autowired('filterManager') private readonly filterManager: FilterManager;\n    @Autowired('columnHoverService') private readonly columnHoverService: ColumnHoverService;\n    @Autowired('gridApi') private readonly gridApi: GridApi;\n    @Autowired('menuFactory') private readonly menuFactory: IMenuFactory;\n    @Autowired('beans') protected readonly beans: Beans;\n\n    private comp: IHeaderFilterCellComp;\n\n    private column: Column;\n\n    private eButtonShowMainFilter: HTMLElement;\n    private eFloatingFilterBody: HTMLElement;\n\n    private suppressFilterButton: boolean;\n    private active: boolean;\n\n    constructor(column: Column, parentRowCtrl: HeaderRowCtrl) {\n        super(column, parentRowCtrl);\n        this.column = column;\n    }\n\n    public setComp(comp: IHeaderFilterCellComp, eGui: HTMLElement, eButtonShowMainFilter: HTMLElement, eFloatingFilterBody: HTMLElement): void {\n        super.setGui(eGui);\n        this.comp = comp;\n        this.eButtonShowMainFilter = eButtonShowMainFilter;\n        this.eFloatingFilterBody = eFloatingFilterBody;\n\n        const colDef = this.column.getColDef();\n        const filterExists = !!colDef.filter || !!colDef.filterFramework;\n        const floatingFilterExists = !!colDef.floatingFilter;\n        this.active = filterExists && floatingFilterExists;\n\n        this.setupWidth();\n        this.setupLeft();\n        this.setupHover();\n        this.setupFocus();\n        this.setupUserComp();\n        this.setupSyncWithFilter();\n        this.setupUi();\n\n        this.addManagedListener(this.eButtonShowMainFilter, 'click', this.showParentFilter.bind(this));\n    }\n\n    private setupUi(): void {\n\n        this.comp.addOrRemoveButtonWrapperCssClass('ag-hidden', !this.active || this.suppressFilterButton);\n\n        if (!this.active) { return; }\n\n        this.comp.addOrRemoveBodyCssClass('ag-floating-filter-full-body', this.suppressFilterButton);\n        this.comp.addOrRemoveBodyCssClass('ag-floating-filter-body', !this.suppressFilterButton);\n\n        const eMenuIcon = createIconNoSpan('filter', this.gridOptionsWrapper, this.column);\n\n        if (eMenuIcon) {\n            this.eButtonShowMainFilter.appendChild(eMenuIcon);\n        }\n    }\n\n    private setupFocus(): void {\n        this.createManagedBean(new ManagedFocusFeature(\n            this.eGui,\n            {\n                shouldStopEventPropagation: this.shouldStopEventPropagation.bind(this),\n                onTabKeyDown: this.onTabKeyDown.bind(this),\n                handleKeyDown: this.handleKeyDown.bind(this),\n                onFocusIn: this.onFocusIn.bind(this)\n            }\n        ));\n    }\n\n    protected onTabKeyDown(e: KeyboardEvent) {\n        const eDocument = this.gridOptionsWrapper.getDocument();\n        const activeEl = eDocument.activeElement as HTMLElement;\n        const wrapperHasFocus = activeEl === this.eGui;\n\n        if (wrapperHasFocus) { return; }\n\n        const nextFocusableEl = this.focusService.findNextFocusableElement(this.eGui, null, e.shiftKey);\n\n        if (nextFocusableEl) {\n            this.beans.headerNavigationService.scrollToColumn(this.column);\n            e.preventDefault();\n            nextFocusableEl.focus();\n            return;\n        }\n\n        const nextFocusableColumn = this.findNextColumnWithFloatingFilter(e.shiftKey);\n\n        if (!nextFocusableColumn) { return; }\n\n        if (this.focusService.focusHeaderPosition({\n            headerPosition: {\n                headerRowIndex: this.getParentRowCtrl().getRowIndex(),\n                column: nextFocusableColumn\n            },\n            event: e\n        })) {\n            e.preventDefault();\n        }\n    }\n\n    private findNextColumnWithFloatingFilter(backwards: boolean): Column | null {\n        const columModel = this.beans.columnModel;\n        let nextCol: Column | null = this.column;\n\n        do {\n            nextCol = backwards\n                ? columModel.getDisplayedColBefore(nextCol)\n                : columModel.getDisplayedColAfter(nextCol);\n\n            if (!nextCol) { break; }\n\n        } while (!nextCol.getColDef().filter || !nextCol.getColDef().floatingFilter);\n\n        return nextCol;\n    }\n\n    protected handleKeyDown(e: KeyboardEvent) {\n        const eDocument = this.gridOptionsWrapper.getDocument();\n        const activeEl = eDocument.activeElement;\n        const wrapperHasFocus = activeEl === this.eGui;\n\n        switch (e.key) {\n            case KeyCode.UP:\n            case KeyCode.DOWN:\n                if (!wrapperHasFocus) {\n                    e.preventDefault();\n                }\n            case KeyCode.LEFT:\n            case KeyCode.RIGHT:\n                if (wrapperHasFocus) { return; }\n                e.stopPropagation();\n            case KeyCode.ENTER:\n                if (wrapperHasFocus) {\n                    if (this.focusService.focusInto(this.eGui)) {\n                        e.preventDefault();\n                    }\n                }\n                break;\n            case KeyCode.ESCAPE:\n                if (!wrapperHasFocus) {\n                    this.eGui.focus();\n                }\n        }\n    }\n\n    protected onFocusIn(e: FocusEvent): void {\n        const isRelatedWithin = this.eGui.contains(e.relatedTarget as HTMLElement);\n\n        // when the focus is already within the component,\n        // we default to the browser's behavior\n        if (isRelatedWithin) { return; }\n\n        const notFromHeaderWrapper = !!e.relatedTarget && !(e.relatedTarget as HTMLElement).classList.contains('ag-floating-filter');\n        const fromWithinHeader = !!e.relatedTarget && isElementChildOfClass(e.relatedTarget as HTMLElement, 'ag-floating-filter');\n\n        if (notFromHeaderWrapper && fromWithinHeader && e.target === this.eGui) {\n            const lastFocusEvent = this.lastFocusEvent;\n            const fromTab = !!(lastFocusEvent && lastFocusEvent.key === KeyCode.TAB);\n\n            if (lastFocusEvent && fromTab) {\n                const shouldFocusLast = lastFocusEvent.shiftKey;\n\n                this.focusService.focusInto(this.eGui, shouldFocusLast);\n            }\n        }\n\n        const rowIndex = this.getRowIndex();\n        this.beans.focusService.setFocusedHeader(rowIndex, this.column);\n    }\n\n    private setupHover(): void {\n        this.createManagedBean(new HoverFeature([this.column], this.eGui));\n\n        const listener = () => {\n            if (!this.gridOptionsWrapper.isColumnHoverHighlight()) { return; }\n            const hovered = this.columnHoverService.isHovered(this.column);\n            this.comp.addOrRemoveCssClass('ag-column-hover', hovered);\n        };\n\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, listener);\n        listener();\n    }\n\n    private setupLeft(): void {\n        const setLeftFeature = new SetLeftFeature(this.column, this.eGui, this.beans);\n        this.createManagedBean(setLeftFeature);\n    }\n\n    private setupUserComp(): void {\n        if (!this.active) { return; }\n\n        const colDef = this.column.getColDef();\n        const filterParams = this.filterManager.createFilterParams(this.column, colDef);\n        const finalFilterParams = this.userComponentFactory.mergeParamsWithApplicationProvidedParams(colDef, FilterComponent, filterParams);\n\n        let defaultFloatingFilterType = this.userComponentFactory.getDefaultFloatingFilterType(colDef);\n\n        if (defaultFloatingFilterType == null) {\n            defaultFloatingFilterType = 'agReadOnlyFloatingFilter';\n        }\n\n        const params: WithoutGridCommon<IFloatingFilterParams> = {\n            column: this.column,\n            filterParams: finalFilterParams,\n            currentParentModel: () => this.currentParentModel(),\n            parentFilterInstance: (cb) => this.parentFilterInstance(cb),\n            showParentFilter: () => this.showParentFilter(),\n            suppressFilterButton: false // This one might be overridden from the colDef\n        };\n\n        // this is unusual - we need a params value OUTSIDE the component the params are for.\n        // the params are for the floating filter component, but this property is actually for the wrapper.\n        this.suppressFilterButton = colDef.floatingFilterComponentParams ? !!colDef.floatingFilterComponentParams.suppressFilterButton : false;\n\n        const compDetails = this.userComponentFactory.getFloatingFilterCompDetails(colDef, params, defaultFloatingFilterType);\n\n        if (compDetails) {\n            this.comp.setCompDetails(compDetails);\n        }\n    }\n\n    private currentParentModel(): any {\n        const filterComponent = this.getFilterComponent(false);\n\n        return filterComponent ? filterComponent.resolveNow(null, filter => filter && filter.getModel()) : null;\n    }\n\n    private getFilterComponent(createIfDoesNotExist = true): AgPromise<IFilterComp> | null {\n        return this.filterManager.getFilterComponent(this.column, 'NO_UI', createIfDoesNotExist);\n    }\n\n    private parentFilterInstance(callback: IFloatingFilterParentCallback<IFilter>): void {\n        const filterComponent = this.getFilterComponent();\n\n        if (filterComponent == null) { return; }\n\n        filterComponent.then(instance => {\n            callback(unwrapUserComp(instance!));\n        });\n    }\n\n    private showParentFilter() {\n        const eventSource = this.suppressFilterButton ? this.eFloatingFilterBody : this.eButtonShowMainFilter;\n        this.menuFactory.showMenuAfterButtonClick(this.column, eventSource, 'floatingFilter', 'filterMenuTab', ['filterMenuTab']);\n    }\n\n    private setupSyncWithFilter(): void {\n        if (!this.active) { return; }\n\n        const syncWithFilter = (filterChangedEvent: FilterChangedEvent | null) => {\n            const compPromise = this.comp.getFloatingFilterComp();\n\n            if (!compPromise) { return; }\n\n            const parentModel = this.currentParentModel();\n\n            compPromise.then(comp => {\n                if (comp) {\n                    comp.onParentModelChanged(parentModel, filterChangedEvent);\n                }\n            });\n        };\n\n        this.addManagedListener(this.column, Column.EVENT_FILTER_CHANGED, syncWithFilter);\n\n        if (this.filterManager.isFilterActive(this.column)) {\n            syncWithFilter(null);\n        }\n    }\n\n    private setupWidth(): void {\n        const listener = () => {\n            const width = `${this.column.getActualWidth()}px`;\n            this.comp.setWidth(width);\n        };\n\n        this.addManagedListener(this.column, Column.EVENT_WIDTH_CHANGED, listener);\n        listener();\n    }\n\n}\n","import { ColumnModel } from \"../../../columns/columnModel\";\nimport { Constants } from \"../../../constants/constants\";\nimport { BeanStub } from \"../../../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../../../context/context\";\nimport { Column } from \"../../../entities/column\";\nimport { setDisplayed } from \"../../../utils/dom\";\nimport { TouchListener } from \"../../../widgets/touchListener\";\nimport { HorizontalResizeService } from \"../../common/horizontalResizeService\";\nimport { HeaderCellCtrl, IHeaderCellComp } from \"./headerCellCtrl\";\n\nexport class ResizeFeature extends BeanStub {\n\n    @Autowired('horizontalResizeService') private horizontalResizeService: HorizontalResizeService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    private pinned: string | null;\n    private column: Column;\n    private eResize: HTMLElement;\n    private comp: IHeaderCellComp;\n\n    private resizeStartWidth: number;\n    private resizeWithShiftKey: boolean;\n\n    private ctrl: HeaderCellCtrl;\n\n    constructor(\n        pinned: string | null,\n        column: Column,\n        eResize: HTMLElement,\n        comp: IHeaderCellComp,\n        ctrl: HeaderCellCtrl\n    ) {\n        super();\n        this.pinned = pinned;\n        this.column = column;\n        this.eResize = eResize;\n        this.comp = comp;\n        this.ctrl = ctrl;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const colDef = this.column.getColDef();\n\n        const destroyResizeFuncs: (() => void)[] = [];\n\n        let canResize: boolean;\n        let canAutosize: boolean;\n\n        const addResize = () => {\n            setDisplayed(this.eResize, canResize);\n\n            if (!canResize) { return; }\n\n            const finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({\n                eResizeBar: this.eResize,\n                onResizeStart: this.onResizeStart.bind(this),\n                onResizing: this.onResizing.bind(this, false),\n                onResizeEnd: this.onResizing.bind(this, true)\n            });\n            destroyResizeFuncs.push(finishedWithResizeFunc);\n\n            if (canAutosize) {\n                const skipHeaderOnAutoSize = this.gridOptionsWrapper.isSkipHeaderOnAutoSize();\n\n                const autoSizeColListener = () => {\n                    this.columnModel.autoSizeColumn(this.column, skipHeaderOnAutoSize, \"uiColumnResized\");\n                };\n\n                this.eResize.addEventListener('dblclick', autoSizeColListener);\n                const touchListener: TouchListener = new TouchListener(this.eResize);\n                touchListener.addEventListener(TouchListener.EVENT_DOUBLE_TAP, autoSizeColListener);\n\n                this.addDestroyFunc(() => {\n                    this.eResize.removeEventListener('dblclick', autoSizeColListener);\n                    touchListener.removeEventListener(TouchListener.EVENT_DOUBLE_TAP, autoSizeColListener);\n                    touchListener.destroy();\n                });\n            }\n        };\n\n        const removeResize = () => {\n            destroyResizeFuncs.forEach(f => f());\n            destroyResizeFuncs.length = 0;\n        };\n\n        const refresh = () => {\n            const resize = this.column.isResizable();\n            const autoSize = !this.gridOptionsWrapper.isSuppressAutoSize() && !colDef.suppressAutoSize;\n            const propertyChange = resize !== canResize || autoSize !== canAutosize;\n            if (propertyChange) {\n                canResize = resize;\n                canAutosize = autoSize;\n                removeResize();\n                addResize();\n            }\n        };\n\n        refresh();\n        this.addDestroyFunc(removeResize);\n        this.ctrl.addRefreshFunction(refresh);\n    }\n\n    private onResizing(finished: boolean, resizeAmount: number): void {\n        const resizeAmountNormalised = this.normaliseResizeAmount(resizeAmount);\n        const columnWidths = [{ key: this.column, newWidth: this.resizeStartWidth + resizeAmountNormalised }];\n        this.columnModel.setColumnWidths(columnWidths, this.resizeWithShiftKey, finished, \"uiColumnDragged\");\n\n        if (finished) {\n            this.comp.addOrRemoveCssClass('ag-column-resizing', false);\n        }\n    }\n\n    private onResizeStart(shiftKey: boolean): void {\n        this.resizeStartWidth = this.column.getActualWidth();\n        this.resizeWithShiftKey = shiftKey;\n\n        this.comp.addOrRemoveCssClass('ag-column-resizing', true);\n    }\n\n    // optionally inverts the drag, depending on pinned and RTL\n    // note - this method is duplicated in RenderedHeaderGroupCell - should refactor out?\n    private normaliseResizeAmount(dragChange: number): number {\n        let result = dragChange;\n\n        const notPinningLeft = this.pinned !== Constants.PINNED_LEFT;\n        const pinningRight = this.pinned === Constants.PINNED_RIGHT;\n\n        if (this.gridOptionsWrapper.isEnableRtl()) {\n            // for RTL, dragging left makes the col bigger, except when pinning left\n            if (notPinningLeft) {\n                result *= -1;\n            }\n        } else {\n            // for LTR (ie normal), dragging left makes the col smaller, except when pinning right\n            if (pinningRight) {\n                result *= -1;\n            }\n        }\n\n        return result;\n    }\n\n}","import { Events, CheckboxChangedEvent } from \"../events\";\nimport { AgEvent } from '../events';\nimport { AgAbstractInputField, IInputField } from './agAbstractInputField';\nimport { LabelAlignment } from './agAbstractLabel';\n\nexport interface ChangeEvent extends AgEvent {\n    selected: boolean;\n}\n\nexport class AgCheckbox extends AgAbstractInputField<HTMLInputElement, boolean> {\n\n    protected labelAlignment: LabelAlignment = 'right';\n\n    private selected?: boolean = false;\n    private readOnly = false;\n    private passive = false;\n\n    constructor(config?: IInputField, className = 'ag-checkbox', inputType = 'checkbox') {\n        super(config, className, inputType);\n    }\n\n    protected addInputListeners() {\n        this.addManagedListener(this.eInput, 'click', this.onCheckboxClick.bind(this));\n        this.addManagedListener(this.eLabel, 'click', this.toggle.bind(this));\n    }\n\n    public getNextValue(): boolean {\n        return this.selected === undefined ? true : !this.selected;\n    }\n\n    public setPassive(passive: boolean): void {\n        this.passive = passive;\n    }\n\n    public isReadOnly(): boolean {\n        return this.readOnly;\n    }\n\n    public setReadOnly(readOnly: boolean): void {\n        this.eWrapper.classList.toggle('ag-disabled', readOnly);\n        this.eInput.disabled = readOnly;\n        this.readOnly = readOnly;\n    }\n\n    public setDisabled(disabled: boolean): this {\n        this.eWrapper.classList.toggle('ag-disabled', disabled);\n\n        return super.setDisabled(disabled);\n    }\n\n    public toggle(): void {\n        if (this.eInput.disabled) { return; }\n\n        const previousValue = this.isSelected();\n        const nextValue = this.getNextValue();\n\n        if (this.passive) {\n            this.dispatchChange(nextValue, previousValue);\n        } else {\n            this.setValue(nextValue);\n        }\n    }\n\n    public getValue(): boolean | undefined {\n        return this.isSelected();\n    }\n\n    public setValue(value?: boolean, silent?: boolean): this {\n        this.refreshSelectedClass(value);\n        this.setSelected(value, silent);\n\n        return this;\n    }\n\n    public setName(name: string): this {\n        const input = this.getInputElement();\n        input.name = name;\n\n        return this;\n    }\n\n    protected isSelected(): boolean | undefined {\n        return this.selected;\n    }\n\n    private setSelected(selected?: boolean, silent?: boolean): void {\n        if (this.isSelected() === selected) {\n            return;\n        }\n\n        this.previousValue = this.isSelected();\n\n        selected = this.selected = typeof selected === 'boolean' ? selected : undefined;\n        this.eInput.checked = selected!;\n        this.eInput.indeterminate = selected === undefined;\n\n        if (!silent) {\n            this.dispatchChange(this.selected, this.previousValue);\n        }\n    }\n\n    private dispatchChange(selected: boolean | undefined, previousValue: boolean | undefined, event?: MouseEvent) {\n        this.dispatchEvent({ type: AgCheckbox.EVENT_CHANGED, selected, previousValue, event });\n\n        const input = this.getInputElement();\n        const checkboxChangedEvent: CheckboxChangedEvent = {\n            type: Events.EVENT_CHECKBOX_CHANGED,\n            id: input.id,\n            name: input.name,\n            selected,\n            previousValue\n        };\n\n        this.eventService.dispatchEvent(checkboxChangedEvent);\n    }\n\n    private onCheckboxClick(e: MouseEvent) {\n        if (this.passive || this.eInput.disabled) { return; }\n        const previousValue = this.isSelected();\n        const selected = this.selected = (e.target as HTMLInputElement).checked;\n        this.refreshSelectedClass(selected);\n        this.dispatchChange(selected, previousValue, e);\n    }\n\n    private refreshSelectedClass(value?: boolean | null) {\n        this.eWrapper.classList.toggle('ag-checked', value === true);\n        this.eWrapper.classList.toggle('ag-indeterminate', value == null);\n    }\n}\n","import { AgCheckbox } from \"../../../widgets/agCheckbox\";\nimport { BeanStub } from \"../../../context/beanStub\";\nimport { Autowired } from \"../../../context/context\";\nimport { ColumnApi } from \"../../../columns/columnApi\";\nimport { GridApi } from \"../../../gridApi\";\nimport { Events } from \"../../../events\";\nimport { IRowModel } from \"../../../interfaces/iRowModel\";\nimport { Constants } from \"../../../constants/constants\";\nimport { Column } from \"../../../entities/column\";\nimport { RowNode } from \"../../../entities/rowNode\";\nimport { SelectionService } from \"../../../selectionService\";\nimport { HeaderCellCtrl } from \"./headerCellCtrl\";\nimport { setAriaRole } from \"../../../utils/aria\";\nimport { HeaderCheckboxSelectionCallbackParams } from \"../../../entities/colDef\";\n\nexport class SelectAllFeature extends BeanStub {\n\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('selectionService') private selectionService: SelectionService;\n\n    private cbSelectAllVisible = false;\n    private processingEventFromCheckbox = false;\n    private column: Column;\n    private headerCellCtrl: HeaderCellCtrl;\n\n    private filteredOnly: boolean;\n    private cbSelectAll: AgCheckbox;\n\n    constructor(column: Column) {\n        super();\n        this.column = column;\n\n        const colDef = column.getColDef();\n        this.filteredOnly = colDef ? !!colDef.headerCheckboxSelectionFilteredOnly : false;\n    }\n\n    public onSpaceKeyPressed(e: KeyboardEvent): void {\n        const checkbox = this.cbSelectAll;\n        const eDocument = this.gridOptionsWrapper.getDocument();\n\n        if (checkbox.isDisplayed() && !checkbox.getGui().contains(eDocument.activeElement)) {\n            e.preventDefault();\n            checkbox.setValue(!checkbox.getValue());\n        }\n    }\n\n    public getCheckboxGui(): HTMLElement {\n        return this.cbSelectAll.getGui();\n    }\n\n    public setComp(ctrl: HeaderCellCtrl): void {\n        this.headerCellCtrl = ctrl;\n        this.cbSelectAll = this.createManagedBean(new AgCheckbox());\n        this.cbSelectAll.addCssClass('ag-header-select-all');\n        setAriaRole(this.cbSelectAll.getGui(), 'presentation');\n        this.showOrHideSelectAll();\n\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.showOrHideSelectAll.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.showOrHideSelectAll.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_SELECTION_CHANGED, this.onSelectionChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onModelChanged.bind(this));\n        this.addManagedListener(this.cbSelectAll, AgCheckbox.EVENT_CHANGED, this.onCbSelectAll.bind(this));\n        this.cbSelectAll.getInputElement().setAttribute('tabindex', '-1');\n        this.refreshSelectAllLabel();\n    }\n\n    private showOrHideSelectAll(): void {\n        this.cbSelectAllVisible = this.isCheckboxSelection();\n        this.cbSelectAll.setDisplayed(this.cbSelectAllVisible);\n\n        if (this.cbSelectAllVisible) {\n            // in case user is trying this feature with the wrong model type\n            this.checkRightRowModelType();\n            // make sure checkbox is showing the right state\n            this.updateStateOfCheckbox();\n        }\n        this.refreshSelectAllLabel();\n    }\n\n    private onModelChanged(): void {\n        if (!this.cbSelectAllVisible) { return; }\n        this.updateStateOfCheckbox();\n    }\n\n    private onSelectionChanged(): void {\n        if (!this.cbSelectAllVisible) { return; }\n        this.updateStateOfCheckbox();\n    }\n\n    private getNextCheckboxState(selectionCount: SelectionCount): boolean | null {\n        // if no rows, always have it unselected\n        if (selectionCount.selected === 0 && selectionCount.notSelected === 0) {\n            return false;\n        }\n\n        // if mix of selected and unselected, this is the tri-state\n        if (selectionCount.selected > 0 && selectionCount.notSelected > 0) {\n            return null;\n        }\n\n        // only selected\n        if (selectionCount.selected > 0) {\n            return true;\n        }\n\n        // nothing selected\n        return false;\n    }\n\n    private updateStateOfCheckbox(): void {\n        if (this.processingEventFromCheckbox) { return; }\n\n        this.processingEventFromCheckbox = true;\n\n        const selectionCount = this.getSelectionCount();\n        const allSelected = this.getNextCheckboxState(selectionCount);\n\n        this.cbSelectAll.setValue(allSelected!);\n        this.refreshSelectAllLabel();\n\n        this.processingEventFromCheckbox = false;\n    }\n\n    private refreshSelectAllLabel(): void {\n        if (!this.cbSelectAllVisible) {\n            this.headerCellCtrl.setAriaDescriptionProperty('selectAll', null);\n        } else {\n            const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n            const checked = this.cbSelectAll.getValue();\n            const ariaStatus = checked ? translate('ariaChecked', 'checked') : translate('ariaUnchecked', 'unchecked');\n            const ariaLabel = translate('ariaRowSelectAll', 'Press Space to toggle all rows selection');\n\n            this.headerCellCtrl.setAriaDescriptionProperty('selectAll', `${ariaLabel} (${ariaStatus})`);\n        }\n\n        this.headerCellCtrl.refreshAriaDescription();\n    }\n\n    private getSelectionCount(): SelectionCount {\n        let selectedCount = 0;\n        let notSelectedCount = 0;\n\n        const callback = (node: RowNode) => {\n\n            if (this.gridOptionsWrapper.isGroupSelectsChildren() && node.group) { return; }\n\n            if (node.isSelected()) {\n                selectedCount++;\n            } else if (!node.selectable) {\n                // don't count non-selectable nodes!\n            } else {\n                notSelectedCount++;\n            }\n        };\n\n        if (this.filteredOnly) {\n            this.gridApi.forEachNodeAfterFilter(callback);\n        } else {\n            this.gridApi.forEachNode(callback);\n        }\n\n        return {\n            notSelected: notSelectedCount,\n            selected: selectedCount\n        };\n    }\n\n    private checkRightRowModelType(): void {\n        const rowModelType = this.rowModel.getType();\n        const rowModelMatches = rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n\n        if (!rowModelMatches) {\n            console.warn(`AG Grid: selectAllCheckbox is only available if using normal row model, you are using ${rowModelType}`);\n        }\n    }\n\n    private onCbSelectAll(): void {\n        if (this.processingEventFromCheckbox) { return; }\n        if (!this.cbSelectAllVisible) { return; }\n\n        const value = this.cbSelectAll.getValue();\n\n        if (value) {\n            this.selectionService.selectAllRowNodes(this.filteredOnly);\n        } else {\n            this.selectionService.deselectAllRowNodes(this.filteredOnly);\n        }\n    }\n\n    private isCheckboxSelection(): boolean {\n        let result = this.column.getColDef().headerCheckboxSelection;\n\n        if (typeof result === 'function') {\n            const func = result as (params: HeaderCheckboxSelectionCallbackParams) => boolean;\n            const params: HeaderCheckboxSelectionCallbackParams = {\n                column: this.column,\n                colDef: this.column.getColDef(),\n                columnApi: this.columnApi,\n                api: this.gridApi,\n                context: this.gridOptionsWrapper.getContext()\n            };\n            result = func(params);\n        }\n\n        if (result) {\n            if (this.gridOptionsWrapper.isRowModelServerSide()) {\n                console.warn('AG Grid: headerCheckboxSelection is not supported for Server Side Row Model');\n                return false;\n            }\n            if (this.gridOptionsWrapper.isRowModelInfinite()) {\n                console.warn('AG Grid: headerCheckboxSelection is not supported for Infinite Row Model');\n                return false;\n            }\n            if (this.gridOptionsWrapper.isRowModelViewport()) {\n                console.warn('AG Grid: headerCheckboxSelection is not supported for Viewport Row Model');\n                return false;\n            }\n            // otherwise the row model is compatible, so return true\n            return true;\n        }\n\n        return false;\n    }\n\n}\n\ninterface SelectionCount {\n    selected: number;\n    notSelected: number;\n}\n","import { ColumnApi } from \"../../../columns/columnApi\";\nimport { ColumnModel } from \"../../../columns/columnModel\";\nimport { UserCompDetails, UserComponentFactory } from \"../../../components/framework/userComponentFactory\";\nimport { KeyCode } from '../../../constants/keyCode';\nimport { Autowired, PreDestroy } from \"../../../context/context\";\nimport { DragAndDropService, DragItem, DragSource, DragSourceType } from \"../../../dragAndDrop/dragAndDropService\";\nimport { Column } from \"../../../entities/column\";\nimport { Events } from \"../../../eventKeys\";\nimport { GridApi } from \"../../../gridApi\";\nimport { IMenuFactory } from \"../../../interfaces/iMenuFactory\";\nimport { Beans } from \"../../../rendering/beans\";\nimport { ColumnHoverService } from \"../../../rendering/columnHoverService\";\nimport { SetLeftFeature } from \"../../../rendering/features/setLeftFeature\";\nimport { SortController } from \"../../../sortController\";\nimport { ColumnSortState, getAriaSortState } from \"../../../utils/aria\";\nimport { ManagedFocusFeature } from \"../../../widgets/managedFocusFeature\";\nimport { ITooltipFeatureComp, ITooltipFeatureCtrl, TooltipFeature } from \"../../../widgets/tooltipFeature\";\nimport { HeaderRowCtrl } from \"../../row/headerRowCtrl\";\nimport { AbstractHeaderCellCtrl, IAbstractHeaderCellComp } from \"../abstractCell/abstractHeaderCellCtrl\";\nimport { CssClassApplier } from \"../cssClassApplier\";\nimport { HoverFeature } from \"../hoverFeature\";\nimport { HeaderComp, IHeader, IHeaderParams } from \"./headerComp\";\nimport { ResizeFeature } from \"./resizeFeature\";\nimport { SelectAllFeature } from \"./selectAllFeature\";\n\nexport interface IHeaderCellComp extends IAbstractHeaderCellComp, ITooltipFeatureComp {\n    setWidth(width: string): void;\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\n    setColId(id: string): void;\n    setAriaDescription(description?: string): void;\n    setAriaSort(sort?: ColumnSortState): void;\n    setUserCompDetails(compDetails: UserCompDetails): void;\n    getUserCompInstance(): IHeader | undefined;\n}\n\nexport class HeaderCellCtrl extends AbstractHeaderCellCtrl {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('columnHoverService') private columnHoverService: ColumnHoverService;\n    @Autowired('beans') protected beans: Beans;\n    @Autowired('sortController') private sortController: SortController;\n    @Autowired('menuFactory') private menuFactory: IMenuFactory;\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('userComponentFactory') private userComponentFactory: UserComponentFactory;\n\n    private colDefVersion: number;\n\n    private comp: IHeaderCellComp;\n\n    private column: Column;\n\n    private refreshFunctions: (() => void)[] = [];\n\n    private selectAllFeature: SelectAllFeature;\n\n    private moveDragSource: DragSource | undefined;\n\n    private sortable: boolean | null | undefined;\n    private displayName: string | null;\n    private draggable: boolean;\n    private menuEnabled: boolean;\n    private dragSourceElement: HTMLElement | undefined;\n\n    private userCompDetails: UserCompDetails;\n\n    private userHeaderClasses: Set<string> = new Set();\n    private ariaDescriptionProperties = new Map<string, string>();\n\n    constructor(column: Column, parentRowCtrl: HeaderRowCtrl) {\n        super(column, parentRowCtrl);\n        this.column = column;\n    }\n\n    public setComp(comp: IHeaderCellComp, eGui: HTMLElement, eResize: HTMLElement): void {\n        super.setGui(eGui);\n        this.comp = comp;\n\n        this.colDefVersion = this.columnModel.getColDefVersion();\n\n        this.updateState();\n        this.setupWidth();\n        this.setupMovingCss();\n        this.setupMenuClass();\n        this.setupSortableClass();\n        this.addColumnHoverListener();\n        this.setupFilterCss();\n        this.setupColId();\n        this.setupClassesFromColDef();\n        this.setupTooltip();\n        this.addActiveHeaderMouseListeners();\n        this.setupSelectAll();\n        this.setupUserComp();\n        this.refreshAria();\n\n        this.createManagedBean(new ResizeFeature(this.getPinned(), this.column, eResize, comp, this));\n        this.createManagedBean(new HoverFeature([this.column], eGui));\n        this.createManagedBean(new SetLeftFeature(this.column, eGui, this.beans));\n        this.createManagedBean(new ManagedFocusFeature(\n            eGui,\n            {\n                shouldStopEventPropagation: e => this.shouldStopEventPropagation(e),\n                onTabKeyDown: () => null,\n                handleKeyDown: this.handleKeyDown.bind(this),\n                onFocusIn: this.onFocusIn.bind(this),\n                onFocusOut: this.onFocusOut.bind(this)\n            }\n        ));\n\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.onColumnValueChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onColumnRowGroupChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, this.onColumnPivotChanged.bind(this));\n    }\n\n    private setupUserComp(): void {\n        const compDetails = this.lookupUserCompDetails();\n        this.setCompDetails(compDetails);\n    }\n\n    private setCompDetails(compDetails: UserCompDetails): void {\n        this.userCompDetails = compDetails;\n        this.comp.setUserCompDetails(compDetails);\n    }\n\n    private lookupUserCompDetails(): UserCompDetails {\n        const params = this.createParams();\n        const colDef = this.column.getColDef();\n        return this.userComponentFactory.getHeaderCompDetails(colDef, params)!;\n    }\n\n    private createParams(): IHeaderParams {\n\n        const colDef = this.column.getColDef();\n\n        const params: IHeaderParams = {\n            column: this.column,\n            displayName: this.displayName,\n            enableSorting: colDef.sortable,\n            enableMenu: this.menuEnabled,\n            showColumnMenu: (source: HTMLElement) => {\n                this.gridApi.showColumnMenuAfterButtonClick(this.column, source);\n            },\n            progressSort: (multiSort?: boolean) => {\n                this.sortController.progressSort(this.column, !!multiSort, \"uiColumnSorted\");\n            },\n            setSort: (sort: 'asc' | 'desc' | null, multiSort?: boolean) => {\n                this.sortController.setSortForColumn(this.column, sort, !!multiSort, \"uiColumnSorted\");\n            },\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            context: this.gridOptionsWrapper.getContext(),\n            eGridHeader: this.getGui()\n        } as IHeaderParams;\n\n        return params;\n    }\n\n    private setupSelectAll(): void {\n        this.selectAllFeature = this.createManagedBean(new SelectAllFeature(this.column));\n        this.selectAllFeature.setComp(this);\n    }\n\n    public getSelectAllGui(): HTMLElement {\n        return this.selectAllFeature.getCheckboxGui();\n    }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        if (e.key === KeyCode.SPACE) {\n            this.selectAllFeature.onSpaceKeyPressed(e);\n        }\n        if (e.key === KeyCode.ENTER) {\n            this.onEnterKeyPressed(e);\n        }\n    }\n\n    private onEnterKeyPressed(e: KeyboardEvent): void {\n        /// THIS IS BAD - we are assuming the header is not a user provided comp\n        const headerComp = this.comp.getUserCompInstance() as HeaderComp;\n        if (!headerComp) { return; }\n\n        if (e.ctrlKey || e.metaKey) {\n            if (this.menuEnabled && headerComp.showMenu) {\n                e.preventDefault();\n                headerComp.showMenu();\n            }\n        } else if (this.sortable) {\n            const multiSort = e.shiftKey;\n            this.sortController.progressSort(this.column, multiSort, \"uiColumnSorted\");\n        }\n    }\n\n    public isMenuEnabled(): boolean {\n        return this.menuEnabled;\n    }\n\n    protected onFocusIn(e: FocusEvent) {\n        if (!this.getGui().contains(e.relatedTarget as HTMLElement)) {\n            const rowIndex = this.getRowIndex();\n            this.focusService.setFocusedHeader(rowIndex, this.column);\n        }\n\n        this.setActiveHeader(true);\n    }\n\n    protected onFocusOut(e: FocusEvent) {\n        if (\n            this.getGui().contains(e.relatedTarget as HTMLElement)\n        ) { return; }\n\n        this.setActiveHeader(false);\n    }\n\n    private setupTooltip(): void {\n\n        const tooltipCtrl: ITooltipFeatureCtrl = {\n            getColumn: () => this.column,\n            getColDef: () => this.column.getColDef(),\n            getGui: () => this.eGui,\n            getLocation: () => 'header',\n            getTooltipValue: () => {\n                const res = this.column.getColDef().headerTooltip;\n                return res;\n            },\n        };\n\n        const tooltipFeature = this.createManagedBean(new TooltipFeature(tooltipCtrl, this.beans));\n\n        tooltipFeature.setComp(this.comp);\n\n        this.refreshFunctions.push(() => tooltipFeature.refreshToolTip());\n    }\n\n    private setupClassesFromColDef(): void {\n        const refreshHeaderClasses = () => {\n            const colDef = this.column.getColDef();\n            const goa = this.gridOptionsWrapper;\n            const classes = CssClassApplier.getHeaderClassesFromColDef(colDef, goa, this.column, null);\n\n            const oldClasses = this.userHeaderClasses;\n            this.userHeaderClasses = new Set(classes);\n\n            classes.forEach(c => {\n                if (oldClasses.has(c)) {\n                    // class already added, no need to apply it, but remove from old set\n                    oldClasses.delete(c);\n                } else {\n                    // class new since last time, so apply it\n                    this.comp.addOrRemoveCssClass(c, true);\n                }\n            });\n\n            // now old set only has classes that were applied last time, but not this time, so remove them\n            oldClasses.forEach(c => this.comp.addOrRemoveCssClass(c, false));\n        };\n\n        this.refreshFunctions.push(refreshHeaderClasses);\n        refreshHeaderClasses();\n    }\n\n    public setDragSource(eSource: HTMLElement | undefined): void {\n        this.dragSourceElement = eSource;\n        this.removeDragSource();\n\n        if (!eSource) { return; }\n\n        if (!this.draggable) { return; }\n\n        this.moveDragSource = {\n            type: DragSourceType.HeaderCell,\n            eElement: eSource,\n            defaultIconName: DragAndDropService.ICON_HIDE,\n            getDragItem: () => this.createDragItem(),\n            dragItemName: this.displayName,\n            onDragStarted: () => this.column.setMoving(true, \"uiColumnMoved\"),\n            onDragStopped: () => this.column.setMoving(false, \"uiColumnMoved\")\n        };\n\n        this.dragAndDropService.addDragSource(this.moveDragSource, true);\n    }\n\n    private createDragItem(): DragItem {\n        const visibleState: { [key: string]: boolean; } = {};\n        visibleState[this.column.getId()] = this.column.isVisible();\n\n        return {\n            columns: [this.column],\n            visibleState: visibleState\n        };\n    }\n\n    @PreDestroy\n    public removeDragSource(): void {\n        if (this.moveDragSource) {\n            this.dragAndDropService.removeDragSource(this.moveDragSource);\n            this.moveDragSource = undefined;\n        }\n    }\n\n    private onNewColumnsLoaded(): void {\n        const colDefVersionNow = this.columnModel.getColDefVersion();\n        if (colDefVersionNow != this.colDefVersion) {\n            this.colDefVersion = colDefVersionNow;\n            this.refresh();\n        }\n    }\n\n    private updateState(): void {\n        const colDef = this.column.getColDef();\n        this.menuEnabled = this.menuFactory.isMenuEnabled(this.column) && !colDef.suppressMenu;\n        this.sortable = colDef.sortable;\n        this.displayName = this.calculateDisplayName();\n        this.draggable = this.workOutDraggable();\n    }\n\n    public addRefreshFunction(func: () => void): void {\n        this.refreshFunctions.push(func);\n    }\n\n    private refresh(): void {\n        this.updateState();\n        this.refreshHeaderComp();\n        this.refreshAria();\n        this.refreshFunctions.forEach(f => f());\n    }\n\n    private refreshHeaderComp(): void {\n        const newCompDetails = this.lookupUserCompDetails();\n\n        const compInstance = this.comp.getUserCompInstance();\n\n        // only try refresh if old comp exists adn it is the correct type\n        const attemptRefresh = compInstance != null && this.userCompDetails.componentClass == newCompDetails.componentClass;\n\n        const headerCompRefreshed = attemptRefresh ? this.attemptHeaderCompRefresh(newCompDetails.params) : false;\n\n        if (headerCompRefreshed) {\n            // we do this as a refresh happens after colDefs change, and it's possible the column has had it's\n            // draggable property toggled. no need to call this if not refreshing, as setDragSource is done\n            // as part of appendHeaderComp\n            this.setDragSource(this.dragSourceElement);\n        } else {\n            this.setCompDetails(newCompDetails);\n        }\n    }\n\n    public attemptHeaderCompRefresh(params: IHeaderParams): boolean {\n        const headerComp = this.comp.getUserCompInstance();\n        if (!headerComp) { return false; }\n\n        // if no refresh method, then we want to replace the headerComp\n        if (!headerComp.refresh) { return false; }\n\n        const res = headerComp.refresh(params);\n\n        return res;\n    }\n\n    private calculateDisplayName(): string | null {\n        return this.columnModel.getDisplayNameForColumn(this.column, 'header', true);\n    }\n\n    private checkDisplayName(): void {\n        // display name can change if aggFunc different, eg sum(Gold) is now max(Gold)\n        if (this.displayName !== this.calculateDisplayName()) {\n            this.refresh();\n        }\n    }\n\n    private workOutDraggable(): boolean {\n        const colDef = this.column.getColDef();\n        const isSuppressMovableColumns = this.gridOptionsWrapper.isSuppressMovableColumns();\n\n        const colCanMove = !isSuppressMovableColumns && !colDef.suppressMovable && !colDef.lockPosition;\n\n        // we should still be allowed drag the column, even if it can't be moved, if the column\n        // can be dragged to a rowGroup or pivot drop zone\n        return !!colCanMove || !!colDef.enableRowGroup || !!colDef.enablePivot;\n    }\n\n    private onColumnRowGroupChanged(): void {\n        this.checkDisplayName();\n    }\n\n    private onColumnPivotChanged(): void {\n        this.checkDisplayName();\n    }\n\n    private onColumnValueChanged(): void {\n        this.checkDisplayName();\n    }\n\n    private setupWidth(): void {\n        const listener = () => {\n            this.comp.setWidth(this.column.getActualWidth() + 'px');\n        };\n\n        this.addManagedListener(this.column, Column.EVENT_WIDTH_CHANGED, listener);\n        listener();\n    }\n\n    private setupMovingCss(): void {\n        const listener = () => {\n            // this is what makes the header go dark when it is been moved (gives impression to\n            // user that the column was picked up).\n            this.comp.addOrRemoveCssClass('ag-header-cell-moving', this.column.isMoving());\n        };\n\n        this.addManagedListener(this.column, Column.EVENT_MOVING_CHANGED, listener);\n        listener();\n    }\n\n    private setupMenuClass(): void {\n        const listener = () => {\n            this.comp.addOrRemoveCssClass('ag-column-menu-visible', this.column.isMenuVisible());\n        };\n\n        this.addManagedListener(this.column, Column.EVENT_MENU_VISIBLE_CHANGED, listener);\n        listener();\n    }\n\n    private setupSortableClass(): void {\n\n        const updateSortableCssClass = () => {\n            this.comp.addOrRemoveCssClass('ag-header-cell-sortable', !!this.sortable);\n        };\n\n        updateSortableCssClass();\n\n        this.addRefreshFunction(updateSortableCssClass);\n        this.addManagedListener(this.column, Column.EVENT_SORT_CHANGED, this.refreshAriaSort.bind(this));\n    }\n\n    private refreshAriaSort(): void {\n        if (this.sortable) {\n            const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n            this.comp.setAriaSort(getAriaSortState(this.column));\n            this.setAriaDescriptionProperty('sort', translate('ariaSortableColumn', 'Press ENTER to sort.'));\n        } else {\n            this.comp.setAriaSort();\n            this.setAriaDescriptionProperty('sort', null);\n        }\n    }\n\n    private refreshAriaMenu(): void {\n        if (this.menuEnabled) {\n            const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n            this.setAriaDescriptionProperty('menu', translate('ariaMenuColumn', 'Press CTRL ENTER to open column menu.'));\n        } else {\n            this.setAriaDescriptionProperty('menu', null);\n        }\n    }\n\n    public setAriaDescriptionProperty(property: string, value: string | null): void {\n        if (value != null) {\n            this.ariaDescriptionProperties.set(property, value);\n        } else {\n            this.ariaDescriptionProperties.delete(property);\n        }\n    }\n\n    public refreshAriaDescription(): void {\n        const descriptionArray = Array.from(this.ariaDescriptionProperties.values());\n\n        this.comp.setAriaDescription(descriptionArray.length ? descriptionArray.join(' ') : undefined);\n    }\n\n    private refreshAria(): void {\n        this.refreshAriaSort();\n        this.refreshAriaMenu();\n        this.refreshAriaDescription();\n    }\n\n    private addColumnHoverListener(): void {\n        const listener = () => {\n            if (!this.gridOptionsWrapper.isColumnHoverHighlight()) { return; }\n            const isHovered = this.columnHoverService.isHovered(this.column);\n            this.comp.addOrRemoveCssClass('ag-column-hover', isHovered);\n        };\n\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, listener);\n        listener();\n    }\n\n    private setupFilterCss(): void {\n        const listener = () => {\n            this.comp.addOrRemoveCssClass('ag-header-cell-filtered', this.column.isFilterActive());\n        };\n\n        this.addManagedListener(this.column, Column.EVENT_FILTER_ACTIVE_CHANGED, listener);\n        listener();\n    }\n\n    private setupColId(): void {\n        this.comp.setColId(this.column.getColId());\n    }\n\n    private addActiveHeaderMouseListeners(): void {\n        const listener = (e: MouseEvent) => this.setActiveHeader(e.type === 'mouseenter');\n        this.addManagedListener(this.getGui(), 'mouseenter', listener);\n        this.addManagedListener(this.getGui(), 'mouseleave', listener);\n    }\n\n    private setActiveHeader(active: boolean): void {\n        this.comp.addOrRemoveCssClass('ag-header-active', active);\n    }\n}\n","import { ColumnModel, ColumnResizeSet } from \"../../../columns/columnModel\";\nimport { Constants } from \"../../../constants/constants\";\nimport { BeanStub } from \"../../../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../../../context/context\";\nimport { Column } from \"../../../entities/column\";\nimport { ColumnGroup } from \"../../../entities/columnGroup\";\nimport { AutoWidthCalculator } from \"../../../rendering/autoWidthCalculator\";\nimport { HorizontalResizeService } from \"../../common/horizontalResizeService\";\nimport { IHeaderGroupCellComp } from \"./headerGroupCellCtrl\";\n\nexport class GroupResizeFeature extends BeanStub {\n\n    private eResize: HTMLElement;\n    private columnGroup: ColumnGroup;\n    private comp: IHeaderGroupCellComp;\n    private pinned: string | null;\n\n    private resizeCols: Column[];\n    private resizeStartWidth: number;\n    private resizeRatios: number[];\n\n    private resizeTakeFromCols: Column[] | null;\n    private resizeTakeFromStartWidth: number | null;\n    private resizeTakeFromRatios: number[] | null;\n\n    @Autowired('horizontalResizeService') private readonly horizontalResizeService: HorizontalResizeService;\n    @Autowired('autoWidthCalculator') private readonly autoWidthCalculator: AutoWidthCalculator;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n\n    constructor(comp: IHeaderGroupCellComp, eResize: HTMLElement,  pinned: string | null, columnGroup: ColumnGroup) {\n        super();\n\n        this.eResize = eResize;\n        this.comp = comp;\n        this.pinned = pinned;\n        this.columnGroup = columnGroup;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n\n        if (!this.columnGroup.isResizable()) {\n            this.comp.addOrRemoveResizableCssClass('ag-hidden', true);\n            return;\n        }\n\n        const finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({\n            eResizeBar: this.eResize,\n            onResizeStart: this.onResizeStart.bind(this),\n            onResizing: this.onResizing.bind(this, false),\n            onResizeEnd: this.onResizing.bind(this, true)\n        });\n\n        this.addDestroyFunc(finishedWithResizeFunc);\n\n        if (!this.gridOptionsWrapper.isSuppressAutoSize()) {\n            const skipHeaderOnAutoSize = this.gridOptionsWrapper.isSkipHeaderOnAutoSize();\n\n            this.eResize.addEventListener('dblclick', () => {\n                // get list of all the column keys we are responsible for\n                const keys: string[] = [];\n                const leafCols = this.columnGroup.getDisplayedLeafColumns();\n\n                leafCols.forEach((column: Column) => {\n                    // not all cols in the group may be participating with auto-resize\n                    if (!column.getColDef().suppressAutoSize) {\n                        keys.push(column.getColId());\n                    }\n                });\n\n                if (keys.length > 0) {\n                    this.columnModel.autoSizeColumns({\n                        columns: keys,\n                        skipHeader: skipHeaderOnAutoSize,\n                        stopAtGroup: this.columnGroup,\n                        source: 'uiColumnResized'\n                    });\n                }\n\n                this.resizeLeafColumnsToFit();\n            });\n        }\n    }\n\n    public onResizeStart(shiftKey: boolean): void {\n        this.calculateInitialValues();\n\n        let takeFromGroup: ColumnGroup | null = null;\n\n        if (shiftKey) {\n            takeFromGroup = this.columnModel.getDisplayedGroupAfter(this.columnGroup);\n        }\n\n        if (takeFromGroup) {\n            const takeFromLeafCols = takeFromGroup.getDisplayedLeafColumns();\n\n            this.resizeTakeFromCols = takeFromLeafCols.filter(col => col.isResizable());\n\n            this.resizeTakeFromStartWidth = 0;\n            this.resizeTakeFromCols.forEach(col => this.resizeTakeFromStartWidth! += col.getActualWidth());\n            this.resizeTakeFromRatios = [];\n            this.resizeTakeFromCols.forEach(col => this.resizeTakeFromRatios!.push(col.getActualWidth() / this.resizeTakeFromStartWidth!));\n        } else {\n            this.resizeTakeFromCols = null;\n            this.resizeTakeFromStartWidth = null;\n            this.resizeTakeFromRatios = null;\n        }\n\n        this.comp.addOrRemoveCssClass('ag-column-resizing', true);\n\n    }\n\n    public onResizing(finished: boolean, resizeAmount: any): void {\n        const resizeAmountNormalised = this.normaliseDragChange(resizeAmount);\n        const width = this.resizeStartWidth + resizeAmountNormalised;\n\n        this.resizeColumns(width, finished);\n    }\n\n    public resizeLeafColumnsToFit(): void {\n        const preferredSize = this.autoWidthCalculator.getPreferredWidthForColumnGroup(this.columnGroup);\n        this.calculateInitialValues();\n\n        if (preferredSize > this.resizeStartWidth) {\n            this.resizeColumns(preferredSize, true);\n        }\n    }\n\n    public resizeColumns(totalWidth: number, finished: boolean = true): void {\n        const resizeSets: ColumnResizeSet[] = [];\n\n        resizeSets.push({\n            columns: this.resizeCols,\n            ratios: this.resizeRatios,\n            width: totalWidth\n        });\n\n        if (this.resizeTakeFromCols) {\n            const diff = totalWidth - this.resizeStartWidth;\n            resizeSets.push({\n                columns: this.resizeTakeFromCols,\n                ratios: this.resizeTakeFromRatios!,\n                width: this.resizeTakeFromStartWidth! - diff\n            });\n        }\n\n        this.columnModel.resizeColumnSets({\n            resizeSets,\n            finished,\n            source: 'uiColumnDragged'\n        });\n\n        if (finished) {\n            this.comp.addOrRemoveCssClass('ag-column-resizing', false);\n        }\n    }\n\n    private calculateInitialValues(): void {\n        const leafCols = this.columnGroup.getDisplayedLeafColumns();\n        this.resizeCols = leafCols.filter(col => col.isResizable());\n        this.resizeStartWidth = 0;\n        this.resizeCols.forEach(col => this.resizeStartWidth += col.getActualWidth());\n        this.resizeRatios = [];\n        this.resizeCols.forEach(col => this.resizeRatios.push(col.getActualWidth() / this.resizeStartWidth));\n    }\n\n    // optionally inverts the drag, depending on pinned and RTL\n    // note - this method is duplicated in RenderedHeaderCell - should refactor out?\n    private normaliseDragChange(dragChange: number): number {\n        let result = dragChange;\n\n        if (this.gridOptionsWrapper.isEnableRtl()) {\n            // for RTL, dragging left makes the col bigger, except when pinning left\n            if (this.pinned !== Constants.PINNED_LEFT) {\n                result *= -1;\n            }\n        } else if (this.pinned === Constants.PINNED_RIGHT) {\n            // for LTR (ie normal), dragging left makes the col smaller, except when pinning right\n            result *= -1;\n        }\n\n        return result;\n    }\n}","import { BeanStub } from \"../../../context/beanStub\";\nimport { PostConstruct } from \"../../../context/context\";\nimport { Column } from \"../../../entities/column\";\nimport { ColumnGroup } from \"../../../entities/columnGroup\";\nimport { IHeaderGroupCellComp } from \"./headerGroupCellCtrl\";\n\nexport class GroupWidthFeature extends BeanStub {\n\n    private columnGroup: ColumnGroup;\n    private comp: IHeaderGroupCellComp;\n\n    // the children can change, we keep destroy functions related to listening to the children here\n    private removeChildListenersFuncs: (() => void)[] = [];\n\n    constructor(comp: IHeaderGroupCellComp, columnGroup: ColumnGroup) {\n        super();\n        this.columnGroup = columnGroup;\n        this.comp = comp;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        // we need to listen to changes in child columns, as they impact our width\n        this.addListenersToChildrenColumns();\n\n        // the children belonging to this group can change, so we need to add and remove listeners as they change\n        this.addManagedListener(this.columnGroup, ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED, this.onDisplayedChildrenChanged.bind(this));\n\n        this.onWidthChanged();\n\n        // the child listeners are not tied to this components life-cycle, as children can get added and removed\n        // to the group - hence they are on a different life-cycle. so we must make sure the existing children\n        // listeners are removed when we finally get destroyed\n        this.addDestroyFunc(this.removeListenersOnChildrenColumns.bind(this));\n    }\n\n    private addListenersToChildrenColumns(): void {\n        // first destroy any old listeners\n        this.removeListenersOnChildrenColumns();\n\n        // now add new listeners to the new set of children\n        const widthChangedListener = this.onWidthChanged.bind(this);\n        this.columnGroup.getLeafColumns().forEach(column => {\n            column.addEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);\n            column.addEventListener(Column.EVENT_VISIBLE_CHANGED, widthChangedListener);\n            this.removeChildListenersFuncs.push(() => {\n                column.removeEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);\n                column.removeEventListener(Column.EVENT_VISIBLE_CHANGED, widthChangedListener);\n            });\n        });\n    }\n\n    private removeListenersOnChildrenColumns(): void {\n        this.removeChildListenersFuncs.forEach(func => func());\n        this.removeChildListenersFuncs = [];\n    }\n\n    private onDisplayedChildrenChanged(): void {\n        this.addListenersToChildrenColumns();\n        this.onWidthChanged();\n    }\n\n    private onWidthChanged(): void {\n        this.comp.setWidth(this.columnGroup.getActualWidth() + 'px');\n    }\n\n}\n","import { ColumnApi } from \"../../../columns/columnApi\";\nimport { ColumnModel } from \"../../../columns/columnModel\";\nimport { UserCompDetails, UserComponentFactory } from \"../../../components/framework/userComponentFactory\";\nimport { KeyCode } from '../../../constants/keyCode';\nimport { Autowired } from \"../../../context/context\";\nimport {\n    DragAndDropService,\n    DragItem,\n    DragSource,\n    DragSourceType\n} from \"../../../dragAndDrop/dragAndDropService\";\nimport { Column } from \"../../../entities/column\";\nimport { ColumnGroup } from \"../../../entities/columnGroup\";\nimport { ProvidedColumnGroup } from \"../../../entities/providedColumnGroup\";\nimport { GridApi } from \"../../../gridApi\";\nimport { Beans } from \"../../../rendering/beans\";\nimport { SetLeftFeature } from \"../../../rendering/features/setLeftFeature\";\nimport { removeFromArray } from \"../../../utils/array\";\nimport { ManagedFocusFeature } from \"../../../widgets/managedFocusFeature\";\nimport { ITooltipFeatureComp, ITooltipFeatureCtrl, TooltipFeature } from \"../../../widgets/tooltipFeature\";\nimport { HeaderRowCtrl } from \"../../row/headerRowCtrl\";\nimport { AbstractHeaderCellCtrl, IAbstractHeaderCellComp } from \"../abstractCell/abstractHeaderCellCtrl\";\nimport { CssClassApplier } from \"../cssClassApplier\";\nimport { HoverFeature } from \"../hoverFeature\";\nimport { GroupResizeFeature } from \"./groupResizeFeature\";\nimport { GroupWidthFeature } from \"./groupWidthFeature\";\nimport { IHeaderGroupParams } from \"./headerGroupComp\";\n\nexport interface IHeaderGroupCellComp extends IAbstractHeaderCellComp, ITooltipFeatureComp {\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\n    addOrRemoveResizableCssClass(cssClassName: string, on: boolean): void;\n    setWidth(width: string): void;\n    setColId(id: string): void;\n    setAriaExpanded(expanded: 'true' | 'false' | undefined): void;\n    setUserCompDetails(compDetails: UserCompDetails): void;\n}\n\nexport class HeaderGroupCellCtrl extends AbstractHeaderCellCtrl {\n\n    @Autowired('beans') protected beans: Beans;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n    @Autowired('userComponentFactory') private userComponentFactory: UserComponentFactory;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n\n    private columnGroup: ColumnGroup;\n    private comp: IHeaderGroupCellComp;\n\n    private expandable: boolean;\n    private displayName: string | null;\n    private groupResizeFeature: GroupResizeFeature;\n\n    constructor(columnGroup: ColumnGroup, parentRowCtrl: HeaderRowCtrl) {\n        super(columnGroup, parentRowCtrl);\n        this.columnGroup = columnGroup;\n    }\n\n    public setComp(comp: IHeaderGroupCellComp, eGui: HTMLElement, eResize: HTMLElement): void {\n        super.setGui(eGui);\n        this.comp = comp;\n\n        this.displayName = this.columnModel.getDisplayNameForColumnGroup(this.columnGroup, 'header');\n\n        this.addClasses();\n        this.addAttributes();\n        this.setupMovingCss();\n        this.setupExpandable();\n        this.setupTooltip();\n        this.setupUserComp();\n\n        const pinned = this.getParentRowCtrl().getPinned();\n        const leafCols = this.columnGroup.getProvidedColumnGroup().getLeafColumns();\n\n        this.createManagedBean(new HoverFeature(leafCols, eGui));\n        this.createManagedBean(new SetLeftFeature(this.columnGroup, eGui, this.beans));\n        this.createManagedBean(new GroupWidthFeature(comp, this.columnGroup));\n        this.groupResizeFeature = this.createManagedBean(new GroupResizeFeature(comp, eResize, pinned, this.columnGroup));\n\n        this.createManagedBean(new ManagedFocusFeature(\n            eGui,\n            {\n                shouldStopEventPropagation: this.shouldStopEventPropagation.bind(this),\n                onTabKeyDown: () => undefined,\n                handleKeyDown: this.handleKeyDown.bind(this),\n                onFocusIn: this.onFocusIn.bind(this)\n            }\n        ));\n    }\n\n    public resizeLeafColumnsToFit(): void {\n        this.groupResizeFeature.onResizeStart(false);\n        this.groupResizeFeature.resizeLeafColumnsToFit();\n    }\n\n    private setupUserComp(): void {\n\n        let displayName = this.displayName;\n\n        const params: IHeaderGroupParams = {\n            displayName: this.displayName!,\n            columnGroup: this.columnGroup,\n            setExpanded: (expanded: boolean) => {\n                this.columnModel.setColumnGroupOpened(this.columnGroup.getProvidedColumnGroup(), expanded, \"gridInitializing\");\n            },\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            context: this.gridOptionsWrapper.getContext()\n        };\n\n        if (!displayName) {\n            let columnGroup = this.columnGroup;\n            const leafCols = columnGroup.getLeafColumns();\n\n            // find the top most column group that represents the same columns. so if we are dragging a group, we also\n            // want to visually show the parent groups dragging for the same column set. for example imaging 5 levels\n            // of grouping, with each group only containing the next group, and the last group containing three columns,\n            // then when you move any group (even the lowest level group) you are in-fact moving all the groups, as all\n            // the groups represent the same column set.\n            while (columnGroup.getParent() && columnGroup.getParent().getLeafColumns().length === leafCols.length) {\n                columnGroup = columnGroup.getParent();\n            }\n\n            const colGroupDef = columnGroup.getColGroupDef();\n\n            if (colGroupDef) {\n                displayName = colGroupDef.headerName!;\n            }\n\n            if (!displayName) {\n                displayName = leafCols ? this.columnModel.getDisplayNameForColumn(leafCols[0], 'header', true)! : '';\n            }\n        }\n\n        const compDetails = this.userComponentFactory.getHeaderGroupCompDetails(params)!;\n\n        this.comp.setUserCompDetails(compDetails);\n    }\n\n    private setupTooltip(): void {\n\n        const colGroupDef = this.columnGroup.getColGroupDef();\n\n        const tooltipCtrl: ITooltipFeatureCtrl = {\n            getColumn: () => this.columnGroup,\n            getGui: () => this.eGui,\n            getLocation: () => 'headerGroup',\n            getTooltipValue: () => colGroupDef && colGroupDef.headerTooltip\n        };\n\n        if (colGroupDef) {\n            tooltipCtrl.getColDef = () => colGroupDef;\n        }\n\n        const tooltipFeature = this.createManagedBean(new TooltipFeature(tooltipCtrl, this.beans));\n\n        tooltipFeature.setComp(this.comp);\n    }\n\n    private setupExpandable(): void {\n        const providedColGroup = this.columnGroup.getProvidedColumnGroup();\n\n        this.refreshExpanded();\n\n        this.addManagedListener(providedColGroup, ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED, this.refreshExpanded.bind(this));\n        this.addManagedListener(providedColGroup, ProvidedColumnGroup.EVENT_EXPANDED_CHANGED, this.refreshExpanded.bind(this));\n    }\n\n    private refreshExpanded(): void {\n        const column = this.columnGroup as ColumnGroup;\n        this.expandable = column.isExpandable();\n        const expanded = column.isExpanded();\n\n        if (this.expandable) {\n            this.comp.setAriaExpanded(expanded ? 'true' : 'false');\n        } else {\n            this.comp.setAriaExpanded(undefined);\n        }\n    }\n\n    private addAttributes(): void {\n        this.comp.setColId(this.columnGroup.getUniqueId());\n    }\n\n    private addClasses(): void {\n        const colGroupDef = this.columnGroup.getColGroupDef();\n        const classes = CssClassApplier.getHeaderClassesFromColDef(colGroupDef, this.gridOptionsWrapper, null, this.columnGroup);\n\n        // having different classes below allows the style to not have a bottom border\n        // on the group header, if no group is specified\n        classes.push(this.columnGroup.isPadding() ? `ag-header-group-cell-no-group` : `ag-header-group-cell-with-group`);\n\n        classes.forEach(c => this.comp.addOrRemoveCssClass(c, true));\n    }\n\n    private setupMovingCss(): void {\n        const providedColumnGroup = this.columnGroup.getProvidedColumnGroup();\n        const leafColumns = providedColumnGroup.getLeafColumns();\n\n        // this function adds or removes the moving css, based on if the col is moving.\n        // this is what makes the header go dark when it is been moved (gives impression to\n        // user that the column was picked up).\n        const listener = () => this.comp.addOrRemoveCssClass('ag-header-cell-moving', this.columnGroup.isMoving());\n\n        leafColumns.forEach(col => {\n            this.addManagedListener(col, Column.EVENT_MOVING_CHANGED, listener);\n        });\n\n        listener();\n    }\n\n    protected onFocusIn(e: FocusEvent) {\n        if (!this.eGui.contains(e.relatedTarget as HTMLElement)) {\n            const rowIndex = this.getRowIndex();\n            this.beans.focusService.setFocusedHeader(rowIndex, this.columnGroup);\n        }\n    }\n\n    protected handleKeyDown(e: KeyboardEvent) {\n        const eDocument = this.gridOptionsWrapper.getDocument();\n        const activeEl = eDocument.activeElement;\n        const wrapperHasFocus = activeEl === this.eGui;\n\n        if (!this.expandable || !wrapperHasFocus) { return; }\n\n        if (e.key === KeyCode.ENTER) {\n            const column = this.columnGroup;\n            const newExpandedValue = !column.isExpanded();\n\n            this.columnModel.setColumnGroupOpened(column.getProvidedColumnGroup(), newExpandedValue, \"uiColumnExpanded\");\n        }\n    }\n\n    // unlike columns, this will only get called once, as we don't react on props on column groups\n    // (we will always destroy and recreate this comp if something changes)\n    public setDragSource(eHeaderGroup: HTMLElement): void {\n\n        if (this.isSuppressMoving()) { return; }\n\n        const allLeafColumns = this.columnGroup.getProvidedColumnGroup().getLeafColumns();\n        const dragSource: DragSource = {\n            type: DragSourceType.HeaderCell,\n            eElement: eHeaderGroup,\n            defaultIconName: DragAndDropService.ICON_HIDE,\n            dragItemName: this.displayName,\n            // we add in the original group leaf columns, so we move both visible and non-visible items\n            getDragItem: this.getDragItemForGroup.bind(this),\n            onDragStarted: () => allLeafColumns.forEach(col => col.setMoving(true, \"uiColumnDragged\")),\n            onDragStopped: () => allLeafColumns.forEach(col => col.setMoving(false, \"uiColumnDragged\"))\n        };\n\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDragSource(dragSource));\n    }\n\n    // when moving the columns, we want to move all the columns (contained within the DragItem) in this group in one go,\n    // and in the order they are currently in the screen.\n    public getDragItemForGroup(): DragItem {\n        const allColumnsOriginalOrder = this.columnGroup.getProvidedColumnGroup().getLeafColumns();\n\n        // capture visible state, used when re-entering grid to dictate which columns should be visible\n        const visibleState: { [key: string]: boolean; } = {};\n        allColumnsOriginalOrder.forEach(column => visibleState[column.getId()] = column.isVisible());\n\n        const allColumnsCurrentOrder: Column[] = [];\n        this.columnModel.getAllDisplayedColumns().forEach(column => {\n            if (allColumnsOriginalOrder.indexOf(column) >= 0) {\n                allColumnsCurrentOrder.push(column);\n                removeFromArray(allColumnsOriginalOrder, column);\n            }\n        });\n\n        // we are left with non-visible columns, stick these in at the end\n        allColumnsOriginalOrder.forEach(column => allColumnsCurrentOrder.push(column));\n\n        // create and return dragItem\n        return {\n            columns: allColumnsCurrentOrder,\n            visibleState: visibleState\n        };\n    }\n\n    private isSuppressMoving(): boolean {\n        // if any child is fixed, then don't allow moving\n        let childSuppressesMoving = false;\n        this.columnGroup.getLeafColumns().forEach((column: Column) => {\n            if (column.getColDef().suppressMovable || column.getColDef().lockPosition) {\n                childSuppressesMoving = true;\n            }\n        });\n\n        const result = childSuppressesMoving || this.gridOptionsWrapper.isSuppressMovableColumns();\n\n        return result;\n    }\n}\n","import { ColumnModel } from \"../../columns/columnModel\";\nimport { Constants } from \"../../constants/constants\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Autowired, PreDestroy } from \"../../context/context\";\nimport { Column } from \"../../entities/column\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { IHeaderColumn } from \"../../entities/iHeaderColumn\";\nimport { Events } from \"../../eventKeys\";\nimport { FocusService } from \"../../focusService\";\nimport { GridOptionsWrapper } from \"../../gridOptionsWrapper\";\nimport { isBrowserSafari } from \"../../utils/browser\";\nimport { getAllValuesInObject, iterateObject } from \"../../utils/object\";\nimport { AbstractHeaderCellCtrl } from \"../cells/abstractCell/abstractHeaderCellCtrl\";\nimport { HeaderFilterCellCtrl } from \"../cells/floatingFilter/headerFilterCellCtrl\";\nimport { HeaderCellCtrl } from \"../cells/column/headerCellCtrl\";\nimport { HeaderGroupCellCtrl } from \"../cells/columnGroup/headerGroupCellCtrl\";\nimport { HeaderRowType } from \"./headerRowComp\";\nimport { values } from \"../../utils/generic\";\n\nexport interface IHeaderRowComp {\n    setTransform(transform: string): void;\n    setTop(top: string): void;\n    setHeight(height: string): void;\n    setHeaderCtrls(ctrls: AbstractHeaderCellCtrl[]): void;\n    setWidth(width: string): void;\n    setAriaRowIndex(rowIndex: number): void;\n}\n\nlet instanceIdSequence = 0;\n\nexport class HeaderRowCtrl extends BeanStub {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('focusService') private focusService: FocusService;\n\n    private comp: IHeaderRowComp;\n    private rowIndex: number;\n    private pinned: string | null;\n    private type: HeaderRowType;\n\n    private instanceId = instanceIdSequence++;\n\n    private headerCellCtrls: { [key: string]: AbstractHeaderCellCtrl } = {};\n\n    constructor(rowIndex: number, pinned: string | null, type: HeaderRowType) {\n        super();\n        this.rowIndex = rowIndex;\n        this.pinned = pinned;\n        this.type = type;\n    }\n\n    public getInstanceId(): number {\n        return this.instanceId;\n    }\n\n    public setComp(comp: IHeaderRowComp): void {\n        this.comp = comp;\n\n        this.onRowHeightChanged();\n        this.onVirtualColumnsChanged();\n        this.setWidth();\n\n        this.addEventListeners();\n\n        if (isBrowserSafari()) {\n            // fix for a Safari rendering bug that caused the header to flicker above chart panels\n            // as you move the mouse over the header\n            this.comp.setTransform('translateZ(0)');\n        }\n\n        comp.setAriaRowIndex(this.rowIndex + 1);\n    }\n\n    private addEventListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));\n\n        // when print layout changes, it changes what columns are in what section\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, this.onDisplayedColumnsChanged.bind(this));\n\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n\n        this.addManagedListener(this.eventService, Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));\n\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, this.onRowHeightChanged.bind(this));\n    }\n\n    public getHeaderCellCtrl(column: ColumnGroup): HeaderGroupCellCtrl | undefined;\n    public getHeaderCellCtrl(column: Column): HeaderCellCtrl | undefined;\n    public getHeaderCellCtrl(column: any): any {\n        return values(this.headerCellCtrls).find(cellCtrl => cellCtrl.getColumnGroupChild() === column);\n    }\n\n    private onDisplayedColumnsChanged(): void {\n        this.onVirtualColumnsChanged();\n        this.setWidth();\n    }\n\n    public getType(): HeaderRowType {\n        return this.type;\n    }\n\n    private onColumnResized(): void {\n        this.setWidth();\n    }\n\n    private setWidth(): void {\n        const width = this.getWidthForRow();\n        this.comp.setWidth(`${width}px`);\n    }\n\n    private getWidthForRow(): number {\n        const printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;\n\n        if (printLayout) {\n            const pinned = this.pinned != null;\n            if (pinned) { return 0; }\n\n            return this.columnModel.getContainerWidth(Constants.PINNED_RIGHT)\n                + this.columnModel.getContainerWidth(Constants.PINNED_LEFT)\n                + this.columnModel.getContainerWidth(null);\n        }\n\n        // if not printing, just return the width as normal\n        return this.columnModel.getContainerWidth(this.pinned);\n    }\n\n    private onRowHeightChanged(): void {\n        let headerRowCount = this.columnModel.getHeaderRowCount();\n        const sizes: number[] = [];\n\n        let numberOfFloating = 0;\n        let groupHeight: number | null | undefined;\n        let headerHeight: number | null | undefined;\n\n        if (this.columnModel.hasFloatingFilters()) {\n            headerRowCount++;\n            numberOfFloating = 1;\n        }\n\n        if (this.columnModel.isPivotMode()) {\n            groupHeight = this.gridOptionsWrapper.getPivotGroupHeaderHeight();\n            headerHeight = this.gridOptionsWrapper.getPivotHeaderHeight();\n        } else {\n            groupHeight = this.gridOptionsWrapper.getGroupHeaderHeight();\n            headerHeight = this.gridOptionsWrapper.getHeaderHeight();\n        }\n\n        const numberOfNonGroups = 1 + numberOfFloating;\n        const numberOfGroups = headerRowCount - numberOfNonGroups;\n\n        for (let i = 0; i < numberOfGroups; i++) { sizes.push(groupHeight as number); }\n\n        sizes.push(headerHeight as number);\n\n        for (let i = 0; i < numberOfFloating; i++) { sizes.push(this.gridOptionsWrapper.getFloatingFiltersHeight() as number); }\n\n        let rowHeight = 0;\n\n        for (let i = 0; i < this.rowIndex; i++) { rowHeight += sizes[i]; }\n\n        this.comp.setTop(rowHeight + 'px');\n        this.comp.setHeight(sizes[this.rowIndex] + 'px');\n    }\n\n    public getPinned(): string | null {\n        return this.pinned;\n    }\n\n    public getRowIndex(): number {\n        return this.rowIndex;\n    }\n\n    private onVirtualColumnsChanged(): void {\n        const oldCtrls = this.headerCellCtrls;\n        this.headerCellCtrls = {};\n        const columns = this.getColumnsInViewport();\n\n        columns.forEach(child => {\n            // skip groups that have no displayed children. this can happen when the group is broken,\n            // and this section happens to have nothing to display for the open / closed state.\n            // (a broken group is one that is split, ie columns in the group have a non-group column\n            // in between them)\n            if (child.isEmptyGroup()) {\n                return;\n            }\n\n            const idOfChild = child.getUniqueId();\n\n            // if we already have this cell rendered, do nothing\n            let headerCtrl: AbstractHeaderCellCtrl | undefined = oldCtrls[idOfChild];\n            delete oldCtrls[idOfChild];\n\n            // it's possible there is a new Column with the same ID, but it's for a different Column.\n            // this is common with pivoting, where the pivot cols change, but the id's are still pivot_0,\n            // pivot_1 etc. so if new col but same ID, need to remove the old col here first as we are\n            // about to replace it in the this.headerComps map.\n            const forOldColumn = headerCtrl && headerCtrl.getColumnGroupChild() != child;\n            if (forOldColumn) {\n                this.destroyBean(headerCtrl);\n                headerCtrl = undefined;\n            }\n\n            if (headerCtrl == null) {\n                switch (this.type) {\n                    case HeaderRowType.FLOATING_FILTER:\n                        headerCtrl = this.createBean(new HeaderFilterCellCtrl(child as Column, this));\n                        break;\n                    case HeaderRowType.COLUMN_GROUP:\n                        headerCtrl = this.createBean(new HeaderGroupCellCtrl(child as ColumnGroup, this));\n                        break;\n                    default:\n                        headerCtrl = this.createBean(new HeaderCellCtrl(child as Column, this));\n                        break;\n                }\n            }\n\n            this.headerCellCtrls[idOfChild] = headerCtrl;\n        });\n\n        // we want to keep columns that are focused, otherwise keyboard navigation breaks\n        const isFocusedAndDisplayed = (ctrl: HeaderCellCtrl) => {\n            const isFocused = this.focusService.isHeaderWrapperFocused(ctrl);\n            if (!isFocused) { return false; }\n            const isDisplayed = this.columnModel.isDisplayed(ctrl.getColumnGroupChild());\n            return isDisplayed;\n        };\n\n        iterateObject(oldCtrls, (id: string, oldCtrl: HeaderCellCtrl) => {\n            const keepCtrl = isFocusedAndDisplayed(oldCtrl);\n            if (keepCtrl) {\n                this.headerCellCtrls[id] = oldCtrl;\n            } else {\n                this.destroyBean(oldCtrl);\n            }\n        });\n\n        const ctrlsToDisplay = getAllValuesInObject(this.headerCellCtrls);\n        this.comp.setHeaderCtrls(ctrlsToDisplay);\n    }\n\n    @PreDestroy\n    private destroyCtrls(): void {\n        iterateObject(this.headerCellCtrls, (key, ctrl)=> {\n            this.destroyBean(ctrl);\n        });\n        this.headerCellCtrls = {};\n    }\n\n    private getColumnsInViewport(): IHeaderColumn[] {\n        const printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;\n        return printLayout ? this.getColumnsInViewportPrintLayout() : this.getColumnsInViewportNormalLayout();\n    }\n\n    private getColumnsInViewportPrintLayout(): IHeaderColumn[] {\n        // for print layout, we add all columns into the center\n        if (this.pinned != null) { return []; }\n\n        let viewportColumns: IHeaderColumn[] = [];\n        const actualDepth = this.getActualDepth();\n\n        [Constants.PINNED_LEFT, null, Constants.PINNED_RIGHT].forEach(pinned => {\n            const items = this.columnModel.getVirtualHeaderGroupRow(pinned, actualDepth);\n            viewportColumns = viewportColumns.concat(items);\n        });\n\n        return viewportColumns;\n    }\n\n    private getActualDepth(): number {\n        return this.type == HeaderRowType.FLOATING_FILTER ? this.rowIndex - 1 : this.rowIndex;\n    }\n\n    private getColumnsInViewportNormalLayout(): IHeaderColumn[] {\n        // when in normal layout, we add the columns for that container only\n        return this.columnModel.getVirtualHeaderGroupRow(this.pinned, this.getActualDepth());\n    }\n\n    public focusHeader(column: IHeaderColumn, event?: KeyboardEvent): boolean {\n        const allCtrls = getAllValuesInObject(this.headerCellCtrls);\n        const ctrl: AbstractHeaderCellCtrl = allCtrls.find(ctrl => ctrl.getColumnGroupChild() == column);\n        if (!ctrl) { return false; }\n\n        ctrl.focus(event);\n\n        return true;\n    }\n}","import { ColumnModel } from \"../../columns/columnModel\";\nimport { Constants } from \"../../constants/constants\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Autowired } from \"../../context/context\";\nimport { CtrlsService } from \"../../ctrlsService\";\nimport { Column } from \"../../entities/column\";\nimport { IHeaderColumn } from \"../../entities/iHeaderColumn\";\nimport { Events } from \"../../eventKeys\";\nimport { CenterWidthFeature } from \"../../gridBodyComp/centerWidthFeature\";\nimport { PinnedWidthService } from \"../../gridBodyComp/pinnedWidthService\";\nimport { ScrollVisibleService } from \"../../gridBodyComp/scrollVisibleService\";\nimport { NumberSequence } from \"../../utils\";\nimport { BodyDropTarget } from \"../columnDrag/bodyDropTarget\";\nimport { HeaderRowType } from \"../row/headerRowComp\";\nimport { HeaderRowCtrl } from \"../row/headerRowCtrl\";\nimport { FocusService } from \"../../focusService\";\nimport { HeaderPosition } from \"../common/headerPosition\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { HeaderCellCtrl } from \"../cells/column/headerCellCtrl\";\nimport { HeaderGroupCellCtrl } from \"../cells/columnGroup/headerGroupCellCtrl\";\n\nexport interface IHeaderRowContainerComp {\n    setCenterWidth(width: string): void;\n    setContainerTransform(transform: string): void;\n    setPinnedContainerWidth(width: string): void;\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\n    setCtrls(ctrls: HeaderRowCtrl[]): void;\n}\n\nexport class HeaderRowContainerCtrl extends BeanStub {\n\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('scrollVisibleService') private scrollVisibleService: ScrollVisibleService;\n    @Autowired('pinnedWidthService') private pinnedWidthService: PinnedWidthService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('focusService') public focusService: FocusService;\n\n    private pinned: string | null;\n    private comp: IHeaderRowContainerComp;\n\n    private filtersRowCtrl: HeaderRowCtrl | undefined;\n    private columnsRowCtrl: HeaderRowCtrl;\n    private groupsRowCtrls: HeaderRowCtrl[] = [];\n\n    constructor(pinned: string | null) {\n        super();\n        this.pinned = pinned;\n    }\n\n    public setComp(comp: IHeaderRowContainerComp, eGui: HTMLElement): void {\n        this.comp = comp;\n\n        this.setupCenterWidth();\n        this.setupPinnedWidth();\n\n        this.setupDragAndDrop(eGui);\n\n        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));\n\n        this.ctrlsService.registerHeaderContainer(this, this.pinned);\n\n        if (this.columnModel.isReady()) {\n            this.refresh();\n        }\n    }\n\n    private setupDragAndDrop(dropContainer: HTMLElement): void {\n        const bodyDropTarget = new BodyDropTarget(this.pinned, dropContainer);\n        this.createManagedBean(bodyDropTarget);\n    }\n\n    public refresh(keepColumns = false): void {\n        const sequence = new NumberSequence();\n\n        const focusedHeaderPosition = this.focusService.getFocusHeaderToUseAfterRefresh();\n\n        const refreshColumnGroups = () => {\n            const groupRowCount = this.columnModel.getHeaderRowCount() - 1;\n\n            this.groupsRowCtrls = this.destroyBeans(this.groupsRowCtrls);\n\n            for (let i = 0; i < groupRowCount; i++) {\n                const ctrl = this.createBean(new HeaderRowCtrl(sequence.next(), this.pinned, HeaderRowType.COLUMN_GROUP));\n                this.groupsRowCtrls.push(ctrl);\n            }\n        };\n\n        const refreshColumns = () => {\n            const rowIndex = sequence.next();\n            const needNewInstance = this.columnsRowCtrl == null || !keepColumns || this.columnsRowCtrl.getRowIndex() !== rowIndex;\n\n            if (needNewInstance) {\n                this.destroyBean(this.columnsRowCtrl);\n                this.columnsRowCtrl = this.createBean(new HeaderRowCtrl(rowIndex, this.pinned, HeaderRowType.COLUMN));\n            }\n        };\n\n        const refreshFilters = () => {\n\n            const includeFloatingFilter = this.columnModel.hasFloatingFilters();\n\n            const destroyPreviousComp = () => {\n                this.filtersRowCtrl = this.destroyBean(this.filtersRowCtrl);\n            };\n\n            if (!includeFloatingFilter) {\n                destroyPreviousComp();\n                return;\n            }\n\n            const rowIndex = sequence.next();\n\n            if (this.filtersRowCtrl) {\n                const rowIndexMismatch = this.filtersRowCtrl.getRowIndex() !== rowIndex;\n                if (!keepColumns || rowIndexMismatch) {\n                    destroyPreviousComp();\n                }\n            }\n\n            if (!this.filtersRowCtrl) {\n                this.filtersRowCtrl = this.createBean(new HeaderRowCtrl(rowIndex, this.pinned, HeaderRowType.FLOATING_FILTER));\n            }\n        };\n\n        refreshColumnGroups();\n        refreshColumns();\n        refreshFilters();\n\n        const allCtrls = this.getAllCtrls();\n        this.comp.setCtrls(allCtrls);\n\n        this.restoreFocusOnHeader(focusedHeaderPosition);\n    }\n\n    private restoreFocusOnHeader(position: HeaderPosition | null): void {\n        if (position == null || position.column.getPinned() != this.pinned) { return; }\n\n        this.focusService.focusHeaderPosition({ headerPosition: position });\n    }\n\n    private getAllCtrls(): HeaderRowCtrl[] {\n        const res = [...this.groupsRowCtrls, this.columnsRowCtrl];\n        if (this.filtersRowCtrl) {\n            res.push(this.filtersRowCtrl!);\n        }\n        return res;\n    }\n\n    // grid cols have changed - this also means the number of rows in the header can have\n    // changed. so we remove all the old rows and insert new ones for a complete refresh\n    private onGridColumnsChanged() {\n        this.refresh(true);\n    }\n\n    private setupCenterWidth(): void {\n        if (this.pinned != null) { return; }\n\n        this.createManagedBean(new CenterWidthFeature(width => this.comp.setCenterWidth(`${width}px`)));\n    }\n\n    public setHorizontalScroll(offset: number): void {\n        this.comp.setContainerTransform(`translateX(${offset}px)`);\n    }\n\n    private setupPinnedWidth(): void {\n        if (this.pinned == null) { return; }\n\n        const pinningLeft = this.pinned === Constants.PINNED_LEFT;\n        const pinningRight = this.pinned === Constants.PINNED_RIGHT;\n\n        const listener = () => {\n            const width = pinningLeft ? this.pinnedWidthService.getPinnedLeftWidth() : this.pinnedWidthService.getPinnedRightWidth();\n            if (width == null) { return; } // can happen at initialisation, width not yet set\n\n            const hidden = width == 0;\n            const isRtl = this.gridOptionsWrapper.isEnableRtl();\n            const scrollbarWidth = this.gridOptionsWrapper.getScrollbarWidth();\n\n            // if there is a scroll showing (and taking up space, so Windows, and not iOS)\n            // in the body, then we add extra space to keep header aligned with the body,\n            // as body width fits the cols and the scrollbar\n            const addPaddingForScrollbar = this.scrollVisibleService.isVerticalScrollShowing() && ((isRtl && pinningLeft) || (!isRtl && pinningRight));\n            const widthWithPadding = addPaddingForScrollbar ? width + scrollbarWidth : width;\n\n            this.comp.setPinnedContainerWidth(widthWithPadding + 'px');\n            this.comp.addOrRemoveCssClass('ag-hidden', hidden);\n        };\n\n        this.addManagedListener(this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, listener);\n    }\n\n    public getHeaderCtrlForColumn(column: Column): HeaderCellCtrl | undefined;\n    public getHeaderCtrlForColumn(column: ColumnGroup): HeaderGroupCellCtrl | undefined;\n    public getHeaderCtrlForColumn(column: any): any {\n        if (column instanceof Column) {\n            if (!this.columnsRowCtrl) { return; }\n            return this.columnsRowCtrl.getHeaderCellCtrl(column);\n        }\n\n        if (this.groupsRowCtrls.length === 0) { return; }\n\n        for (let i = 0; i < this.groupsRowCtrls.length; i++) {\n            const ctrl = this.groupsRowCtrls[i].getHeaderCellCtrl(column);\n\n            if (ctrl) { return ctrl; }\n        }\n    }\n\n    /* tslint:disable */\n    public getHtmlElementForColumnHeader(column: ColumnGroup): HTMLElement | null;\n    public getHtmlElementForColumnHeader(column: Column): HTMLElement | null;\n    public getHtmlElementForColumnHeader(column: any): any {\n    /* tslint:enable */\n        const cellCtrl = this.getHeaderCtrlForColumn(column);\n\n        if (!cellCtrl) { return null; }\n\n        return cellCtrl.getGui();\n    }\n\n    public getRowType(rowIndex: number): HeaderRowType | undefined {\n        const allCtrls = this.getAllCtrls();\n        const ctrl = allCtrls[rowIndex];\n        return ctrl ? ctrl.getType() : undefined;\n    }\n\n    public focusHeader(rowIndex: number, column: IHeaderColumn, event?: KeyboardEvent): boolean {\n        const allCtrls = this.getAllCtrls();\n        const ctrl = allCtrls[rowIndex];\n        if (!ctrl) { return false; }\n\n        return ctrl.focusHeader(column, event);\n    }\n\n    public getRowCount(): number {\n        return this.getAllCtrls().length;\n    }\n}","import { Constants } from '../../constants/constants';\nimport { PostConstruct, PreDestroy } from '../../context/context';\nimport { ensureDomOrder } from '../../utils/dom';\nimport { getAllValuesInObject } from '../../utils/object';\nimport { Component } from '../../widgets/component';\nimport { RefSelector } from '../../widgets/componentAnnotations';\nimport { HeaderRowComp } from '../row/headerRowComp';\nimport { HeaderRowCtrl } from '../row/headerRowCtrl';\nimport { HeaderRowContainerCtrl, IHeaderRowContainerComp } from './headerRowContainerCtrl';\n\nexport class HeaderRowContainerComp extends Component {\n\n    private static PINNED_LEFT_TEMPLATE =  /* html */ `<div class=\"ag-pinned-left-header\" role=\"presentation\"/>`;\n\n    private static PINNED_RIGHT_TEMPLATE =  /* html */ `<div class=\"ag-pinned-right-header\" role=\"presentation\"/>`;\n\n    private static CENTER_TEMPLATE =  /* html */\n        `<div class=\"ag-header-viewport\" role=\"presentation\">\n            <div class=\"ag-header-container\" ref=\"eCenterContainer\" role=\"rowgroup\"></div>\n        </div>`;\n\n    @RefSelector('eCenterContainer') private eCenterContainer: HTMLElement;\n\n    private eRowContainer: HTMLElement;\n\n    private pinned: string | null;\n\n    private headerRowComps: {[ctrlId: string]: HeaderRowComp} = {};\n    private rowCompsList: HeaderRowComp[] = [];\n\n    constructor(pinned: string | null) {\n        super();\n        this.pinned = pinned;\n    }\n\n    @PostConstruct\n    private init(): void {\n        this.selectAndSetTemplate();\n\n        const compProxy: IHeaderRowContainerComp = {\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\n            setCtrls: ctrls => this.setCtrls(ctrls),\n\n            // only gets called for center section\n            setCenterWidth: width => this.eCenterContainer.style.width = width,\n            setContainerTransform: transform => this.eCenterContainer.style.transform = transform,\n\n            // only gets called for pinned sections\n            setPinnedContainerWidth: width => {\n                const eGui = this.getGui();\n                eGui.style.width = width;\n                eGui.style.maxWidth = width;\n                eGui.style.minWidth = width;\n            }\n        };\n\n        const ctrl = this.createManagedBean(new HeaderRowContainerCtrl(this.pinned));\n        ctrl.setComp(compProxy, this.getGui());\n    }\n\n    private selectAndSetTemplate(): void {\n        const pinnedLeft = this.pinned == Constants.PINNED_LEFT;\n        const pinnedRight = this.pinned == Constants.PINNED_RIGHT;\n\n        const template = pinnedLeft ? HeaderRowContainerComp.PINNED_LEFT_TEMPLATE :\n                         pinnedRight ? HeaderRowContainerComp.PINNED_RIGHT_TEMPLATE : HeaderRowContainerComp.CENTER_TEMPLATE;\n\n        this.setTemplate(template);\n\n        // for left and right, we add rows directly to the root element,\n        // but for center container we add elements to the child container.\n        this.eRowContainer = this.eCenterContainer ? this.eCenterContainer : this.getGui();\n    }\n\n    @PreDestroy\n    private destroyRowComps(): void {\n        this.setCtrls([]);\n    }\n\n    private destroyRowComp(rowComp: HeaderRowComp): void {\n        this.destroyBean(rowComp);\n        this.eRowContainer.removeChild(rowComp.getGui());\n    }\n\n    private setCtrls(ctrls: HeaderRowCtrl[]): void {\n\n        const oldRowComps = this.headerRowComps;\n        this.headerRowComps = {};\n        this.rowCompsList = [];\n\n        let prevGui: HTMLElement;\n\n        const appendEnsuringDomOrder = (rowComp: HeaderRowComp) => {\n            const eGui = rowComp.getGui();\n\n            const notAlreadyIn = eGui.parentElement != this.eRowContainer;\n            if (notAlreadyIn) {\n                this.eRowContainer.appendChild(eGui);\n            }\n            if (prevGui) {\n                ensureDomOrder(this.eRowContainer, eGui, prevGui);\n            }\n\n            prevGui = eGui;\n        };\n\n        ctrls.forEach(ctrl => {\n            const ctrlId = ctrl.getInstanceId();\n            const existingComp =  oldRowComps[ctrlId];\n            delete oldRowComps[ctrlId];\n\n            const rowComp = existingComp ? existingComp : this.createBean(new HeaderRowComp(ctrl));\n            this.headerRowComps[ctrlId] = rowComp;\n            this.rowCompsList.push(rowComp);\n\n            appendEnsuringDomOrder(rowComp);\n        });\n\n        getAllValuesInObject(oldRowComps).forEach(c => this.destroyRowComp(c));\n    }\n}\n","import { ColumnModel } from \"../columns/columnModel\";\nimport { KeyCode } from \"../constants/keyCode\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { Autowired } from \"../context/context\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { Events } from \"../eventKeys\";\nimport { FocusService } from \"../focusService\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { exists } from \"../utils/generic\";\nimport { ManagedFocusFeature } from \"../widgets/managedFocusFeature\";\nimport { HeaderNavigationDirection, HeaderNavigationService } from \"./common/headerNavigationService\";\n\nexport interface IGridHeaderComp {\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\n    setHeightAndMinHeight(height: string): void;\n}\n\nexport class GridHeaderCtrl extends BeanStub {\n\n    @Autowired('headerNavigationService') private headerNavigationService: HeaderNavigationService;\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private comp: IGridHeaderComp;\n    private eGui: HTMLElement;\n\n    public setComp(comp: IGridHeaderComp, eGui: HTMLElement, eFocusableElement: HTMLElement): void {\n        this.comp = comp;\n        this.eGui = eGui;\n\n        this.createManagedBean(new ManagedFocusFeature(\n            eFocusableElement,\n            {\n                onTabKeyDown: this.onTabKeyDown.bind(this),\n                handleKeyDown: this.handleKeyDown.bind(this),\n                onFocusOut: this.onFocusOut.bind(this)\n            }\n        ));\n\n        // for setting ag-pivot-on / ag-pivot-off CSS classes\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));\n\n        this.onPivotModeChanged();\n        this.setupHeaderHeight();\n\n        this.ctrlsService.registerGridHeaderCtrl(this);\n    }\n\n    private setupHeaderHeight(): void {\n        const listener = this.setHeaderHeight.bind(this);\n        listener();\n\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_HEADER_HEIGHT, listener);\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, listener);\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, listener);\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, listener);\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, listener);\n\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);\n    }\n\n    private setHeaderHeight(): void {\n        const {columnModel, gridOptionsWrapper} = this;\n\n        let numberOfFloating = 0;\n        let headerRowCount = columnModel.getHeaderRowCount();\n        let totalHeaderHeight: number;\n        let groupHeight: number | null | undefined;\n        let headerHeight: number | null | undefined;\n\n        const hasFloatingFilters = columnModel.hasFloatingFilters();\n\n        if (hasFloatingFilters) {\n            headerRowCount++;\n            numberOfFloating = 1;\n        }\n\n        if (columnModel.isPivotMode()) {\n            groupHeight = gridOptionsWrapper.getPivotGroupHeaderHeight();\n            headerHeight = gridOptionsWrapper.getPivotHeaderHeight();\n        } else {\n            groupHeight = gridOptionsWrapper.getGroupHeaderHeight();\n            headerHeight = gridOptionsWrapper.getHeaderHeight();\n        }\n\n        const numberOfNonGroups = 1 + numberOfFloating;\n        const numberOfGroups = headerRowCount - numberOfNonGroups;\n\n        totalHeaderHeight = numberOfFloating * gridOptionsWrapper.getFloatingFiltersHeight()!;\n        totalHeaderHeight += numberOfGroups * groupHeight!;\n        totalHeaderHeight += headerHeight!;\n\n        // one extra pixel is needed here to account for the\n        // height of the border\n        const px = `${totalHeaderHeight + 1}px`;\n        this.comp.setHeightAndMinHeight(px);\n    }\n\n    private onPivotModeChanged(): void {\n        const pivotMode = this.columnModel.isPivotMode();\n\n        this.comp.addOrRemoveCssClass('ag-pivot-on', pivotMode);\n        this.comp.addOrRemoveCssClass('ag-pivot-off', !pivotMode);\n    }\n\n    protected onTabKeyDown(e: KeyboardEvent): void {\n        const isRtl = this.gridOptionsWrapper.isEnableRtl();\n        const direction = e.shiftKey !== isRtl\n            ? HeaderNavigationDirection.LEFT\n            : HeaderNavigationDirection.RIGHT;\n\n        if (this.headerNavigationService.navigateHorizontally(direction, true, e) ||\n            this.focusService.focusNextGridCoreContainer(e.shiftKey)\n        ) {\n            e.preventDefault();\n        }\n     }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        let direction: HeaderNavigationDirection | null = null;\n\n        switch (e.key) {\n            case KeyCode.LEFT:\n                direction = HeaderNavigationDirection.LEFT;\n            case KeyCode.RIGHT:\n                if (!exists(direction)) {\n                    direction = HeaderNavigationDirection.RIGHT;\n                }\n                this.headerNavigationService.navigateHorizontally(direction, false, e);\n                break;\n            case KeyCode.UP:\n                direction = HeaderNavigationDirection.UP;\n            case KeyCode.DOWN:\n                if (!exists(direction)) {\n                    direction = HeaderNavigationDirection.DOWN;\n                }\n                if (this.headerNavigationService.navigateVertically(direction, null, e)) {\n                    e.preventDefault();\n                }\n                break;\n            default:\n                return;\n        }\n    }\n\n    protected onFocusOut(e: FocusEvent): void {\n        const eDocument = this.gridOptionsWrapper.getDocument();\n        const { relatedTarget } = e;\n\n        if (!relatedTarget && this.eGui.contains(eDocument.activeElement)) { return; }\n\n        if (!this.eGui.contains(relatedTarget as HTMLElement)) {\n            this.focusService.clearFocusedHeader();\n        }\n    }\n}\n","import { Constants } from '../constants/constants';\nimport { PostConstruct } from '../context/context';\nimport { Component } from '../widgets/component';\nimport { GridHeaderCtrl, IGridHeaderComp } from './gridHeaderCtrl';\nimport { HeaderRowContainerComp } from './rowContainer/headerRowContainerComp';\n\nexport class GridHeaderComp extends Component {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-header\" role=\"presentation\"/>`;\n\n    constructor() {\n        super(GridHeaderComp.TEMPLATE);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n\n        const compProxy: IGridHeaderComp = {\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\n            setHeightAndMinHeight: height => {\n                this.getGui().style.height = height;\n                this.getGui().style.minHeight = height;\n            }\n        };\n\n        const ctrl = this.createManagedBean(new GridHeaderCtrl());\n        ctrl.setComp(compProxy, this.getGui(), this.getFocusableElement());\n\n        const addContainer = (container: HeaderRowContainerComp) => {\n            this.createManagedBean(container);\n            this.appendChild(container);\n        };\n\n        addContainer(new HeaderRowContainerComp(Constants.PINNED_LEFT));\n        addContainer(new HeaderRowContainerComp(null));\n        addContainer(new HeaderRowContainerComp(Constants.PINNED_RIGHT));\n    }\n}\n","import { Autowired, Bean } from \"../../context/context\";\nimport { DragListenerParams, DragService } from \"../../dragAndDrop/dragService\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { CtrlsService } from \"../../ctrlsService\";\n\nexport interface HorizontalResizeParams {\n    eResizeBar: HTMLElement;\n    dragStartPixels?: number;\n    onResizeStart: (shiftKey: boolean) => void;\n    onResizing: (delta: number) => void;\n    onResizeEnd: (delta: number) => void;\n}\n\n@Bean('horizontalResizeService')\nexport class HorizontalResizeService extends BeanStub {\n\n    @Autowired('dragService') private dragService: DragService;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private dragStartX: number;\n    private resizeAmount: number;\n\n    public addResizeBar(params: HorizontalResizeParams): () => void {\n        const dragSource: DragListenerParams = {\n            dragStartPixels: params.dragStartPixels || 0,\n            eElement: params.eResizeBar,\n            onDragStart: this.onDragStart.bind(this, params),\n            onDragStop: this.onDragStop.bind(this, params),\n            onDragging: this.onDragging.bind(this, params)\n        };\n\n        this.dragService.addDragSource(dragSource, true);\n\n        // we pass remove func back to the caller, so call can tell us when they\n        // are finished, and then we remove the listener from the drag source\n        const finishedWithResizeFunc = () => this.dragService.removeDragSource(dragSource);\n\n        return finishedWithResizeFunc;\n    }\n\n    private onDragStart(params: HorizontalResizeParams, mouseEvent: MouseEvent | Touch): void {\n        this.dragStartX = mouseEvent.clientX;\n\n        this.setResizeIcons();\n\n        const shiftKey = mouseEvent instanceof MouseEvent && mouseEvent.shiftKey === true;\n        params.onResizeStart(shiftKey);\n    }\n\n    private setResizeIcons(): void {\n\n        const ctrl = this.ctrlsService.getGridCtrl();\n        // change the body cursor, so when drag moves out of the drag bar, the cursor is still 'resize' (or 'move'\n        ctrl.setResizeCursor(true);\n        // we don't want text selection outside the grid (otherwise it looks weird as text highlights when we move)\n        ctrl.disableUserSelect(true);\n    }\n\n    private onDragStop(params: HorizontalResizeParams, mouseEvent: MouseEvent | Touch): void {\n        params.onResizeEnd(this.resizeAmount);\n        this.resetIcons();\n    }\n\n    private resetIcons(): void {\n        const ctrl = this.ctrlsService.getGridCtrl();\n        ctrl.setResizeCursor(false);\n        ctrl.disableUserSelect(false);\n    }\n\n    private onDragging(params: HorizontalResizeParams, mouseEvent: MouseEvent | Touch): void {\n        this.resizeAmount = mouseEvent.clientX - this.dragStartX;\n        params.onResizing(this.resizeAmount);\n    }\n\n}\n","import { Autowired, Bean } from '../../../context/context';\nimport { BeanStub } from \"../../../context/beanStub\";\nimport { IMenuFactory } from '../../../interfaces/iMenuFactory';\nimport { FilterManager } from '../../../filter/filterManager';\nimport { Column } from '../../../entities/column';\nimport { PopupService } from '../../../widgets/popupService';\nimport { FocusService } from '../../../focusService';\nimport { isVisible } from '../../../utils/dom';\nimport { KeyCode } from '../../../constants/keyCode';\nimport { ContainerType } from '../../../interfaces/iAfterGuiAttachedParams';\nimport { CtrlsService } from '../../../ctrlsService';\nimport { setAriaRole } from '../../../utils/aria';\n\n@Bean('menuFactory')\nexport class StandardMenuFactory extends BeanStub implements IMenuFactory {\n\n    @Autowired('filterManager') private filterManager: FilterManager;\n    @Autowired('popupService') private popupService: PopupService;\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private hidePopup: () => void;\n    private tabListener: () => null;\n\n    public hideActiveMenu(): void {\n        if (this.hidePopup) {\n            this.hidePopup();\n        }\n    }\n\n    public showMenuAfterMouseEvent(column: Column, mouseEvent: MouseEvent | Touch): void {\n        this.showPopup(column, eMenu => {\n            this.popupService.positionPopupUnderMouseEvent({\n                column,\n                type: 'columnMenu',\n                mouseEvent,\n                ePopup: eMenu\n            });\n        }, mouseEvent.target as HTMLElement);\n    }\n\n    public showMenuAfterButtonClick(column: Column, eventSource: HTMLElement, containerType: ContainerType): void {\n        this.showPopup(column, eMenu => {\n            this.popupService.positionPopupUnderComponent({\n                type: containerType,\n                eventSource,\n                ePopup: eMenu,\n                keepWithinBounds: true,\n                column\n            });\n        }, eventSource);\n    }\n\n    public showPopup(column: Column, positionCallback: (eMenu: HTMLElement) => void, eventSource: HTMLElement): void {\n        const filterWrapper = this.filterManager.getOrCreateFilterWrapper(column, 'COLUMN_MENU');\n        if (!filterWrapper) {\n            throw new Error('AG Grid - unable to show popup filter, filter instantiation failed');\n        }\n\n        const eMenu = document.createElement('div');\n\n        setAriaRole(eMenu, 'presentation');\n        eMenu.classList.add('ag-menu');\n\n        this.tabListener = this.addManagedListener(eMenu, 'keydown', (e) => this.trapFocusWithin(e, eMenu))!;\n\n        filterWrapper.guiPromise.then(gui => eMenu.appendChild(gui!));\n\n        let hidePopup: (() => void);\n\n        const anchorToElement = eventSource || this.ctrlsService.getGridBodyCtrl().getGui();\n        const closedCallback = (e: MouseEvent | TouchEvent | KeyboardEvent) => {\n            column.setMenuVisible(false, 'contextMenu');\n            const isKeyboardEvent = e instanceof KeyboardEvent;\n\n            if (this.tabListener) {\n                this.tabListener = this.tabListener()!;\n            }\n\n            if (isKeyboardEvent && eventSource && isVisible(eventSource)) {\n                const focusableEl = this.focusService.findTabbableParent(eventSource);\n\n                if (focusableEl) { focusableEl.focus(); }\n            }\n        };\n\n        const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: eMenu,\n            closeOnEsc: true,\n            closedCallback,\n            positionCallback: () => positionCallback(eMenu),\n            anchorToElement,\n            ariaLabel: translate('ariaLabelColumnMenu', 'Column Menu')\n        });\n\n        if (addPopupRes) {\n            this.hidePopup = hidePopup = addPopupRes.hideFunc;\n        }\n\n        filterWrapper.filterPromise!.then(filter => {\n            // need to make sure the filter is present before positioning, as only\n            // after filter it is visible can we find out what the width of it is\n            positionCallback(eMenu);\n\n            if (filter!.afterGuiAttached) {\n                filter!.afterGuiAttached({ container: 'columnMenu', hidePopup });\n            }\n        });\n\n        column.setMenuVisible(true, 'contextMenu');\n    }\n\n    private trapFocusWithin(e: KeyboardEvent, menu: HTMLElement) {\n        if (e.key !== KeyCode.TAB ||\n            e.defaultPrevented ||\n            this.focusService.findNextFocusableElement(menu, false, e.shiftKey)) {\n            return;\n        }\n\n        e.preventDefault();\n\n        this.focusService.focusInto(menu, e.shiftKey);\n    }\n\n    public isMenuEnabled(column: Column): boolean {\n        // for standard, we show menu if filter is enabled, and the menu is not suppressed\n        return column.isFilterAllowed();\n    }\n}\n","import { AgPromise } from '../utils';\nimport { RefSelector } from '../widgets/componentAnnotations';\nimport { ManagedFocusFeature } from '../widgets/managedFocusFeature';\nimport { IAfterGuiAttachedParams } from '../interfaces/iAfterGuiAttachedParams';\nimport { clearElement } from '../utils/dom';\nimport { setAriaLabel, setAriaRole } from '../utils/aria';\nimport { callIfPresent } from '../utils/function';\nimport { KeyCode } from '../constants/keyCode';\nimport { Component } from '../widgets/component';\nimport { PostConstruct, Autowired } from '../context/context';\nimport { FocusService } from '../focusService';\n\nexport class TabbedLayout extends Component {\n\n    @Autowired('focusService') private focusService: FocusService;\n\n    @RefSelector('eHeader') private readonly eHeader: HTMLElement;\n    @RefSelector('eBody') private readonly eBody: HTMLElement;\n\n    private params: TabbedLayoutParams;\n    private afterAttachedParams: IAfterGuiAttachedParams;\n    private items: TabbedItemWrapper[] = [];\n    private activeItem: TabbedItemWrapper;\n    private lastScrollListener: (() => null) | null | undefined;\n    private readonly tabbedItemScrollMap = new Map<string, number>();\n\n    constructor(params: TabbedLayoutParams) {\n        super(TabbedLayout.getTemplate(params.cssClass));\n        this.params = params;\n\n        if (params.items) {\n            params.items.forEach(item => this.addItem(item));\n        }\n    }\n\n    @PostConstruct\n    private postConstruct() {\n        this.createManagedBean(new ManagedFocusFeature(\n            this.getFocusableElement(),\n            {\n                onTabKeyDown: this.onTabKeyDown.bind(this),\n                handleKeyDown: this.handleKeyDown.bind(this)\n            }\n        ));\n    }\n\n    private static getTemplate(cssClass?: string) {\n        return /* html */ `<div class=\"ag-tabs ${cssClass}\">\n            <div ref=\"eHeader\" role=\"tablist\" class=\"ag-tabs-header ${cssClass ? `${cssClass}-header` : ''}\"></div>\n            <div ref=\"eBody\" role=\"presentation\" class=\"ag-tabs-body ${cssClass ? `${cssClass}-body` : ''}\"></div>\n        </div>`;\n    }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        const eDocument = this.gridOptionsWrapper.getDocument();\n        switch (e.key) {\n            case KeyCode.RIGHT:\n            case KeyCode.LEFT:\n                if (!this.eHeader.contains(eDocument.activeElement)) { return; }\n\n                const currentPosition = this.items.indexOf(this.activeItem);\n                const nextPosition = e.key === KeyCode.RIGHT ? Math.min(currentPosition + 1, this.items.length - 1) : Math.max(currentPosition - 1, 0);\n\n                if (currentPosition === nextPosition) { return; }\n\n                e.preventDefault();\n\n                const nextItem = this.items[nextPosition];\n\n                this.showItemWrapper(nextItem);\n                nextItem.eHeaderButton.focus();\n                break;\n            case KeyCode.UP:\n            case KeyCode.DOWN:\n                e.stopPropagation();\n                break;\n        }\n    }\n\n    protected onTabKeyDown(e: KeyboardEvent) {\n        if (e.defaultPrevented) { return; }\n\n        const { focusService, eHeader, eBody, activeItem } = this;\n        const eDocument = this.gridOptionsWrapper.getDocument();\n        const activeElement = eDocument.activeElement as HTMLElement;\n\n        e.preventDefault();\n\n        if (eHeader.contains(activeElement)) {\n            // focus is in header, move into body of popup\n            focusService.focusInto(eBody, e.shiftKey);\n        } else {\n            // focus is in body, establish if it should return to header\n            if (focusService.isFocusUnderManagedComponent(eBody)) {\n                // focus was in a managed focus component and has now left, so we can return to the header\n                activeItem.eHeaderButton.focus();\n            } else {\n                const nextEl = focusService.findNextFocusableElement(eBody, false, e.shiftKey);\n\n                if (nextEl) {\n                    // if another element exists in the body that can be focussed, go to that\n                    nextEl.focus();\n                } else {\n                    // otherwise return to the header\n                    activeItem.eHeaderButton.focus();\n                }\n            }\n        }\n    }\n\n    public setAfterAttachedParams(params: IAfterGuiAttachedParams): void {\n        this.afterAttachedParams = params;\n    }\n\n    public showFirstItem(): void {\n        if (this.items.length > 0) {\n            this.showItemWrapper(this.items[0]);\n        }\n    }\n\n    private addItem(item: TabbedItem): void {\n        const eHeaderButton = document.createElement('span');\n\n        setAriaRole(eHeaderButton, 'tab');\n        eHeaderButton.setAttribute('tabIndex', '-1');\n        eHeaderButton.appendChild(item.title);\n        eHeaderButton.classList.add('ag-tab');\n\n        this.eHeader.appendChild(eHeaderButton);\n        setAriaLabel(eHeaderButton, item.titleLabel);\n\n        const wrapper: TabbedItemWrapper = {\n            tabbedItem: item,\n            eHeaderButton: eHeaderButton\n        };\n        this.items.push(wrapper);\n\n        eHeaderButton.addEventListener('click', this.showItemWrapper.bind(this, wrapper));\n    }\n\n    public showItem(tabbedItem: TabbedItem): void {\n        const itemWrapper = this.items.find(wrapper => wrapper.tabbedItem === tabbedItem);\n\n        if (itemWrapper) {\n            this.showItemWrapper(itemWrapper);\n        }\n    }\n\n    private showItemWrapper(wrapper: TabbedItemWrapper): void {\n        const { tabbedItem, eHeaderButton } = wrapper;\n\n        if (this.params.onItemClicked) {\n            this.params.onItemClicked({ item: tabbedItem });\n        }\n\n        if (this.activeItem === wrapper) {\n            callIfPresent(this.params.onActiveItemClicked!);\n            return;\n        }\n\n        if (this.lastScrollListener) {\n            this.lastScrollListener = this.lastScrollListener();\n        }\n\n        clearElement(this.eBody);\n\n        tabbedItem.bodyPromise.then((body: HTMLElement) => {\n            this.eBody.appendChild(body);\n            const onlyUnmanaged = !this.focusService.isKeyboardMode();\n\n            this.focusService.focusInto(this.eBody, false, onlyUnmanaged);\n\n            if (tabbedItem.afterAttachedCallback) {\n                tabbedItem.afterAttachedCallback(this.afterAttachedParams);\n            }\n\n            if (this.params.keepScrollPosition) {\n                const scrollableContainer = (tabbedItem.getScrollableContainer && tabbedItem.getScrollableContainer()) || body;\n                this.lastScrollListener = this.addManagedListener(scrollableContainer, 'scroll', () => {\n                    this.tabbedItemScrollMap.set(tabbedItem.name, scrollableContainer.scrollTop);\n                });\n                const scrollPosition = this.tabbedItemScrollMap.get(tabbedItem.name);\n                if (scrollPosition !== undefined) {\n                    // Safari needs a small timeout or it will fire a scroll event to position 0\n                    setTimeout(() => {\n                        scrollableContainer.scrollTop = scrollPosition;\n                    }, 0);\n                }\n            }\n        });\n\n        if (this.activeItem) {\n            this.activeItem.eHeaderButton.classList.remove('ag-tab-selected');\n        }\n\n        eHeaderButton.classList.add('ag-tab-selected');\n\n        this.activeItem = wrapper;\n    }\n}\n\nexport interface TabbedLayoutParams {\n    items: TabbedItem[];\n    cssClass?: string;\n    keepScrollPosition?: boolean;\n    onItemClicked?: Function;\n    onActiveItemClicked?: Function;\n}\n\nexport interface TabbedItem {\n    title: Element;\n    titleLabel: string;\n    bodyPromise: AgPromise<HTMLElement>;\n    name: string;\n    getScrollableContainer?: () => HTMLElement;\n    afterAttachedCallback?: (params: IAfterGuiAttachedParams) => void;\n}\n\ninterface TabbedItemWrapper {\n    tabbedItem: TabbedItem;\n    eHeaderButton: HTMLElement;\n}\n","import { AgPromise } from \"../utils\";\n\nexport interface SimpleHttpRequestParams {\n    url: string;\n}\n\n/**\n * @deprecated\n */\nexport function simpleHttpRequest(params: SimpleHttpRequestParams): AgPromise<any> {\n    return new AgPromise<any>(resolve => {\n        const httpRequest = new XMLHttpRequest();\n        httpRequest.open('GET', params.url);\n        httpRequest.send();\n        httpRequest.onreadystatechange = function () {\n            if (httpRequest.readyState === 4 && httpRequest.status === 200) {\n                resolve(JSON.parse(httpRequest.responseText));\n            }\n        };\n    });\n}\n","import { RowNode } from \"../entities/rowNode\";\n\nexport interface ServerSideTransaction {\n    /**\n     * The Row Store to apply the transaction to, ie what group level.\n     * eg ['Ireland','2002'] to update the child store found after expanding Ireland and 2002 groups.\n     * Passing in blank to empty applies the transaction to the top level.\n     */\n    route?: string[];\n    /** Index position to add at. If missing, rows will be added to the end. */\n    addIndex?: number;\n    /** Rows to add */\n    add?: any[];\n    /** Rows to remove */\n    remove?: any[];\n    /** Rows to update */\n    update?: any[];\n}\n\nexport interface ServerSideTransactionResult {\n    /** The status of applying the transaction. */\n    status: ServerSideTransactionResultStatus;\n    /** If rows were added, the newly created Row Nodes for those rows. */\n    add?: RowNode[];\n    /** If rows were removed, the deleted Row Nodes. */\n    remove?: RowNode[];\n    /** If rows were updated, the updated Row Nodes. */\n    update?: RowNode[];\n}\n\nexport enum ServerSideTransactionResultStatus {\n    /** Transaction was successfully applied */\n    Applied = 'Applied',\n    /**\n     * Store was not found, transaction not applied.\n     * Either invalid route, or the parent row has not yet been expanded.\n     */\n    StoreNotFound = 'StoreNotFound',\n    /**\n     * Store is loading, transaction not applied.\n     */\n    StoreLoading = 'StoreLoading',\n    /**\n     * Store is loading (as max loads exceeded), transaction not applied.\n     */\n    StoreWaitingToLoad = 'StoreWaitingToLoad',\n    /**\n     * Store load attempt failed, transaction not applied.\n     */\n    StoreLoadingFailed = 'StoreLoadingFailed',\n    /**\n     * Store is type Partial, which doesn't accept transactions\n     */\n    StoreWrongType = 'StoreWrongType',\n    /**\n     * Transaction was cancelled, due to grid.\n     * Callback isApplyServerSideTransaction() returning false\n     */\n    Cancelled = 'Cancelled'\n}","import { Bean } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { debounce } from \"../utils/function\";\nimport { offsetHeight, offsetWidth } from \"../utils/dom\";\n\nconst DEBOUNCE_DELAY = 50;\n@Bean('resizeObserverService')\nexport class ResizeObserverService extends BeanStub {\n\n    private polyfillFunctions: (() => void)[] = [];\n    private polyfillScheduled: boolean;\n\n    public observeResize(element: HTMLElement, callback: () => void): () => void {\n        const eDocument = this.gridOptionsWrapper.getDocument();\n        const win = (eDocument.defaultView || window) as any;\n        // this gets fired too often and might cause some relayout issues\n        // so we add a debounce to the callback here to avoid the flashing effect.\n        const debouncedCallback = debounce(callback, DEBOUNCE_DELAY);\n        const useBrowserResizeObserver = () => {\n\n            const resizeObserver = new win.ResizeObserver(debouncedCallback);\n            resizeObserver.observe(element);\n            return () => resizeObserver.disconnect();\n        };\n\n        const usePolyfill = () => {\n\n            // initialise to the current width and height, so first call will have no changes\n            let widthLastTime = offsetWidth(element);\n            let heightLastTime = offsetHeight(element);\n\n            // when finished, this gets turned to false.\n            let running = true;\n\n            const periodicallyCheckWidthAndHeight = () => {\n                if (running) {\n\n                    const newWidth = offsetWidth(element);\n                    const newHeight = offsetHeight(element);\n\n                    const changed = newWidth !== widthLastTime || newHeight !== heightLastTime;\n                    if (changed) {\n                        widthLastTime = newWidth;\n                        heightLastTime = newHeight;\n                        callback();\n                    }\n\n                    this.doNextPolyfillTurn(periodicallyCheckWidthAndHeight);\n                }\n            };\n\n            periodicallyCheckWidthAndHeight();\n\n            // the callback function we return sets running to false\n            return () => running = false;\n        };\n\n        const suppressResize = this.gridOptionsWrapper.isSuppressBrowserResizeObserver();\n        const resizeObserverExists = !!win.ResizeObserver;\n\n        if (resizeObserverExists && !suppressResize) {\n            return useBrowserResizeObserver();\n        }\n\n        return usePolyfill();\n    }\n\n    private doNextPolyfillTurn(func: () => void): void {\n        this.polyfillFunctions.push(func);\n        this.schedulePolyfill();\n    }\n\n    private schedulePolyfill(): void {\n        if (this.polyfillScheduled) { return; }\n\n        const executeAllFuncs = () => {\n            const funcs = this.polyfillFunctions;\n\n            // make sure set scheduled to false and clear clear array\n            // before executing the funcs, as the funcs could add more funcs\n            this.polyfillScheduled = false;\n            this.polyfillFunctions = [];\n\n            funcs.forEach(f => f());\n        };\n\n        this.polyfillScheduled = true;\n        this.getFrameworkOverrides().setTimeout(executeAllFuncs, DEBOUNCE_DELAY);\n    }\n\n}\n","import { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { CtrlsService } from \"../ctrlsService\";\n\ninterface TaskItem {\n    task: () => void;\n    index: number;\n    createOrder: number;\n}\n\ninterface TaskList {\n    list: TaskItem[];\n    sorted: boolean;\n}\n\n@Bean('animationFrameService')\nexport class AnimationFrameService extends BeanStub {\n\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    // p1 and p2 are create tasks are to do with row and cell creation.\n    // for them we want to execute according to row order, so we use\n    // TaskItem so we know what index the item is for.\n    private createTasksP1: TaskList = {list: [], sorted: false}; // eg drawing back-ground of rows\n    private createTasksP2: TaskList = {list: [], sorted: false}; // eg cell renderers, adding hover functionality\n\n    // destroy tasks are to do with row removal. they are done after row creation as the user will need to see new\n    // rows first (as blank is scrolled into view), when we remove the old rows (no longer in view) is not as\n    // important.\n    private destroyTasks: (() => void)[] = [];\n    private ticking = false;\n    private useAnimationFrame: boolean;\n\n    // we need to know direction of scroll, to build up rows in the direction of\n    // the scroll. eg if user scrolls down, we extend the rows by building down.\n    private scrollGoingDown = true;\n    private lastScrollTop = 0;\n\n    private taskCount = 0;\n    private cancelledTasks = new Set();\n\n    public setScrollTop(scrollTop: number): void {\n        this.scrollGoingDown = scrollTop > this.lastScrollTop;\n        this.lastScrollTop = scrollTop;\n    }\n\n    @PostConstruct\n    private init(): void {\n        this.useAnimationFrame = !this.gridOptionsWrapper.isSuppressAnimationFrame();\n    }\n\n    public isOn(): boolean {\n        return this.useAnimationFrame;\n    }\n\n    // this method is for our AG Grid sanity only - if animation frames are turned off,\n    // then no place in the code should be looking to add any work to be done in animation\n    // frames. this stops bugs - where some code is asking for a frame to be executed\n    // when it should not.\n    private verifyAnimationFrameOn(methodName: string): void {\n        if (this.useAnimationFrame === false) {\n            console.warn(`AG Grid: AnimationFrameService.${methodName} called but animation frames are off`);\n        }\n    }\n\n    public createTask(task: () => void, index: number, list: 'createTasksP1' | 'createTasksP2') {\n        this.verifyAnimationFrameOn(list);\n        const taskItem: TaskItem = {task, index, createOrder: ++this.taskCount};\n        this.addTaskToList(this[list], taskItem);\n        this.schedule();\n    }\n\n    public cancelTask(task: () => void) {\n        this.cancelledTasks.add(task);\n    }\n\n    private addTaskToList(taskList: TaskList, task: TaskItem): void {\n        taskList.list.push(task);\n        taskList.sorted = false;\n    }\n\n    private sortTaskList(taskList: TaskList) {\n        if (taskList.sorted) {\n            return;\n        }\n\n        const sortDirection = this.scrollGoingDown ? 1 : -1;\n\n        // sort first by row index (taking into account scroll direction), then by\n        // order of task creation (always ascending, so cells will render left-to-right)\n        taskList.list.sort((a, b) => a.index !== b.index ? sortDirection * (b.index - a.index) : b.createOrder - a.createOrder);\n        taskList.sorted = true;\n    }\n\n    public addDestroyTask(task: () => void): void {\n        this.verifyAnimationFrameOn('createTasksP3');\n        this.destroyTasks.push(task);\n        this.schedule();\n    }\n\n    private executeFrame(millis: number): void {\n        this.verifyAnimationFrameOn('executeFrame');\n\n        const p1TaskList = this.createTasksP1;\n        const p1Tasks = p1TaskList.list;\n\n        const p2TaskList = this.createTasksP2;\n        const p2Tasks = p2TaskList.list;\n\n        const destroyTasks = this.destroyTasks;\n\n        const frameStart = new Date().getTime();\n        let duration = (new Date().getTime()) - frameStart;\n\n        // 16ms is 60 fps\n        const noMaxMillis = millis <= 0;\n\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n\n        while (noMaxMillis || duration < millis) {\n            const gridBodyDidSomething = gridBodyCon.getScrollFeature().executeAnimationFrameScroll();\n\n            if (!gridBodyDidSomething) {\n                let task: () => void;\n                if (p1Tasks.length) {\n                    this.sortTaskList(p1TaskList);\n                    task = p1Tasks.pop()!.task;\n                } else if (p2Tasks.length) {\n                    this.sortTaskList(p2TaskList);\n                    task = p2Tasks.pop()!.task;\n                } else if (destroyTasks.length) {\n                    task = destroyTasks.pop()!;\n                } else {\n                    this.cancelledTasks.clear();\n                    break;\n                }\n\n                if (!this.cancelledTasks.has(task)) {\n                    task();\n                }\n            }\n\n            duration = (new Date().getTime()) - frameStart;\n        }\n\n        if (p1Tasks.length || p2Tasks.length || destroyTasks.length) {\n            this.requestFrame();\n        } else {\n            this.stopTicking();\n        }\n    }\n\n    private stopTicking(): void {\n        this.ticking = false;\n    }\n\n    public flushAllFrames(): void {\n        if (!this.useAnimationFrame) {\n            return;\n        }\n        this.executeFrame(-1);\n    }\n\n    public schedule(): void {\n        if (!this.useAnimationFrame) {\n            return;\n        }\n        if (!this.ticking) {\n            this.ticking = true;\n            this.requestFrame();\n        }\n    }\n\n    private requestFrame(): void {\n        // check for the existence of requestAnimationFrame, and if\n        // it's missing, then we polyfill it with setTimeout()\n        const callback = this.executeFrame.bind(this, 60);\n        const eDocument = this.gridOptionsWrapper.getDocument();\n        const win = (eDocument.defaultView || window) as any;\n\n        if (win.requestAnimationFrame) {\n            win.requestAnimationFrame(callback);\n        } else if (win.webkitRequestAnimationFrame) {\n            win.webkitRequestAnimationFrame(callback);\n        } else {\n            win.setTimeout(callback, 0);\n        }\n    }\n\n    public isQueueEmpty(): boolean {\n        return !this.ticking;\n    }\n\n    // a debounce utility used for parts of the app involved with rendering.\n    // the advantage over normal debounce is the client can call flushAllFrames()\n    // to make sure all rendering is complete. we don't wait any milliseconds,\n    // as this is intended to batch calls in one VM turn.\n    public debounce(func: () => void) {\n        let pending = false;\n        return () => {\n            if (!this.isOn()) {\n                this.getFrameworkOverrides().setTimeout(func, 0);\n                return;\n            }\n            if (pending) {\n                return;\n            }\n            pending = true;\n            this.addDestroyTask(() => {\n                pending = false;\n                func();\n            });\n        };\n    }\n}\n","import { BeanStub } from \"../../context/beanStub\";\nimport { Autowired } from \"../../context/context\";\nimport { DragListenerParams, DragService } from \"../../dragAndDrop/dragService\";\nimport { getAbsoluteHeight, getAbsoluteWidth, setFixedHeight, setFixedWidth } from \"../../utils/dom\";\nimport { PopupService } from \"../../widgets/popupService\";\n\nconst RESIZE_CONTAINER_STYLE = 'ag-resizer-wrapper';\n\nconst RESIZE_TEMPLATE = /* html */\n    `<div class=\"${RESIZE_CONTAINER_STYLE}\">\n        <div ref=\"eTopLeftResizer\" class=\"ag-resizer ag-resizer-topLeft\"></div>\n        <div ref=\"eTopResizer\" class=\"ag-resizer ag-resizer-top\"></div>\n        <div ref=\"eTopRightResizer\" class=\"ag-resizer ag-resizer-topRight\"></div>\n        <div ref=\"eRightResizer\" class=\"ag-resizer ag-resizer-right\"></div>\n        <div ref=\"eBottomRightResizer\" class=\"ag-resizer ag-resizer-bottomRight\"></div>\n        <div ref=\"eBottomResizer\" class=\"ag-resizer ag-resizer-bottom\"></div>\n        <div ref=\"eBottomLeftResizer\" class=\"ag-resizer ag-resizer-bottomLeft\"></div>\n        <div ref=\"eLeftResizer\" class=\"ag-resizer ag-resizer-left\"></div>\n    </div>`;\n\nexport interface PositionableOptions {\n    popup?: boolean;\n    minWidth?: number | null;\n    width?: number | string | null;\n    minHeight?: number | null;\n    height?: number | string | null;\n    centered?: boolean | null;\n    calculateTopBuffer?: () => number;\n    /**\n     * Used for when a popup needs to be resized by an element within itself\n     * In that case, the feature will configured as `popup=false` but the offsetParent\n     * needs to be the popupParent.\n     */\n    forcePopupParentAsOffsetParent?: boolean;\n    x?: number | null;\n    y?: number | null;\n}\n\nexport type ResizableSides = 'topLeft' |\n    'top' |\n    'topRight' |\n    'right' |\n    'bottomRight' |\n    'bottom' |\n    'bottomLeft' |\n    'left';\n\nexport type ResizableStructure = {\n    [key in ResizableSides]?: boolean;\n};\n\ninterface MappedResizer {\n    element: HTMLElement;\n    dragSource?: DragListenerParams;\n}\n\nexport class PositionableFeature extends BeanStub {\n\n    private dragStartPosition = {\n        x: 0,\n        y: 0\n    };\n\n    private position = {\n        x: 0,\n        y: 0\n    };\n\n    private lastSize = {\n        width: -1,\n        height: -1\n    };\n\n    private resizerMap: {\n        [key in ResizableSides]: MappedResizer\n    } | undefined;\n\n    private minWidth: number;\n    private minHeight?: number;\n    private positioned = false;\n    private resizersAdded = false;\n    private config: PositionableOptions;\n\n    private resizeListeners: DragListenerParams[] = [];\n    private moveElementDragListener: DragListenerParams | undefined;\n\n    private offsetParent: HTMLElement;\n    private boundaryEl: HTMLElement | null = null;\n\n    private isResizing: boolean = false;\n    private isMoving = false;\n    private resizable: ResizableStructure = {};\n    private movable = false;\n    private currentResizer: { isTop: boolean, isRight: boolean, isBottom: boolean, isLeft: boolean } | null = null;\n\n    @Autowired('popupService') protected readonly popupService: PopupService;\n    @Autowired('dragService') private readonly dragService: DragService;\n\n    constructor(\n        private readonly element: HTMLElement,\n        config?: PositionableOptions\n    ) {\n        super();\n        this.config = Object.assign({}, { popup: false }, config);\n    }\n\n    public center() {\n        const { clientHeight, clientWidth } = this.offsetParent;\n\n        const x = (clientWidth / 2) - (this.getWidth()! / 2);\n        const y = (clientHeight / 2) - (this.getHeight()! / 2);\n\n        this.offsetElement(x, y);\n    }\n\n    public initialisePosition(): void {\n        const { centered, forcePopupParentAsOffsetParent, minWidth, width, minHeight, height, x, y } = this.config;\n\n        if (!this.offsetParent) { this.setOffsetParent(); }\n\n        let computedMinHeight = 0;\n        let computedMinWidth = 0;\n\n        // here we don't use the main offset parent but the element's offsetParent\n        // in order to calculated the minWidth and minHeight correctly\n        const isVisible = !!this.element.offsetParent;\n        if (isVisible) {\n            const boundaryEl = this.findBoundaryElement();\n            const offsetParentComputedStyles = window.getComputedStyle(boundaryEl);\n            if (offsetParentComputedStyles.minWidth != null) {\n                const paddingWidth = boundaryEl.offsetWidth - this.element.offsetWidth;\n                computedMinWidth = parseInt(offsetParentComputedStyles.minWidth, 10) - paddingWidth;\n            }\n\n            if (offsetParentComputedStyles.minHeight != null) {\n                const paddingHeight = boundaryEl.offsetHeight - this.element.offsetHeight;\n                computedMinHeight = parseInt(offsetParentComputedStyles.minHeight, 10) - paddingHeight;\n            }\n        }\n\n        this.minHeight = minHeight || computedMinHeight;\n        this.minWidth = minWidth || computedMinWidth;\n\n        if (width) {\n            this.setWidth(width);\n        }\n\n        if (height) {\n            this.setHeight(height);\n        }\n\n        if (!width || !height) {\n            this.refreshSize();\n        }\n\n        if (centered) {\n            this.center();\n        } else if (x || y) {\n            this.offsetElement(x!, y!);\n        } else if (isVisible && forcePopupParentAsOffsetParent && this.boundaryEl) {\n            const top = parseFloat(this.boundaryEl.style.top!);\n            const left = parseFloat(this.boundaryEl.style.left!);\n\n            this.offsetElement(\n                isNaN(left) ? 0 : left,\n                isNaN(top) ? 0 : top\n            );\n        }\n\n        this.positioned = !!this.offsetParent;\n    }\n\n    public isPositioned(): boolean {\n        return this.positioned;\n    }\n\n    public getPosition(): { x: number; y: number } {\n        return this.position;\n    }\n\n    public setMovable(movable: boolean, moveElement: HTMLElement) {\n        if (!this.config.popup || movable === this.movable) { return; }\n\n        this.movable = movable;\n\n        const params: DragListenerParams = this.moveElementDragListener || {\n            eElement: moveElement,\n            onDragStart: this.onMoveStart.bind(this),\n            onDragging: this.onMove.bind(this),\n            onDragStop: this.onMoveEnd.bind(this)\n        };\n\n        if (movable) {\n            this.dragService.addDragSource(params);\n            this.moveElementDragListener = params;\n        } else {\n            this.dragService.removeDragSource(params);\n            this.moveElementDragListener = undefined;\n        }\n    }\n\n    public setResizable(resizable: boolean | ResizableStructure) {\n        this.clearResizeListeners();\n\n        if (resizable) {\n            this.addResizers();\n        } else {\n            this.removeResizers();\n        }\n\n        if (typeof resizable === 'boolean') {\n            if (resizable === false) { return; }\n\n            resizable = {\n                topLeft: resizable,\n                top: resizable,\n                topRight: resizable,\n                right: resizable,\n                bottomRight: resizable,\n                bottom: resizable,\n                bottomLeft: resizable,\n                left: resizable\n            } as ResizableStructure;\n        }\n\n        Object.keys(resizable).forEach((side: ResizableSides) => {\n            const resizableStructure = resizable as ResizableStructure;\n            const val = !!resizableStructure[side];\n            const resizerEl = this.getResizerElement(side);\n\n            const params: DragListenerParams = {\n                dragStartPixels: 0,\n                eElement: resizerEl!,\n                onDragStart: (e: MouseEvent) => this.onResizeStart(e, side),\n                onDragging: this.onResize.bind(this),\n                onDragStop: (e: MouseEvent) => this.onResizeEnd(e, side),\n            };\n\n            if (!!this.resizable[side] !== val || (!this.isAlive() && !val)) {\n                if (val) {\n                    this.dragService.addDragSource(params);\n                    this.resizeListeners.push(params);\n                    resizerEl!.style.pointerEvents = 'all';\n                } else {\n                    resizerEl!.style.pointerEvents = 'none';\n                }\n            }\n        });\n    }\n\n    public removeSizeFromEl(): void {\n        this.element.style.removeProperty('height');\n        this.element.style.removeProperty('width');\n        this.element.style.removeProperty('flex');\n    }\n\n    public restoreLastSize(): void {\n        this.element.style.flex = '0 0 auto';\n\n        const { height, width } = this.lastSize;\n\n        if (width !== -1) {\n            this.element.style.width = `${width}px`;\n        }\n\n        if (height !== -1) {\n            this.element.style.height = `${height}px`;\n        }\n    }\n\n    public getHeight(): number | undefined {\n        return this.element.offsetHeight;\n    }\n\n    public setHeight(height: number | string) {\n        const { popup } = this.config;\n        const eGui = this.element;\n\n        let isPercent = false;\n\n        if (typeof height === 'string' && height.indexOf('%') !== -1) {\n            setFixedHeight(eGui, height);\n            height = getAbsoluteHeight(eGui);\n            isPercent = true;\n        } else if (this.positioned) {\n            const elRect = this.element.getBoundingClientRect();\n            const parentRect = this.offsetParent.getBoundingClientRect();\n\n            height = Math.max(this.minHeight!, height as number);\n            const { clientHeight } = this.offsetParent;\n            const yPosition = popup ? this.position.y : elRect.top;\n            const parentTop = popup ? 0 : parentRect.top;\n\n            if (clientHeight && (height + yPosition > clientHeight + parentTop)) {\n                height = clientHeight - yPosition;\n            }\n        }\n\n        if (this.getHeight() === height) { return; }\n\n        if (!isPercent) {\n            if (popup) {\n                setFixedHeight(eGui, height);\n            } else {\n                eGui.style.height = `${height}px`;\n                eGui.style.flex = '0 0 auto';\n                this.lastSize.height = typeof height === 'number' ? height : parseFloat(height);\n            }\n        } else {\n            eGui.style.maxHeight = 'unset';\n            eGui.style.minHeight = 'unset';\n        }\n    }\n\n    public getWidth(): number | undefined {\n        return this.element.offsetWidth;\n    }\n\n    public setWidth(width: number | string) {\n        const eGui = this.element;\n        const { popup } = this.config;\n\n        let isPercent = false;\n\n        if (typeof width === 'string' && width.indexOf('%') !== -1) {\n            setFixedWidth(eGui, width);\n            width = getAbsoluteWidth(eGui);\n            isPercent = true;\n        } else if (this.positioned) {\n            width = Math.max(this.minWidth, width as number);\n            const { clientWidth } = this.offsetParent;\n            const xPosition = popup ? this.position.x : this.element.getBoundingClientRect().left;\n\n            if (clientWidth && (width + xPosition > clientWidth)) {\n                width = clientWidth - xPosition;\n            }\n        }\n\n        if (this.getWidth() === width) { return; }\n\n        if (!isPercent) {\n            if (this.config.popup) {\n                setFixedWidth(eGui, width);\n            } else {\n                eGui.style.width = `${width}px`;\n                eGui.style.flex = ' unset';\n                this.lastSize.width = typeof width === 'number' ? width : parseFloat(width);\n            }\n        } else {\n            eGui.style.maxWidth = 'unset';\n            eGui.style.minWidth = 'unset';\n        }\n    }\n\n    public offsetElement(x = 0, y = 0) {\n        const ePopup = this.config.forcePopupParentAsOffsetParent ? this.boundaryEl! : this.element;\n\n        this.popupService.positionPopup({\n            ePopup,\n            x,\n            y,\n            keepWithinBounds: true\n        });\n\n        this.setPosition(\n            parseFloat(ePopup.style.left!),\n            parseFloat(ePopup.style.top!)\n        );\n    }\n\n    private setPosition(x: number, y: number): void {\n        this.position.x = x;\n        this.position.y = y;\n    }\n\n    private updateDragStartPosition(x: number, y: number) {\n        this.dragStartPosition = { x, y };\n    }\n\n    private calculateMouseMovement(params: {\n        e: MouseEvent,\n        topBuffer?: number,\n        anywhereWithin?: boolean,\n        isLeft?: boolean,\n        isTop?: boolean;\n    }): { movementX: number, movementY: number; } {\n        const { e, isLeft, isTop, anywhereWithin, topBuffer } = params;\n\n        const xDiff = e.clientX - this.dragStartPosition.x;\n        const yDiff = e.clientY - this.dragStartPosition.y;\n\n        const movementX = this.shouldSkipX(e, !!isLeft, !!anywhereWithin, xDiff) ? 0 : xDiff;\n        const movementY = this.shouldSkipY(e, !!isTop, topBuffer, yDiff) ? 0 : yDiff;\n\n        return { movementX, movementY };\n    }\n\n    private shouldSkipX(e: MouseEvent, isLeft: boolean, anywhereWithin: boolean, diff: number): boolean {\n        const elRect = this.element.getBoundingClientRect();\n        const parentRect = this.offsetParent.getBoundingClientRect();\n        const boundaryElRect = this.boundaryEl!.getBoundingClientRect();\n        const xPosition = this.config.popup ? this.position.x : elRect.left;\n        // skip if cursor is outside of popupParent horizontally\n        let skipX = (\n            (xPosition <= 0 && parentRect.left >= e.clientX) ||\n            (parentRect.right <= e.clientX && parentRect.right <= boundaryElRect.right)\n        );\n\n        if (skipX) { return true; }\n\n        if (isLeft) {\n            skipX = (\n                // skip if we are moving to the left and the cursor\n                // is positioned to the right of the left side anchor\n                (diff < 0 && e.clientX > xPosition + parentRect.left) ||\n                // skip if we are moving to the right and the cursor\n                // is positioned to the left of the dialog\n                (diff > 0 && e.clientX < xPosition + parentRect.left)\n            );\n        } else {\n            if (anywhereWithin) {\n                // if anywhereWithin is true, we allow to move\n                // as long as the cursor is within the dialog\n                skipX = (\n                    (diff < 0 && e.clientX > boundaryElRect.right) ||\n                    (diff > 0 && e.clientX < xPosition + parentRect.left)\n                );\n            } else {\n                skipX = (\n                    // if the movement is bound to the right side of the dialog\n                    // we skip if we are moving to the left and the cursor\n                    // is to the right of the dialog\n                    (diff < 0 && e.clientX > boundaryElRect.right) ||\n                    // or skip if we are moving to the right and the cursor\n                    // is to the left of the right side anchor\n                    (diff > 0 && e.clientX < boundaryElRect.right)\n                );\n            }\n        }\n\n        return skipX;\n    }\n\n    private shouldSkipY(e: MouseEvent, isTop: boolean, topBuffer: number = 0, diff: number): boolean {\n        const elRect = this.element.getBoundingClientRect();\n        const parentRect = this.offsetParent.getBoundingClientRect();\n        const boundaryElRect = this.boundaryEl!.getBoundingClientRect();\n        const yPosition = this.config.popup ? this.position.y : elRect.top;\n\n        // skip if cursor is outside of popupParent vertically\n        let skipY = (\n            (yPosition <= 0 && parentRect.top >= e.clientY) ||\n            (parentRect.bottom <= e.clientY && parentRect.bottom <= boundaryElRect.bottom)\n        );\n\n        if (skipY) { return true; }\n\n        if (isTop) {\n            skipY = (\n                // skip if we are moving to towards top and the cursor is\n                // below the top anchor + topBuffer\n                // note: topBuffer is used when moving the dialog using the title bar\n                (diff < 0 && e.clientY > yPosition + parentRect.top + topBuffer) ||\n                // skip if we are moving to the bottom and the cursor is\n                // above the top anchor\n                (diff > 0 && e.clientY < yPosition + parentRect.top)\n            );\n        } else {\n            skipY = (\n                // skip if we are moving towards the top and the cursor\n                // is below the bottom anchor\n                (diff < 0 && e.clientY > boundaryElRect.bottom) ||\n                // skip if we are moving towards the bottom and the cursor\n                // is above the bottom anchor\n                (diff > 0 && e.clientY < boundaryElRect.bottom)\n            );\n        }\n\n        return skipY;\n    }\n\n    private createResizeMap() {\n        const eGui = this.element;\n\n        this.resizerMap = {\n            topLeft: { element: eGui.querySelector('[ref=eTopLeftResizer]') as HTMLElement },\n            top: { element: eGui.querySelector('[ref=eTopResizer]') as HTMLElement },\n            topRight: { element: eGui.querySelector('[ref=eTopRightResizer]') as HTMLElement },\n            right: { element: eGui.querySelector('[ref=eRightResizer]') as HTMLElement },\n            bottomRight: { element: eGui.querySelector('[ref=eBottomRightResizer]') as HTMLElement },\n            bottom: { element: eGui.querySelector('[ref=eBottomResizer]') as HTMLElement },\n            bottomLeft: { element: eGui.querySelector('[ref=eBottomLeftResizer]') as HTMLElement },\n            left: { element: eGui.querySelector('[ref=eLeftResizer]') as HTMLElement }\n        };\n    }\n\n    private addResizers() {\n        if (this.resizersAdded) { return; }\n\n        const eGui = this.element;\n\n        if (!eGui) { return; }\n\n        const parser = new DOMParser();\n        const resizers = parser.parseFromString(RESIZE_TEMPLATE, 'text/html').body;\n\n        eGui.appendChild(resizers.firstChild!);\n        this.createResizeMap();\n        this.resizersAdded = true;\n    }\n\n    private removeResizers() {\n        this.resizerMap = undefined;\n        const resizerEl = this.element.querySelector(`.${RESIZE_CONTAINER_STYLE}`);\n\n        if (resizerEl) {\n            this.element.removeChild(resizerEl);\n        }\n        this.resizersAdded = false;\n    }\n\n    private getResizerElement(side: ResizableSides): HTMLElement | null {\n        return this.resizerMap![side].element;\n    }\n\n    private onResizeStart(e: MouseEvent, side: ResizableSides) {\n        this.boundaryEl = this.findBoundaryElement();\n\n        if (!this.positioned) { this.initialisePosition(); }\n\n        this.currentResizer = {\n            isTop: !!side.match(/top/i),\n            isRight: !!side.match(/right/i),\n            isBottom: !!side.match(/bottom/i),\n            isLeft: !!side.match(/left/i),\n        };\n\n        this.element.classList.add('ag-resizing');\n        this.resizerMap![side].element.classList.add('ag-active');\n\n        const { popup, forcePopupParentAsOffsetParent } = this.config;\n\n        if (!popup && !forcePopupParentAsOffsetParent) {\n            this.applySizeToSiblings(this.currentResizer.isBottom || this.currentResizer.isTop);\n        }\n\n        this.isResizing = true;\n        this.updateDragStartPosition(e.clientX, e.clientY);\n    }\n\n    private getSiblings(): HTMLElement[] | null {\n        const element = this.element;\n        const parent = element.parentElement;\n        if (!parent) { return null; }\n\n        return Array.prototype.slice.call(parent.children).filter((el: HTMLElement) => !el.classList.contains('ag-hidden'));\n    }\n\n    private getMinSizeOfSiblings(): { height: number, width: number } {\n        const siblings = this.getSiblings() || [];\n\n        let height = 0;\n        let width = 0;\n\n        for (let i = 0; i < siblings.length; i++) {\n            const currentEl = siblings[i];\n            const isFlex = !!currentEl.style.flex && currentEl.style.flex !== '0 0 auto';\n\n            if (currentEl === this.element) { continue; }\n\n            let nextHeight = this.minHeight || 0;\n            let nextWidth = this.minWidth || 0;\n\n            if (isFlex) {\n                const computedStyle = window.getComputedStyle(currentEl);\n                if (computedStyle.minHeight) {\n                    nextHeight = parseInt(computedStyle.minHeight, 10);\n                }\n                if (computedStyle.minWidth) {\n                    nextWidth = parseInt(computedStyle.minWidth, 10);\n                }\n            } else {\n                nextHeight = currentEl.offsetHeight;\n                nextWidth = currentEl.offsetWidth;\n            }\n\n            height += nextHeight;\n            width += nextWidth;\n        }\n\n        return { height, width };\n    }\n\n    private applySizeToSiblings(vertical: boolean) {\n        let containerToFlex: HTMLElement | null = null;\n        const siblings = this.getSiblings();\n\n        if (!siblings) { return; }\n\n        for (let i = 0; i < siblings.length; i++) {\n            const el = siblings[i];\n\n            if (el === containerToFlex) { continue; }\n\n            if (vertical) {\n                el.style.height = `${el.offsetHeight}px`;\n            } else {\n                el.style.width = `${el.offsetWidth}px`;\n            }\n            el.style.flex = '0 0 auto';\n\n            if (el === this.element) {\n                containerToFlex = siblings[i + 1];\n            }\n        }\n\n        if (containerToFlex) {\n            containerToFlex.style.removeProperty('height');\n            containerToFlex.style.removeProperty('min-height');\n            containerToFlex.style.removeProperty('max-height');\n            containerToFlex.style.flex = '1 1 auto';\n        }\n    }\n\n    private onResize(e: MouseEvent) {\n        if (!this.isResizing || !this.currentResizer) { return; }\n\n        const { popup, forcePopupParentAsOffsetParent } = this.config;\n        const { isTop, isRight, isBottom, isLeft } = this.currentResizer;\n        const isHorizontal = isRight || isLeft;\n        const isVertical = isBottom || isTop;\n        const { movementX, movementY } = this.calculateMouseMovement({ e, isLeft, isTop });\n\n        const xPosition = this.position.x;\n        const yPosition = this.position.y;\n\n        let offsetLeft = 0;\n        let offsetTop = 0;\n\n        if (isHorizontal && movementX) {\n            const direction = isLeft ? -1 : 1;\n            const oldWidth = this.getWidth();\n            const newWidth = oldWidth! + (movementX * direction);\n            let skipWidth = false;\n\n            if (isLeft) {\n                offsetLeft = oldWidth! - newWidth;\n                if (xPosition + offsetLeft <= 0 || newWidth <= this.minWidth) {\n                    skipWidth = true;\n                    offsetLeft = 0;\n                }\n            }\n\n            if (!skipWidth) {\n                this.setWidth(newWidth);\n            }\n        }\n\n        if (isVertical && movementY) {\n            const direction = isTop ? -1 : 1;\n            const oldHeight = this.getHeight();\n            const newHeight = oldHeight! + (movementY * direction);\n            let skipHeight = false;\n\n            if (isTop) {\n                offsetTop = oldHeight! - newHeight;\n                if (yPosition + offsetTop <= 0 || newHeight <= this.minHeight!) {\n                    skipHeight = true;\n                    offsetTop = 0;\n                }\n            } else {\n                // do not let the size of all siblings be higher than the parent container\n                if (\n                    !this.config.popup &&\n                    !this.config.forcePopupParentAsOffsetParent &&\n                    oldHeight! < newHeight &&\n                    (this.getMinSizeOfSiblings().height + newHeight) > this.element.parentElement!.offsetHeight\n                ) {\n                    skipHeight = true;\n                }\n            }\n\n            if (!skipHeight) {\n                this.setHeight(newHeight);\n            }\n        }\n\n        this.updateDragStartPosition(e.clientX, e.clientY);\n\n        if ((popup || forcePopupParentAsOffsetParent) && offsetLeft || offsetTop) {\n            this.offsetElement(\n                xPosition + offsetLeft,\n                yPosition + offsetTop\n            );\n        }\n    }\n\n    private onResizeEnd(e: MouseEvent, side: ResizableSides) {\n        this.isResizing = false;\n        this.currentResizer = null;\n        this.boundaryEl = null;\n\n        const params = {\n            type: 'resize',\n            api: this.gridOptionsWrapper.getApi(),\n            columnApi: this.gridOptionsWrapper.getColumnApi()\n        };\n\n        this.element.classList.remove('ag-resizing');\n        this.resizerMap![side].element.classList.remove('ag-active');\n\n        this.dispatchEvent(params);\n    }\n\n    private refreshSize() {\n        const eGui = this.element;\n\n        if (this.config.popup) {\n            if (!this.config.width) {\n                this.setWidth(eGui.offsetWidth);\n            }\n\n            if (!this.config.height) {\n                this.setHeight(eGui.offsetHeight);\n            }\n        }\n    }\n\n    private onMoveStart(e: MouseEvent) {\n        this.boundaryEl = this.findBoundaryElement();\n\n        if (!this.positioned) { this.initialisePosition(); }\n\n        this.isMoving = true;\n\n        this.element.classList.add('ag-moving');\n        this.updateDragStartPosition(e.clientX, e.clientY);\n    }\n\n    private onMove(e: MouseEvent) {\n        if (!this.isMoving) { return; }\n\n        const { x, y } = this.position;\n        let topBuffer;\n\n        if (this.config.calculateTopBuffer) {\n            topBuffer = this.config.calculateTopBuffer();\n        }\n\n        const { movementX, movementY } = this.calculateMouseMovement({\n            e,\n            isTop: true,\n            anywhereWithin: true,\n            topBuffer\n        });\n\n        this.offsetElement(x + movementX, y + movementY);\n        this.updateDragStartPosition(e.clientX, e.clientY);\n    }\n\n    private onMoveEnd() {\n        this.isMoving = false;\n        this.boundaryEl = null;\n        this.element.classList.remove('ag-moving');\n    }\n\n    private setOffsetParent() {\n        if (this.config.forcePopupParentAsOffsetParent) {\n            this.offsetParent = this.popupService.getPopupParent();\n        } else {\n            this.offsetParent = this.element.offsetParent as HTMLElement;\n        }\n    }\n\n    private findBoundaryElement(): HTMLElement {\n        let el = this.element;\n        while (el) {\n            if (window.getComputedStyle(el).position !== 'static') { return el; }\n            el = el.parentElement as HTMLElement;\n        }\n\n        return this.element;\n    }\n\n    private clearResizeListeners(): void {\n        while (this.resizeListeners.length) {\n            const params = this.resizeListeners.pop()!;\n            this.dragService.removeDragSource(params);\n        }\n    }\n\n    protected destroy() {\n        super.destroy();\n\n        if (this.moveElementDragListener) {\n            this.dragService.removeDragSource(this.moveElementDragListener);\n        }\n\n        this.clearResizeListeners();\n        this.removeResizers();\n    }\n}","import { RowRenderer } from \"./rowRenderer\";\nimport { Column } from \"../entities/column\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { RowContainerCtrl } from \"../gridBodyComp/rowContainer/rowContainerCtrl\";\nimport { RowCssClassCalculator } from \"./row/rowCssClassCalculator\";\nimport { ColumnGroup } from \"../entities/columnGroup\";\n\n@Bean('autoWidthCalculator')\nexport class AutoWidthCalculator extends BeanStub {\n\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n    @Autowired('rowCssClassCalculator') public rowCssClassCalculator: RowCssClassCalculator;\n\n    private centerRowContainerCtrl: RowContainerCtrl;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.ctrlsService.whenReady(p => {\n            this.centerRowContainerCtrl = p.centerRowContainerCtrl;\n        });\n    }\n\n    // this is the trick: we create a dummy container and clone all the cells\n    // into the dummy, then check the dummy's width. then destroy the dummy\n    // as we don't need it any more.\n    // drawback: only the cells visible on the screen are considered\n    public getPreferredWidthForColumn(column: Column, skipHeader?: boolean): number {\n        const eHeaderCell = this.getHeaderCellForColumn(column);\n        // cell isn't visible\n        if (!eHeaderCell) { return -1; }\n\n        const elements = this.rowRenderer.getAllCellsForColumn(column);\n\n        if (!skipHeader) {\n            // we only consider the lowest level cell, not the group cell. in 99% of the time, this\n            // will be enough. if we consider groups, then it gets too complicated for what it's worth,\n            // as the groups can span columns and this class only considers one column at a time.\n            elements.push(eHeaderCell);\n        }\n\n        return this.addElementsToContainerAndGetWidth(elements);\n    }\n\n    public getPreferredWidthForColumnGroup(columnGroup: ColumnGroup): number {\n        const eHeaderCell = this.getHeaderCellForColumn(columnGroup);\n\n        if (!eHeaderCell) { return -1; }\n\n        return this.addElementsToContainerAndGetWidth([eHeaderCell]);\n    }\n\n    private addElementsToContainerAndGetWidth(elements: HTMLElement[]): number {\n        const eDummyContainer = document.createElement('span');\n        // position fixed, so it isn't restricted to the boundaries of the parent\n        eDummyContainer.style.position = 'fixed';\n\n        // we put the dummy into the body container, so it will inherit all the\n        // css styles that the real cells are inheriting\n        const eBodyContainer = this.centerRowContainerCtrl.getContainerElement();\n        eBodyContainer.appendChild(eDummyContainer);\n\n        elements.forEach(el => this.cloneItemIntoDummy(el, eDummyContainer));\n\n        // at this point, all the clones are lined up vertically with natural widths. the dummy\n        // container will have a width wide enough just to fit the largest.\n        const dummyContainerWidth = eDummyContainer.offsetWidth;\n\n        // we are finished with the dummy container, so get rid of it\n        eBodyContainer.removeChild(eDummyContainer);\n\n        // we add padding as I found sometimes the gui still put '...' after some of the texts. so the\n        // user can configure the grid to add a few more pixels after the calculated width\n        const autoSizePadding = this.gridOptionsWrapper.getAutoSizePadding();\n\n        return dummyContainerWidth + autoSizePadding;\n    }\n\n    /* tslint:disable */\n    private getHeaderCellForColumn(column: ColumnGroup): HTMLElement | null;\n    private getHeaderCellForColumn(column: Column): HTMLElement | null;\n    private getHeaderCellForColumn(column: any): any {\n    /* tslint:enable */\n        let element: HTMLElement | null = null;\n\n        this.ctrlsService.getHeaderRowContainerCtrls().forEach(container => {\n                const res = container.getHtmlElementForColumnHeader(column);\n                if (res != null) { element = res; }\n            }\n        );\n\n        return element;\n    }\n\n    private cloneItemIntoDummy(eCell: HTMLElement, eDummyContainer: HTMLElement): void {\n        // make a deep clone of the cell\n        const eCellClone: HTMLElement = eCell.cloneNode(true) as HTMLElement;\n        // the original has a fixed width, we remove this to allow the natural width based on content\n        eCellClone.style.width = '';\n        // the original has position = absolute, we need to remove this so it's positioned normally\n        eCellClone.style.position = 'static';\n        eCellClone.style.left = '';\n        // we put the cell into a containing div, as otherwise the cells would just line up\n        // on the same line, standard flow layout, by putting them into divs, they are laid\n        // out one per line\n        const eCloneParent = document.createElement('div');\n        const eCloneParentClassList = eCloneParent.classList;\n        const isHeader = ['ag-header-cell', 'ag-header-group-cell'].some(\n            cls => eCellClone.classList.contains(cls)\n        );\n\n        if (isHeader) {\n            eCloneParentClassList.add('ag-header', 'ag-header-row');\n            eCloneParent.style.position = 'static';\n        } else {\n            eCloneParentClassList.add('ag-row');\n        }\n\n        // find parent using classes (headers have ag-header-cell, rows have ag-row), and copy classes from it.\n        // if we didn't do this, things like ag-row-level-2 would be missing if present, which sets indents\n        // onto group items.\n        let pointer = eCell.parentElement;\n        while (pointer) {\n            const isRow = ['ag-header-row', 'ag-row'].some(\n                cls => pointer!.classList.contains(cls)\n            );\n            if (isRow) {\n                for (let i = 0; i < pointer.classList.length; i++) {\n                    const item = pointer.classList[i];\n\n                    // we skip ag-row-position-absolute, as this has structural CSS applied that stops the\n                    // element from fitting into it's parent, and we need the element to stretch the parent\n                    // as we are measuring the parents width\n                    if (item != 'ag-row-position-absolute') {\n                        eCloneParentClassList.add(item);\n                    }\n                }\n                break;\n            }\n            pointer = pointer.parentElement;\n        }\n\n        // the twig on the branch, the branch on the tree, the tree in the hole,\n        // the hole in the bog, the bog in the clone, the clone in the parent,\n        // the parent in the dummy, and the dummy down in the vall-e-ooo, OOOOOOOOO! Oh row the rattling bog....\n        eCloneParent.appendChild(eCellClone);\n        eDummyContainer.appendChild(eCloneParent);\n    }\n}\n","import { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { RowCtrl } from \"./row/rowCtrl\";\nimport { Column } from \"../entities/column\";\nimport { RowNode } from \"../entities/rowNode\";\nimport {\n    CellFocusedEvent,\n    DisplayedRowsChangedEvent,\n    Events,\n    FirstDataRenderedEvent,\n    ModelUpdatedEvent,\n    ViewportChangedEvent\n} from \"../events\";\nimport { Constants } from \"../constants/constants\";\nimport { Autowired, Bean, Optional, PostConstruct, Qualifier } from \"../context/context\";\nimport { ColumnApi } from \"../columns/columnApi\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { FocusService } from \"../focusService\";\nimport { CellPosition } from \"../entities/cellPosition\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { PaginationProxy } from \"../pagination/paginationProxy\";\nimport { FlashCellsParams, GetCellRendererInstancesParams, GridApi, RefreshCellsParams } from \"../gridApi\";\nimport { Beans } from \"./beans\";\nimport { RowContainerHeightService } from \"./rowContainerHeightService\";\nimport { ICellRenderer } from \"./cellRenderers/iCellRenderer\";\nimport { ICellEditor } from \"../interfaces/iCellEditor\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { RowPosition } from \"../entities/rowPosition\";\nimport { PinnedRowModel } from \"../pinnedRowModel/pinnedRowModel\";\nimport { exists, missing } from \"../utils/generic\";\nimport { getAllValuesInObject, iterateObject } from \"../utils/object\";\nimport { createArrayOfNumbers } from \"../utils/number\";\nimport { executeInAWhile } from \"../utils/function\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { GridBodyCtrl } from \"../gridBodyComp/gridBodyCtrl\";\nimport { CellCtrl } from \"./cell/cellCtrl\";\nimport { removeFromArray } from \"../utils/array\";\n\nexport interface RowCtrlMap {\n    [key: string]: RowCtrl;\n}\n\ninterface RowNodeMap {\n    [id: string]: RowNode;\n}\n\n@Bean(\"rowRenderer\")\nexport class RowRenderer extends BeanStub {\n\n    @Autowired(\"paginationProxy\") private paginationProxy: PaginationProxy;\n    @Autowired(\"columnModel\") private columnModel: ColumnModel;\n    @Autowired(\"pinnedRowModel\") private pinnedRowModel: PinnedRowModel;\n    @Autowired(\"rowModel\") private rowModel: IRowModel;\n    @Autowired(\"focusService\") private focusService: FocusService;\n    @Autowired(\"columnApi\") private columnApi: ColumnApi;\n    @Autowired(\"gridApi\") private gridApi: GridApi;\n    @Autowired(\"beans\") private beans: Beans;\n    @Autowired(\"rowContainerHeightService\") private rowContainerHeightService: RowContainerHeightService;\n    @Optional(\"ctrlsService\") private ctrlsService: CtrlsService;\n\n    private gridBodyCtrl: GridBodyCtrl;\n\n    private destroyFuncsForColumnListeners: (() => void)[] = [];\n\n    private firstRenderedRow: number;\n    private lastRenderedRow: number;\n\n    // map of row ids to row objects. keeps track of which elements\n    // are rendered for which rows in the dom.\n    private rowCtrlsByRowIndex: RowCtrlMap = {};\n    private zombieRowCtrls: RowCtrlMap = {};\n    private cachedRowCtrls: RowCtrlCache;\n    private allRowCtrls: RowCtrl[] = [];\n\n    private topRowCtrls: RowCtrl[] = [];\n    private bottomRowCtrls: RowCtrl[] = [];\n\n    private pinningLeft: boolean;\n    private pinningRight: boolean;\n\n    // we only allow one refresh at a time, otherwise the internal memory structure here\n    // will get messed up. this can happen if the user has a cellRenderer, and inside the\n    // renderer they call an API method that results in another pass of the refresh,\n    // then it will be trying to draw rows in the middle of a refresh.\n    private refreshInProgress = false;\n\n    private printLayout: boolean;\n    private embedFullWidthRows: boolean;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.ctrlsService.whenReady(() => {\n            this.gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n            this.initialise();\n        });\n    }\n\n    private initialise(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onPageLoaded.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, this.redrawAfterScroll.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.redrawAfterScroll.bind(this));\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, this.onDomLayoutChanged.bind(this));\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_ROW_CLASS, this.redrawRows.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));\n\n        this.registerCellEventListeners();\n\n        this.initialiseCache();\n        this.printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;\n        this.embedFullWidthRows = this.printLayout || this.gridOptionsWrapper.isEmbedFullWidthRows();\n\n        this.redrawAfterModelUpdate();\n    }\n\n    private initialiseCache(): void {\n        if (this.gridOptionsWrapper.isKeepDetailRows()) {\n            const countProp = this.gridOptionsWrapper.getKeepDetailRowsCount();\n            const count = countProp != null ? countProp : 3;\n            this.cachedRowCtrls = new RowCtrlCache(count);\n        }\n    }\n\n    public getRowCtrls(): RowCtrl[] {\n        return this.allRowCtrls;\n    }\n\n    private updateAllRowCtrls(): void {\n        const liveList = getAllValuesInObject(this.rowCtrlsByRowIndex);\n        if (this.gridOptionsWrapper.isEnsureDomOrder()) {\n            liveList.sort((a, b) => a.getRowNode().rowIndex - b.getRowNode.rowIndex);\n        }\n        const zombieList = getAllValuesInObject(this.zombieRowCtrls);\n        const cachedList = this.cachedRowCtrls ? this.cachedRowCtrls.getEntries() : [];\n        this.allRowCtrls = [...liveList, ...zombieList, ...cachedList];\n    }\n\n    // in a clean design, each cell would register for each of these events. however when scrolling, all the cells\n    // registering and de-registering for events is a performance bottleneck. so we register here once and inform\n    // all active cells.\n    private registerCellEventListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_FOCUSED, (event: CellFocusedEvent) => {\n            this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onCellFocused(event));\n            this.getFullWidthRowCtrls().forEach(rowCtrl => {\n                rowCtrl.onFullWidthRowFocused(event);\n            });\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_FLASH_CELLS, event => {\n            this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onFlashCells(event));\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, () => {\n            this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onColumnHover());\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, () => {\n            this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onDisplayedColumnsChanged());\n        });\n\n        // only for printLayout - because we are rendering all the cells in the same row, regardless of pinned state,\n        // then changing the width of the containers will impact left position. eg the center cols all have their\n        // left position adjusted by the width of the left pinned column, so if the pinned left column width changes,\n        // all the center cols need to be shifted to accommodate this. when in normal layout, the pinned cols are\n        // in different containers so doesn't impact.\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, () => {\n            if (this.printLayout) {\n                this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onLeftChanged());\n            }\n        });\n\n        const rangeSelectionEnabled = this.gridOptionsWrapper.isEnableRangeSelection();\n        if (rangeSelectionEnabled) {\n\n            this.addManagedListener(this.eventService, Events.EVENT_RANGE_SELECTION_CHANGED, () => {\n                this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onRangeSelectionChanged());\n            });\n            this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, () => {\n                this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.updateRangeBordersIfRangeCount());\n            });\n            this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, () => {\n                this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.updateRangeBordersIfRangeCount());\n            });\n            this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, () => {\n                this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.updateRangeBordersIfRangeCount());\n            });\n\n        }\n\n        // add listeners to the grid columns\n        this.refreshListenersToColumnsForCellComps();\n        // if the grid columns change, then refresh the listeners again\n        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.refreshListenersToColumnsForCellComps.bind(this));\n\n        this.addDestroyFunc(this.removeGridColumnListeners.bind(this));\n    }\n\n    // executes all functions in destroyFuncsForColumnListeners and then clears the list\n    private removeGridColumnListeners(): void {\n        this.destroyFuncsForColumnListeners.forEach(func => func());\n        this.destroyFuncsForColumnListeners.length = 0;\n    }\n\n    // this function adds listeners onto all the grid columns, which are the column that we could have cellComps for.\n    // when the grid columns change, we add listeners again. in an ideal design, each CellComp would just register to\n    // the column it belongs to on creation, however this was a bottleneck with the number of cells, so do it here\n    // once instead.\n    private refreshListenersToColumnsForCellComps(): void {\n        this.removeGridColumnListeners();\n\n        const cols = this.columnModel.getAllGridColumns();\n\n        if (!cols) { return; }\n\n        cols.forEach(col => {\n            const forEachCellWithThisCol = (callback: (cellCtrl: CellCtrl) => void) => {\n                this.getAllCellCtrls().forEach(cellCtrl => {\n                    if (cellCtrl.getColumn() === col) {\n                        callback(cellCtrl);\n                    }\n                });\n            };\n\n            const leftChangedListener = () => {\n                forEachCellWithThisCol(cellCtrl => cellCtrl.onLeftChanged());\n            };\n            const widthChangedListener = () => {\n                forEachCellWithThisCol(cellCtrl => cellCtrl.onWidthChanged());\n            };\n            const firstRightPinnedChangedListener = () => {\n                forEachCellWithThisCol(cellCtrl => cellCtrl.onFirstRightPinnedChanged());\n            };\n            const lastLeftPinnedChangedListener = () => {\n                forEachCellWithThisCol(cellCtrl => cellCtrl.onLastLeftPinnedChanged());\n            };\n\n            col.addEventListener(Column.EVENT_LEFT_CHANGED, leftChangedListener);\n            col.addEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);\n            col.addEventListener(Column.EVENT_FIRST_RIGHT_PINNED_CHANGED, firstRightPinnedChangedListener);\n            col.addEventListener(Column.EVENT_LAST_LEFT_PINNED_CHANGED, lastLeftPinnedChangedListener);\n\n            this.destroyFuncsForColumnListeners.push(() => {\n                col.removeEventListener(Column.EVENT_LEFT_CHANGED, leftChangedListener);\n                col.removeEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);\n                col.removeEventListener(Column.EVENT_FIRST_RIGHT_PINNED_CHANGED, firstRightPinnedChangedListener);\n                col.removeEventListener(Column.EVENT_LAST_LEFT_PINNED_CHANGED, lastLeftPinnedChangedListener);\n            });\n        });\n\n    }\n\n    private onDomLayoutChanged(): void {\n        const printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;\n        const embedFullWidthRows = printLayout || this.gridOptionsWrapper.isEmbedFullWidthRows();\n\n        // if moving towards or away from print layout, means we need to destroy all rows, as rows are not laid\n        // out using absolute positioning when doing print layout\n        const destroyRows = embedFullWidthRows !== this.embedFullWidthRows || this.printLayout !== printLayout;\n\n        this.printLayout = printLayout;\n        this.embedFullWidthRows = embedFullWidthRows;\n\n        if (destroyRows) {\n            this.redrawAfterModelUpdate();\n        }\n    }\n\n    // for row models that have datasources, when we update the datasource, we need to force the rowRenderer\n    // to redraw all rows. otherwise the old rows from the old datasource will stay displayed.\n    public datasourceChanged(): void {\n        this.firstRenderedRow = 0;\n        this.lastRenderedRow = -1;\n        const rowIndexesToRemove = Object.keys(this.rowCtrlsByRowIndex);\n        this.removeRowCtrls(rowIndexesToRemove);\n    }\n\n    private onPageLoaded(event: ModelUpdatedEvent): void {\n        const params: RefreshViewParams = {\n            recycleRows: event.keepRenderedRows,\n            animate: event.animate,\n            newData: event.newData,\n            newPage: event.newPage,\n            // because this is a model updated event (not pinned rows), we\n            // can skip updating the pinned rows. this is needed so that if user\n            // is doing transaction updates, the pinned rows are not getting constantly\n            // trashed - or editing cells in pinned rows are not refreshed and put into read mode\n            onlyBody: true\n        };\n        this.redrawAfterModelUpdate(params);\n    }\n\n    public getAllCellsForColumn(column: Column): HTMLElement[] {\n        const res: HTMLElement[] = [];\n\n        this.getAllRowCtrls().forEach(rowCtrl => {\n            const eCell = rowCtrl.getCellElement(column);\n            if (eCell) { res.push(eCell); }\n        });\n\n        return res;\n    }\n\n    public refreshFloatingRowComps(): void {\n        this.refreshFloatingRows(\n            this.topRowCtrls,\n            this.pinnedRowModel.getPinnedTopRowData()\n        );\n\n        this.refreshFloatingRows(\n            this.bottomRowCtrls,\n            this.pinnedRowModel.getPinnedBottomRowData()\n        );\n    }\n\n    public getTopRowCtrls(): RowCtrl[] {\n        return this.topRowCtrls;\n    }\n\n    public getBottomRowCtrls(): RowCtrl[] {\n        return this.bottomRowCtrls;\n    }\n\n    private refreshFloatingRows(rowComps: RowCtrl[], rowNodes: RowNode[]): void {\n        rowComps.forEach((row: RowCtrl) => {\n            row.destroyFirstPass();\n            row.destroySecondPass();\n        });\n\n        rowComps.length = 0;\n\n        if (!rowNodes) { return; }\n\n        rowNodes.forEach(rowNode => {\n            const rowCtrl = new RowCtrl(\n                rowNode,\n                this.beans,\n                false,\n                false,\n                this.printLayout\n            );\n\n            rowComps.push(rowCtrl);\n        });\n    }\n\n    private onPinnedRowDataChanged(): void {\n        // recycling rows in order to ensure cell editing is not cancelled\n        const params: RefreshViewParams = {\n            recycleRows: true\n        };\n\n        this.redrawAfterModelUpdate(params);\n    }\n\n    // if the row nodes are not rendered, no index is returned\n    private getRenderedIndexesForRowNodes(rowNodes: RowNode[]): string[] {\n        const result: string[] = [];\n\n        if (missing(rowNodes)) { return result; }\n\n        iterateObject(this.rowCtrlsByRowIndex, (index: string, renderedRow: RowCtrl) => {\n            const rowNode = renderedRow.getRowNode();\n            if (rowNodes.indexOf(rowNode) >= 0) {\n                result.push(index);\n            }\n        });\n\n        return result;\n    }\n\n    public redrawRows(rowNodes?: RowNode[]): void {\n        // if no row nodes provided, then refresh everything\n        const partialRefresh = rowNodes != null && rowNodes.length > 0;\n\n        if (partialRefresh) {\n            const indexesToRemove = this.getRenderedIndexesForRowNodes(rowNodes!);\n            // remove the rows\n            this.removeRowCtrls(indexesToRemove);\n        }\n\n        // add draw them again\n        this.redrawAfterModelUpdate({\n            recycleRows: partialRefresh\n        });\n    }\n\n    private getCellToRestoreFocusToAfterRefresh(params: RefreshViewParams): CellPosition | null {\n        const focusedCell = params.suppressKeepFocus ? null : this.focusService.getFocusCellToUseAfterRefresh();\n\n        if (focusedCell == null) { return null; }\n\n        // if the dom is not actually focused on a cell, then we don't try to refocus. the problem this\n        // solves is with editing - if the user is editing, eg focus is on a text field, and not on the\n        // cell itself, then the cell can be registered as having focus, however it's the text field that\n        // has the focus and not the cell div. therefore, when the refresh is finished, the grid will focus\n        // the cell, and not the textfield. that means if the user is in a text field, and the grid refreshes,\n        // the focus is lost from the text field. we do not want this.\n        const eDocument = this.gridOptionsWrapper.getDocument();\n        const activeElement = eDocument.activeElement;\n        const cellDomData = this.gridOptionsWrapper.getDomData(activeElement, CellCtrl.DOM_DATA_KEY_CELL_CTRL);\n        const rowDomData = this.gridOptionsWrapper.getDomData(activeElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL);\n\n        const gridElementFocused = cellDomData || rowDomData;\n\n        return gridElementFocused ? focusedCell : null;\n    }\n\n    // gets called from:\n    // +) initialisation (in registerGridComp) params = null\n    // +) onDomLayoutChanged, params = null\n    // +) onPageLoaded, recycleRows, animate, newData, newPage from event, onlyBody=true\n    // +) onPinnedRowDataChanged, recycleRows = true\n    // +) redrawRows (from Grid API), recycleRows = true/false\n    private redrawAfterModelUpdate(params: RefreshViewParams = {}): void {\n        this.getLockOnRefresh();\n\n        const focusedCell: CellPosition | null = this.getCellToRestoreFocusToAfterRefresh(params);\n\n        this.updateContainerHeights();\n        this.scrollToTopIfNewData(params);\n\n        // never recycle rows when print layout, we draw each row again from scratch. this is because print layout\n        // uses normal dom layout to put cells into dom - it doesn't allow reordering rows.\n        const recycleRows = !this.printLayout && !!params.recycleRows;\n        const animate = params.animate && this.gridOptionsWrapper.isAnimateRows();\n\n        // after modelUpdate, row indexes can change, so we clear out the rowsByIndex map,\n        // however we can reuse the rows, so we keep them but index by rowNode.id\n        const rowsToRecycle = recycleRows ? this.recycleRows() : null;\n        if (!recycleRows) {\n            this.removeAllRowComps();\n        }\n\n        const isFocusedCellGettingRecycled = () => {\n            if (focusedCell == null || rowsToRecycle == null) { return false; }\n            let res = false;\n\n            iterateObject(rowsToRecycle, (key: string, rowComp: RowCtrl) => {\n                const rowNode = rowComp.getRowNode();\n                const rowIndexEqual = rowNode.rowIndex == focusedCell.rowIndex;\n                const pinnedEqual = rowNode.rowPinned == focusedCell.rowPinned;\n                if (rowIndexEqual && pinnedEqual) {\n                    res = true;\n                }\n            });\n\n            return res;\n        };\n\n        const focusedCellRecycled = isFocusedCellGettingRecycled();\n\n        this.redraw(rowsToRecycle, animate);\n\n        if (!params.onlyBody) {\n            this.refreshFloatingRowComps();\n        }\n\n        this.dispatchDisplayedRowsChanged();\n\n        // if we focus a cell that's already focused, then we get an unnecessary 'cellFocused' event fired.\n        // this was happening when user clicked 'expand' on a rowGroup, then cellFocused was getting fired twice.\n        if (!focusedCellRecycled) {\n            this.restoreFocusedCell(focusedCell);\n        }\n\n        this.releaseLockOnRefresh();\n    }\n\n    private scrollToTopIfNewData(params: RefreshViewParams): void {\n        const scrollToTop = params.newData || params.newPage;\n        const suppressScrollToTop = this.gridOptionsWrapper.isSuppressScrollOnNewData();\n\n        if (scrollToTop && !suppressScrollToTop) {\n            this.gridBodyCtrl.getScrollFeature().scrollToTop();\n        }\n    }\n\n    private updateContainerHeights(): void {\n        // when doing print layout, we don't explicitly set height on the containers\n        if (this.printLayout) {\n            this.rowContainerHeightService.setModelHeight(null);\n            return;\n        }\n\n        let containerHeight = this.paginationProxy.getCurrentPageHeight();\n        // we need at least 1 pixel for the horizontal scroll to work. so if there are now rows,\n        // we still want the scroll to be present, otherwise there would be no way to scroll the header\n        // which might be needed us user wants to access columns\n        // on the RHS - and if that was where the filter was that cause no rows to be presented, there\n        // is no way to remove the filter.\n        if (containerHeight === 0) {\n            containerHeight = 1;\n        }\n\n        this.rowContainerHeightService.setModelHeight(containerHeight);\n    }\n\n    private getLockOnRefresh(): void {\n        if (this.refreshInProgress) {\n            throw new Error(\n                \"AG Grid: cannot get grid to draw rows when it is in the middle of drawing rows. \" +\n                \"Your code probably called a grid API method while the grid was in the render stage. To overcome \" +\n                \"this, put the API call into a timeout, e.g. instead of api.redrawRows(), \" +\n                \"call setTimeout(function() { api.redrawRows(); }, 0). To see what part of your code \" +\n                \"that caused the refresh check this stacktrace.\"\n            );\n        }\n\n        this.refreshInProgress = true;\n    }\n\n    private releaseLockOnRefresh(): void {\n        this.refreshInProgress = false;\n    }\n\n    public isRefreshInProgress(): boolean {\n        return this.refreshInProgress;\n    }\n\n    // sets the focus to the provided cell, if the cell is provided. this way, the user can call refresh without\n    // worry about the focus been lost. this is important when the user is using keyboard navigation to do edits\n    // and the cellEditor is calling 'refresh' to get other cells to update (as other cells might depend on the\n    // edited cell).\n    private restoreFocusedCell(cellPosition: CellPosition | null): void {\n        if (cellPosition) {\n            this.focusService.setFocusedCell(cellPosition.rowIndex, cellPosition.column, cellPosition.rowPinned, true);\n        }\n    }\n\n    public stopEditing(cancel: boolean = false) {\n        this.getAllRowCtrls().forEach(rowCtrl => {\n            rowCtrl.stopEditing(cancel);\n        });\n    }\n\n    private onNewColumnsLoaded(): void {\n        // we don't want each cellComp to register for events, as would increase rendering time.\n        // so for newColumnsLoaded, we register once here (in rowRenderer) and then inform\n        // each cell if / when event was fired.\n        this.getAllCellCtrls().forEach(cellCtrl => cellCtrl.onNewColumnsLoaded());\n    }\n\n    public getAllCellCtrls(): CellCtrl[] {\n        let res: CellCtrl[] = [];\n        this.getAllRowCtrls().forEach(rowCtrl => res = res.concat(rowCtrl.getAllCellCtrls()));\n        return res;\n    }\n\n    private getAllRowCtrls(): RowCtrl[] {\n        const res = [...this.topRowCtrls, ...this.bottomRowCtrls];\n        Object.keys(this.rowCtrlsByRowIndex).forEach(key => res.push(this.rowCtrlsByRowIndex[key]));\n        return res;\n    }\n\n    public addRenderedRowListener(eventName: string, rowIndex: number, callback: Function): void {\n        const rowComp = this.rowCtrlsByRowIndex[rowIndex];\n        if (rowComp) {\n            rowComp.addEventListener(eventName, callback);\n        }\n    }\n\n    public flashCells(params: FlashCellsParams = {}): void {\n        const { flashDelay, fadeDelay } = params;\n        this.getCellCtrls(params.rowNodes, params.columns)\n            .forEach(cellCtrl => cellCtrl.flashCell({ flashDelay, fadeDelay }));\n    }\n\n    public refreshCells(params: RefreshCellsParams = {}): void {\n        const refreshCellParams = {\n            forceRefresh: params.force,\n            newData: false,\n            suppressFlash: params.suppressFlash\n        };\n        this.getCellCtrls(params.rowNodes, params.columns)\n            .forEach(cellCtrl => {\n                if (cellCtrl.refreshShouldDestroy()) {\n                    const rowCtrl = cellCtrl.getRowCtrl();\n                    if (rowCtrl) {\n                        rowCtrl.refreshCell(cellCtrl);\n                    }\n                } else {\n                    cellCtrl.refreshCell(refreshCellParams);\n                }\n            });\n        this.getFullWidthRowCtrls(params.rowNodes).forEach( fullWidthRowCtrl => {\n            fullWidthRowCtrl.refreshFullWidth();\n        });\n    }\n\n    public getCellRendererInstances(params: GetCellRendererInstancesParams): ICellRenderer[] {\n        const res = this.getCellCtrls(params.rowNodes, params.columns)\n            .map(cellCtrl => cellCtrl.getCellRenderer())\n            .filter(renderer => renderer != null) as ICellRenderer[];\n        return res;\n    }\n\n    public getCellEditorInstances(params: GetCellRendererInstancesParams): ICellEditor[] {\n\n        const res: ICellEditor[] = [];\n\n        this.getCellCtrls(params.rowNodes, params.columns).forEach(cellCtrl => {\n            const cellEditor = cellCtrl.getCellEditor() as ICellEditor;\n\n            if (cellEditor) {\n                res.push(cellEditor);\n            }\n        });\n\n        return res;\n    }\n\n    public getEditingCells(): CellPosition[] {\n        const res: CellPosition[] = [];\n\n        this.getAllCellCtrls().forEach(cellCtrl => {\n            if (cellCtrl.isEditing()) {\n                const cellPosition = cellCtrl.getCellPosition();\n                res.push(cellPosition);\n            }\n        });\n\n        return res;\n    }\n\n    private mapRowNodes(rowNodes?: RowNode[] | null): {top: RowNodeMap, bottom: RowNodeMap, normal: RowNodeMap} | undefined {\n        if (!rowNodes) { return; }\n\n        const res: {top: RowNodeMap, bottom: RowNodeMap, normal: RowNodeMap} = {\n            top: {},\n            bottom: {},\n            normal: {}\n        };\n\n        rowNodes.forEach(rowNode => {\n            const id = rowNode.id!;\n            if (rowNode.rowPinned === Constants.PINNED_TOP) {\n                res.top[id] = rowNode;\n            } else if (rowNode.rowPinned === Constants.PINNED_BOTTOM) {\n                res.bottom[id] = rowNode;\n            } else {\n                res.normal[id] = rowNode;\n            }\n        });\n\n        return res;\n    }\n\n    private isRowInMap(rowNode: RowNode, rowIdsMap: {top: RowNodeMap, bottom: RowNodeMap, normal: RowNodeMap}): boolean {\n        // skip this row if it is missing from the provided list\n        const id = rowNode.id!;\n        const floating = rowNode.rowPinned;\n        if (floating === Constants.PINNED_BOTTOM) {\n            return rowIdsMap.bottom[id]!=null;\n        } else if (floating === Constants.PINNED_TOP) {\n            return rowIdsMap.top[id]!=null;\n        } else {\n            return rowIdsMap.normal[id]!=null;\n        }\n    }\n\n    // returns CellCtrl's that match the provided rowNodes and columns. eg if one row node\n    // and two columns provided, that identifies 4 cells, so 4 CellCtrl's returned.\n    private getCellCtrls(rowNodes?: RowNode[] | null, columns?: (string | Column)[]): CellCtrl[] {\n        let rowIdsMap = this.mapRowNodes(rowNodes);\n\n        const res: CellCtrl[] = [];\n\n        let colIdsMap: any;\n\n        if (exists(columns)) {\n            colIdsMap = {};\n            columns.forEach((colKey: string | Column) => {\n                const column: Column | null = this.columnModel.getGridColumn(colKey);\n                if (exists(column)) {\n                    colIdsMap[column.getId()] = true;\n                }\n            });\n        }\n\n        const processRow = (rowComp: RowCtrl) => {\n            const rowNode: RowNode = rowComp.getRowNode();\n\n            // skip this row if it is missing from the provided list\n            if (rowIdsMap!=null && !this.isRowInMap(rowNode, rowIdsMap)) { return; }\n\n            rowComp.getAllCellCtrls().forEach(cellCtrl => {\n                const colId: string = cellCtrl.getColumn().getId();\n                const excludeColFromRefresh = colIdsMap && !colIdsMap[colId];\n\n                if (excludeColFromRefresh) { return; }\n\n                res.push(cellCtrl);\n            });\n        };\n\n        iterateObject(this.rowCtrlsByRowIndex, (index: string, rowComp: RowCtrl) => {\n            processRow(rowComp);\n        });\n\n        if (this.topRowCtrls) {\n            this.topRowCtrls.forEach(processRow);\n        }\n\n        if (this.bottomRowCtrls) {\n            this.bottomRowCtrls.forEach(processRow);\n        }\n\n        return res;\n    }\n\n    protected destroy(): void {\n        this.removeAllRowComps();\n        super.destroy();\n    }\n\n    private removeAllRowComps(): void {\n        const rowIndexesToRemove = Object.keys(this.rowCtrlsByRowIndex);\n        this.removeRowCtrls(rowIndexesToRemove);\n    }\n\n    private recycleRows(): RowCtrlMap {\n        // remove all stub nodes, they can't be reused, as no rowNode id\n        const stubNodeIndexes: string[] = [];\n        iterateObject(this.rowCtrlsByRowIndex, (index: string, rowComp: RowCtrl) => {\n            const stubNode = rowComp.getRowNode().id == null;\n            if (stubNode) {\n                stubNodeIndexes.push(index);\n            }\n        });\n        this.removeRowCtrls(stubNodeIndexes);\n\n        // then clear out rowCompsByIndex, but before that take a copy, but index by id, not rowIndex\n        const nodesByIdMap: RowCtrlMap = {};\n        iterateObject(this.rowCtrlsByRowIndex, (index: string, rowComp: RowCtrl) => {\n            const rowNode = rowComp.getRowNode();\n            nodesByIdMap[rowNode.id!] = rowComp;\n        });\n        this.rowCtrlsByRowIndex = {};\n\n        return nodesByIdMap;\n    }\n\n    // takes array of row indexes\n    private removeRowCtrls(rowsToRemove: any[]) {\n        // if no fromIndex then set to -1, which will refresh everything\n        // let realFromIndex = -1;\n        rowsToRemove.forEach(indexToRemove => {\n            const rowCtrl = this.rowCtrlsByRowIndex[indexToRemove];\n            if (rowCtrl) {\n                rowCtrl.destroyFirstPass();\n                rowCtrl.destroySecondPass();\n            }\n            delete this.rowCtrlsByRowIndex[indexToRemove];\n        });\n    }\n\n    // gets called when rows don't change, but viewport does, so after:\n    // 1) height of grid body changes, ie number of displayed rows has changed\n    // 2) grid scrolled to new position\n    // 3) ensure index visible (which is a scroll)\n    public redrawAfterScroll() {\n        this.getLockOnRefresh();\n        this.redraw(null, false, true);\n        this.releaseLockOnRefresh();\n        this.dispatchDisplayedRowsChanged();\n    }\n\n    private removeRowCompsNotToDraw(indexesToDraw: number[]): void {\n        // for speedy lookup, dump into map\n        const indexesToDrawMap: { [index: string]: boolean; } = {};\n        indexesToDraw.forEach(index => (indexesToDrawMap[index] = true));\n\n        const existingIndexes = Object.keys(this.rowCtrlsByRowIndex);\n        const indexesNotToDraw: string[] = existingIndexes.filter(index => !indexesToDrawMap[index]);\n\n        this.removeRowCtrls(indexesNotToDraw);\n    }\n\n    private calculateIndexesToDraw(rowsToRecycle?: { [key: string]: RowCtrl; } | null): number[] {\n        // all in all indexes in the viewport\n        const indexesToDraw = createArrayOfNumbers(this.firstRenderedRow, this.lastRenderedRow);\n\n        const checkRowToDraw = (indexStr: string, rowComp: RowCtrl) => {\n            const index = rowComp.getRowNode().rowIndex;\n            if (index == null) { return; }\n            if (index < this.firstRenderedRow || index > this.lastRenderedRow) {\n                if (this.doNotUnVirtualiseRow(rowComp)) {\n                    indexesToDraw.push(index);\n                }\n            }\n        };\n\n        // if we are redrawing due to scrolling change, then old rows are in this.rowCompsByIndex\n        iterateObject(this.rowCtrlsByRowIndex, checkRowToDraw);\n\n        // if we are redrawing due to model update, then old rows are in rowsToRecycle\n        iterateObject(rowsToRecycle, checkRowToDraw);\n\n        indexesToDraw.sort((a: number, b: number) => a - b);\n\n        return indexesToDraw;\n    }\n\n    private redraw(rowsToRecycle?: { [key: string]: RowCtrl; } | null, animate = false, afterScroll = false) {\n        this.rowContainerHeightService.updateOffset();\n        this.workOutFirstAndLastRowsToRender();\n\n        // the row can already exist and be in the following:\n        // rowsToRecycle -> if model change, then the index may be different, however row may\n        //                         exist here from previous time (mapped by id).\n        // this.rowCompsByIndex -> if just a scroll, then this will contain what is currently in the viewport\n\n        // this is all the indexes we want, including those that already exist, so this method\n        // will end up going through each index and drawing only if the row doesn't already exist\n        const indexesToDraw = this.calculateIndexesToDraw(rowsToRecycle);\n\n        this.removeRowCompsNotToDraw(indexesToDraw);\n\n        // never animate when doing print layout - as we want to get things ready to print as quickly as possible,\n        // otherwise we risk the printer printing a row that's half faded (half way through fading in)\n        if (this.printLayout) {\n            animate = false;\n        }\n\n        // add in new rows\n        const rowCtrls: RowCtrl[] = [];\n\n        indexesToDraw.forEach(rowIndex => {\n            const rowCtrl = this.createOrUpdateRowCtrl(rowIndex, rowsToRecycle, animate, afterScroll);\n            if (exists(rowCtrl)) {\n                rowCtrls.push(rowCtrl);\n            }\n        });\n\n        if (rowsToRecycle) {\n            const useAnimationFrame = afterScroll && !this.gridOptionsWrapper.isSuppressAnimationFrame() && !this.printLayout;\n            if (useAnimationFrame) {\n                this.beans.animationFrameService.addDestroyTask(() => {\n                    this.destroyRowCtrls(rowsToRecycle, animate);\n                    this.updateAllRowCtrls();\n                    this.dispatchDisplayedRowsChanged();\n                });\n            } else {\n                this.destroyRowCtrls(rowsToRecycle, animate);\n            }\n        }\n\n        this.updateAllRowCtrls();\n        this.gridBodyCtrl.updateRowCount();\n    }\n\n    private dispatchDisplayedRowsChanged(): void {\n        const event: DisplayedRowsChangedEvent = {type: Events.EVENT_DISPLAYED_ROWS_CHANGED};\n        this.eventService.dispatchEvent(event);\n    }\n\n    private onDisplayedColumnsChanged(): void {\n        const pinningLeft = this.columnModel.isPinningLeft();\n        const pinningRight = this.columnModel.isPinningRight();\n        const atLeastOneChanged = this.pinningLeft !== pinningLeft || pinningRight !== this.pinningRight;\n\n        if (atLeastOneChanged) {\n            this.pinningLeft = pinningLeft;\n            this.pinningRight = pinningRight;\n\n            if (this.embedFullWidthRows) {\n                this.redrawFullWidthEmbeddedRows();\n            }\n        }\n    }\n\n    // when embedding, what gets showed in each section depends on what is pinned. eg if embedding group expand / collapse,\n    // then it should go into the pinned left area if pinning left, or the center area if not pinning.\n    private redrawFullWidthEmbeddedRows(): void {\n        // if either of the pinned panels has shown / hidden, then need to redraw the fullWidth bits when\n        // embedded, as what appears in each section depends on whether we are pinned or not\n        const rowsToRemove: string[] = [];\n\n        this.getFullWidthRowCtrls().forEach(fullWidthCtrl => {\n            const rowIndex = fullWidthCtrl.getRowNode().rowIndex;\n            rowsToRemove.push(rowIndex!.toString());\n        });\n\n        this.refreshFloatingRowComps();\n        this.removeRowCtrls(rowsToRemove);\n        this.redrawAfterScroll();\n    }\n\n    public getFullWidthRowCtrls(rowNodes?: RowNode[]): RowCtrl[] {\n        const rowNodesMap = this.mapRowNodes(rowNodes);\n        return getAllValuesInObject(this.rowCtrlsByRowIndex).filter( (rowCtrl: RowCtrl) => {\n            // include just full width\n            if (!rowCtrl.isFullWidth()) { return false; }\n\n            // if Row Nodes provided, we exclude where Row Node is missing\n            const rowNode = rowCtrl.getRowNode();\n            if (rowNodesMap!=null && !this.isRowInMap(rowNode, rowNodesMap)) { return false; }\n\n            return true;\n        });\n    }\n\n    public refreshFullWidthRows(rowNodesToRefresh?: RowNode[]): void {\n        const rowsToRemove: string[] = [];\n\n        const selectivelyRefreshing = !!rowNodesToRefresh;\n        const idsToRefresh: { [id: string]: boolean; } | undefined = selectivelyRefreshing ? {} : undefined;\n\n        if (selectivelyRefreshing && idsToRefresh) {\n            rowNodesToRefresh!.forEach(r => idsToRefresh[r.id!] = true);\n        }\n\n        this.getFullWidthRowCtrls().forEach(fullWidthRowCtrl => {\n            const rowNode = fullWidthRowCtrl.getRowNode();\n\n            if (selectivelyRefreshing && idsToRefresh) {\n                // we refresh if a) this node is present or b) this parents nodes is present. checking parent\n                // node is important for master/detail, as we want detail to refresh on changes to parent node.\n                // it's also possible, if user is provider their own fullWidth, that details panels contain\n                // some info on the parent, eg if in tree data and child row shows some data from parent row also.\n                const parentId = (rowNode.level > 0 && rowNode.parent) ? rowNode.parent.id : undefined;\n                const skipThisNode = !idsToRefresh[rowNode.id!] && !idsToRefresh[parentId!];\n                if (skipThisNode) { return; }\n            }\n\n            const fullWidthRowsRefreshed = fullWidthRowCtrl.refreshFullWidth();\n            if (!fullWidthRowsRefreshed) {\n                const rowIndex = fullWidthRowCtrl.getRowNode().rowIndex;\n\n                rowsToRemove.push(rowIndex!.toString());\n            }\n        });\n\n        this.removeRowCtrls(rowsToRemove);\n        this.redrawAfterScroll();\n    }\n\n    private createOrUpdateRowCtrl(\n        rowIndex: number,\n        rowsToRecycle: { [key: string]: RowCtrl | null; } | null | undefined,\n        animate: boolean,\n        afterScroll: boolean\n    ): RowCtrl | null | undefined {\n        let rowNode: RowNode | undefined;\n        let rowCtrl: RowCtrl | null = this.rowCtrlsByRowIndex[rowIndex];\n\n        // if no row comp, see if we can get it from the previous rowComps\n        if (!rowCtrl) {\n            rowNode = this.paginationProxy.getRow(rowIndex);\n            if (exists(rowNode) && exists(rowsToRecycle) && rowsToRecycle[rowNode.id!] && rowNode.alreadyRendered) {\n                rowCtrl = rowsToRecycle[rowNode.id!];\n                rowsToRecycle[rowNode.id!] = null;\n            }\n        }\n\n        const creatingNewRowCtrl = !rowCtrl;\n\n        if (creatingNewRowCtrl) {\n            // create a new one\n            if (!rowNode) {\n                rowNode = this.paginationProxy.getRow(rowIndex);\n            }\n\n            if (exists(rowNode)) {\n                rowCtrl = this.createRowCon(rowNode, animate, afterScroll);\n            } else {\n                // this should never happen - if somehow we are trying to create\n                // a row for a rowNode that does not exist.\n                return;\n            }\n        }\n\n        if (rowNode) {\n            // set node as 'alreadyRendered' to ensure we only recycle rowComps that have been rendered, this ensures\n            // we don't reuse rowComps that have been removed and then re-added in the same batch transaction.\n            rowNode.alreadyRendered = true;\n        }\n\n        this.rowCtrlsByRowIndex[rowIndex] = rowCtrl!;\n\n        return rowCtrl;\n    }\n\n    private destroyRowCtrls(rowCtrlsMap: RowCtrlMap | null | undefined, animate: boolean): void {\n        const executeInAWhileFuncs: (() => void)[] = [];\n        iterateObject(rowCtrlsMap, (nodeId: string, rowCtrl: RowCtrl) => {\n            // if row was used, then it's null\n            if (!rowCtrl) { return; }\n\n            if (this.cachedRowCtrls && rowCtrl.isCacheable()) {\n                this.cachedRowCtrls.addRow(rowCtrl);\n                return;\n            }\n\n            rowCtrl.destroyFirstPass();\n            if (animate) {\n                this.zombieRowCtrls[rowCtrl.getInstanceId()] = rowCtrl;\n                executeInAWhileFuncs.push(() => {\n                    rowCtrl.destroySecondPass();\n                    delete this.zombieRowCtrls[rowCtrl.getInstanceId()];\n                });\n            } else {\n                rowCtrl.destroySecondPass();\n            }\n        });\n        if (animate) {\n            // this ensures we fire displayedRowsChanged AFTER all the 'executeInAWhileFuncs' get\n            // executed, as we added it to the end of the list.\n            executeInAWhileFuncs.push(() => {\n                this.updateAllRowCtrls();\n                this.dispatchDisplayedRowsChanged();\n            });\n            executeInAWhile(executeInAWhileFuncs);\n        }\n    }\n\n    private workOutFirstAndLastRowsToRender(): void {\n        let newFirst: number;\n        let newLast: number;\n\n        if (!this.paginationProxy.isRowsToRender()) {\n            newFirst = 0;\n            newLast = -1; // setting to -1 means nothing in range\n        } else if (this.printLayout) {\n            newFirst = this.paginationProxy.getPageFirstRow();\n            newLast = this.paginationProxy.getPageLastRow();\n        } else {\n            const bufferPixels = this.gridOptionsWrapper.getRowBufferInPixels();\n            const gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n            const suppressRowVirtualisation = this.gridOptionsWrapper.isSuppressRowVirtualisation();\n\n            let rowHeightsChanged = false;\n            let firstPixel: number;\n            let lastPixel: number;\n            do {\n                const paginationOffset = this.paginationProxy.getPixelOffset();\n                const {pageFirstPixel, pageLastPixel} = this.paginationProxy.getCurrentPagePixelRange();\n                const divStretchOffset = this.rowContainerHeightService.getDivStretchOffset();\n\n                if (suppressRowVirtualisation) {\n                    firstPixel = pageFirstPixel + divStretchOffset;\n                    lastPixel = pageLastPixel + divStretchOffset;    \n                } else {\n                    const bodyVRange = gridBodyCtrl.getScrollFeature().getVScrollPosition();\n                    const bodyTopPixel = bodyVRange.top;\n                    const bodyBottomPixel = bodyVRange.bottom;\n\n                    firstPixel = Math.max(bodyTopPixel + paginationOffset - bufferPixels, pageFirstPixel) + divStretchOffset;\n                    lastPixel = Math.min(bodyBottomPixel + paginationOffset + bufferPixels, pageLastPixel) + divStretchOffset;    \n                }\n\n                // if the rows we are about to display get their heights changed, then that upsets the calcs from above.\n                rowHeightsChanged = this.ensureAllRowsInRangeHaveHeightsCalculated(firstPixel, lastPixel);\n\n            } while (rowHeightsChanged);\n\n            let firstRowIndex = this.paginationProxy.getRowIndexAtPixel(firstPixel);\n            let lastRowIndex = this.paginationProxy.getRowIndexAtPixel(lastPixel);\n\n            const pageFirstRow = this.paginationProxy.getPageFirstRow();\n            const pageLastRow = this.paginationProxy.getPageLastRow();\n\n            // adjust, in case buffer extended actual size\n            if (firstRowIndex < pageFirstRow) {\n                firstRowIndex = pageFirstRow;\n            }\n\n            if (lastRowIndex > pageLastRow) {\n                lastRowIndex = pageLastRow;\n            }\n\n            newFirst = firstRowIndex;\n            newLast = lastRowIndex;\n        }\n\n        // sometimes user doesn't set CSS right and ends up with grid with no height and grid ends up\n        // trying to render all the rows, eg 10,000+ rows. this will kill the browser. so instead of\n        // killing the browser, we limit the number of rows. just in case some use case we didn't think\n        // of, we also have a property to not do this operation.\n        const rowLayoutNormal = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_NORMAL;\n        const suppressRowCountRestriction = this.gridOptionsWrapper.isSuppressMaxRenderedRowRestriction();\n        const rowBufferMaxSize = Math.max(this.gridOptionsWrapper.getRowBuffer(), 500);\n\n        if (rowLayoutNormal && !suppressRowCountRestriction) {\n            if (newLast - newFirst > rowBufferMaxSize) {\n                newLast = newFirst + rowBufferMaxSize;\n            }\n        }\n\n        const firstDiffers = newFirst !== this.firstRenderedRow;\n        const lastDiffers = newLast !== this.lastRenderedRow;\n\n        if (firstDiffers || lastDiffers) {\n            this.firstRenderedRow = newFirst;\n            this.lastRenderedRow = newLast;\n\n            const event: ViewportChangedEvent = {\n                type: Events.EVENT_VIEWPORT_CHANGED,\n                firstRow: newFirst,\n                lastRow: newLast,\n                api: this.gridApi,\n                columnApi: this.columnApi\n            };\n\n            this.eventService.dispatchEvent(event);\n        }\n\n        // only dispatch firstDataRendered if we have actually rendered some data\n        if (this.paginationProxy.isRowsToRender()) {\n            const event: FirstDataRenderedEvent = {\n                type: Events.EVENT_FIRST_DATA_RENDERED,\n                firstRow: newFirst,\n                lastRow: newLast,\n                api: this.gridApi,\n                columnApi: this.columnApi\n            };\n\n            // added a small delay here because in some scenarios this can be fired\n            // before the grid is actually rendered, causing component creation\n            // on EVENT_FIRST_DATA_RENDERED to fail.\n            window.setTimeout(() => this.eventService.dispatchEventOnce(event), 50);\n        }\n    }\n\n    private ensureAllRowsInRangeHaveHeightsCalculated(topPixel: number, bottomPixel: number): boolean {\n        // ensureRowHeightsVisible only works with CSRM, as it's the only row model that allows lazy row height calcs.\n        // all the other row models just hard code so the method just returns back false\n        const res = this.paginationProxy.ensureRowHeightsValid(topPixel, bottomPixel, -1, -1);\n\n        if (res) {\n            this.updateContainerHeights();\n        }\n\n        return res;\n    }\n\n    public getFirstVirtualRenderedRow() {\n        return this.firstRenderedRow;\n    }\n\n    public getLastVirtualRenderedRow() {\n        return this.lastRenderedRow;\n    }\n\n    // check that none of the rows to remove are editing or focused as:\n    // a) if editing, we want to keep them, otherwise the user will loose the context of the edit,\n    //    eg user starts editing, enters some text, then scrolls down and then up, next time row rendered\n    //    the edit is reset - so we want to keep it rendered.\n    // b) if focused, we want ot keep keyboard focus, so if user ctrl+c, it goes to clipboard,\n    //    otherwise the user can range select and drag (with focus cell going out of the viewport)\n    //    and then ctrl+c, nothing will happen if cell is removed from dom.\n    // c) if detail record of master detail, as users complained that the context of detail rows\n    //    was getting lost when detail row out of view. eg user expands to show detail row,\n    //    then manipulates the detail panel (eg sorts the detail grid), then context is lost\n    //    after detail panel is scrolled out of / into view.\n    private doNotUnVirtualiseRow(rowComp: RowCtrl): boolean {\n        const REMOVE_ROW: boolean = false;\n        const KEEP_ROW: boolean = true;\n        const rowNode = rowComp.getRowNode();\n\n        const rowHasFocus = this.focusService.isRowNodeFocused(rowNode);\n        const rowIsEditing = rowComp.isEditing();\n        const rowIsDetail = rowNode.detail;\n\n        const mightWantToKeepRow = rowHasFocus || rowIsEditing || rowIsDetail;\n\n        // if we deffo don't want to keep it,\n        if (!mightWantToKeepRow) {\n            return REMOVE_ROW;\n        }\n\n        // editing row, only remove if it is no longer rendered, eg filtered out or new data set.\n        // the reason we want to keep is if user is scrolling up and down, we don't want to loose\n        // the context of the editing in process.\n        const rowNodePresent = this.paginationProxy.isRowPresent(rowNode);\n        return rowNodePresent ? KEEP_ROW : REMOVE_ROW;\n    }\n\n    private createRowCon(rowNode: RowNode, animate: boolean, afterScroll: boolean): RowCtrl {\n\n        const rowCtrlFromCache = this.cachedRowCtrls ? this.cachedRowCtrls.getRow(rowNode) : null;\n        if (rowCtrlFromCache) { return rowCtrlFromCache; }\n\n        // we don't use animations frames for printing, so the user can put the grid into print mode\n        // and immediately print - otherwise the user would have to wait for the rows to draw in the background\n        // (via the animation frames) which is awkward to do from code.\n\n        // we only do the animation frames after scrolling, as this is where we want the smooth user experience.\n        // having animation frames for other times makes the grid look 'jumpy'.\n\n        const suppressAnimationFrame = this.gridOptionsWrapper.isSuppressAnimationFrame();\n        const useAnimationFrameForCreate = afterScroll && !suppressAnimationFrame && !this.printLayout;\n\n        const res = new RowCtrl(\n            rowNode,\n            this.beans,\n            animate,\n            useAnimationFrameForCreate,\n            this.printLayout\n        );\n\n        return res;\n    }\n\n    public getRenderedNodes() {\n        const renderedRows = this.rowCtrlsByRowIndex;\n\n        return Object.keys(renderedRows).map(key => renderedRows[key]!.getRowNode());\n    }\n\n    public getRowByPosition(rowPosition: RowPosition): RowCtrl | null {\n        let rowComponent: RowCtrl | null;\n        switch (rowPosition.rowPinned) {\n            case Constants.PINNED_TOP:\n                rowComponent = this.topRowCtrls[rowPosition.rowIndex];\n                break;\n            case Constants.PINNED_BOTTOM:\n                rowComponent = this.bottomRowCtrls[rowPosition.rowIndex];\n                break;\n            default:\n                rowComponent = this.rowCtrlsByRowIndex[rowPosition.rowIndex];\n                break;\n        }\n\n        return rowComponent;\n    }\n\n    public getRowNode(gridRow: RowPosition): RowNode | undefined {\n        switch (gridRow.rowPinned) {\n            case Constants.PINNED_TOP:\n                return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];\n            case Constants.PINNED_BOTTOM:\n                return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];\n            default:\n                return this.rowModel.getRow(gridRow.rowIndex);\n        }\n    }\n\n    // returns true if any row between startIndex and endIndex is rendered. used by\n    // SSRM or IRM, as they don't want to purge visible blocks from cache.\n    public isRangeInRenderedViewport(startIndex: number, endIndex: number): boolean {\n\n        // parent closed means the parent node is not expanded, thus these blocks are not visible\n        const parentClosed = startIndex == null || endIndex == null;\n        if (parentClosed) { return false; }\n\n        const blockAfterViewport = startIndex > this.lastRenderedRow;\n        const blockBeforeViewport = endIndex < this.firstRenderedRow;\n        const blockInsideViewport = !blockBeforeViewport && !blockAfterViewport;\n\n        return blockInsideViewport;\n    }\n}\n\nclass RowCtrlCache {\n\n    // map for fast access\n    private entriesMap: RowCtrlMap = {};\n\n    // list for keeping order\n    private entriesList: RowCtrl[] = [];\n\n    private readonly maxCount: number;\n\n    constructor(maxCount: number) {\n        this.maxCount = maxCount;\n    }\n\n    public addRow(rowCtrl: RowCtrl): void {\n        this.entriesMap[rowCtrl.getRowNode().id!] = rowCtrl;\n        this.entriesList.push(rowCtrl);\n        rowCtrl.setCached(true);\n\n        if (this.entriesList.length > this.maxCount) {\n            const rowCtrlToDestroy = this.entriesList[0];\n            rowCtrlToDestroy.destroyFirstPass();\n            rowCtrlToDestroy.destroySecondPass();\n            this.removeFromCache(rowCtrlToDestroy);\n        }\n    }\n\n    public getRow(rowNode: RowNode): RowCtrl | null {\n        if (rowNode == null || rowNode.id == null) { return null; }\n\n        const res = this.entriesMap[rowNode.id];\n\n        if (!res) { return null; }\n\n        this.removeFromCache(res);\n        res.setCached(false);\n\n        // this can happen if user reloads data, and a new RowNode is reusing\n        // the same ID as the old one\n        const rowNodeMismatch = res.getRowNode() != rowNode;\n\n        return rowNodeMismatch ? null : res;\n    }\n\n    private removeFromCache(rowCtrl: RowCtrl): void {\n        const rowNodeId = rowCtrl.getRowNode().id!;\n        delete this.entriesMap[rowNodeId];\n        removeFromArray(this.entriesList, rowCtrl);\n    }\n\n    public getEntries(): RowCtrl[] {\n        return this.entriesList;\n    }\n}\n\nexport interface RefreshViewParams {\n    recycleRows?: boolean;\n    animate?: boolean;\n    suppressKeepFocus?: boolean;\n    onlyBody?: boolean;\n    // when new data, grid scrolls back to top\n    newData?: boolean;\n    newPage?: boolean;\n}\n","import { Bean, Autowired } from '../context/context';\nimport { Column } from '../entities/column';\nimport { RowNode } from '../entities/rowNode';\nimport { ExpressionService } from '../valueService/expressionService';\nimport { ValueFormatterParams } from '../entities/colDef';\nimport { BeanStub } from \"../context/beanStub\";\n\n@Bean('valueFormatterService')\nexport class ValueFormatterService extends BeanStub {\n\n    @Autowired('expressionService') private expressionService: ExpressionService;\n\n    public formatValue(\n        column: Column,\n        node: RowNode | null,\n        value: any,\n        suppliedFormatter?: (value: any) => string,\n        useFormatterFromColumn = true\n    ): string | null {\n        let result: string | null = null;\n        let formatter: ((value: any) => string) | string | undefined;\n\n        const colDef = column.getColDef();\n\n        if (suppliedFormatter) {\n            // use supplied formatter if provided, e.g. set filter items can have their own value formatters\n            formatter = suppliedFormatter;\n        } else if (useFormatterFromColumn) {\n            // if row is pinned, give preference to the pinned formatter\n            formatter = node && node.rowPinned && colDef.pinnedRowValueFormatter ?\n                colDef.pinnedRowValueFormatter : colDef.valueFormatter;\n        }\n\n        if (formatter) {\n            const params: ValueFormatterParams = {\n                value,\n                node,\n                data: node ? node.data : null,\n                colDef,\n                column,\n                api: this.gridOptionsWrapper.getApi()!,\n                columnApi: this.gridOptionsWrapper.getColumnApi()!,\n                context: this.gridOptionsWrapper.getContext()\n            };\n\n            result = this.expressionService.evaluate(formatter, params);\n        } else if (colDef.refData) {\n            return colDef.refData[value] || '';\n        }\n\n        // if we don't do this, then arrays get displayed as 1,2,3, but we want 1, 2, 3 (i.e. with spaces)\n        if (result == null && Array.isArray(value)) {\n            result = value.join(', ');\n        }\n\n        return result;\n    }\n}\n","import { RowNode } from \"../entities/rowNode\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { Events, PinnedRowDataChangedEvent } from \"../events\";\nimport { Constants } from \"../constants/constants\";\nimport { ColumnApi } from \"../columns/columnApi\";\nimport { GridApi } from \"../gridApi\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { missingOrEmpty } from \"../utils/generic\";\nimport { last } from \"../utils/array\";\nimport { Beans } from \"../rendering/beans\";\n\n@Bean('pinnedRowModel')\nexport class PinnedRowModel extends BeanStub {\n\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('beans') private beans: Beans;\n\n    private pinnedTopRows: RowNode[];\n    private pinnedBottomRows: RowNode[];\n\n    @PostConstruct\n    public init(): void {\n        this.setPinnedTopRowData(this.gridOptionsWrapper.getPinnedTopRowData());\n        this.setPinnedBottomRowData(this.gridOptionsWrapper.getPinnedBottomRowData());\n    }\n\n    public isEmpty(floating: string): boolean {\n        const rows = floating === Constants.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;\n        return missingOrEmpty(rows);\n    }\n\n    public isRowsToRender(floating: string): boolean {\n        return !this.isEmpty(floating);\n    }\n\n    public getRowAtPixel(pixel: number, floating: string): number {\n        const rows = floating === Constants.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;\n        if (missingOrEmpty(rows)) {\n            return 0; // this should never happen, just in case, 0 is graceful failure\n        }\n        for (let i = 0; i < rows.length; i++) {\n            const rowNode = rows[i];\n            const rowTopPixel = rowNode.rowTop! + rowNode.rowHeight! - 1;\n            // only need to range check against the top pixel, as we are going through the list\n            // in order, first row to hit the pixel wins\n            if (rowTopPixel >= pixel) {\n                return i;\n            }\n        }\n        return rows.length - 1;\n    }\n\n    public setPinnedTopRowData(rowData: any[] | undefined): void {\n        this.pinnedTopRows = this.createNodesFromData(rowData, true);\n        const event: PinnedRowDataChangedEvent = {\n            type: Events.EVENT_PINNED_ROW_DATA_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public setPinnedBottomRowData(rowData: any[] | undefined): void {\n        this.pinnedBottomRows = this.createNodesFromData(rowData, false);\n        const event: PinnedRowDataChangedEvent = {\n            type: Events.EVENT_PINNED_ROW_DATA_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private createNodesFromData(allData: any[] | undefined, isTop: boolean): RowNode[] {\n        const rowNodes: RowNode[] = [];\n        if (allData) {\n            let nextRowTop = 0;\n            allData.forEach((dataItem: any, index: number) => {\n                const rowNode = new RowNode(this.beans);\n                rowNode.data = dataItem;\n\n                const idPrefix = isTop ? RowNode.ID_PREFIX_TOP_PINNED : RowNode.ID_PREFIX_BOTTOM_PINNED;\n                rowNode.id = idPrefix + index;\n\n                rowNode.rowPinned = isTop ? Constants.PINNED_TOP : Constants.PINNED_BOTTOM;\n                rowNode.setRowTop(nextRowTop);\n                rowNode.setRowHeight(this.gridOptionsWrapper.getRowHeightForNode(rowNode).height);\n                rowNode.setRowIndex(index);\n                nextRowTop += rowNode.rowHeight!;\n                rowNodes.push(rowNode);\n            });\n        }\n        return rowNodes;\n    }\n\n    public getPinnedTopRowData(): RowNode[] {\n        return this.pinnedTopRows;\n    }\n\n    public getPinnedBottomRowData(): RowNode[] {\n        return this.pinnedBottomRows;\n    }\n\n    public getPinnedTopTotalHeight(): number {\n        return this.getTotalHeight(this.pinnedTopRows);\n    }\n\n    public getPinnedTopRowCount(): number {\n        return this.pinnedTopRows ? this.pinnedTopRows.length : 0;\n    }\n\n    public getPinnedBottomRowCount(): number {\n        return this.pinnedBottomRows ? this.pinnedBottomRows.length : 0;\n    }\n\n    public getPinnedTopRow(index: number): RowNode | undefined {\n        return this.pinnedTopRows[index];\n    }\n\n    public getPinnedBottomRow(index: number): RowNode | undefined {\n        return this.pinnedBottomRows[index];\n    }\n\n    public forEachPinnedTopRow(callback: (rowNode: RowNode, index: number) => void): void {\n        if (missingOrEmpty(this.pinnedTopRows)) {\n            return;\n        }\n        this.pinnedTopRows.forEach(callback);\n    }\n\n    public forEachPinnedBottomRow(callback: (rowNode: RowNode, index: number) => void): void {\n        if (missingOrEmpty(this.pinnedBottomRows)) {\n            return;\n        }\n        this.pinnedBottomRows.forEach(callback);\n    }\n\n    public getPinnedBottomTotalHeight(): number {\n        return this.getTotalHeight(this.pinnedBottomRows);\n    }\n\n    private getTotalHeight(rowNodes: RowNode[]): number {\n        if (!rowNodes || rowNodes.length === 0) { return 0; }\n\n        const lastNode = last(rowNodes);\n        return lastNode.rowTop! + lastNode.rowHeight!;\n    }\n\n}\n","import { RowNode } from \"../entities/rowNode\";\nimport { Column } from \"../entities/column\";\n\n// the class below contains a tree of row nodes. each node is\n// represented by a PathItem\ninterface PathItem {\n    rowNode: RowNode; // the node this item points to\n    children: PathItem[] | null; // children of this node - will be a subset of all the nodes children\n}\n\n// when doing transactions, or change detection, and grouping is present\n// in the data, there is no need for the ClientSideRowModel to update each\n// group after an update, ony parts that were impacted by the change.\n// this class keeps track of all groups that were impacted by a transaction.\n// the the different CSRM operations (filter, sort etc) use the forEach method\n// to visit each group that was changed.\nexport class ChangedPath {\n\n    // we keep columns when doing changed detection after user edits.\n    // when a user edits, we only need to re-aggregate the column\n    // that was edited.\n    private readonly keepingColumns: boolean;\n\n    // the root path always points to RootNode, and RootNode\n    // is always in the changed path. over time, we add items to\n    // the path, but this stays as the root. when the changed path\n    // is ready, this will be the root of the tree of RowNodes that\n    // need to be refreshed (all the row nodes that were impacted by\n    // the transaction).\n    private readonly pathRoot: PathItem;\n\n    // whether changed path is active of not. it is active when a) doing\n    // a transaction update or b) doing change detection. if we are doing\n    // a CSRM refresh for other reasons (after sort or filter, or user calling\n    // setRowData() without delta mode) then we are not active. we are also\n    // marked as not active if secondary columns change in pivot (as this impacts\n    // aggregations)\n    private active = true;\n\n    // for each node in the change path, we also store which columns need\n    // to be re-aggregated.\n    private nodeIdsToColumns: {[nodeId:string]: {[colId:string]:boolean}} = {};\n\n    // for quick lookup, all items in the change path are mapped by nodeId\n    private mapToItems: {[id: string]: PathItem} = {};\n\n    public constructor(keepingColumns: boolean, rootNode: RowNode) {\n        this.keepingColumns = keepingColumns;\n\n        this.pathRoot = {\n            rowNode: rootNode,\n            children: null\n        };\n        this.mapToItems[rootNode.id!] = this.pathRoot;\n    }\n\n    // can be set inactive by:\n    // a) ClientSideRowModel, if no transactions or\n    // b) PivotService, if secondary columns changed\n    public setInactive(): void {\n        this.active = false;\n    }\n\n    public isActive(): boolean {\n        return this.active;\n    }\n\n    private depthFirstSearchChangedPath(pathItem: PathItem, callback: (rowNode: RowNode) => void): void {\n        if (pathItem.children) {\n            for (let i = 0; i < pathItem.children.length; i++) {\n                this.depthFirstSearchChangedPath(pathItem.children[i], callback);\n            }\n        }\n        callback(pathItem.rowNode);\n    }\n\n    private depthFirstSearchEverything(rowNode: RowNode, callback: (rowNode: RowNode) => void, traverseEverything: boolean): void {\n        if (rowNode.childrenAfterGroup) {\n            for (let i = 0; i < rowNode.childrenAfterGroup.length; i++) {\n                const childNode = rowNode.childrenAfterGroup[i];\n                if (childNode.childrenAfterGroup) {\n                    this.depthFirstSearchEverything(rowNode.childrenAfterGroup[i], callback, traverseEverything);\n                } else if (traverseEverything) {\n                    callback(childNode);\n                }\n            }\n        }\n        callback(rowNode);\n    }\n\n    // traverseLeafNodes -> used when NOT doing changed path, ie traversing everything. the callback\n    // will be called for child nodes in addition to parent nodes.\n    public forEachChangedNodeDepthFirst(\n        callback: (rowNode: RowNode) => void,\n        traverseLeafNodes = false,\n    ): void {\n        if (this.active) {\n            // if we are active, then use the change path to callback\n            // only for updated groups\n            this.depthFirstSearchChangedPath(this.pathRoot, callback);\n        } else {\n            // we are not active, so callback for everything, walk the entire path\n            this.depthFirstSearchEverything(this.pathRoot.rowNode, callback, traverseLeafNodes);\n        }\n    }\n\n    public executeFromRootNode(callback: (rowNode: RowNode) => void) {\n        callback(this.pathRoot.rowNode);\n    }\n\n    private createPathItems(rowNode: RowNode): number {\n        let pointer = rowNode;\n        let newEntryCount = 0;\n        while (!this.mapToItems[pointer.id!]) {\n            const newEntry: PathItem = {\n                rowNode: pointer,\n                children: null\n            };\n            this.mapToItems[pointer.id!] = newEntry;\n            newEntryCount++;\n            pointer = pointer.parent!;\n        }\n        return newEntryCount;\n    }\n\n    private populateColumnsMap(rowNode: RowNode, columns: Column[]): void {\n        if (!this.keepingColumns || !columns) { return; }\n\n        let pointer = rowNode;\n        while (pointer) {\n            // if columns, add the columns in all the way to parent, merging\n            // in any other columns that might be there already\n            if (!this.nodeIdsToColumns[pointer.id!]) {\n                this.nodeIdsToColumns[pointer.id!] = {};\n            }\n            columns.forEach(col => this.nodeIdsToColumns[pointer.id!][col.getId()] = true);\n            pointer = pointer.parent!;\n        }\n    }\n\n    private linkPathItems(rowNode: RowNode, newEntryCount: number): void {\n        let pointer = rowNode;\n        for (let i = 0; i < newEntryCount; i++) {\n            const thisItem = this.mapToItems[pointer.id!];\n            const parentItem = this.mapToItems[pointer.parent!.id!];\n            if (!parentItem.children) {\n                parentItem.children = [];\n            }\n            parentItem.children.push(thisItem);\n            pointer = pointer.parent!;\n        }\n    }\n\n    // called by\n    // 1) change detection (provides cols) and\n    // 2) groupStage if doing transaction update (doesn't provide cols)\n    public addParentNode(rowNode: RowNode | null, columns?: Column[]): void {\n\n        if (!rowNode || rowNode.isRowPinned()) { return; }\n\n        // we cannot do  both steps below in the same loop as\n        // the second loop has a dependency on the first loop.\n        // ie the hierarchy cannot be stitched up yet because\n        // we don't have it built yet\n\n        // create the new PathItem objects.\n        const newEntryCount = this.createPathItems(rowNode);\n\n        // link in the node items\n        this.linkPathItems(rowNode, newEntryCount);\n\n        // update columns\n        this.populateColumnsMap(rowNode, columns!);\n    }\n\n    public canSkip(rowNode: RowNode): boolean {\n        return this.active && !this.mapToItems[rowNode.id!];\n    }\n\n    public getValueColumnsForNode(rowNode: RowNode, valueColumns: Column[]): Column[] {\n        if (!this.keepingColumns) { return valueColumns; }\n\n        const colsForThisNode = this.nodeIdsToColumns[rowNode.id!];\n        const result = valueColumns.filter(col => colsForThisNode[col.getId()]);\n        return result;\n    }\n\n    public getNotValueColumnsForNode(rowNode: RowNode, valueColumns: Column[]): Column[] | null {\n        if (!this.keepingColumns) { return null; }\n\n        const colsForThisNode = this.nodeIdsToColumns[rowNode.id!];\n        const result = valueColumns.filter(col => !colsForThisNode[col.getId()]);\n        return result;\n    }\n}\n","import { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { Column } from \"../entities/column\";\nimport { Environment } from \"../environment\";\nimport { Events } from '../events';\nimport { BeanStub } from \"../context/beanStub\";\nimport { getAbsoluteHeight, getAbsoluteWidth } from '../utils/dom';\nimport { last } from '../utils/array';\nimport { isElementInEventPath } from '../utils/event';\nimport { KeyCode } from '../constants/keyCode';\nimport { FocusService } from \"../focusService\";\nimport { GridCtrl } from \"../gridComp/gridCtrl\";\nimport { IAfterGuiAttachedParams } from \"../interfaces/iAfterGuiAttachedParams\";\nimport { AgPromise } from \"../utils\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { setAriaLabel, setAriaRole } from \"../utils/aria\";\nimport { PostProcessPopupParams } from \"../entities/iCallbackParams\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\n\nexport interface PopupEventParams {\n    originalMouseEvent?: MouseEvent | Touch | null;\n    mouseEvent?: MouseEvent;\n    touchEvent?: TouchEvent;\n    keyboardEvent?: KeyboardEvent;\n}\n\nexport interface AgPopup {\n    element: HTMLElement;\n    wrapper: HTMLElement;\n    hideFunc: () => void;\n    isAnchored: boolean;\n    stopAnchoringPromise: AgPromise<Function>;\n    instanceId: number;\n}\n\ninterface Rect {\n    top: number;\n    left: number;\n    right: number;\n    bottom: number;\n}\n\nenum DIRECTION { vertical, horizontal }\n\nlet instanceIdSeq = 0;\n\nexport interface AddPopupParams {\n    // if true then listens to background checking for clicks, so that when the background is clicked,\n    // the child is removed again, giving a model look to popups.\n    modal?: boolean;\n    // the element to place in the popup\n    eChild: HTMLElement;\n    // if hitting ESC should close the popup\n    closeOnEsc?: boolean;\n    // a callback that gets called when the popup is closed\n    closedCallback?: (e?: MouseEvent | TouchEvent | KeyboardEvent) => void;\n    // if a clicked caused the popup (eg click a button) then the click that caused it\n    click?: MouseEvent | Touch | null;\n    alwaysOnTop?: boolean;\n    afterGuiAttached?: (params: IAfterGuiAttachedParams) => void;\n    // this gets called after the popup is created. the called could just call positionCallback themselves,\n    // however it needs to be called first before anchorToElement is called, so must provide this callback\n    // here if setting anchorToElement\n    positionCallback?: () => void;\n    // if the underlying anchorToElement moves, the popup will follow it. for example if context menu\n    // showing, and the whole grid moves (browser is scrolled down) then we want the popup to stay above\n    // the cell it appeared on. make sure though if setting, don't anchor to a temporary or moving element,\n    // eg if cellComp element is passed, what happens if row moves (sorting, filtering etc)? best anchor against\n    // the grid, not the cell.\n    anchorToElement?: HTMLElement;\n\n    // an aria label should be added to provided context to screen readers\n    ariaLabel: string;\n}\n\nexport interface AddPopupResult {\n    hideFunc: () => void;\n    stopAnchoringPromise: AgPromise<Function>;\n}\n\n@Bean('popupService')\nexport class PopupService extends BeanStub {\n\n    // really this should be using eGridDiv, not sure why it's not working.\n    // maybe popups in the future should be parent to the body??\n    @Autowired('environment') private environment: Environment;\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('ctrlsService') public ctrlsService: CtrlsService;\n\n    private gridCtrl: GridCtrl;\n\n    private popupList: AgPopup[] = [];\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.ctrlsService.whenReady(p => {\n            this.gridCtrl = p.gridCtrl;\n            this.addManagedListener(this.gridCtrl, Events.EVENT_KEYBOARD_FOCUS, () => {\n                this.popupList.forEach(popup => popup.element.classList.add(FocusService.AG_KEYBOARD_FOCUS));\n            });\n            this.addManagedListener(this.gridCtrl, Events.EVENT_MOUSE_FOCUS, () => {\n                this.popupList.forEach(popup => popup.element.classList.remove(FocusService.AG_KEYBOARD_FOCUS));\n            });\n        });\n    }\n\n    public getPopupParent(): HTMLElement {\n        const ePopupParent = this.gridOptionsWrapper.getPopupParent();\n\n        if (ePopupParent) { return ePopupParent; }\n\n        return this.gridCtrl.getGui();\n    }\n\n    public positionPopupForMenu(params: { eventSource: HTMLElement, ePopup: HTMLElement; }): void {\n        const sourceRect = params.eventSource.getBoundingClientRect();\n        const parentRect = this.getParentRect();\n        const y = this.keepXYWithinBounds(params.ePopup, sourceRect.top - parentRect.top, DIRECTION.vertical);\n\n        const minWidth = (params.ePopup.clientWidth > 0) ? params.ePopup.clientWidth : 200;\n        params.ePopup.style.minWidth = `${minWidth}px`;\n        const widthOfParent = parentRect.right - parentRect.left;\n        const maxX = widthOfParent - minWidth;\n\n        // the x position of the popup depends on RTL or LTR. for normal cases, LTR, we put the child popup\n        // to the right, unless it doesn't fit and we then put it to the left. for RTL it's the other way around,\n        // we try place it first to the left, and then if not to the right.\n        let x: number;\n        if (this.gridOptionsWrapper.isEnableRtl()) {\n            // for RTL, try left first\n            x = xLeftPosition();\n            if (x < 0) {\n                x = xRightPosition();\n            }\n            if (x > maxX) {\n                x = 0;\n            }\n        } else {\n            // for LTR, try right first\n            x = xRightPosition();\n            if (x > maxX) {\n                x = xLeftPosition();\n            }\n            if (x < 0) {\n                x = 0;\n            }\n        }\n\n        params.ePopup.style.left = `${x}px`;\n        params.ePopup.style.top = `${y}px`;\n\n        function xRightPosition(): number {\n            return sourceRect.right - parentRect.left - 2;\n        }\n\n        function xLeftPosition(): number {\n            return sourceRect.left - parentRect.left - minWidth;\n        }\n    }\n\n    public positionPopupUnderMouseEvent(params: {\n        rowNode?: RowNode | null,\n        column?: Column | null,\n        type: string,\n        mouseEvent: MouseEvent | Touch,\n        nudgeX?: number,\n        nudgeY?: number,\n        ePopup: HTMLElement,\n    }): void {\n        const { ePopup, nudgeX, nudgeY } = params;\n        const { x, y } = this.calculatePointerAlign(params.mouseEvent);\n\n        this.positionPopup({\n            ePopup: ePopup,\n            x,\n            y,\n            nudgeX,\n            nudgeY,\n            keepWithinBounds: true\n        });\n\n        this.callPostProcessPopup(params.type, params.ePopup, null, params.mouseEvent, params.column, params.rowNode);\n    }\n\n    private calculatePointerAlign(e: MouseEvent | Touch): { x: number, y: number; } {\n        const parentRect = this.getParentRect();\n\n        return {\n            x: e.clientX - parentRect.left,\n            y: e.clientY - parentRect.top\n        };\n    }\n\n    public positionPopupUnderComponent(params: {\n        type: string,\n        eventSource: HTMLElement,\n        ePopup: HTMLElement,\n        column?: Column,\n        rowNode?: RowNode,\n        nudgeX?: number,\n        nudgeY?: number,\n        alignSide?: 'left' | 'right',\n        keepWithinBounds?: boolean;\n    }) {\n        const sourceRect = params.eventSource.getBoundingClientRect();\n        const alignSide = params.alignSide || 'left';\n        const parentRect = this.getParentRect();\n\n        let x = sourceRect.left - parentRect.left;\n\n        if (alignSide === 'right') {\n            x -= (params.ePopup.offsetWidth - sourceRect.width);\n        }\n\n        this.positionPopup({\n            ePopup: params.ePopup,\n            nudgeX: params.nudgeX,\n            nudgeY: params.nudgeY,\n            x,\n            y: sourceRect.top - parentRect.top + sourceRect.height,\n            keepWithinBounds: params.keepWithinBounds\n        });\n\n        this.callPostProcessPopup(params.type, params.ePopup, params.eventSource, null, params.column, params.rowNode);\n    }\n\n    public positionPopupOverComponent(params: {\n        type: string,\n        eventSource: HTMLElement,\n        ePopup: HTMLElement,\n        column: Column,\n        rowNode: RowNode,\n        nudgeX?: number,\n        nudgeY?: number,\n        keepWithinBounds?: boolean;\n    }) {\n        const sourceRect = params.eventSource.getBoundingClientRect();\n        const parentRect = this.getParentRect();\n\n        this.positionPopup({\n            ePopup: params.ePopup,\n            nudgeX: params.nudgeX,\n            nudgeY: params.nudgeY,\n            x: sourceRect.left - parentRect.left,\n            y: sourceRect.top - parentRect.top,\n            keepWithinBounds: params.keepWithinBounds\n        });\n\n        this.callPostProcessPopup(params.type, params.ePopup, params.eventSource, null, params.column, params.rowNode);\n    }\n\n    private callPostProcessPopup(\n        type: string,\n        ePopup: HTMLElement,\n        eventSource?: HTMLElement | null,\n        mouseEvent?: MouseEvent | Touch | null,\n        column?: Column | null,\n        rowNode?: RowNode | null\n    ): void {\n        const callback = this.gridOptionsWrapper.getPostProcessPopupFunc();\n        if (callback) {\n            const params: WithoutGridCommon<PostProcessPopupParams> = {\n                column: column,\n                rowNode: rowNode,\n                ePopup: ePopup,\n                type: type,\n                eventSource: eventSource,\n                mouseEvent: mouseEvent\n            };\n            callback(params);\n        }\n    }\n\n    public positionPopup(params: {\n        ePopup: HTMLElement,\n        nudgeX?: number,\n        nudgeY?: number,\n        x: number,\n        y: number,\n        keepWithinBounds?: boolean;\n    }): void {\n        const { ePopup, keepWithinBounds, nudgeX, nudgeY } = params;\n        let { x, y } = params;\n\n        if (nudgeX) {\n            x += nudgeX;\n        }\n        if (nudgeY) {\n            y += nudgeY;\n        }\n\n        // if popup is overflowing to the bottom, move it up\n        if (keepWithinBounds) {\n            x = this.keepXYWithinBounds(ePopup, x, DIRECTION.horizontal);\n            y = this.keepXYWithinBounds(ePopup, y, DIRECTION.vertical);\n        }\n\n        ePopup.style.left = `${x}px`;\n        ePopup.style.top = `${y}px`;\n    }\n\n    public getActivePopups(): HTMLElement[] {\n        return this.popupList.map((popup) => popup.element);\n    }\n\n    public getPopupList(): AgPopup[] {\n        return this.popupList;\n    }\n\n    private getParentRect(): Rect {\n        // subtract the popup parent borders, because popupParent.getBoundingClientRect\n        // returns the rect outside the borders, but the 0,0 coordinate for absolute\n        // positioning is inside the border, leading the popup to be off by the width\n        // of the border\n        const eDocument = this.gridOptionsWrapper.getDocument();\n        let popupParent = this.getPopupParent();\n\n        if (popupParent === eDocument.body) {\n            popupParent = eDocument.documentElement;\n        }\n\n        const style = getComputedStyle(popupParent);\n        const bounds = popupParent.getBoundingClientRect();\n\n        return {\n            top: bounds.top + parseFloat(style.borderTopWidth!) || 0,\n            left: bounds.left + parseFloat(style.borderLeftWidth!) || 0,\n            right: bounds.right + parseFloat(style.borderRightWidth!) || 0,\n            bottom: bounds.bottom + parseFloat(style.borderBottomWidth!) || 0,\n        };\n    }\n\n    private keepXYWithinBounds(\n        ePopup: HTMLElement,\n        position: number,\n        direction: DIRECTION\n    ): number {\n        const isVertical = direction === DIRECTION.vertical;\n        const sizeProperty = isVertical ? 'clientHeight' : 'clientWidth';\n        const anchorProperty = isVertical ? 'top' : 'left';\n        const offsetProperty = isVertical ? 'offsetHeight' : 'offsetWidth';\n        const scrollPositionProperty = isVertical ? 'scrollTop' : 'scrollLeft';\n\n        const eDocument = this.gridOptionsWrapper.getDocument();\n        const docElement = eDocument.documentElement;\n        const popupParent = this.getPopupParent();\n        const parentRect = popupParent.getBoundingClientRect();\n        const documentRect = eDocument.documentElement.getBoundingClientRect();\n        const isBody = popupParent === eDocument.body;\n\n        const offsetSize = ePopup[offsetProperty];\n        const getSize = isVertical ? getAbsoluteHeight : getAbsoluteWidth;\n\n        let sizeOfParent = isBody ? (getSize(docElement) + docElement[scrollPositionProperty]) : popupParent[sizeProperty];\n\n        if (isBody) {\n            sizeOfParent -= Math.abs(documentRect[anchorProperty] - parentRect[anchorProperty]);\n        }\n\n        const max = sizeOfParent - offsetSize;\n\n        return Math.min(Math.max(position, 0), Math.abs(max));\n    }\n\n    private keepPopupPositionedRelativeTo(params: {\n        ePopup: HTMLElement,\n        element: HTMLElement,\n        hidePopup: () => void;\n    }): AgPromise<() => void> {\n        const eParent = this.getPopupParent();\n        const parentRect = eParent.getBoundingClientRect();\n\n        const sourceRect = params.element.getBoundingClientRect();\n        const initialDiffTop = parentRect.top - sourceRect.top;\n        const initialDiffLeft = parentRect.left - sourceRect.left;\n\n        let lastDiffTop = initialDiffTop;\n        let lastDiffLeft = initialDiffLeft;\n\n        const topPx = params.ePopup.style.top;\n        const top = parseInt(topPx!.substring(0, topPx!.length - 1), 10);\n\n        const leftPx = params.ePopup.style.left;\n        const left = parseInt(leftPx!.substring(0, leftPx!.length - 1), 10);\n\n        return new AgPromise<() => void>(resolve => {\n            this.getFrameworkOverrides().setInterval(() => {\n                const pRect = eParent.getBoundingClientRect();\n                const sRect = params.element.getBoundingClientRect();\n\n                const elementNotInDom = sRect.top == 0 && sRect.left == 0 && sRect.height == 0 && sRect.width == 0;\n                if (elementNotInDom) {\n                    params.hidePopup();\n                    return;\n                }\n\n                const currentDiffTop = pRect.top - sRect.top;\n                if (currentDiffTop != lastDiffTop) {\n                    const newTop = this.keepXYWithinBounds(params.ePopup, top + initialDiffTop - currentDiffTop, DIRECTION.vertical);\n                    params.ePopup.style.top = `${newTop}px`;\n                }\n                lastDiffTop = currentDiffTop;\n\n                const currentDiffLeft = pRect.left - sRect.left;\n                if (currentDiffLeft != lastDiffLeft) {\n                    const newLeft = this.keepXYWithinBounds(params.ePopup, left + initialDiffLeft - currentDiffLeft, DIRECTION.horizontal);\n                    params.ePopup.style.left = `${newLeft}px`;\n                }\n                lastDiffLeft = currentDiffLeft;\n\n            }, 200).then(intervalId => {\n                const result = () => {\n                    if (intervalId != null) {\n                        window.clearInterval(intervalId);\n                    }\n                };\n                resolve(result);\n            });\n        });\n    }\n\n    public addPopup(params: AddPopupParams): AddPopupResult {\n        const {\n            modal,\n            eChild,\n            closeOnEsc,\n            closedCallback,\n            click,\n            alwaysOnTop,\n            afterGuiAttached,\n            positionCallback,\n            anchorToElement,\n            ariaLabel\n        } = params;\n\n        const eDocument = this.gridOptionsWrapper.getDocument();\n\n        let destroyPositionTracker: AgPromise<() => void> = new AgPromise(resolve => resolve(() => { }));\n\n        if (!eDocument) {\n            console.warn('ag-grid: could not find the document, document is empty');\n            return { hideFunc: () => { }, stopAnchoringPromise: destroyPositionTracker };\n        }\n\n        const pos = this.popupList.findIndex(popup => popup.element === eChild);\n\n        if (pos !== -1) {\n            const popup = this.popupList[pos];\n            return { hideFunc: popup.hideFunc, stopAnchoringPromise: popup.stopAnchoringPromise };\n        }\n\n        const ePopupParent = this.getPopupParent();\n\n        if (eChild.style.top == null) {\n            eChild.style.top = '0px';\n        }\n        if (eChild.style.left == null) {\n            eChild.style.left = '0px';\n        }\n\n        // add env CSS class to child, in case user provided a popup parent, which means\n        // theme class may be missing\n        const eWrapper = document.createElement('div');\n        const { theme } = this.environment.getTheme();\n\n        if (theme) {\n            eWrapper.classList.add(theme);\n        }\n\n        eWrapper.classList.add('ag-popup');\n        eChild.classList.add(\n            this.gridOptionsWrapper.isEnableRtl() ? 'ag-rtl' : 'ag-ltr',\n            'ag-popup-child'\n        );\n\n        if (!eChild.hasAttribute('role')) {\n            setAriaRole(eChild, 'dialog');\n        }\n\n        setAriaLabel(eChild, ariaLabel);\n\n        if (this.focusService.isKeyboardMode()) {\n            eChild.classList.add(FocusService.AG_KEYBOARD_FOCUS);\n        }\n\n        eWrapper.appendChild(eChild);\n        ePopupParent.appendChild(eWrapper);\n\n        if (alwaysOnTop) {\n            this.setAlwaysOnTop(eWrapper, true);\n        } else {\n            this.bringPopupToFront(eWrapper);\n        }\n\n        let popupHidden = false;\n\n        const hidePopupOnKeyboardEvent = (event: KeyboardEvent) => {\n            if (!eWrapper.contains(eDocument.activeElement)) {\n                return;\n            }\n\n            const key = event.key;\n\n            if (key === KeyCode.ESCAPE) {\n                hidePopup({ keyboardEvent: event });\n            }\n        };\n\n        const hidePopupOnMouseEvent = (event: MouseEvent) => hidePopup({ mouseEvent: event });\n        const hidePopupOnTouchEvent = (event: TouchEvent) => hidePopup({ touchEvent: event });\n\n        const hidePopup = (popupParams: PopupEventParams = {}) => {\n            const { mouseEvent, touchEvent, keyboardEvent } = popupParams;\n            if (\n                // we don't hide popup if the event was on the child, or any\n                // children of this child\n                this.isEventFromCurrentPopup({ mouseEvent, touchEvent }, eChild) ||\n                // if the event to close is actually the open event, then ignore it\n                this.isEventSameChainAsOriginalEvent({ originalMouseEvent: click, mouseEvent, touchEvent }) ||\n                // this method should only be called once. the client can have different\n                // paths, each one wanting to close, so this method may be called multiple times.\n                popupHidden\n            ) {\n                return;\n            }\n\n            popupHidden = true;\n\n            ePopupParent.removeChild(eWrapper);\n\n            eDocument.removeEventListener('keydown', hidePopupOnKeyboardEvent);\n            eDocument.removeEventListener('mousedown', hidePopupOnMouseEvent);\n            eDocument.removeEventListener('touchstart', hidePopupOnTouchEvent);\n            eDocument.removeEventListener('contextmenu', hidePopupOnMouseEvent);\n\n            this.eventService.removeEventListener(Events.EVENT_DRAG_STARTED, hidePopupOnMouseEvent);\n\n            if (closedCallback) {\n                closedCallback(mouseEvent || touchEvent || keyboardEvent);\n            }\n\n            this.popupList = this.popupList.filter(popup => popup.element !== eChild);\n\n            if (destroyPositionTracker) {\n                destroyPositionTracker.then(destroyFunc => destroyFunc && destroyFunc());\n            }\n        };\n\n        if (afterGuiAttached) {\n            afterGuiAttached({ hidePopup });\n        }\n\n        // if we add these listeners now, then the current mouse\n        // click will be included, which we don't want\n        window.setTimeout(() => {\n            if (closeOnEsc) {\n                eDocument.addEventListener('keydown', hidePopupOnKeyboardEvent);\n            }\n\n            if (modal) {\n                eDocument.addEventListener('mousedown', hidePopupOnMouseEvent);\n                this.eventService.addEventListener(Events.EVENT_DRAG_STARTED, hidePopupOnMouseEvent);\n                eDocument.addEventListener('touchstart', hidePopupOnTouchEvent);\n                eDocument.addEventListener('contextmenu', hidePopupOnMouseEvent);\n            }\n        }, 0);\n\n        if (positionCallback) {\n            positionCallback();\n        }\n        if (anchorToElement) {\n            // keeps popup positioned under created, eg if context menu, if user scrolls\n            // using touchpad and the cell moves, it moves the popup to keep it with the cell.\n            destroyPositionTracker = this.keepPopupPositionedRelativeTo({\n                element: anchorToElement,\n                ePopup: eChild,\n                hidePopup\n            });\n        }\n\n        this.popupList.push({\n            element: eChild,\n            wrapper: eWrapper,\n            hideFunc: hidePopup,\n            stopAnchoringPromise: destroyPositionTracker,\n            instanceId: instanceIdSeq++,\n            isAnchored: !!anchorToElement\n        });\n\n        return {\n            hideFunc: hidePopup,\n            stopAnchoringPromise: destroyPositionTracker\n        };\n    }\n\n    public hasAnchoredPopup(): boolean {\n        return this.popupList.some(popup => popup.isAnchored);\n    }\n\n    private isEventFromCurrentPopup(params: PopupEventParams, target: HTMLElement): boolean {\n        const { mouseEvent, touchEvent } = params;\n\n        const event = mouseEvent ? mouseEvent : touchEvent;\n\n        if (!event) { return false; }\n\n        const indexOfThisChild = this.popupList.findIndex(popup => popup.element === target);\n\n        if (indexOfThisChild === -1) { return false; }\n\n        for (let i = indexOfThisChild; i < this.popupList.length; i++) {\n            const popup = this.popupList[i];\n\n            if (isElementInEventPath(popup.element, event)) { return true; }\n        }\n\n        // if the user did not write their own Custom Element to be rendered as popup\n        // and this component has an additional popup element, they should have the\n        // `ag-custom-component-popup` class to be detected as part of the Custom Component\n        return this.isElementWithinCustomPopup(event.target as HTMLElement);\n    }\n\n    public isElementWithinCustomPopup(el: HTMLElement): boolean {\n        const eDocument = this.gridOptionsWrapper.getDocument();\n        while (el && el !== eDocument.body) {\n            if (el.classList.contains('ag-custom-component-popup') || el.parentElement === null) {\n                return true;\n            }\n            el = el.parentElement;\n        }\n\n        return false;\n    }\n\n    // in some browsers, the context menu event can be fired before the click event, which means\n    // the context menu event could open the popup, but then the click event closes it straight away.\n    private isEventSameChainAsOriginalEvent(params: PopupEventParams): boolean {\n        const { originalMouseEvent, mouseEvent, touchEvent } = params;\n        // we check the coordinates of the event, to see if it's the same event. there is a 1 / 1000 chance that\n        // the event is a different event, however that is an edge case that is not very relevant (the user clicking\n        // twice on the same location isn't a normal path).\n\n        // event could be mouse event or touch event.\n        let mouseEventOrTouch: MouseEvent | Touch | null = null;\n\n        if (mouseEvent) {\n            // mouse event can be used direction, it has coordinates\n            mouseEventOrTouch = mouseEvent;\n        } else if (touchEvent) {\n            // touch event doesn't have coordinates, need it's touch object\n            mouseEventOrTouch = touchEvent.touches[0];\n        }\n        if (mouseEventOrTouch && originalMouseEvent) {\n            // for x, allow 4px margin, to cover iPads, where touch (which opens menu) is followed\n            // by browser click (when you finger up, touch is interrupted as click in browser)\n            const screenX = mouseEvent ? mouseEvent.screenX : 0;\n            const screenY = mouseEvent ? mouseEvent.screenY : 0;\n\n            const xMatch = Math.abs(originalMouseEvent.screenX - screenX) < 5;\n            const yMatch = Math.abs(originalMouseEvent.screenY - screenY) < 5;\n\n            if (xMatch && yMatch) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private getWrapper(ePopup: HTMLElement): HTMLElement | null {\n        while (!ePopup.classList.contains('ag-popup') && ePopup.parentElement) {\n            ePopup = ePopup.parentElement;\n        }\n\n        return ePopup.classList.contains('ag-popup') ? ePopup : null;\n    }\n\n    public setAlwaysOnTop(ePopup: HTMLElement, alwaysOnTop?: boolean): void {\n        const eWrapper = this.getWrapper(ePopup);\n\n        if (!eWrapper) {\n            return;\n        }\n\n        eWrapper.classList.toggle('ag-always-on-top', !!alwaysOnTop);\n\n        if (alwaysOnTop) {\n            this.bringPopupToFront(eWrapper);\n        }\n    }\n\n    public bringPopupToFront(ePopup: HTMLElement) {\n        const parent = this.getPopupParent();\n        const popupList: HTMLElement[] = Array.prototype.slice.call(parent.querySelectorAll('.ag-popup'));\n        const popupLen = popupList.length;\n        const alwaysOnTopList: HTMLElement[] = Array.prototype.slice.call(parent.querySelectorAll('.ag-popup.ag-always-on-top'));\n        const onTopLength = alwaysOnTopList.length;\n        const eWrapper = this.getWrapper(ePopup);\n\n        if (!eWrapper || popupLen <= 1 || !parent.contains(ePopup)) {\n            return;\n        }\n\n        const pos = popupList.indexOf(eWrapper);\n\n        const innerEls = eWrapper.querySelectorAll('div');\n        const innerElsScrollMap: [HTMLElement, number][] = [];\n\n        innerEls.forEach(el => {\n            if (el.scrollTop !== 0) {\n                innerElsScrollMap.push([el, el.scrollTop]);\n            }\n        });\n\n        if (onTopLength) {\n            const isPopupAlwaysOnTop = eWrapper.classList.contains('ag-always-on-top');\n\n            if (isPopupAlwaysOnTop) {\n                if (pos !== popupLen - 1) {\n                    last(alwaysOnTopList).insertAdjacentElement('afterend', eWrapper);\n                }\n            } else if (pos !== popupLen - onTopLength - 1) {\n                alwaysOnTopList[0].insertAdjacentElement('beforebegin', eWrapper);\n            }\n        } else if (pos !== popupLen - 1) {\n            last(popupList).insertAdjacentElement('afterend', eWrapper);\n        }\n\n        while (innerElsScrollMap.length) {\n            const currentEl = innerElsScrollMap.pop();\n            currentEl![0].scrollTop = currentEl![1];\n        }\n\n        const params = {\n            type: 'popupToFront',\n            api: this.gridOptionsWrapper.getApi(),\n            columnApi: this.gridOptionsWrapper.getColumnApi(),\n            eWrapper\n        };\n\n        this.eventService.dispatchEvent(params);\n    }\n}\n","import { AgEvent } from \"../events\";\nimport { BeanStub } from \"../context/beanStub\";\n\nexport interface LoadCompleteEvent extends AgEvent {\n    success: boolean;\n    block: RowNodeBlock;\n}\n\nexport interface LoadSuccessParams {\n    /**\n     * Data retrieved from the server as requested by the grid.\n     */\n    rowData: any[];\n    /**\n     * The last row, if known, to help Infinite Scroll (i.e Partial Store) and Pagination.\n     */\n    rowCount?: number;\n    /**\n     * Any extra information for the grid to associate with this load.\n     */\n    storeInfo?: any;\n}\n\nexport abstract class RowNodeBlock extends BeanStub {\n\n    public static EVENT_LOAD_COMPLETE = 'loadComplete';\n\n    public static STATE_WAITING_TO_LOAD = 'needsLoading';\n    public static STATE_LOADING = 'loading';\n    public static STATE_LOADED = 'loaded';\n    public static STATE_FAILED = 'failed';\n\n    private readonly id: number;\n\n    private state = RowNodeBlock.STATE_WAITING_TO_LOAD;\n\n    private version = 0;\n\n    public abstract getBlockStateJson(): { id: string, state: any };\n\n    protected abstract loadFromDatasource(): void;\n\n    protected abstract processServerResult(params: LoadSuccessParams): void;\n\n    protected abstract processServerFail(): void;\n\n    protected constructor(id: number) {\n        super();\n        this.id = id;\n    }\n\n    public getId(): number {\n        return this.id;\n    }\n\n    public load(): void {\n        this.state = RowNodeBlock.STATE_LOADING;\n        this.loadFromDatasource();\n    }\n\n    public getVersion(): number {\n        return this.version;\n    }\n\n    public setStateWaitingToLoad(): void {\n        // in case any current loads in progress, this will have their results ignored\n        this.version++;\n        this.state = RowNodeBlock.STATE_WAITING_TO_LOAD;\n    }\n\n    public getState(): string {\n        return this.state;\n    }\n\n    protected pageLoadFailed(version: number) {\n        const requestMostRecentAndLive = this.isRequestMostRecentAndLive(version);\n        if (requestMostRecentAndLive) {\n            this.state = RowNodeBlock.STATE_FAILED;\n            this.processServerFail();\n        }\n\n        this.dispatchLoadCompleted(false);\n    }\n\n    protected success(version: number, params: LoadSuccessParams): void {\n        this.successCommon(version, params);\n    }\n\n    protected pageLoaded(version: number, rows: any[], lastRow: number) {\n        this.successCommon(version, {rowData: rows, rowCount: lastRow});\n    }\n\n    private isRequestMostRecentAndLive(version: number): boolean {\n        // thisIsMostRecentRequest - if block was refreshed, then another request\n        // could of been sent after this one.\n        const thisIsMostRecentRequest = version === this.version;\n\n        // weAreNotDestroyed - if InfiniteStore is purged, then blocks are destroyed\n        // and new blocks created. so data loads of old blocks are discarded.\n        const weAreNotDestroyed = this.isAlive();\n\n        return thisIsMostRecentRequest && weAreNotDestroyed;\n    }\n\n    protected successCommon(version: number, params: LoadSuccessParams) {\n\n        // need to dispatch load complete before processing the data, as PaginationComp checks\n        // RowNodeBlockLoader to see if it is still loading, so the RowNodeBlockLoader needs to\n        // be updated first (via LoadComplete event) before PaginationComp updates (via processServerResult method)\n        this.dispatchLoadCompleted();\n\n        const requestMostRecentAndLive = this.isRequestMostRecentAndLive(version);\n\n        if (requestMostRecentAndLive) {\n            this.state = RowNodeBlock.STATE_LOADED;\n            this.processServerResult(params);\n        }\n    }\n\n    private dispatchLoadCompleted(success = true) {\n        // we fire event regardless of processing data or now, as we want\n        // the concurrentLoadRequests count to be reduced in BlockLoader\n        const event: LoadCompleteEvent = {\n            type: RowNodeBlock.EVENT_LOAD_COMPLETE,\n            success: success,\n            block: this\n        };\n\n        this.dispatchEvent(event);\n    }\n}\n","import { RowNodeBlock } from \"./rowNodeBlock\";\nimport { Bean, PostConstruct, Qualifier } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { Logger, LoggerFactory } from \"../logger\";\nimport { _ } from \"../utils\";\n\n@Bean('rowNodeBlockLoader')\nexport class RowNodeBlockLoader extends BeanStub {\n\n    public static BLOCK_LOADER_FINISHED_EVENT = 'blockLoaderFinished';\n\n    private maxConcurrentRequests: number | undefined;\n    private checkBlockToLoadDebounce: () => void;\n\n    private activeBlockLoadsCount = 0;\n    private blocks: RowNodeBlock[] = [];\n    private logger: Logger;\n    private active = true;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.maxConcurrentRequests = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();\n        const blockLoadDebounceMillis = this.gridOptionsWrapper.getBlockLoadDebounceMillis();\n\n        if (blockLoadDebounceMillis && blockLoadDebounceMillis > 0) {\n            this.checkBlockToLoadDebounce = _.debounce(this.performCheckBlocksToLoad.bind(this), blockLoadDebounceMillis);\n        }\n    }\n\n    private setBeans(@Qualifier('loggerFactory') loggerFactory: LoggerFactory) {\n        this.logger = loggerFactory.create('RowNodeBlockLoader');\n    }\n\n    public addBlock(block: RowNodeBlock): void {\n        this.blocks.push(block);\n\n        // note that we do not remove this listener when removing the block. this is because the\n        // cache can get destroyed (and containing blocks) when a block is loading. however the loading block\n        // is still counted as an active loading block and we must decrement activeBlockLoadsCount when it finishes.\n        block.addEventListener(RowNodeBlock.EVENT_LOAD_COMPLETE, this.loadComplete.bind(this));\n\n        this.checkBlockToLoad();\n    }\n\n    public removeBlock(block: RowNodeBlock): void {\n        _.removeFromArray(this.blocks, block);\n    }\n\n    protected destroy(): void {\n        super.destroy();\n        this.active = false;\n    }\n\n    private loadComplete(): void {\n        this.activeBlockLoadsCount--;\n        this.checkBlockToLoad();\n        if (this.activeBlockLoadsCount == 0) {\n            this.dispatchEvent({type: RowNodeBlockLoader.BLOCK_LOADER_FINISHED_EVENT});\n        }\n    }\n\n    public checkBlockToLoad(): void {\n        if (this.checkBlockToLoadDebounce) {\n            this.checkBlockToLoadDebounce();\n        } else {\n            this.performCheckBlocksToLoad();\n        }\n    }\n\n    private performCheckBlocksToLoad(): void {\n        if (!this.active) { return; }\n\n        this.printCacheStatus();\n\n        if (this.maxConcurrentRequests != null && this.activeBlockLoadsCount >= this.maxConcurrentRequests) {\n            this.logger.log(`checkBlockToLoad: max loads exceeded`);\n            return;\n        }\n\n        let blockToLoad: RowNodeBlock | null = null;\n        this.blocks.forEach(block => {\n            if (block.getState() === RowNodeBlock.STATE_WAITING_TO_LOAD) {\n                blockToLoad = block;\n            }\n        });\n\n        if (blockToLoad) {\n            (blockToLoad as RowNodeBlock).load();\n            this.activeBlockLoadsCount++;\n            this.printCacheStatus();\n        }\n    }\n\n    public getBlockState(): any {\n        const result: any = {};\n        this.blocks.forEach((block: RowNodeBlock) => {\n            const {id, state} = block.getBlockStateJson();\n            result[id] = state;\n        });\n        return result;\n    }\n\n    private printCacheStatus(): void {\n\n        if (this.logger.isLogging()) {\n            this.logger.log(`printCacheStatus: activePageLoadsCount = ${this.activeBlockLoadsCount},`\n                + ` blocks = ${JSON.stringify(this.getBlockState())}`);\n        }\n    }\n\n    public isLoading(): boolean {\n        return this.activeBlockLoadsCount > 0;\n    }\n}\n","import { IRowModel, RowBounds } from \"../interfaces/iRowModel\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { Events, ModelUpdatedEvent, PaginationChangedEvent } from \"../events\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { ColumnApi } from \"../columns/columnApi\";\nimport { GridApi } from \"../gridApi\";\nimport { missing, exists } from \"../utils/generic\";\nimport { isNumeric } from \"../utils/number\";\nimport { RowPosition } from \"../entities/rowPosition\";\n\n@Bean('paginationProxy')\nexport class PaginationProxy extends BeanStub {\n\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    private active: boolean;\n    private paginateChildRows: boolean;\n\n    private pageSize: number;\n\n    private totalPages: number;\n    private currentPage = 0;\n\n    private topDisplayedRowIndex = 0;\n    private bottomDisplayedRowIndex = 0;\n    private pixelOffset = 0;\n    private topRowBounds: RowBounds;\n    private bottomRowBounds: RowBounds;\n\n    private masterRowCount: number = 0;\n\n    @PostConstruct\n    private postConstruct() {\n        this.active = this.gridOptionsWrapper.isPagination();\n        this.paginateChildRows = this.gridOptionsWrapper.isPaginateChildRows();\n\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));\n        this.addManagedListener(this.gridOptionsWrapper, 'paginationPageSize', this.onPaginationPageSizeChanged.bind(this));\n\n        this.onModelUpdated();\n    }\n\n    public ensureRowHeightsValid(startPixel: number, endPixel: number, startLimitIndex: number, endLimitIndex: number): boolean {\n        const res = this.rowModel.ensureRowHeightsValid(startPixel, endPixel, this.getPageFirstRow(), this.getPageLastRow());\n        if (res) {\n            this.calculatePages();\n        }\n        return res;\n    }\n\n    private onModelUpdated(modelUpdatedEvent?: ModelUpdatedEvent): void {\n        this.calculatePages();\n        const paginationChangedEvent: PaginationChangedEvent = {\n            type: Events.EVENT_PAGINATION_CHANGED,\n            animate: modelUpdatedEvent ? modelUpdatedEvent.animate : false,\n            newData: modelUpdatedEvent ? modelUpdatedEvent.newData : false,\n            newPage: modelUpdatedEvent ? modelUpdatedEvent.newPage : false,\n            keepRenderedRows: modelUpdatedEvent ? modelUpdatedEvent.keepRenderedRows : false,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(paginationChangedEvent);\n    }\n\n    private onPaginationPageSizeChanged(): void {\n        this.calculatePages();\n        const paginationChangedEvent: PaginationChangedEvent = {\n            type: Events.EVENT_PAGINATION_CHANGED,\n            animate: false,\n            newData: false,\n            newPage: false,\n            // important to keep rendered rows, otherwise every time grid is resized,\n            // we would destroy all the rows.\n            keepRenderedRows: true,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(paginationChangedEvent);\n    }\n\n    public goToPage(page: number): void {\n        if (!this.active || this.currentPage === page) { return; }\n\n        this.currentPage = page;\n        const event: ModelUpdatedEvent = {\n            type: Events.EVENT_MODEL_UPDATED,\n            animate: false,\n            keepRenderedRows: false,\n            newData: false,\n            newPage: true,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.onModelUpdated(event);\n    }\n\n    public getPixelOffset(): number {\n        return this.pixelOffset;\n    }\n\n    public getRow(index: number): RowNode | undefined {\n        return this.rowModel.getRow(index);\n    }\n\n    public getRowNode(id: string): RowNode | undefined {\n        return this.rowModel.getRowNode(id);\n    }\n\n    public getRowIndexAtPixel(pixel: number): number {\n        return this.rowModel.getRowIndexAtPixel(pixel);\n    }\n\n    public getCurrentPageHeight(): number {\n        if (missing(this.topRowBounds) || missing(this.bottomRowBounds)) {\n            return 0;\n        }\n        return Math.max(this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight - this.topRowBounds.rowTop, 0);\n    }\n\n    public getCurrentPagePixelRange(): {pageFirstPixel: number, pageLastPixel: number} {\n        const pageFirstPixel = this.topRowBounds ? this.topRowBounds.rowTop : 0;\n        const pageLastPixel = this.bottomRowBounds ? this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight : 0;\n        return {pageFirstPixel, pageLastPixel};\n    }\n\n    public isRowPresent(rowNode: RowNode): boolean {\n        if (!this.rowModel.isRowPresent(rowNode)) {\n            return false;\n        }\n        const nodeIsInPage = rowNode.rowIndex! >= this.topDisplayedRowIndex && rowNode.rowIndex! <= this.bottomDisplayedRowIndex;\n        return nodeIsInPage;\n    }\n\n    public isEmpty(): boolean {\n        return this.rowModel.isEmpty();\n    }\n\n    public isRowsToRender(): boolean {\n        return this.rowModel.isRowsToRender();\n    }\n\n    public getNodesInRangeForSelection(firstInRange: RowNode, lastInRange: RowNode): RowNode[] {\n        return this.rowModel.getNodesInRangeForSelection(firstInRange, lastInRange);\n    }\n\n    public forEachNode(callback: (rowNode: RowNode, index: number) => void): void {\n        return this.rowModel.forEachNode(callback);\n    }\n\n    public getType(): string {\n        return this.rowModel.getType();\n    }\n\n    public getRowBounds(index: number): RowBounds {\n        const res = this.rowModel.getRowBounds(index)!;\n        res.rowIndex = index;\n        return res;\n    }\n\n    public getPageFirstRow(): number {\n        return this.topRowBounds ? this.topRowBounds.rowIndex! : -1;\n    }\n\n    public getPageLastRow(): number {\n        return this.bottomRowBounds ? this.bottomRowBounds.rowIndex! : -1;\n    }\n\n    public getRowCount(): number {\n        return this.rowModel.getRowCount();\n    }\n\n    public getPageForIndex(index: number): number {\n        return Math.floor(index / this.pageSize);\n    }\n\n    public goToPageWithIndex(index: any): void {\n        if (!this.active) { return; }\n\n        const pageNumber = this.getPageForIndex(index);\n        this.goToPage(pageNumber);\n    }\n\n    public isRowInPage(row: RowPosition): boolean {\n        if (!this.active) { return true; }\n        const rowPage = this.getPageForIndex(row.rowIndex);\n        return rowPage === this.currentPage;\n    }\n\n    public isLastPageFound(): boolean {\n        return this.rowModel.isLastRowIndexKnown();\n    }\n\n    public getCurrentPage(): number {\n        return this.currentPage;\n    }\n\n    public goToNextPage(): void {\n        this.goToPage(this.currentPage + 1);\n    }\n\n    public goToPreviousPage(): void {\n        this.goToPage(this.currentPage - 1);\n    }\n\n    public goToFirstPage(): void {\n        this.goToPage(0);\n    }\n\n    public goToLastPage(): void {\n        const rowCount = this.rowModel.getRowCount();\n        const lastPage = Math.floor(rowCount / this.pageSize);\n        this.goToPage(lastPage);\n    }\n\n    public getPageSize(): number {\n        return this.pageSize;\n    }\n\n    public getTotalPages(): number {\n        return this.totalPages;\n    }\n\n    private setPageSize(): void {\n        // show put this into super class\n        this.pageSize = this.gridOptionsWrapper.getPaginationPageSize()!;\n        if (this.pageSize == null || this.pageSize < 1) {\n            this.pageSize = 100;\n        }\n    }\n\n    private calculatePages(): void {\n        if (this.active) {\n            this.setPageSize();\n            if (this.paginateChildRows) {\n                this.calculatePagesAllRows();\n            } else {\n                this.calculatePagesMasterRowsOnly();\n            }\n        } else {\n            this.calculatedPagesNotActive();\n        }\n\n        this.topRowBounds = this.rowModel.getRowBounds(this.topDisplayedRowIndex)!;\n        if (this.topRowBounds) {\n            this.topRowBounds.rowIndex = this.topDisplayedRowIndex;\n        }\n\n        this.bottomRowBounds = this.rowModel.getRowBounds(this.bottomDisplayedRowIndex)!;\n        if (this.bottomRowBounds) {\n            this.bottomRowBounds.rowIndex = this.bottomDisplayedRowIndex;\n        }\n\n        this.setPixelOffset(exists(this.topRowBounds) ? this.topRowBounds.rowTop : 0);\n    }\n\n    private setPixelOffset(value: number): void {\n        if (this.pixelOffset === value) { return; }\n\n        this.pixelOffset = value;\n        this.eventService.dispatchEvent({type: Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED});\n    }\n\n    private setZeroRows(): void {\n        this.masterRowCount = 0;\n        this.topDisplayedRowIndex = 0;\n        this.bottomDisplayedRowIndex = -1;\n        this.currentPage = 0;\n        this.totalPages = 0;\n    }\n\n    private calculatePagesMasterRowsOnly(): void {\n\n        // const csrm = <ClientSideRowModel> this.rowModel;\n        // const rootNode = csrm.getRootNode();\n        // const masterRows = rootNode.childrenAfterSort;\n\n        this.masterRowCount = this.rowModel.getTopLevelRowCount();\n\n        // we say <=0 (rather than =0) as viewport returns -1 when no rows\n        if (this.masterRowCount <= 0) {\n            this.setZeroRows();\n            return;\n        }\n\n        const masterLastRowIndex = this.masterRowCount - 1;\n\n        this.totalPages = Math.floor((masterLastRowIndex) / this.pageSize) + 1;\n\n        if (this.currentPage >= this.totalPages) {\n            this.currentPage = this.totalPages - 1;\n        }\n\n        if (!isNumeric(this.currentPage) || this.currentPage < 0) {\n            this.currentPage = 0;\n        }\n\n        const masterPageStartIndex = this.pageSize * this.currentPage;\n        let masterPageEndIndex = (this.pageSize * (this.currentPage + 1)) - 1;\n\n        if (masterPageEndIndex > masterLastRowIndex) {\n            masterPageEndIndex = masterLastRowIndex;\n        }\n\n        this.topDisplayedRowIndex = this.rowModel.getTopLevelRowDisplayedIndex(masterPageStartIndex);\n        // masterRows[masterPageStartIndex].rowIndex;\n\n        if (masterPageEndIndex === masterLastRowIndex) {\n            // if showing the last master row, then we want to show the very last row of the model\n            this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;\n        } else {\n            const firstIndexNotToShow = this.rowModel.getTopLevelRowDisplayedIndex(masterPageEndIndex + 1);\n            //masterRows[masterPageEndIndex + 1].rowIndex;\n            // this gets the index of the last child - eg current row is open, we want to display all children,\n            // the index of the last child is one less than the index of the next parent row.\n            this.bottomDisplayedRowIndex = firstIndexNotToShow - 1;\n        }\n    }\n\n    public getMasterRowCount(): number {\n        return this.masterRowCount;\n    }\n\n    private calculatePagesAllRows(): void {\n        this.masterRowCount = this.rowModel.getRowCount();\n\n        if (this.masterRowCount === 0) {\n            this.setZeroRows();\n            return;\n        }\n\n        const maxRowIndex = this.masterRowCount - 1;\n\n        this.totalPages = Math.floor((maxRowIndex) / this.pageSize) + 1;\n\n        if (this.currentPage >= this.totalPages) {\n            this.currentPage = this.totalPages - 1;\n        }\n\n        if (!isNumeric(this.currentPage) || this.currentPage < 0) {\n            this.currentPage = 0;\n        }\n\n        this.topDisplayedRowIndex = this.pageSize * this.currentPage;\n        this.bottomDisplayedRowIndex = (this.pageSize * (this.currentPage + 1)) - 1;\n\n        if (this.bottomDisplayedRowIndex > maxRowIndex) {\n            this.bottomDisplayedRowIndex = maxRowIndex;\n        }\n    }\n\n    private calculatedPagesNotActive(): void {\n        this.pageSize = this.rowModel.getRowCount();\n        this.totalPages = 1;\n        this.currentPage = 0;\n        this.topDisplayedRowIndex = 0;\n        this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;\n    }\n}\n","import { CellClassParams, ColDef } from \"../entities/colDef\";\nimport { Autowired, Bean } from \"../context/context\";\nimport { ExpressionService } from \"../valueService/expressionService\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { RowClassParams } from \"../entities/gridOptions\";\n\n@Bean('stylingService')\nexport class StylingService extends BeanStub {\n\n    @Autowired('expressionService') private expressionService: ExpressionService;\n\n    public processAllCellClasses(\n        colDef: ColDef,\n        params: CellClassParams,\n        onApplicableClass: (className: string) => void,\n        onNotApplicableClass?: (className: string) => void\n    ) {\n        this.processClassRules(colDef.cellClassRules, params, onApplicableClass, onNotApplicableClass);\n        this.processStaticCellClasses(colDef, params, onApplicableClass);\n    }\n\n    public processClassRules(\n        classRules: { [cssClassName: string]: (Function | string) } | undefined,\n        params: RowClassParams | CellClassParams,\n        onApplicableClass: (className: string) => void,\n        onNotApplicableClass?: (className: string) => void\n    ) {\n        if (classRules == null)  { return; }\n\n        const classNames = Object.keys(classRules!);\n        const classesToApply: {[name: string]: boolean} = {};\n        const classesToRemove: {[name: string]: boolean} = {};\n\n        for (let i = 0; i < classNames.length; i++) {\n            const className = classNames[i];\n            const rule = classRules![className];\n\n            let resultOfRule: any;\n\n            if (typeof rule === 'string') {\n                resultOfRule = this.expressionService.evaluate(rule, params);\n            } else if (typeof rule === 'function') {\n                resultOfRule = rule(params);\n            }\n\n            // in case className = 'my-class1 my-class2', we need to split into individual class names\n            className.split(' ').forEach(singleClass => {\n                if (singleClass == null || singleClass.trim() == '') { return; }\n                resultOfRule ? classesToApply[singleClass] = true : classesToRemove[singleClass] = true;\n            });\n        }\n\n        // we remove all classes first, then add all classes second,\n        // in case a class appears in more than one rule, this means it will be added\n        // if appears in at least one truthy rule\n        if (onNotApplicableClass) {\n            Object.keys(classesToRemove).forEach(onNotApplicableClass);\n        }\n        Object.keys(classesToApply).forEach(onApplicableClass);\n    }\n\n    public getStaticCellClasses(colDef: ColDef, params: CellClassParams): string[] {\n        const { cellClass } = colDef;\n\n        if (!cellClass) { return []; }\n\n        let classOrClasses: string | string[] | null | undefined;\n\n        if (typeof cellClass === 'function') {\n            const cellClassFunc = cellClass;\n            classOrClasses = cellClassFunc(params);\n        } else {\n            classOrClasses = cellClass;\n        }\n\n        if (typeof classOrClasses === 'string') {\n            classOrClasses = [classOrClasses];\n        }\n\n        return classOrClasses || [];\n    }\n\n    private processStaticCellClasses(\n        colDef: ColDef,\n        params: CellClassParams,\n        onApplicableClass: (className: string) => void\n    ) {\n        const classOrClasses = this.getStaticCellClasses(colDef, params);\n\n        classOrClasses.forEach((cssClassItem: string) => {\n            onApplicableClass(cssClassItem);\n        });\n    }\n\n}\n","import { AgCheckbox } from './agCheckbox';\nimport { Events } from '../eventKeys';\nimport { CheckboxChangedEvent } from '../events';\nimport { IInputField } from './agAbstractInputField';\n\nexport class AgRadioButton extends AgCheckbox {\n    constructor(config?: IInputField) {\n        super(config, 'ag-radio-button', 'radio');\n    }\n\n    protected isSelected(): boolean {\n        return this.eInput.checked;\n    }\n\n    public toggle(): void {\n        if (this.eInput.disabled) { return; }\n\n        // do not allow an active radio button to be deselected\n        if (!this.isSelected()) {\n            this.setValue(true);\n        }\n    }\n\n    protected addInputListeners() {\n        super.addInputListeners();\n\n        this.addManagedListener(this.eventService, Events.EVENT_CHECKBOX_CHANGED, this.onChange.bind(this));\n    }\n\n    /**\n     * This ensures that if another radio button in the same named group is selected, we deselect this radio button.\n     * By default the browser does this for you, but we are managing classes ourselves in order to ensure input\n     * elements are styled correctly in IE11, and the DOM 'changed' event is only fired when a button is selected,\n     * not deselected, so we need to use our own event.\n     */\n    private onChange(event: CheckboxChangedEvent) {\n        if (event.selected &&\n            event.name &&\n            this.eInput.name &&\n            this.eInput.name === event.name &&\n            event.id &&\n            this.eInput.id !== event.id) {\n            this.setValue(false, true);\n        }\n    }\n}\n","import { AgCheckbox } from './agCheckbox';\nimport { IInputField } from './agAbstractInputField';\n\nexport class AgToggleButton extends AgCheckbox {\n    constructor(config?: IInputField) {\n        super(config, 'ag-toggle-button');\n    }\n\n    public setValue(value: boolean, silent?: boolean): this {\n        super.setValue(value, silent);\n\n        this.addOrRemoveCssClass('ag-selected', this.getValue()!);\n\n        return this;\n    }\n}\n","import { AgAbstractInputField, IInputField } from './agAbstractInputField';\nimport { exists } from '../utils/generic';\n\nexport interface ITextInputField extends IInputField {\n    allowedCharPattern?: string;\n}\n\nexport class AgInputTextField extends AgAbstractInputField<HTMLInputElement, string, ITextInputField> {\n    constructor(config?: ITextInputField, className = 'ag-text-field', inputType = 'text') {\n        super(config, className, inputType);\n    }\n\n    protected postConstruct() {\n        super.postConstruct();\n\n        if (this.config.allowedCharPattern) {\n            this.preventDisallowedCharacters();\n        }\n    }\n\n    public setValue(value?: string | null, silent?: boolean): this {\n        const ret = super.setValue(value, silent);\n\n        if (this.eInput.value !== value) {\n            this.eInput.value = exists(value) ? value : '';\n        }\n\n        return ret;\n    }\n\n    private preventDisallowedCharacters(): void {\n        const pattern = new RegExp(`[${this.config.allowedCharPattern}]`);\n\n        const preventDisallowedCharacters = (event: KeyboardEvent) => {\n            if (event.key && !pattern.test(event.key)) {\n                event.preventDefault();\n            }\n        };\n\n        this.addManagedListener(this.eInput, 'keypress', preventDisallowedCharacters);\n\n        this.addManagedListener(this.eInput, 'paste', (e: ClipboardEvent) => {\n            const text = e.clipboardData?.getData('text');\n\n            if (text && text.split('').some((c: string) => !pattern.test(c))) {\n                e.preventDefault();\n            }\n        });\n    }\n}\n","import { AgAbstractInputField, IInputField } from \"./agAbstractInputField\";\n\nexport class AgInputTextArea extends AgAbstractInputField<HTMLTextAreaElement, string> {\n    constructor(config?: IInputField) {\n        super(config, 'ag-text-area', null, 'textarea');\n    }\n\n    public setValue(value: string, silent?: boolean): this {\n        const ret = super.setValue(value, silent);\n\n        this.eInput.value = value;\n\n        return ret;\n    }\n\n    public setCols(cols: number): this {\n        this.eInput.cols = cols;\n\n        return this;\n    }\n\n    public setRows(rows: number): this {\n        this.eInput.rows = rows;\n\n        return this;\n    }\n}","import { AgInputTextField, ITextInputField } from \"./agInputTextField\";\nimport { addOrRemoveAttribute } from '../utils/dom';\n\nexport class AgInputNumberField extends AgInputTextField {\n    private precision?: number;\n    private step?: number;\n    private min?: number;\n    private max?: number;\n\n    constructor(config?: ITextInputField) {\n        super(config, 'ag-number-field', 'number');\n    }\n\n    postConstruct() {\n        super.postConstruct();\n        this.addManagedListener(this.eInput, 'blur', () => {\n            const floatedValue = parseFloat(this.eInput.value);\n            const value = isNaN(floatedValue) ? '' : this.normalizeValue(floatedValue.toString());\n\n            if (this.value !== value) {\n                this.setValue(value);\n            }\n        });\n\n        this.eInput.step = 'any';\n    }\n\n    public normalizeValue(value: string): string {\n        if (value === '') { return ''; }\n\n        if (this.precision) {\n            value = this.adjustPrecision(value);\n        }\n\n        const val = parseFloat(value);\n\n        if (this.min != null && val < this.min) {\n            value = this.min.toString();\n        } else if (this.max != null && val > this.max) {\n            value = this.max.toString();\n        }\n\n        return value;\n    }\n\n    private adjustPrecision(value: string): string {\n        if (this.precision) {\n            const floatString = parseFloat(value).toFixed(this.precision);\n            value = parseFloat(floatString).toString();\n        }\n\n        return value;\n    }\n\n    public setMin(min: number | undefined): this {\n        if (this.min === min) {\n            return this;\n        }\n\n        this.min = min;\n\n        addOrRemoveAttribute(this.eInput, 'min', min);\n\n        return this;\n    }\n\n    public setMax(max: number | undefined): this {\n        if (this.max === max) {\n            return this;\n        }\n\n        this.max = max;\n\n        addOrRemoveAttribute(this.eInput, 'max', max);\n\n        return this;\n    }\n\n    public setPrecision(precision: number): this {\n        this.precision = precision;\n\n        return this;\n    }\n\n    public setStep(step?: number): this {\n        if (this.step === step) {\n            return this;\n        }\n\n        this.step = step;\n\n        addOrRemoveAttribute(this.eInput, 'step', step);\n\n        return this;\n    }\n\n    public setValue(value: string, silent?: boolean): this {\n        value = this.adjustPrecision(value);\n        const normalizedValue = this.normalizeValue(value);\n\n        if (value != normalizedValue) { return this; }\n\n        return super.setValue(value, silent);\n    }\n}\n","import { IInputField, AgAbstractInputField } from \"./agAbstractInputField\";\n\ninterface IInputRange extends IInputField {\n    min?: number;\n    max?: number;\n    step?: number;\n}\n\nexport class AgInputRange extends AgAbstractInputField<HTMLInputElement, string, IInputRange> {\n    private min: number;\n    private max: number;\n\n    constructor(config?: IInputRange) {\n        super(config, 'ag-range-field', 'range');\n    }\n\n    protected postConstruct() {\n        super.postConstruct();\n\n        const { min, max, step } = this.config;\n\n        if (min != null) {\n            this.setMinValue(min);\n        }\n\n        if (max != null) {\n            this.setMaxValue(max);\n        }\n\n        this.setStep(step || 1);\n    }\n\n    protected addInputListeners() {\n        this.addManagedListener(this.eInput, 'input', (e) => {\n            const value = e.target.value;\n\n            this.setValue(value);\n        });\n    }\n\n    public setMinValue(value: number): this {\n        this.min = value;\n\n        this.eInput.setAttribute('min', value.toString());\n\n        return this;\n    }\n\n    public setMaxValue(value: number): this {\n        this.max = value;\n\n        this.eInput.setAttribute('max', value.toString());\n\n        return this;\n    }\n\n    public setStep(value: number): this {\n        this.eInput.setAttribute('step', value.toString());\n\n        return this;\n    }\n\n    public setValue(value: string, silent?: boolean): this {\n        if (this.min != null) {\n            value = Math.max(parseFloat(value), this.min).toString();\n        }\n\n        if (this.max != null) {\n            value = Math.min(parseFloat(value), this.max).toString();\n        }\n\n        const ret = super.setValue(value, silent);\n\n        this.eInput.value = value;\n\n        return ret;\n    }\n}\n","import { RefSelector } from \"./componentAnnotations\";\nimport { AgInputRange } from \"./agInputRange\";\nimport { AgAbstractLabel, LabelAlignment, IAgLabel } from \"./agAbstractLabel\";\nimport { AgInputNumberField } from \"./agInputNumberField\";\nimport { AgAbstractField } from \"./agAbstractField\";\nimport { PostConstruct } from \"../context/context\";\n\nexport class AgSlider extends AgAbstractLabel {\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-slider\">\n            <label ref=\"eLabel\"></label>\n            <div class=\"ag-wrapper ag-slider-wrapper\">\n                <ag-input-range ref=\"eSlider\"></ag-input-range>\n                <ag-input-number-field ref=\"eText\"></ag-input-number-field>\n            </div>\n        </div>`;\n\n    @RefSelector('eLabel') protected readonly eLabel: HTMLElement;\n    @RefSelector('eSlider') private readonly eSlider: AgInputRange;\n    @RefSelector('eText') private readonly eText: AgInputNumberField;\n\n    protected labelAlignment: LabelAlignment = 'top';\n\n    constructor(config?: IAgLabel) {\n        super(config, AgSlider.TEMPLATE);\n    }\n\n    @PostConstruct\n    private init() {\n        this.eSlider.addCssClass('ag-slider-field');\n    }\n\n    public onValueChange(callbackFn: (newValue: number) => void) {\n        const eventChanged = AgAbstractField.EVENT_CHANGED;\n        this.addManagedListener(this.eText, eventChanged, () => {\n            const textValue = parseFloat(this.eText.getValue()!);\n            this.eSlider.setValue(textValue.toString(), true);\n            callbackFn(textValue || 0);\n        });\n\n        this.addManagedListener(this.eSlider, eventChanged, () => {\n            const sliderValue = this.eSlider.getValue()!;\n            this.eText.setValue(sliderValue, true);\n            callbackFn(parseFloat(sliderValue));\n        });\n\n        return this;\n    }\n\n    public setSliderWidth(width: number): this {\n        this.eSlider.setWidth(width);\n        return this;\n    }\n\n    public setTextFieldWidth(width: number): this {\n        this.eText.setWidth(width);\n        return this;\n    }\n\n    public setMinValue(minValue: number): this {\n        this.eSlider.setMinValue(minValue);\n        this.eText.setMin(minValue);\n\n        return this;\n    }\n\n    public setMaxValue(maxValue: number): this {\n        this.eSlider.setMaxValue(maxValue);\n        this.eText.setMax(maxValue);\n        return this;\n    }\n\n    public getValue(): string | null | undefined {\n        return this.eText.getValue();\n    }\n\n    public setValue(value: string): this {\n        if (this.getValue() === value) {\n            return this;\n        }\n\n        this.eText.setValue(value, true);\n        this.eSlider.setValue(value, true);\n\n        this.dispatchEvent({ type: AgAbstractField.EVENT_CHANGED });\n\n        return this;\n    }\n\n    public setStep(step: number): this {\n        this.eSlider.setStep(step);\n        this.eText.setStep(step);\n        return this;\n    }\n}\n","import { AgAbstractLabel, IAgLabel } from \"./agAbstractLabel\";\nimport { RefSelector } from \"./componentAnnotations\";\nimport { Autowired } from \"../context/context\";\nimport { DragService, DragListenerParams } from \"../dragAndDrop/dragService\";\nimport { AgInputNumberField } from \"./agInputNumberField\";\nimport { AgAbstractField } from \"./agAbstractField\";\nimport { exists } from \"../utils/generic\";\nimport { setFixedWidth } from \"../utils/dom\";\n\nexport class AgAngleSelect extends AgAbstractLabel {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-angle-select\">\n            <div ref=\"eLabel\"></div>\n            <div class=\"ag-wrapper ag-angle-select-wrapper\">\n                <div ref=\"eAngleSelectField\" class=\"ag-angle-select-field\">\n                    <div ref=\"eParentCircle\" class=\"ag-angle-select-parent-circle\">\n                        <div ref=\"eChildCircle\" class=\"ag-angle-select-child-circle\"></div>\n                    </div>\n                </div>\n                <ag-input-number-field ref=\"eAngleValue\"></ag-input-number-field>\n            </div>\n        </div>`;\n\n    @RefSelector('eLabel') protected readonly eLabel: HTMLElement;\n    @RefSelector('eParentCircle') private readonly eParentCircle: HTMLElement;\n    @RefSelector('eChildCircle') private readonly eChildCircle: HTMLElement;\n    @RefSelector('eAngleValue') private readonly eAngleValue: AgInputNumberField;\n\n    @Autowired('dragService') protected readonly dragService: DragService;\n\n    private parentCircleRect: ClientRect | DOMRect;\n    private degrees: number;\n    private radius: number = 0;\n    private offsetX: number = 0;\n    private offsetY: number = 0;\n    private dragListener: DragListenerParams;\n\n    constructor(config?: IAgLabel) {\n        super(config, AgAngleSelect.TEMPLATE);\n    }\n\n    postConstruct() {\n        super.postConstruct();\n\n        this.dragListener = {\n            eElement: this.eParentCircle,\n            dragStartPixels: 0,\n            onDragStart: (e: MouseEvent | Touch) => {\n                this.parentCircleRect = this.eParentCircle.getBoundingClientRect();\n            },\n            onDragging: (e: MouseEvent | Touch) => this.calculateAngleDrag(e),\n            onDragStop: () => { }\n        };\n\n        this.dragService.addDragSource(this.dragListener);\n\n        this.eAngleValue\n            .setLabel('')\n            .setLabelWidth(5)\n            .setInputWidth(45)\n            .setMin(0)\n            .setMax(360)\n            .setValue(`${this.degrees}`)\n            .onValueChange((value: string) => {\n                if (value == null || value === '') {\n                    value = '0';\n                }\n                value = this.eAngleValue.normalizeValue(value);\n                let floatValue = parseFloat(value);\n                if (floatValue > 180) {\n                    floatValue = floatValue - 360;\n                }\n                this.setValue(floatValue);\n            });\n\n        this.updateNumberInput();\n\n        if (exists(this.getValue())) {\n            this.eAngleValue.setValue(this.normalizeNegativeValue(this.getValue()).toString());\n        }\n\n        this.addManagedListener(this, AgAbstractField.EVENT_CHANGED, () => {\n            const eDocument = this.gridOptionsWrapper.getDocument();\n            if (this.eAngleValue.getInputElement().contains(eDocument.activeElement)) {\n                return;\n            }\n            this.updateNumberInput();\n        });\n    }\n\n    private updateNumberInput(): void {\n        const normalizedValue = this.normalizeNegativeValue(this.getValue());\n        this.eAngleValue.setValue(normalizedValue.toString());\n    }\n\n    private positionChildCircle(radians: number) {\n        const rect = this.parentCircleRect || { width: 24, height: 24 };\n        const eChildCircle = this.eChildCircle;\n\n        const centerX = rect.width / 2;\n        const centerY = rect.height / 2;\n\n        eChildCircle.style.left = `${centerX + Math.cos(radians) * 8}px`;\n        eChildCircle.style.top = `${centerY + Math.sin(radians) * 8}px`;\n    }\n\n    private calculatePolar() {\n        const x = this.offsetX;\n        const y = this.offsetY;\n\n        const radians = Math.atan2(y, x);\n        this.degrees = this.toDegrees(radians);\n        this.radius = Math.sqrt((x * x) + (y * y));\n\n        this.positionChildCircle(radians);\n    }\n\n    private calculateCartesian() {\n        const radians = this.toRadians(this.getValue());\n        const radius = this.getRadius();\n\n        this\n            .setOffsetX(Math.cos(radians) * radius)\n            .setOffsetY(Math.sin(radians) * radius);\n    }\n\n    private setOffsetX(offset: number): this {\n        if (this.offsetX !== offset) {\n            this.offsetX = offset;\n            this.calculatePolar();\n        }\n\n        return this;\n    }\n\n    private setOffsetY(offset: number): this {\n        if (this.offsetY !== offset) {\n            this.offsetY = offset;\n            this.calculatePolar();\n        }\n        return this;\n    }\n\n    private calculateAngleDrag(e: MouseEvent | Touch) {\n        const rect = this.parentCircleRect;\n        const centerX = rect.width / 2;\n        const centerY = rect.height / 2;\n\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n\n        const dx = x - centerX;\n        const dy = y - centerY;\n\n        const radians = Math.atan2(dy, dx);\n\n        this.setValue(radians, true);\n    }\n\n    private toDegrees(radians: number): number {\n        return radians / Math.PI * 180;\n    }\n\n    private toRadians(degrees: number): number {\n        return degrees / 180 * Math.PI;\n    }\n\n    private normalizeNegativeValue(degrees: number): number {\n        return degrees < 0 ? 360 + degrees : degrees;\n    }\n\n    private normalizeAngle180(radians: number): number {\n        radians %= Math.PI * 2;\n\n        if (radians < -Math.PI) {\n            radians += Math.PI * 2;\n        } else if (radians >= Math.PI) {\n            radians -= Math.PI * 2;\n        }\n\n        return radians;\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public setRadius(r: number): this {\n        if (this.radius === r) { return this; }\n        this.radius = r;\n        this.calculateCartesian();\n\n        return this;\n    }\n\n    public onValueChange(callbackFn: (newValue: number) => void): this {\n        this.addManagedListener(this, AgAbstractField.EVENT_CHANGED, () => {\n            callbackFn(this.degrees);\n        });\n        return this;\n    }\n\n    public getValue(radians?: boolean): number {\n        return radians ? this.toRadians(this.degrees) : this.degrees;\n    }\n\n    public setValue(degrees: number, radians?: boolean): this {\n        let radiansValue: number;\n        if (!radians) {\n            radiansValue = this.normalizeAngle180(this.toRadians(degrees));\n        } else {\n            radiansValue = degrees;\n        }\n\n        degrees = this.toDegrees(radiansValue);\n\n        if (this.degrees !== degrees) {\n            this.degrees = Math.floor(degrees);\n            this.calculateCartesian();\n            this.positionChildCircle(radiansValue);\n            this.dispatchEvent({ type: AgAbstractField.EVENT_CHANGED });\n        }\n\n        return this;\n    }\n\n    public setWidth(width: number): this {\n        setFixedWidth(this.getGui(), width);\n        return this;\n    }\n\n    protected destroy(): void {\n        this.dragService.removeDragSource(this.dragListener);\n        super.destroy();\n    }\n}\n","import { Component } from \"./component\";\nimport { Color } from \"../utils\";\nimport { RefSelector } from \"./componentAnnotations\";\nimport { PostConstruct } from \"../context/context\";\nimport { AgColorPicker } from \"./agColorPicker\";\nimport { exists } from \"../utils/generic\";\n\nexport class AgColorPanel extends Component {\n    private H = 1; // in the [0, 1] range\n    private S = 1; // in the [0, 1] range\n    private B = 1; // in the [0, 1] range\n    private A = 1; // in the [0, 1] range\n\n    private spectrumValRect?: ClientRect | DOMRect;\n    private isSpectrumDragging = false;\n\n    private spectrumHueRect?: ClientRect | DOMRect;\n    private isSpectrumHueDragging = false;\n\n    private spectrumAlphaRect?: ClientRect | DOMRect;\n    private isSpectrumAlphaDragging = false;\n\n    private picker: Component;\n\n    private colorChanged = false;\n    private static maxRecentColors = 8;\n    private static recentColors: string[] = [];\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-color-panel\">\n            <div ref=\"spectrumColor\" class=\"ag-spectrum-color\">\n                <div class=\"ag-spectrum-sat ag-spectrum-fill\">\n                    <div ref=\"spectrumVal\" class=\"ag-spectrum-val ag-spectrum-fill\">\n                        <div ref=\"spectrumDragger\" class=\"ag-spectrum-dragger\"></div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"ag-spectrum-tools\">\n                <div ref=\"spectrumHue\" class=\"ag-spectrum-hue ag-spectrum-tool\">\n                    <div class=\"ag-spectrum-hue-background\"></div>\n                    <div ref=\"spectrumHueSlider\" class=\"ag-spectrum-slider\"></div>\n                </div>\n                <div ref=\"spectrumAlpha\" class=\"ag-spectrum-alpha ag-spectrum-tool\">\n                    <div class=\"ag-spectrum-alpha-background\"></div>\n                    <div ref=\"spectrumAlphaSlider\" class=\"ag-spectrum-slider\"></div>\n                </div>\n                <div ref=\"recentColors\" class=\"ag-recent-colors\"></div>\n            </div>\n        </div>`;\n\n    @RefSelector('spectrumColor') private readonly spectrumColor: HTMLElement;\n    @RefSelector('spectrumVal') private readonly spectrumVal: HTMLElement;\n    @RefSelector('spectrumDragger') private readonly spectrumDragger: HTMLElement;\n    @RefSelector('spectrumHue') private readonly spectrumHue: HTMLElement;\n    @RefSelector('spectrumHueSlider') private readonly spectrumHueSlider: HTMLElement;\n    @RefSelector('spectrumAlpha') private readonly spectrumAlpha: HTMLElement;\n    @RefSelector('spectrumAlphaSlider') private readonly spectrumAlphaSlider: HTMLElement;\n    @RefSelector('recentColors') private readonly recentColors: HTMLElement;\n\n    constructor(config: { picker: Component }) {\n        super(AgColorPanel.TEMPLATE);\n        this.picker = config.picker;\n    }\n\n    @PostConstruct\n    private postConstruct() {\n        const eGui = this.getGui();\n\n        this.initRecentColors();\n\n        this.addManagedListener(this.spectrumVal, 'mousedown', this.onSpectrumDraggerDown.bind(this));\n        this.addManagedListener(eGui, 'mousemove', this.onSpectrumDraggerMove.bind(this));\n\n        this.addManagedListener(this.spectrumHue, 'mousedown', this.onSpectrumHueDown.bind(this));\n        this.addManagedListener(eGui, 'mousemove', this.onSpectrumHueMove.bind(this));\n\n        this.addManagedListener(this.spectrumAlpha, 'mousedown', this.onSpectrumAlphaDown.bind(this));\n        this.addManagedListener(eGui, 'mousemove', this.onSpectrumAlphaMove.bind(this));\n\n        // Listening to `mouseup` on the document on purpose. The user might release the mouse button\n        // outside the UI control. When the mouse returns back to the control's area, the dragging\n        // of the thumb is not expected and seen as a bug.\n        this.addManagedListener(document, 'mouseup', this.onMouseUp.bind(this));\n\n        this.addManagedListener(this.recentColors, 'click', this.onRecentColorClick.bind(this));\n    }\n\n    private refreshSpectrumRect() {\n        return this.spectrumValRect = this.spectrumVal.getBoundingClientRect();\n    }\n\n    private refreshHueRect() {\n        return this.spectrumHueRect = this.spectrumHue.getBoundingClientRect();\n    }\n\n    private refreshAlphaRect() {\n        return this.spectrumAlphaRect = this.spectrumAlpha.getBoundingClientRect();\n    }\n\n    private onSpectrumDraggerDown(e: MouseEvent) {\n        this.refreshSpectrumRect();\n        this.isSpectrumDragging = true;\n\n        this.moveDragger(e);\n    }\n\n    private onSpectrumDraggerMove(e: MouseEvent) {\n        if (this.isSpectrumDragging) {\n            this.moveDragger(e);\n        }\n    }\n\n    private onSpectrumHueDown(e: MouseEvent) {\n        this.refreshHueRect();\n        this.isSpectrumHueDragging = true;\n\n        this.moveHueSlider(e);\n    }\n\n    private onSpectrumHueMove(e: MouseEvent) {\n        if (this.isSpectrumHueDragging) {\n            this.moveHueSlider(e);\n        }\n    }\n\n    private onSpectrumAlphaDown(e: MouseEvent) {\n        this.refreshAlphaRect();\n        this.isSpectrumAlphaDragging = true;\n\n        this.moveAlphaSlider(e);\n    }\n\n    private onSpectrumAlphaMove(e: MouseEvent) {\n        if (this.isSpectrumAlphaDragging) {\n            this.moveAlphaSlider(e);\n        }\n    }\n\n    private onMouseUp() {\n        this.isSpectrumDragging = false;\n        this.isSpectrumHueDragging = false;\n        this.isSpectrumAlphaDragging = false;\n    }\n\n    private moveDragger(e: MouseEvent) {\n        const valRect = this.spectrumValRect;\n\n        if (valRect) {\n            let x = e.clientX - valRect.left;\n            let y = e.clientY - valRect.top;\n\n            x = Math.max(x, 0);\n            x = Math.min(x, valRect.width);\n            y = Math.max(y, 0);\n            y = Math.min(y, valRect.height);\n\n            this.setSpectrumValue(x / valRect.width, 1 - y / valRect.height);\n        }\n    }\n\n    private moveHueSlider(e: MouseEvent) {\n        const hueRect = this.spectrumHueRect;\n\n        if (hueRect) {\n            const slider = this.spectrumHueSlider;\n            const sliderRect = slider.getBoundingClientRect();\n\n            let x = e.clientX - hueRect.left;\n\n            x = Math.max(x, 0);\n            x = Math.min(x, hueRect.width);\n\n            this.H = 1 - x / hueRect.width;\n\n            slider.style.left = (x + sliderRect.width / 2) + 'px';\n\n            this.update();\n        }\n    }\n\n    private moveAlphaSlider(e: MouseEvent) {\n        const alphaRect = this.spectrumAlphaRect;\n\n        if (alphaRect) {\n            const slider = this.spectrumAlphaSlider;\n            const sliderRect = slider.getBoundingClientRect();\n\n            let x = e.clientX - alphaRect.left;\n\n            x = Math.max(x, 0);\n            x = Math.min(x, alphaRect.width);\n\n            this.A = x / alphaRect.width;\n\n            slider.style.left = (x + sliderRect.width / 2) + 'px';\n\n            this.update();\n        }\n    }\n\n    private update() {\n        const color = Color.fromHSB(this.H * 360, this.S, this.B, this.A);\n        const spectrumColor = Color.fromHSB(this.H * 360, 1, 1);\n        const rgbaColor = color.toRgbaString();\n\n        // the recent color list needs to know color has actually changed\n        const colorPicker = this.picker as AgColorPicker;\n\n        const existingColor = Color.fromString(colorPicker.getValue());\n        if (existingColor.toRgbaString() !== rgbaColor) {\n            this.colorChanged = true;\n        }\n\n        colorPicker.setValue(rgbaColor);\n\n        this.spectrumColor.style.backgroundColor = spectrumColor.toRgbaString();\n        this.spectrumDragger.style.backgroundColor = rgbaColor;\n    }\n\n    /**\n     * @param saturation In the [0, 1] interval.\n     * @param brightness In the [0, 1] interval.\n     */\n    public setSpectrumValue(saturation: number, brightness: number) {\n        const valRect = this.spectrumValRect || this.refreshSpectrumRect();\n\n        if (valRect) {\n            const dragger = this.spectrumDragger;\n            const draggerRect = dragger.getBoundingClientRect();\n\n            saturation = Math.max(0, saturation);\n            saturation = Math.min(1, saturation);\n            brightness = Math.max(0, brightness);\n            brightness = Math.min(1, brightness);\n\n            this.S = saturation;\n            this.B = brightness;\n\n            dragger.style.left = (saturation * valRect.width - draggerRect.width / 2) + 'px';\n            dragger.style.top = ((1 - brightness) * valRect.height - draggerRect.height / 2) + 'px';\n\n            this.update();\n        }\n    }\n\n    private initRecentColors() {\n        const recentColors = AgColorPanel.recentColors;\n        const innerHtml = recentColors.map((color: string, index: number) => {\n            return `<div class=\"ag-recent-color\" id=${index} style=\"background-color: ${color}; width: 15px; height: 15px;\" recent-color=\"${color}\"></div>`;\n        });\n\n        this.recentColors.innerHTML = innerHtml.join('');\n    }\n\n    public setValue(val: string) {\n        const color: Color = Color.fromString(val);\n        const [h, s, b] = color.toHSB();\n\n        this.H = (isNaN(h) ? 0 : h) / 360;\n        this.A = color.a;\n\n        const spectrumHueRect = this.spectrumHueRect || this.refreshHueRect();\n        const spectrumAlphaRect = this.spectrumAlphaRect || this.refreshAlphaRect();\n\n        this.spectrumHueSlider.style.left = `${((this.H - 1) * -spectrumHueRect.width)}px`;\n        this.spectrumAlphaSlider.style.left = `${(this.A * spectrumAlphaRect.width)}px`;\n\n        this.setSpectrumValue(s, b);\n    }\n\n    private onRecentColorClick(e: MouseEvent) {\n        const target = e.target as HTMLElement;\n\n        if (!exists(target.id)) {\n            return;\n        }\n\n        const id = parseInt(target.id, 10);\n\n        this.setValue(AgColorPanel.recentColors[id]);\n        this.destroy();\n    }\n\n    private addRecentColor() {\n        const color = Color.fromHSB(this.H * 360, this.S, this.B, this.A);\n        const rgbaColor = color.toRgbaString();\n\n        let recentColors = AgColorPanel.recentColors;\n\n        if (!this.colorChanged || recentColors[0] === rgbaColor) {\n            return;\n        }\n\n        // remove duplicate color\n        recentColors = recentColors.filter(currentColor => currentColor != rgbaColor);\n\n        // add color to head\n        recentColors = [rgbaColor].concat(recentColors);\n\n        // ensure we don't exceed max number of recent colors\n        if (recentColors.length > AgColorPanel.maxRecentColors) {\n            recentColors = recentColors.slice(0, AgColorPanel.maxRecentColors);\n        }\n\n        AgColorPanel.recentColors = recentColors;\n    }\n\n    protected destroy(): void {\n        this.addRecentColor();\n        super.destroy();\n    }\n}\n","import { RefSelector } from \"./componentAnnotations\";\nimport { PostConstruct } from \"../context/context\";\nimport { Component } from \"./component\";\nimport { getInnerHeight, getInnerWidth } from \"../utils/dom\";\nimport { createIconNoSpan } from \"../utils/icon\";\nimport { PositionableFeature, PositionableOptions, ResizableStructure } from \"../rendering/features/positionableFeature\";\n\nexport interface PanelOptions extends PositionableOptions {\n    component?: Component;\n    hideTitleBar?: boolean | null;\n    closable?: boolean | null;\n    resizable?: boolean | ResizableStructure;\n    title?: string | null;\n    cssIdentifier?: string | null;\n}\n\nexport class AgPanel extends Component {\n\n    protected static CLOSE_BTN_TEMPLATE = /* html */ `<div class=\"ag-button\"></div>`;\n    protected closable = true;\n    protected config: PanelOptions | undefined;\n\n    protected closeButtonComp: Component | undefined;\n    protected positionableFeature: PositionableFeature;\n    public close: () => void;\n\n    @RefSelector('eContentWrapper') protected readonly eContentWrapper: HTMLElement;\n    @RefSelector('eTitleBar') protected readonly eTitleBar: HTMLElement;\n    @RefSelector('eTitleBarButtons') protected readonly eTitleBarButtons: HTMLElement;\n    @RefSelector('eTitle') protected readonly eTitle: HTMLElement;\n\n    constructor(config?: PanelOptions) {\n        super(AgPanel.getTemplate(config));\n        this.config = config;\n    }\n\n    private static getTemplate(config?: PanelOptions) {\n        const cssIdentifier = (config && config.cssIdentifier) || 'default';\n        return /* html */ `<div class=\"ag-panel ag-${cssIdentifier}-panel\" tabindex=\"-1\">\n            <div ref=\"eTitleBar\" class=\"ag-panel-title-bar ag-${cssIdentifier}-panel-title-bar ag-unselectable\">\n                <span ref=\"eTitle\" class=\"ag-panel-title-bar-title ag-${cssIdentifier}-panel-title-bar-title\"></span>\n                <div ref=\"eTitleBarButtons\" class=\"ag-panel-title-bar-buttons ag-${cssIdentifier}-panel-title-bar-buttons\"></div>\n            </div>\n            <div ref=\"eContentWrapper\" class=\"ag-panel-content-wrapper ag-${cssIdentifier}-panel-content-wrapper\"></div>\n        </div>`;\n    }\n\n    @PostConstruct\n    protected postConstruct() {\n        const {\n            component,\n            closable,\n            hideTitleBar,\n            title,\n            minWidth = 250,\n            width,\n            minHeight = 250,\n            height,\n            centered,\n            popup,\n            x,\n            y\n        } = this.config as PanelOptions;\n\n        this.positionableFeature = new PositionableFeature(this.getGui(), {\n            minWidth, width, minHeight, height, centered, x, y, popup,\n            calculateTopBuffer: () => this.positionableFeature.getHeight()! - this.getBodyHeight()\n        });\n\n        this.createManagedBean(this.positionableFeature);\n\n        const eGui = this.getGui();\n\n        if (component) { this.setBodyComponent(component); }\n\n        if (!hideTitleBar) {\n            if (title) { this.setTitle(title); }\n            this.setClosable(closable != null ? closable : this.closable);\n        } else {\n            this.eTitleBar.classList.add('ag-hidden');\n        }\n\n        this.addManagedListener(this.eTitleBar, 'mousedown', (e: MouseEvent) => {\n            const eDocument = this.gridOptionsWrapper.getDocument();\n            if (\n                eGui.contains(e.relatedTarget as HTMLElement) ||\n                eGui.contains(eDocument.activeElement) ||\n                this.eTitleBarButtons.contains(e.target as HTMLElement)\n            ) {\n                e.preventDefault();\n                return;\n            }\n\n            const focusEl = this.eContentWrapper.querySelector('button, [href], input, select, textarea, [tabindex]');\n\n            if (focusEl) {\n                (focusEl as HTMLElement).focus();\n            }\n        });\n\n        if (popup && this.positionableFeature.isPositioned()) { return; }\n\n        if (this.renderComponent) {\n            this.renderComponent();\n        }\n\n        this.positionableFeature.initialisePosition();\n        this.eContentWrapper.style.height = '0';\n    }\n\n    protected renderComponent() {\n        const eGui = this.getGui();\n        eGui.focus();\n\n        this.close = () => {\n            eGui.parentElement!.removeChild(eGui);\n            this.destroy();\n        };\n    }\n\n    public getHeight(): number | undefined {\n        return this.positionableFeature.getHeight();\n    }\n\n    public setHeight(height: number | string): void {\n        this.positionableFeature.setHeight(height);\n    }\n\n    public getWidth(): number | undefined {\n        return this.positionableFeature.getWidth();\n    }\n\n    public setWidth(width: number | string): void {\n        this.positionableFeature.setWidth(width);\n    }\n\n    public setClosable(closable: boolean) {\n        if (closable !== this.closable) {\n            this.closable = closable;\n        }\n\n        if (closable) {\n            const closeButtonComp = this.closeButtonComp = new Component(AgPanel.CLOSE_BTN_TEMPLATE);\n            this.getContext().createBean(closeButtonComp);\n\n            const eGui = closeButtonComp.getGui();\n            const child = createIconNoSpan('close', this.gridOptionsWrapper)!;\n            child.classList.add('ag-panel-title-bar-button-icon');\n            eGui.appendChild(child);\n\n            this.addTitleBarButton(closeButtonComp);\n            closeButtonComp.addManagedListener(eGui, 'click', this.onBtClose.bind(this));\n        } else if (this.closeButtonComp) {\n            const eGui = this.closeButtonComp.getGui();\n            eGui.parentElement!.removeChild(eGui);\n\n            this.closeButtonComp = this.destroyBean(this.closeButtonComp);\n        }\n    }\n\n    public setBodyComponent(bodyComponent: Component) {\n        bodyComponent.setParentComponent(this);\n        this.eContentWrapper.appendChild(bodyComponent.getGui());\n    }\n\n    public addTitleBarButton(button: Component, position?: number) {\n        const eTitleBarButtons = this.eTitleBarButtons;\n        const buttons = eTitleBarButtons.children;\n        const len = buttons.length;\n\n        if (position == null) {\n            position = len;\n        }\n\n        position = Math.max(0, Math.min(position, len));\n\n        button.addCssClass('ag-panel-title-bar-button');\n\n        const eGui = button.getGui();\n\n        if (position === 0) {\n            eTitleBarButtons.insertAdjacentElement('afterbegin', eGui);\n        } else if (position === len) {\n            eTitleBarButtons.insertAdjacentElement('beforeend', eGui);\n        } else {\n            buttons[position - 1].insertAdjacentElement('afterend', eGui);\n        }\n\n        button.setParentComponent(this);\n    }\n\n    public getBodyHeight(): number {\n        return getInnerHeight(this.eContentWrapper);\n    }\n\n    public getBodyWidth(): number {\n        return getInnerWidth(this.eContentWrapper);\n    }\n\n    public setTitle(title: string) {\n        this.eTitle.innerText = title;\n    }\n\n    // called when user hits the 'x' in the top right\n    private onBtClose() {\n        this.close();\n    }\n\n    protected destroy(): void {\n        if (this.closeButtonComp) {\n            this.closeButtonComp = this.destroyBean(this.closeButtonComp);\n        }\n\n        const eGui = this.getGui();\n\n        if (eGui && eGui.offsetParent) {\n            this.close();\n        }\n\n        super.destroy();\n    }\n}\n","import { Autowired } from \"../context/context\";\nimport { PanelOptions, AgPanel } from \"./agPanel\";\nimport { Component } from \"./component\";\nimport { setDisplayed } from \"../utils/dom\";\nimport { createIconNoSpan } from \"../utils/icon\";\nimport { PopupService } from \"./popupService\";\nimport { ResizableStructure } from \"../rendering/features/positionableFeature\";\n\nexport type ResizableSides = 'topLeft' |\n    'top' |\n    'topRight' |\n    'right' |\n    'bottomRight' |\n    'bottom' |\n    'bottomLeft' |\n    'left';\n\nexport interface DialogOptions extends PanelOptions {\n    eWrapper?: HTMLElement;\n    modal?: boolean;\n    movable?: boolean;\n    alwaysOnTop?: boolean;\n    maximizable?: boolean;\n}\n\nexport class AgDialog extends AgPanel {\n\n    @Autowired('popupService') private popupService: PopupService;\n\n    private isMaximizable: boolean = false;\n    private isMaximized: boolean = false;\n    private maximizeListeners: (() => void)[] = [];\n    private maximizeButtonComp: Component | undefined;\n    private maximizeIcon: HTMLElement | undefined;\n    private minimizeIcon: HTMLElement | undefined;\n    private resizeListenerDestroy: (() => void) | null | undefined = null;\n\n    private lastPosition = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n    };\n\n    protected config: DialogOptions | undefined;\n\n    constructor(config: DialogOptions) {\n        super({...config, popup: true });\n    }\n\n    protected postConstruct() {\n        const eGui = this.getGui();\n        const { movable, resizable, maximizable } = this.config as DialogOptions;\n\n        this.addCssClass('ag-dialog');\n\n        super.postConstruct();\n\n        this.addManagedListener(eGui, 'focusin', (e: FocusEvent) => {\n            if (eGui.contains(e.relatedTarget as HTMLElement)) { return; }\n            this.popupService.bringPopupToFront(eGui);\n        });\n\n        if (movable) { this.setMovable(movable); }\n        if (maximizable) { this.setMaximizable(maximizable); }\n        if (resizable) { this.setResizable(resizable); }\n    }\n\n    protected renderComponent() {\n        const eGui = this.getGui();\n        const { alwaysOnTop, modal, title } = this.config as DialogOptions;\n        const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n\n        const addPopupRes = this.popupService.addPopup({\n            modal,\n            eChild: eGui,\n            closeOnEsc: true,\n            closedCallback: this.destroy.bind(this),\n            alwaysOnTop,\n            ariaLabel: title || translate('ariaLabelDialog', 'Dialog')\n        });\n\n        if (addPopupRes) {\n            this.close = addPopupRes.hideFunc;\n        }\n    }\n\n    private toggleMaximize() {\n        const position = this.positionableFeature.getPosition();\n        if (this.isMaximized) {\n            const { x, y, width, height } = this.lastPosition;\n            this.setWidth(width);\n            this.setHeight(height);\n            this.positionableFeature.offsetElement(x, y);\n        } else {\n            this.lastPosition.width = this.getWidth()!;\n            this.lastPosition.height = this.getHeight()!;\n            this.lastPosition.x = position.x;\n            this.lastPosition.y = position.y;\n            this.positionableFeature.offsetElement(0, 0);\n            this.setHeight('100%');\n            this.setWidth('100%');\n        }\n\n        this.isMaximized = !this.isMaximized;\n        this.refreshMaximizeIcon();\n    }\n\n    private refreshMaximizeIcon() {\n        setDisplayed(this.maximizeIcon!, !this.isMaximized);\n        setDisplayed(this.minimizeIcon!, this.isMaximized);\n    }\n\n    private clearMaximizebleListeners() {\n        if (this.maximizeListeners.length) {\n            this.maximizeListeners.forEach(destroyListener => destroyListener());\n            this.maximizeListeners.length = 0;\n        }\n\n        if (this.resizeListenerDestroy) {\n            this.resizeListenerDestroy();\n            this.resizeListenerDestroy = null;\n        }\n    }\n\n    protected destroy(): void {\n        this.maximizeButtonComp = this.destroyBean(this.maximizeButtonComp);\n\n        this.clearMaximizebleListeners();\n        super.destroy();\n    }\n\n    public setResizable(resizable: boolean | ResizableStructure) {\n        this.positionableFeature.setResizable(resizable);\n    }\n\n    public setMovable(movable: boolean) {\n        this.positionableFeature.setMovable(movable, this.eTitleBar);\n    }\n\n    public setMaximizable(maximizable: boolean) {\n        if (!maximizable) {\n            this.clearMaximizebleListeners();\n\n            if (this.maximizeButtonComp) {\n                this.destroyBean(this.maximizeButtonComp);\n                this.maximizeButtonComp = this.maximizeIcon = this.minimizeIcon = undefined;\n            }\n\n            return;\n        }\n\n        const eTitleBar = this.eTitleBar;\n\n        if (!eTitleBar || maximizable === this.isMaximizable) { return; }\n\n        const maximizeButtonComp = this.maximizeButtonComp =\n            this.createBean(new Component(/* html */`<div class=\"ag-dialog-button\"></span>`));\n\n        const eGui = maximizeButtonComp.getGui();\n\n        eGui.appendChild(this.maximizeIcon = createIconNoSpan('maximize', this.gridOptionsWrapper)!);\n        this.maximizeIcon.classList.add('ag-panel-title-bar-button-icon');\n\n        eGui.appendChild(this.minimizeIcon = createIconNoSpan('minimize', this.gridOptionsWrapper)!);\n        this.minimizeIcon.classList.add('ag-panel-title-bar-button-icon', 'ag-hidden');\n\n        maximizeButtonComp.addManagedListener(eGui, 'click', this.toggleMaximize.bind(this));\n\n        this.addTitleBarButton(maximizeButtonComp, 0);\n\n        this.maximizeListeners.push(\n            this.addManagedListener(eTitleBar, 'dblclick', this.toggleMaximize.bind(this))!\n        );\n\n        this.resizeListenerDestroy = this.addManagedListener(this, 'resize', () => {\n            this.isMaximized = false;\n            this.refreshMaximizeIcon();\n        });\n    }\n}\n","import { AgColorPanel } from \"./agColorPanel\";\nimport { AgDialog } from \"./agDialog\";\nimport { IAgLabel } from \"./agAbstractLabel\";\nimport { AgPickerField } from \"./agPickerField\";\nimport { setAriaExpanded } from \"../utils/aria\";\n\ninterface ColorPickerConfig extends IAgLabel {\n    color: string;\n}\n\nexport class AgColorPicker extends AgPickerField<HTMLElement, string> {\n    constructor(config?: ColorPickerConfig) {\n        super(config, 'ag-color-picker', 'colorPicker');\n\n        if (config && config.color) {\n            this.value = config.color;\n        }\n    }\n\n    protected postConstruct() {\n        super.postConstruct();\n\n        if (this.value) {\n            this.setValue(this.value);\n        }\n    }\n\n    public showPicker() {\n        const eGuiRect = this.getGui().getBoundingClientRect();\n        const colorDialog = this.createBean(new AgDialog({\n            closable: false,\n            modal: true,\n            hideTitleBar: true,\n            minWidth: 190,\n            width: 190,\n            height: 250,\n            x: eGuiRect.right - 190,\n            y: eGuiRect.top - 250\n        }));\n\n        this.isPickerDisplayed = true;\n\n        colorDialog.addCssClass('ag-color-dialog');\n        setAriaExpanded(this.eWrapper, true);\n\n        const colorPanel = this.createBean(new AgColorPanel({ picker: this }));\n\n        colorPanel.addDestroyFunc(() => {\n            if (colorDialog.isAlive()) {\n                this.destroyBean(colorDialog);\n            }\n        });\n\n        colorDialog.setParentComponent(this);\n        colorDialog.setBodyComponent(colorPanel);\n        colorPanel.setValue(this.getValue());\n\n        colorDialog.addDestroyFunc(() => {\n            // here we check if the picker was already being\n            // destroyed to avoid a stack overflow\n            if (!this.isDestroyingPicker) {\n                this.isDestroyingPicker = true;\n\n                if (colorPanel.isAlive()) {\n                    this.destroyBean(colorPanel);\n                }\n            } else {\n                this.isDestroyingPicker = false;\n            }\n\n            if (this.isAlive()) {\n                setAriaExpanded(this.eWrapper, false);\n                this.getFocusableElement().focus();\n            }\n\n            this.isPickerDisplayed = false;\n        });\n\n        return colorDialog;\n    }\n\n    public setValue(color: string): this {\n        if (this.value === color) { return this; }\n\n        this.eDisplayField.style.backgroundColor = color;\n\n        return super.setValue(color);\n    }\n\n    public getValue(): string {\n        return this.value;\n    }\n}\n","import { Component } from './component';\nimport { RefSelector } from './componentAnnotations';\nimport { PostConstruct } from '../context/context';\nimport { AgCheckbox } from './agCheckbox';\nimport { createIcon } from '../utils/icon';\nimport { setDisplayed } from '../utils/dom';\nimport { KeyCode } from '../constants/keyCode';\nimport { setAriaExpanded } from '../utils/aria';\n\ntype GroupItem = Component | HTMLElement;\ntype Align = 'start' | 'end' | 'center' | 'stretch';\ntype Direction = 'horizontal' | 'vertical';\n\nexport interface AgGroupComponentParams {\n    title?: string;\n    enabled?: boolean;\n    suppressEnabledCheckbox?: boolean;\n    suppressOpenCloseIcons?: boolean;\n    cssIdentifier?: string;\n    items?: GroupItem[];\n    alignItems?: Align;\n    direction?: Direction;\n}\n\nexport class AgGroupComponent extends Component {\n    public static EVENT_EXPANDED = 'expanded';\n    public static EVENT_COLLAPSED = 'collapsed';\n\n    private items: GroupItem[];\n    private title: string | undefined;\n    private cssIdentifier: string;\n    private enabled: boolean;\n    private expanded: boolean;\n    private suppressEnabledCheckbox: boolean = true;\n    private suppressOpenCloseIcons: boolean = false;\n    private alignItems: Align | undefined;\n\n    @RefSelector('eTitleBar') private eTitleBar: HTMLElement;\n    @RefSelector('eGroupOpenedIcon') private eGroupOpenedIcon: HTMLElement;\n    @RefSelector('eGroupClosedIcon') private eGroupClosedIcon: HTMLElement;\n    @RefSelector('eToolbar') private eToolbar: HTMLElement;\n    @RefSelector('cbGroupEnabled') private cbGroupEnabled: AgCheckbox;\n    @RefSelector('eTitle') private eTitle: HTMLElement;\n    @RefSelector('eContainer') private eContainer: HTMLElement;\n\n    constructor(params: AgGroupComponentParams = {}) {\n        super(AgGroupComponent.getTemplate(params));\n\n        const { title, enabled, items, suppressEnabledCheckbox, suppressOpenCloseIcons } = params;\n\n        this.title = title;\n        this.cssIdentifier = params.cssIdentifier || 'default';\n        this.enabled = enabled != null ? enabled : true;\n        this.items = items || [];\n\n        this.alignItems = params.alignItems || 'center';\n\n        if (suppressEnabledCheckbox != null) {\n            this.suppressEnabledCheckbox = suppressEnabledCheckbox;\n        }\n\n        if (suppressOpenCloseIcons != null) {\n            this.suppressOpenCloseIcons = suppressOpenCloseIcons;\n        }\n    }\n\n    private static getTemplate(params: AgGroupComponentParams) {\n        const cssIdentifier = params.cssIdentifier || 'default';\n        const direction: Direction = params.direction || 'vertical';\n\n        return /* html */ `<div class=\"ag-group ag-${cssIdentifier}-group\" role=\"presentation\">\n            <div class=\"ag-group-title-bar ag-${cssIdentifier}-group-title-bar ag-unselectable\" ref=\"eTitleBar\" role=\"button\">\n                <span class=\"ag-group-title-bar-icon ag-${cssIdentifier}-group-title-bar-icon\" ref=\"eGroupOpenedIcon\" role=\"presentation\"></span>\n                <span class=\"ag-group-title-bar-icon ag-${cssIdentifier}-group-title-bar-icon\" ref=\"eGroupClosedIcon\" role=\"presentation\"></span>\n                <span ref=\"eTitle\" class=\"ag-group-title ag-${cssIdentifier}-group-title\"></span>\n            </div>\n            <div ref=\"eToolbar\" class=\"ag-group-toolbar ag-${cssIdentifier}-group-toolbar\">\n                <ag-checkbox ref=\"cbGroupEnabled\"></ag-checkbox>\n            </div>\n            <div ref=\"eContainer\" class=\"ag-group-container ag-group-container-${direction} ag-${cssIdentifier}-group-container\"></div>\n        </div>`;\n    }\n\n    @PostConstruct\n    private postConstruct() {\n        if (this.items.length) {\n            const initialItems = this.items;\n            this.items = [];\n\n            this.addItems(initialItems);\n        }\n\n        const localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();\n        this.cbGroupEnabled.setLabel(localeTextFunc('enabled', 'Enabled'));\n\n        if (this.title) {\n            this.setTitle(this.title);\n        }\n\n        if (this.enabled) {\n            this.setEnabled(this.enabled);\n        }\n\n        this.setAlignItems(this.alignItems);\n\n        this.hideEnabledCheckbox(this.suppressEnabledCheckbox);\n        this.hideOpenCloseIcons(this.suppressOpenCloseIcons);\n\n        this.setupExpandContract();\n        this.refreshAriaStatus();\n        this.refreshChildDisplay();\n    }\n\n    private setupExpandContract(): void {\n        this.eGroupClosedIcon.appendChild(createIcon('columnSelectClosed', this.gridOptionsWrapper, null));\n        this.eGroupOpenedIcon.appendChild(createIcon('columnSelectOpen', this.gridOptionsWrapper, null));\n        this.addManagedListener(this.eTitleBar, 'click', () => this.toggleGroupExpand());\n        this.addManagedListener(this.eTitleBar, 'keydown', (e: KeyboardEvent) => {\n            switch (e.key) {\n                case KeyCode.ENTER:\n                case KeyCode.SPACE:\n                    e.preventDefault();\n                    this.toggleGroupExpand();\n                    break;\n                case KeyCode.RIGHT:\n                case KeyCode.LEFT:\n                    e.preventDefault();\n                    this.toggleGroupExpand(e.key === KeyCode.RIGHT);\n                    break;\n            }\n        });\n    }\n\n    private refreshAriaStatus(): void {\n        if (!this.suppressOpenCloseIcons) {\n            setAriaExpanded(this.eTitleBar, this.expanded);\n        }\n    }\n\n    private refreshChildDisplay(): void {\n        const showIcon = !this.suppressOpenCloseIcons;\n\n        setDisplayed(this.eToolbar, this.expanded && !this.suppressEnabledCheckbox);\n        setDisplayed(this.eGroupOpenedIcon, showIcon && this.expanded);\n        setDisplayed(this.eGroupClosedIcon, showIcon && !this.expanded);\n    }\n\n    public isExpanded(): boolean {\n        return this.expanded;\n    }\n\n    public setAlignItems(alignment: AgGroupComponentParams['alignItems']): this {\n        if (this.alignItems !== alignment) {\n            this.removeCssClass(`ag-group-item-alignment-${this.alignItems}`);\n        }\n\n        this.alignItems = alignment;\n        const newCls = `ag-group-item-alignment-${this.alignItems}`;\n\n        this.addCssClass(newCls);\n\n        return this;\n    }\n\n    public toggleGroupExpand(expanded?: boolean): this {\n        if (this.suppressOpenCloseIcons) {\n            this.expanded = true;\n            this.refreshChildDisplay();\n            setDisplayed(this.eContainer, true);\n\n            return this;\n        }\n\n        expanded = expanded != null ? expanded : !this.expanded;\n\n        if (this.expanded === expanded) {\n            return this;\n        }\n\n        this.expanded = expanded;\n        this.refreshAriaStatus();\n        this.refreshChildDisplay();\n\n        setDisplayed(this.eContainer, expanded);\n\n        this.dispatchEvent({ type: this.expanded ? AgGroupComponent.EVENT_EXPANDED : AgGroupComponent.EVENT_COLLAPSED });\n\n        return this;\n    }\n\n    public addItems(items: GroupItem[]) {\n        items.forEach(item => this.addItem(item));\n    }\n\n    public addItem(item: GroupItem) {\n        const container = this.eContainer;\n        const el = item instanceof Component ? item.getGui() : item;\n\n        el.classList.add('ag-group-item', `ag-${this.cssIdentifier}-group-item`);\n\n        container.appendChild(el);\n        this.items.push(el);\n    }\n\n    public hideItem(hide: boolean, index: number) {\n        const itemToHide = this.items[index] as HTMLElement;\n        itemToHide.classList.toggle('ag-hidden', hide);\n    }\n\n    public setTitle(title: string): this {\n        this.eTitle.innerText = title;\n        return this;\n    }\n\n    public addCssClassToTitleBar(cssClass: string) {\n        this.eTitleBar.classList.add(cssClass);\n    }\n\n    public setEnabled(enabled: boolean, skipToggle?: boolean): this {\n        this.enabled = enabled;\n        this.refreshDisabledStyles();\n\n        this.toggleGroupExpand(enabled);\n\n        if (!skipToggle) {\n            this.cbGroupEnabled.setValue(enabled);\n        }\n\n        return this;\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n\n    public onEnableChange(callbackFn: (enabled: boolean) => void): this {\n        this.cbGroupEnabled.onValueChange((newSelection: boolean) => {\n            this.setEnabled(newSelection, true);\n            callbackFn(newSelection);\n        });\n\n        return this;\n    }\n\n    public hideEnabledCheckbox(hide: boolean): this {\n        this.suppressEnabledCheckbox = hide;\n        this.refreshChildDisplay();\n        this.refreshDisabledStyles();\n        return this;\n    }\n\n    public hideOpenCloseIcons(hide: boolean): this {\n        this.suppressOpenCloseIcons = hide;\n\n        if (hide) {\n            this.toggleGroupExpand(true);\n        }\n\n        return this;\n    }\n\n    private refreshDisabledStyles() {\n        this.addOrRemoveCssClass('ag-disabled', !this.enabled);\n\n        if (this.suppressEnabledCheckbox && !this.enabled) {\n            this.eTitleBar.classList.add('ag-disabled-group-title-bar');\n            this.eTitleBar.removeAttribute('tabindex');\n        } else {\n            this.eTitleBar.classList.remove('ag-disabled-group-title-bar');\n            this.eTitleBar.setAttribute('tabindex', '0');\n        }\n\n        this.eContainer.classList.toggle('ag-disabled-group-container', !this.enabled);\n    }\n}\n","import { BeanStub } from \"../context/beanStub\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { FocusService } from \"../focusService\";\nimport { ManagedFocusFeature } from \"./managedFocusFeature\";\n\nexport interface ITabGuard {\n    setTabIndex(tabIndex?: string): void;\n}\n\nexport class TabGuardCtrl extends BeanStub {\n\n    @Autowired('focusService') private readonly focusService: FocusService;\n\n    private readonly comp: ITabGuard;\n    private readonly eTopGuard: HTMLElement;\n    private readonly eBottomGuard: HTMLElement;\n\n    private readonly eFocusableElement: HTMLElement;\n\n    private readonly providedFocusInnerElement?: (fromBottom: boolean) => void;\n    private readonly providedFocusIn?: (event: FocusEvent) => boolean;\n    private readonly providedFocusOut?: (event: FocusEvent) => boolean;\n\n    private readonly providedShouldStopEventPropagation?: () => boolean;\n    private readonly providedOnTabKeyDown?: (e: KeyboardEvent) => void;\n    private readonly providedHandleKeyDown?: (e: KeyboardEvent) => void;\n\n    private skipTabGuardFocus: boolean = false;\n\n    constructor(params: {\n        comp: ITabGuard,\n        eTopGuard: HTMLElement,\n        eBottomGuard: HTMLElement,\n        eFocusableElement: HTMLElement,\n        focusInnerElement?: (fromBottom: boolean) => void,\n        onFocusIn?: (event: FocusEvent) => boolean,\n        onFocusOut?: (event: FocusEvent) => boolean,\n        shouldStopEventPropagation?: () => boolean,\n        onTabKeyDown?: (e: KeyboardEvent) => void,\n        handleKeyDown?: (e: KeyboardEvent) => void\n    }) {\n        super();\n\n        const {\n            comp,\n            eTopGuard,\n            eBottomGuard,\n            focusInnerElement,\n            onFocusIn,\n            onFocusOut,\n            shouldStopEventPropagation,\n            onTabKeyDown,\n            handleKeyDown,\n            eFocusableElement\n        } = params;\n\n        this.comp = comp;\n\n        this.eTopGuard = eTopGuard;\n        this.eBottomGuard = eBottomGuard;\n        this.providedFocusInnerElement = focusInnerElement;\n        this.eFocusableElement = eFocusableElement;\n\n        this.providedFocusIn = onFocusIn;\n        this.providedFocusOut = onFocusOut;\n        this.providedShouldStopEventPropagation = shouldStopEventPropagation;\n        this.providedOnTabKeyDown = onTabKeyDown;\n        this.providedHandleKeyDown = handleKeyDown;\n    }\n\n    @PostConstruct\n    private postConstruct() {\n        this.createManagedBean(new ManagedFocusFeature(\n            this.eFocusableElement,\n            {\n                shouldStopEventPropagation: () => this.shouldStopEventPropagation(),\n                onTabKeyDown: e => this.onTabKeyDown(e),\n                handleKeyDown: e => this.handleKeyDown(e),\n                onFocusIn: e => this.onFocusIn(e),\n                onFocusOut: e => this.onFocusOut(e)\n            }\n        ));\n\n        this.activateTabGuards();\n\n        [this.eTopGuard, this.eBottomGuard].forEach(\n            guard => this.addManagedListener(guard, 'focus', this.onFocus.bind(this))\n        );\n    }\n\n    private handleKeyDown(e: KeyboardEvent): void {\n        if (this.providedHandleKeyDown) {\n            this.providedHandleKeyDown(e);\n        }\n    }\n\n    private tabGuardsAreActive(): boolean {\n        return !!this.eTopGuard && this.eTopGuard.hasAttribute('tabIndex');\n    }\n\n    private shouldStopEventPropagation(): boolean {\n        if (this.providedShouldStopEventPropagation) {\n            return this.providedShouldStopEventPropagation();\n        }\n        return false;\n    }\n\n    private activateTabGuards(): void {\n        this.comp.setTabIndex(this.getGridTabIndex());\n    }\n\n    private deactivateTabGuards(): void {\n        this.comp.setTabIndex();\n    }\n\n    private onFocus(e: FocusEvent): void {\n        if (this.skipTabGuardFocus) {\n            this.skipTabGuardFocus = false;\n            return;\n        }\n\n        const fromBottom = e.target === this.eBottomGuard;\n        if (this.providedFocusInnerElement) {\n            this.providedFocusInnerElement(fromBottom);\n        } else {\n            this.focusInnerElement(fromBottom);\n        }\n    }\n\n    private onFocusIn(e: FocusEvent): void {\n        if (this.providedFocusIn && this.providedFocusIn(e)) { return; }\n\n        this.deactivateTabGuards();\n    }\n\n    private onFocusOut(e: FocusEvent): void {\n        if (this.providedFocusOut && this.providedFocusOut(e)) { return; }\n\n        if (!this.eFocusableElement.contains(e.relatedTarget as HTMLElement)) {\n            this.activateTabGuards();\n        }\n    }\n\n    public onTabKeyDown(e: KeyboardEvent): void {\n        if (this.providedOnTabKeyDown) {\n            this.providedOnTabKeyDown(e);\n            return;\n        }\n\n        if (e.defaultPrevented) { return; }\n\n        const tabGuardsAreActive = this.tabGuardsAreActive();\n\n        if (tabGuardsAreActive) {\n            this.deactivateTabGuards();\n        }\n\n        const nextRoot = this.getNextFocusableElement(e.shiftKey);\n\n        if (tabGuardsAreActive) {\n            // ensure the tab guards are only re-instated once the event has finished processing, to avoid the browser\n            // tabbing to the tab guard from inside the component\n            setTimeout(() => this.activateTabGuards(), 0);\n        }\n\n        if (!nextRoot) { return; }\n\n        nextRoot.focus();\n        e.preventDefault();\n    }\n\n    public getGridTabIndex(): string {\n        return this.gridOptionsWrapper.getGridTabIndex();\n    }\n\n    public focusInnerElement(fromBottom = false): void {\n        const focusable = this.focusService.findFocusableElements(this.eFocusableElement);\n\n        if (this.tabGuardsAreActive()) {\n            // remove tab guards from this component from list of focusable elements\n            focusable.splice(0, 1);\n            focusable.splice(focusable.length - 1, 1);\n        }\n\n        if (!focusable.length) { return; }\n\n        focusable[fromBottom ? focusable.length - 1 : 0].focus();\n    }\n\n    public getNextFocusableElement(backwards?: boolean): HTMLElement | null {\n        return this.focusService.findNextFocusableElement(this.eFocusableElement, false, backwards);\n    }\n\n    public forceFocusOutOfContainer(up: boolean = false): void {\n        const tabGuardToFocus = up ? this.eTopGuard : this.eBottomGuard;\n\n        this.activateTabGuards();\n        this.skipTabGuardFocus = true;\n\n        tabGuardToFocus.focus();\n    }\n\n}","import { Component } from \"./component\";\nimport { isNodeOrElement, clearElement } from \"../utils/dom\";\nimport { TabGuardCtrl, ITabGuard } from \"./tabGuardCtrl\";\nimport { setAriaRole } from \"../utils/aria\";\n\nexport class TabGuardComp extends Component {\n\n    private eTopGuard: HTMLElement;\n    private eBottomGuard: HTMLElement;\n    private eFocusableElement: HTMLElement;\n\n    protected tabGuardCtrl: TabGuardCtrl;\n\n    protected initialiseTabGuard(params: {\n        focusInnerElement?: (fromBottom: boolean) => void;\n        shouldStopEventPropagation?: () => boolean;\n        /**\n         * @return `true` to prevent the default onFocusIn behavior\n         */\n        onFocusIn?: (e: FocusEvent) => boolean;\n        /**\n         * @return `true` to prevent the default onFocusOut behavior\n         */\n        onFocusOut?: (e: FocusEvent) => boolean;\n        onTabKeyDown?: (e: KeyboardEvent) => void;\n        handleKeyDown?: (e: KeyboardEvent) => void;\n    }) {\n        this.eTopGuard = this.createTabGuard('top');\n        this.eBottomGuard = this.createTabGuard('bottom');\n        this.eFocusableElement = this.getFocusableElement();\n\n        const tabGuards = [this.eTopGuard, this.eBottomGuard];\n\n        const compProxy: ITabGuard = {\n            setTabIndex: tabIndex => {\n                tabGuards.forEach(tabGuard => tabIndex != null ? tabGuard.setAttribute('tabIndex', tabIndex) : tabGuard.removeAttribute('tabIndex'));\n            }\n        };\n\n        this.addTabGuards(this.eTopGuard, this.eBottomGuard);\n\n        this.tabGuardCtrl = this.createManagedBean(new TabGuardCtrl({\n            comp: compProxy,\n            eTopGuard: this.eTopGuard,\n            eBottomGuard: this.eBottomGuard,\n            eFocusableElement: this.eFocusableElement,\n            onFocusIn: params.onFocusIn,\n            onFocusOut: params.onFocusOut,\n            focusInnerElement: params.focusInnerElement,\n            handleKeyDown: params.handleKeyDown,\n            onTabKeyDown: params.onTabKeyDown,\n            shouldStopEventPropagation: params.shouldStopEventPropagation\n        }));\n    }\n\n    private createTabGuard(side: 'top' | 'bottom'): HTMLElement {\n        const tabGuard = document.createElement('div');\n\n        tabGuard.classList.add('ag-tab-guard', `ag-tab-guard-${side}`);\n        setAriaRole(tabGuard, 'presentation');\n\n        return tabGuard;\n    }\n\n    private addTabGuards(topTabGuard: HTMLElement, bottomTabGuard: HTMLElement): void {\n        this.eFocusableElement.insertAdjacentElement('afterbegin', topTabGuard);\n        this.eFocusableElement.insertAdjacentElement('beforeend', bottomTabGuard);\n    }\n\n    protected removeAllChildrenExceptTabGuards(): void {\n        const tabGuards: [HTMLElement, HTMLElement] = [this.eTopGuard, this.eBottomGuard];\n        clearElement(this.getFocusableElement());\n        this.addTabGuards(...tabGuards);\n    }\n\n    public forceFocusOutOfContainer(up: boolean = false): void {\n        this.tabGuardCtrl.forceFocusOutOfContainer(up);\n    }\n\n    public appendChild(newChild: HTMLElement | Component, container?: HTMLElement): void {\n        if (!isNodeOrElement(newChild)) {\n            newChild = (newChild as Component).getGui();\n        }\n\n        const { eBottomGuard: bottomTabGuard } = this;\n\n        if (bottomTabGuard) {\n            bottomTabGuard.insertAdjacentElement('beforebegin', newChild as HTMLElement);\n        } else {\n            super.appendChild(newChild, container);\n        }\n    }\n}","\nimport { FocusService } from \"../focusService\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { AgMenuItemComponent, MenuItemSelectedEvent, MenuItemActivatedEvent } from \"./agMenuItemComponent\";\nimport { TabGuardComp } from \"./tabGuardComp\";\nimport { KeyCode } from \"../constants/keyCode\";\nimport { MenuItemDef } from \"../entities/gridOptions\";\nimport { loadTemplate } from \"../utils/dom\";\nimport { last } from \"../utils/array\";\nimport { setAriaLevel } from \"../utils/aria\";\n\nexport class AgMenuList extends TabGuardComp {\n\n    @Autowired('focusService') private readonly focusService: FocusService;\n\n    private menuItems: AgMenuItemComponent[] = [];\n    private activeMenuItem: AgMenuItemComponent | null;\n\n    constructor(private readonly level = 1) {\n        super(/* html */`<div class=\"ag-menu-list\" role=\"tree\"></div>`);\n    }\n\n    @PostConstruct\n    private postConstruct() {\n        this.initialiseTabGuard({\n            onTabKeyDown: e => this.onTabKeyDown(e),\n            handleKeyDown: e => this.handleKeyDown(e)\n        });\n    }\n\n    protected onTabKeyDown(e: KeyboardEvent) {\n        const parent = this.getParentComponent();\n        const parentGui = parent && parent.getGui();\n        const isManaged = parentGui && parentGui.classList.contains('ag-focus-managed');\n\n        if (!isManaged) {\n            e.preventDefault();\n        }\n\n        if (e.shiftKey) {\n            this.closeIfIsChild(e);\n        }\n    }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        switch (e.key) {\n            case KeyCode.UP:\n            case KeyCode.RIGHT:\n            case KeyCode.DOWN:\n            case KeyCode.LEFT:\n                e.preventDefault();\n                this.handleNavKey(e.key);\n                break;\n            case KeyCode.ESCAPE:\n                const topMenu = this.findTopMenu();\n\n                if (topMenu) {\n                    this.focusService.focusInto(topMenu.getGui());\n                }\n\n                break;\n        }\n    }\n\n    public clearActiveItem(): void {\n        if (this.activeMenuItem) {\n            this.activeMenuItem.deactivate();\n            this.activeMenuItem = null;\n        }\n    }\n\n    public addMenuItems(menuItems?: (MenuItemDef | string)[]): void {\n        if (menuItems == null) { return; }\n\n        menuItems.forEach(menuItemOrString => {\n            if (menuItemOrString === 'separator') {\n                this.addSeparator();\n            } else if (typeof menuItemOrString === 'string') {\n                console.warn(`AG Grid: unrecognised menu item ${menuItemOrString}`);\n            } else {\n                this.addItem(menuItemOrString);\n            }\n        });\n    }\n\n    public addItem(menuItemDef: MenuItemDef): void {\n        const menuItem = this.createManagedBean(new AgMenuItemComponent({\n            ...menuItemDef,\n            isAnotherSubMenuOpen: () => this.menuItems.some(m => m.isSubMenuOpen())\n        }));\n\n        menuItem.setParentComponent(this);\n\n        setAriaLevel(menuItem.getGui(), this.level);\n\n        this.menuItems.push(menuItem);\n        this.appendChild(menuItem.getGui());\n\n        this.addManagedListener(menuItem, AgMenuItemComponent.EVENT_MENU_ITEM_SELECTED, (event: MenuItemSelectedEvent) => {\n            this.dispatchEvent(event);\n        });\n\n        this.addManagedListener(menuItem, AgMenuItemComponent.EVENT_MENU_ITEM_ACTIVATED, (event: MenuItemActivatedEvent) => {\n            if (this.activeMenuItem && this.activeMenuItem !== event.menuItem) {\n                this.activeMenuItem.deactivate();\n            }\n\n            this.activeMenuItem = event.menuItem;\n        });\n    }\n\n    public activateFirstItem(): void {\n        const item = this.menuItems.filter(currentItem => !currentItem.isDisabled())[0];\n\n        if (!item) { return; }\n\n        item.activate();\n    }\n\n    private addSeparator() {\n        const separatorHtml = /* html */`\n            <div class=\"ag-menu-separator\" aria-hidden=\"true\">\n                <div class=\"ag-menu-separator-part\"></div>\n                <div class=\"ag-menu-separator-part\"></div>\n                <div class=\"ag-menu-separator-part\"></div>\n                <div class=\"ag-menu-separator-part\"></div>\n            </div>`;\n\n        this.appendChild(loadTemplate(separatorHtml));\n    }\n\n    private findTopMenu(): AgMenuList | undefined {\n        let parent = this.getParentComponent();\n\n        if (!parent && this instanceof AgMenuList) { return this; }\n\n        while (true) {\n            const nextParent = parent && parent.getParentComponent && parent.getParentComponent();\n\n            if (!nextParent || (!(nextParent instanceof AgMenuList || nextParent instanceof AgMenuItemComponent))) {\n                break;\n            }\n\n            parent = nextParent;\n        }\n\n        return parent instanceof AgMenuList ? parent : undefined;\n    }\n\n    private handleNavKey(key: string): void {\n        switch (key) {\n            case KeyCode.UP:\n            case KeyCode.DOWN:\n                const nextItem = this.findNextItem(key === KeyCode.UP);\n\n                if (nextItem && nextItem !== this.activeMenuItem) {\n                    nextItem.activate();\n                }\n\n                return;\n        }\n\n        const left = this.gridOptionsWrapper.isEnableRtl() ? KeyCode.RIGHT : KeyCode.LEFT;\n\n        if (key === left) {\n            this.closeIfIsChild();\n        } else {\n            this.openChild();\n        }\n    }\n\n    private closeIfIsChild(e?: KeyboardEvent): void {\n        const parentItem = this.getParentComponent();\n\n        if (parentItem && parentItem instanceof AgMenuItemComponent) {\n            if (e) { e.preventDefault(); }\n\n            parentItem.closeSubMenu();\n            parentItem.getGui().focus();\n        }\n    }\n\n    private openChild(): void {\n        if (this.activeMenuItem) {\n            this.activeMenuItem.openSubMenu(true);\n        }\n    }\n\n    private findNextItem(up?: boolean): AgMenuItemComponent | undefined {\n        const items = this.menuItems.filter(item => !item.isDisabled());\n\n        if (!items.length) { return; }\n\n        if (!this.activeMenuItem) {\n            return up ? last(items) : items[0];\n        }\n\n        if (up) {\n            items.reverse();\n        }\n\n        let nextItem: AgMenuItemComponent;\n        let foundCurrent = false;\n\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n\n            if (!foundCurrent) {\n                if (item === this.activeMenuItem) {\n                    foundCurrent = true;\n                }\n                continue;\n            }\n\n            nextItem = item;\n            break;\n        }\n\n        return nextItem! || this.activeMenuItem;\n    }\n\n    protected destroy(): void {\n        this.clearActiveItem();\n        super.destroy();\n    }\n}\n","import { PostConstruct } from '../context/context';\nimport { KeyCode } from '../constants/keyCode';\nimport { AgMenuItemComponent } from './agMenuItemComponent';\nimport { TabGuardComp } from './tabGuardComp';\nimport { IComponent } from '../interfaces/iComponent';\n\nexport class AgMenuPanel extends TabGuardComp {\n    constructor(private readonly wrappedComponent: IComponent<any>) {\n        super();\n\n        this.setTemplateFromElement(wrappedComponent.getGui());\n    }\n\n    @PostConstruct\n    private postConstruct() {\n        this.initialiseTabGuard({\n            onTabKeyDown: e => this.onTabKeyDown(e),\n            handleKeyDown: e => this.handleKeyDown(e)\n        });\n    }\n\n    private handleKeyDown(e: KeyboardEvent): void {\n        if (e.key === KeyCode.ESCAPE) {\n            this.closePanel();\n        }\n    }\n\n    private onTabKeyDown(e: KeyboardEvent): void {\n        if (e.defaultPrevented) { return; }\n\n        this.closePanel();\n        e.preventDefault();\n    }\n\n    private closePanel(): void {\n        const menuItem = (this.parentComponent as AgMenuItemComponent);\n        menuItem.closeSubMenu();\n        setTimeout(() => menuItem.getGui().focus(), 0);\n    }\n}","\nimport { AgEvent } from '../events';\nimport { IPopupComponent } from '../interfaces/iPopupComponent';\nimport { Autowired } from '../context/context';\nimport { AgMenuList } from './agMenuList';\nimport { AgMenuPanel } from './agMenuPanel';\nimport { Component } from './component';\nimport { PopupService } from './popupService';\nimport { KeyCode } from '../constants/keyCode';\nimport { PostConstruct } from '../context/context';\nimport { MenuItemLeafDef, MenuItemDef } from '../entities/gridOptions';\nimport { ITooltipParams } from '../rendering/tooltipComponent';\nimport { createIconNoSpan } from '../utils/icon';\nimport { isNodeOrElement, loadTemplate } from '../utils/dom';\nimport { CustomTooltipFeature } from './customTooltipFeature';\nimport { getAriaLevel, setAriaDisabled, setAriaExpanded } from '../utils/aria';\nimport { IComponent } from '../interfaces/iComponent';\nimport { WithoutGridCommon } from '../interfaces/iCommon';\n\ninterface MenuItemComponentParams extends MenuItemLeafDef {\n    isCompact?: boolean;\n    isAnotherSubMenuOpen: () => boolean;\n    subMenu?: (MenuItemDef | string)[] | IComponent<any>;\n}\n\nexport interface MenuItemSelectedEvent extends AgEvent {\n    name: string;\n    disabled?: boolean;\n    shortcut?: string;\n    action?: () => void;\n    checked?: boolean;\n    icon?: HTMLElement | string;\n    subMenu?: (MenuItemDef | string)[] | IPopupComponent<any>;\n    cssClasses?: string[];\n    tooltip?: string;\n    event: MouseEvent | KeyboardEvent;\n}\n\nexport interface MenuItemActivatedEvent extends AgEvent {\n    menuItem: AgMenuItemComponent;\n}\n\nexport class AgMenuItemComponent extends Component {\n    @Autowired('popupService') private readonly popupService: PopupService;\n\n    public static EVENT_MENU_ITEM_SELECTED = 'menuItemSelected';\n    public static EVENT_MENU_ITEM_ACTIVATED = 'menuItemActivated';\n    public static ACTIVATION_DELAY = 80;\n\n    private isActive = false;\n    private tooltip: string;\n    private hideSubMenu: (() => void) | null;\n    private subMenuIsOpen = false;\n    private activateTimeoutId: number;\n    private deactivateTimeoutId: number;\n\n    constructor(private readonly params: MenuItemComponentParams) {\n        super();\n\n        this.setTemplate(/* html */`<div class=\"${this.getClassName()}\" tabindex=\"-1\" role=\"treeitem\"></div>`);\n    }\n\n    @PostConstruct\n    private init() {\n        this.addIcon();\n        this.addName();\n        this.addShortcut();\n        this.addSubMenu();\n        this.addTooltip();\n\n        const eGui = this.getGui();\n\n        if (this.params.disabled) {\n            this.addCssClass(this.getClassName('disabled'));\n            setAriaDisabled(eGui, true);\n        } else {\n            this.addGuiEventListener('click', e => this.onItemSelected(e));\n            this.addGuiEventListener('keydown', (e: KeyboardEvent) => {\n                if (e.key === KeyCode.ENTER || e.key === KeyCode.SPACE) {\n                    e.preventDefault();\n                    this.onItemSelected(e);\n                }\n            });\n            this.addGuiEventListener('mousedown', e => {\n                // Prevent event bubbling to other event handlers such as PopupService triggering\n                // premature closing of any open sub-menu popup.\n                e.stopPropagation();\n                e.preventDefault();\n            });\n\n            this.addGuiEventListener('mouseenter', () => this.onMouseEnter());\n            this.addGuiEventListener('mouseleave', () => this.onMouseLeave());\n        }\n\n        if (this.params.cssClasses) {\n            this.params.cssClasses.forEach(it => this.addCssClass(it));\n        }\n    }\n\n    public isDisabled(): boolean {\n        return !!this.params.disabled;\n    }\n\n    public openSubMenu(activateFirstItem = false): void {\n        this.closeSubMenu();\n\n        if (!this.params.subMenu) { return; }\n\n        const ePopup = loadTemplate(/* html */`<div class=\"ag-menu\" role=\"presentation\"></div>`);\n        let destroySubMenu: () => void;\n\n        if (this.params.subMenu instanceof Array) {\n            const currentLevel = getAriaLevel(this.getGui());\n            const nextLevel = isNaN(currentLevel) ? 1 : (currentLevel + 1);\n            const childMenu = this.createBean(new AgMenuList(nextLevel));\n\n            childMenu.setParentComponent(this);\n            childMenu.addMenuItems(this.params.subMenu);\n            ePopup.appendChild(childMenu.getGui());\n\n            // bubble menu item selected events\n            this.addManagedListener(childMenu, AgMenuItemComponent.EVENT_MENU_ITEM_SELECTED, e => this.dispatchEvent(e));\n            childMenu.addGuiEventListener('mouseenter', () => this.cancelDeactivate());\n\n            destroySubMenu = () => this.destroyBean(childMenu);\n\n            if (activateFirstItem) {\n                setTimeout(() => childMenu.activateFirstItem(), 0);\n            }\n        } else {\n            const { subMenu } = this.params;\n\n            const menuPanel = this.createBean(new AgMenuPanel(subMenu));\n            menuPanel.setParentComponent(this);\n\n            const subMenuGui = menuPanel.getGui();\n            const mouseEvent = 'mouseenter';\n            const mouseEnterListener = () => this.cancelDeactivate();\n\n            subMenuGui.addEventListener(mouseEvent, mouseEnterListener);\n\n            destroySubMenu = () => subMenuGui.removeEventListener(mouseEvent, mouseEnterListener);\n\n            ePopup.appendChild(subMenuGui);\n\n            if ((subMenu as any).afterGuiAttached) {\n                setTimeout(() => (subMenu as any).afterGuiAttached!(), 0);\n            }\n        }\n\n        const eGui = this.getGui();\n\n        const positionCallback = this.popupService.positionPopupForMenu.bind(this.popupService,\n            { eventSource: eGui, ePopup });\n\n        const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n\n        const addPopupRes = this.popupService.addPopup({\n            modal: true,\n            eChild: ePopup,\n            positionCallback: positionCallback,\n            anchorToElement: eGui,\n            ariaLabel: translate('ariaLabelSubMenu', 'SubMenu')\n        });\n\n        this.subMenuIsOpen = true;\n        setAriaExpanded(eGui, true);\n\n        this.hideSubMenu = () => {\n            if (addPopupRes) {\n                addPopupRes.hideFunc();\n            }\n            this.subMenuIsOpen = false;\n            setAriaExpanded(eGui, false);\n            destroySubMenu();\n        };\n    }\n\n    public closeSubMenu(): void {\n        if (!this.hideSubMenu) { return; }\n        this.hideSubMenu();\n        this.hideSubMenu = null;\n        setAriaExpanded(this.getGui(), false);\n    }\n\n    public isSubMenuOpen(): boolean {\n        return this.subMenuIsOpen;\n    }\n\n    public activate(openSubMenu?: boolean): void {\n        this.cancelActivate();\n\n        if (this.params.disabled) { return; }\n\n        this.isActive = true;\n        this.addCssClass(this.getClassName('active'));\n        this.getGui().focus();\n\n        if (openSubMenu && this.params.subMenu) {\n            window.setTimeout(() => {\n                if (this.isAlive() && this.isActive) {\n                    this.openSubMenu();\n                }\n            }, 300);\n        }\n\n        this.onItemActivated();\n    }\n\n    public deactivate() {\n        this.cancelDeactivate();\n        this.removeCssClass(this.getClassName('active'));\n        this.isActive = false;\n\n        if (this.subMenuIsOpen) {\n            this.hideSubMenu!();\n        }\n    }\n\n    private addIcon(): void {\n        if (!this.params.checked && !this.params.icon && this.params.isCompact) { return; }\n\n        const icon = loadTemplate(/* html */\n            `<span ref=\"eIcon\" class=\"${this.getClassName('part')} ${this.getClassName('icon')}\" role=\"presentation\"></span>`\n        );\n\n        if (this.params.checked) {\n            icon.appendChild(createIconNoSpan('check', this.gridOptionsWrapper)!);\n        } else if (this.params.icon) {\n            if (isNodeOrElement(this.params.icon)) {\n                icon.appendChild(this.params.icon as HTMLElement);\n            } else if (typeof this.params.icon === 'string') {\n                icon.innerHTML = this.params.icon;\n            } else {\n                console.warn('AG Grid: menu item icon must be DOM node or string');\n            }\n        }\n\n        this.getGui().appendChild(icon);\n    }\n\n    private addName(): void {\n        if (!this.params.name && this.params.isCompact) { return; }\n\n        const name = loadTemplate(/* html */\n            `<span ref=\"eName\" class=\"${this.getClassName('part')} ${this.getClassName('text')}\">${this.params.name || ''}</span>`\n        );\n\n        this.getGui().appendChild(name);\n    }\n\n    private addTooltip(): void {\n        if (!this.params.tooltip) { return; }\n\n        this.tooltip = this.params.tooltip;\n\n        if (this.gridOptionsWrapper.isEnableBrowserTooltips()) {\n            this.getGui().setAttribute('title', this.tooltip);\n        } else {\n            this.createManagedBean(new CustomTooltipFeature(this));\n        }\n    }\n\n    public getTooltipParams(): WithoutGridCommon<ITooltipParams> {\n        return {\n            location: 'menu',\n            value: this.tooltip\n        };\n    }\n\n    private addShortcut(): void {\n        if (!this.params.shortcut && this.params.isCompact) { return; }\n        const shortcut = loadTemplate(/* html */\n            `<span ref=\"eShortcut\" class=\"${this.getClassName('part')} ${this.getClassName('shortcut')}\">${this.params.shortcut || ''}</span>`\n        );\n\n        this.getGui().appendChild(shortcut);\n    }\n\n    private addSubMenu(): void {\n        if (!this.params.subMenu && this.params.isCompact) { return; }\n\n        const pointer = loadTemplate(/* html */\n            `<span ref=\"ePopupPointer\" class=\"${this.getClassName('part')} ${this.getClassName('popup-pointer')}\"></span>`\n        );\n\n        const eGui = this.getGui();\n\n        if (this.params.subMenu) {\n            const iconName = this.gridOptionsWrapper.isEnableRtl() ? 'smallLeft' : 'smallRight';\n            setAriaExpanded(eGui, false);\n\n            pointer.appendChild(createIconNoSpan(iconName, this.gridOptionsWrapper)!);\n        }\n\n        eGui.appendChild(pointer);\n    }\n\n    private onItemSelected(event: MouseEvent | KeyboardEvent): void {\n        if (this.params.action) {\n            this.params.action();\n        } else {\n            this.openSubMenu(event && event.type === 'keydown');\n        }\n\n        if (this.params.subMenu && !this.params.action) { return; }\n\n        const e: MenuItemSelectedEvent = {\n            type: AgMenuItemComponent.EVENT_MENU_ITEM_SELECTED,\n            action: this.params.action,\n            checked: this.params.checked,\n            cssClasses: this.params.cssClasses,\n            disabled: this.params.disabled,\n            icon: this.params.icon,\n            name: this.params.name,\n            shortcut: this.params.shortcut,\n            subMenu: this.params.subMenu,\n            tooltip: this.params.tooltip,\n            event\n        };\n\n        this.dispatchEvent(e);\n    }\n\n    private onItemActivated(): void {\n        const event: MenuItemActivatedEvent = {\n            type: AgMenuItemComponent.EVENT_MENU_ITEM_ACTIVATED,\n            menuItem: this,\n        };\n\n        this.dispatchEvent(event);\n    }\n\n    private cancelActivate(): void {\n        if (this.activateTimeoutId) {\n            window.clearTimeout(this.activateTimeoutId);\n            this.activateTimeoutId = 0;\n        }\n    }\n\n    private cancelDeactivate(): void {\n        if (this.deactivateTimeoutId) {\n            window.clearTimeout(this.deactivateTimeoutId);\n            this.deactivateTimeoutId = 0;\n        }\n    }\n\n    private onMouseEnter(): void {\n        this.cancelDeactivate();\n\n        if (this.params.isAnotherSubMenuOpen()) {\n            // wait to see if the user enters the open sub-menu\n            this.activateTimeoutId = window.setTimeout(() => this.activate(true), AgMenuItemComponent.ACTIVATION_DELAY);\n        } else {\n            // activate immediately\n            this.activate(true);\n        }\n    }\n\n    private onMouseLeave(): void {\n        this.cancelActivate();\n\n        if (this.isSubMenuOpen()) {\n            // wait to see if the user enters the sub-menu\n            this.deactivateTimeoutId = window.setTimeout(() => this.deactivate(), AgMenuItemComponent.ACTIVATION_DELAY);\n        } else {\n            // de-activate immediately\n            this.deactivate();\n        }\n    }\n\n    private getClassName(suffix?: string) {\n        const prefix = this.params.isCompact ? 'ag-compact-menu-option' : 'ag-menu-option';\n\n        return suffix ? `${prefix}-${suffix}` : prefix;\n    }\n}\n","import { Autowired, Bean, Optional, PostConstruct } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { Column } from \"./entities/column\";\nimport { CellFocusedEvent, Events } from \"./events\";\nimport { ColumnApi } from \"./columns/columnApi\";\nimport { ColumnModel } from \"./columns/columnModel\";\nimport { CellPosition } from \"./entities/cellPosition\";\nimport { RowNode } from \"./entities/rowNode\";\nimport { GridApi } from \"./gridApi\";\nimport { HeaderPosition } from \"./headerRendering/common/headerPosition\";\nimport { RowPositionUtils } from \"./entities/rowPosition\";\nimport { IRangeService } from \"./interfaces/IRangeService\";\nimport { RowRenderer } from \"./rendering/rowRenderer\";\nimport { HeaderNavigationService } from \"./headerRendering/common/headerNavigationService\";\nimport { ColumnGroup } from \"./entities/columnGroup\";\nimport { ManagedFocusFeature } from \"./widgets/managedFocusFeature\";\nimport { getTabIndex } from './utils/browser';\nimport { makeNull } from './utils/generic';\nimport { Constants } from \"./constants/constants\";\nimport { GridCtrl } from \"./gridComp/gridCtrl\";\nimport { NavigationService } from \"./gridBodyComp/navigationService\";\nimport { RowCtrl } from \"./rendering/row/rowCtrl\";\nimport { CtrlsService } from \"./ctrlsService\";\nimport { HeaderCellCtrl } from \"./headerRendering/cells/column/headerCellCtrl\";\nimport { AbstractHeaderCellCtrl } from \"./headerRendering/cells/abstractCell/abstractHeaderCellCtrl\";\nimport { last } from \"./utils/array\";\nimport { NavigateToNextHeaderParams, TabToNextHeaderParams } from \"./entities/iCallbackParams\";\nimport { WithoutGridCommon } from \"./interfaces/iCommon\";\n\n@Bean('focusService')\nexport class FocusService extends BeanStub {\n\n    @Autowired('eGridDiv') private eGridDiv: HTMLElement;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('headerNavigationService') private readonly headerNavigationService: HeaderNavigationService;\n    @Autowired('columnApi') private readonly columnApi: ColumnApi;\n    @Autowired('gridApi') private readonly gridApi: GridApi;\n    @Autowired('rowRenderer') private readonly rowRenderer: RowRenderer;\n    @Autowired('rowPositionUtils') private readonly rowPositionUtils: RowPositionUtils;\n    @Optional('rangeService') private readonly rangeService: IRangeService;\n    @Autowired('navigationService') public navigationService: NavigationService;\n    @Autowired('ctrlsService') public ctrlsService: CtrlsService;\n\n    public static AG_KEYBOARD_FOCUS: string = 'ag-keyboard-focus';\n\n    private gridCtrl: GridCtrl;\n    private focusedCellPosition: CellPosition | null;\n    private focusedHeaderPosition: HeaderPosition | null;\n\n    private static keyboardModeActive: boolean = false;\n    private static instancesMonitored: Map<Document, GridCtrl[]> = new Map();\n\n    /**\n     * Adds a gridCore to the list of the gridCores monitoring Keyboard Mode\n     * in a specific HTMLDocument.\n     *\n     * @param doc {Document} - The Document containing the gridCore.\n     * @param gridCore {GridComp} - The GridCore to be monitored.\n     */\n    private static addKeyboardModeEvents(doc: Document, controller: GridCtrl): void {\n        const docControllers = FocusService.instancesMonitored.get(doc);\n\n        if (docControllers && docControllers.length > 0) {\n            if (docControllers.indexOf(controller) === -1) {\n                docControllers.push(controller);\n            }\n        } else {\n            FocusService.instancesMonitored.set(doc, [controller]);\n            doc.addEventListener('keydown', FocusService.toggleKeyboardMode);\n            doc.addEventListener('mousedown', FocusService.toggleKeyboardMode);\n        }\n    }\n\n    /**\n     * Removes a gridCore from the list of the gridCores monitoring Keyboard Mode\n     * in a specific HTMLDocument.\n     *\n     * @param doc {Document} - The Document containing the gridCore.\n     * @param gridCore {GridComp} - The GridCore to be removed.\n     */\n    private static removeKeyboardModeEvents(doc: Document, controller: GridCtrl): void {\n        const docControllers = FocusService.instancesMonitored.get(doc);\n\n        let newControllers: GridCtrl[] = [];\n\n        if (docControllers && docControllers.length) {\n            newControllers = [...docControllers].filter(\n                currentGridCore => currentGridCore !== controller\n            );\n            FocusService.instancesMonitored.set(doc, newControllers);\n        }\n\n        if (newControllers.length === 0) {\n            doc.removeEventListener('keydown', FocusService.toggleKeyboardMode);\n            doc.removeEventListener('mousedown', FocusService.toggleKeyboardMode);\n        }\n    }\n\n    /**\n     * This method will be called by `keydown` and `mousedown` events on all Documents monitoring\n     * KeyboardMode. It will then fire a KEYBOARD_FOCUS, MOUSE_FOCUS on each gridCore present in\n     * the Document allowing each gridCore to maintain a state for KeyboardMode.\n     *\n     * @param event {KeyboardEvent | MouseEvent | TouchEvent} - The event triggered.\n     */\n    private static toggleKeyboardMode(event: KeyboardEvent | MouseEvent | TouchEvent): void {\n        const isKeyboardActive = FocusService.keyboardModeActive;\n        const isKeyboardEvent = event.type === 'keydown';\n\n        if (isKeyboardEvent) {\n            // the following keys should not toggle keyboard mode.\n            if (event.ctrlKey || event.metaKey || event.altKey) { return; }\n        }\n\n        if (isKeyboardActive && isKeyboardEvent || !isKeyboardActive && !isKeyboardEvent) { return; }\n\n        FocusService.keyboardModeActive = isKeyboardEvent;\n        const doc = (event.target as HTMLElement).ownerDocument;\n\n        if (!doc) { return; }\n\n        const controllersForDoc = FocusService.instancesMonitored.get(doc);\n\n        if (controllersForDoc) {\n            controllersForDoc.forEach(controller => {\n                controller.dispatchEvent({ type: isKeyboardEvent ? Events.EVENT_KEYBOARD_FOCUS : Events.EVENT_MOUSE_FOCUS });\n            });\n        }\n    }\n\n    @PostConstruct\n    private init(): void {\n        const clearFocusedCellListener = this.clearFocusedCell.bind(this);\n\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, clearFocusedCellListener);\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnEverythingChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, clearFocusedCellListener);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, clearFocusedCellListener);\n\n        this.ctrlsService.whenReady(p => {\n            this.gridCtrl = p.gridCtrl;\n            const doc = this.gridOptionsWrapper.getDocument();\n            FocusService.addKeyboardModeEvents(doc, this.gridCtrl);\n            this.addDestroyFunc(() => this.unregisterGridCompController(this.gridCtrl));\n        });\n    }\n\n    public unregisterGridCompController(gridCompController: GridCtrl): void {\n        const doc = this.gridOptionsWrapper.getDocument();\n\n        FocusService.removeKeyboardModeEvents(doc, gridCompController);\n    }\n\n    public onColumnEverythingChanged(): void {\n        // if the columns change, check and see if this column still exists. if it does, then\n        // we can keep the focused cell. if it doesn't, then we need to drop the focused cell.\n        if (!this.focusedCellPosition) { return; }\n\n        const col = this.focusedCellPosition.column;\n        const colFromColumnModel = this.columnModel.getGridColumn(col.getId());\n\n        if (col !== colFromColumnModel) {\n            this.clearFocusedCell();\n        }\n    }\n\n    public isKeyboardMode(): boolean {\n        return FocusService.keyboardModeActive;\n    }\n\n    // we check if the browser is focusing something, and if it is, and\n    // it's the cell we think is focused, then return the cell. so this\n    // methods returns the cell if a) we think it has focus and b) the\n    // browser thinks it has focus. this then returns nothing if we\n    // first focus a cell, then second click outside the grid, as then the\n    // grid cell will still be focused as far as the grid is concerned,\n    // however the browser focus will have moved somewhere else.\n    public getFocusCellToUseAfterRefresh(): CellPosition | null {\n        const eDocument = this.gridOptionsWrapper.getDocument();\n        if (this.gridOptionsWrapper.isSuppressFocusAfterRefresh() || !this.focusedCellPosition) {\n            return null;\n        }\n\n        // we check that the browser is actually focusing on the grid, if it is not, then\n        // we have nothing to worry about. we check for ROW data, as this covers both focused Rows (for Full Width Rows)\n        // and Cells (covers cells as cells live in rows)\n        if (this.isDomDataMissingInHierarchy(eDocument.activeElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL)) {\n            return null;\n        }\n\n        return this.focusedCellPosition;\n    }\n\n    public getFocusHeaderToUseAfterRefresh(): HeaderPosition | null {\n        const eDocument = this.gridOptionsWrapper.getDocument();\n        if (this.gridOptionsWrapper.isSuppressFocusAfterRefresh() || !this.focusedHeaderPosition) {\n            return null;\n        }\n\n        // we check that the browser is actually focusing on the grid, if it is not, then\n        // we have nothing to worry about\n        if (this.isDomDataMissingInHierarchy(eDocument.activeElement, AbstractHeaderCellCtrl.DOM_DATA_KEY_HEADER_CTRL)) {\n            return null;\n        }\n\n        return this.focusedHeaderPosition;\n    }\n\n    private isDomDataMissingInHierarchy(eBrowserCell: Node | null, key: string): boolean {\n        let ePointer = eBrowserCell;\n\n        while (ePointer) {\n            const data = this.gridOptionsWrapper.getDomData(ePointer, key);\n\n            if (data) {\n                return false;\n            }\n\n            ePointer = ePointer.parentNode;\n        }\n\n        return true;\n    }\n\n    public clearFocusedCell(): void {\n        this.focusedCellPosition = null;\n        this.onCellFocused(false);\n    }\n\n    public getFocusedCell(): CellPosition | null {\n        return this.focusedCellPosition;\n    }\n\n    public setFocusedCell(rowIndex: number, colKey: string | Column, floating: string | null | undefined, forceBrowserFocus = false): void {\n        const gridColumn = this.columnModel.getGridColumn(colKey);\n\n        // if column doesn't exist, then blank the focused cell and return. this can happen when user sets new columns,\n        // and the focused cell is in a column that no longer exists. after columns change, the grid refreshes and tries\n        // to re-focus the focused cell.\n        if (!gridColumn) {\n            this.focusedCellPosition = null;\n            return;\n        }\n\n        this.focusedCellPosition = gridColumn ? { rowIndex, rowPinned: makeNull(floating), column: gridColumn } : null;\n        this.onCellFocused(forceBrowserFocus);\n    }\n\n    public isCellFocused(cellPosition: CellPosition): boolean {\n        if (this.focusedCellPosition == null) { return false; }\n\n        return this.focusedCellPosition.column === cellPosition.column &&\n            this.isRowFocused(cellPosition.rowIndex, cellPosition.rowPinned);\n    }\n\n    public isRowNodeFocused(rowNode: RowNode): boolean {\n        return this.isRowFocused(rowNode.rowIndex!, rowNode.rowPinned);\n    }\n\n    public isHeaderWrapperFocused(headerCtrl: HeaderCellCtrl): boolean {\n        if (this.focusedHeaderPosition == null) { return false; }\n\n        const column = headerCtrl.getColumnGroupChild();\n        const headerRowIndex = headerCtrl.getRowIndex();\n        const pinned = headerCtrl.getPinned();\n\n        const { column: focusedColumn, headerRowIndex: focusedHeaderRowIndex } = this.focusedHeaderPosition;\n\n        return column === focusedColumn &&\n            headerRowIndex === focusedHeaderRowIndex &&\n            pinned == focusedColumn.getPinned();\n    }\n\n    public clearFocusedHeader(): void {\n        this.focusedHeaderPosition = null;\n    }\n\n    public getFocusedHeader(): HeaderPosition | null {\n        return this.focusedHeaderPosition;\n    }\n\n    public setFocusedHeader(headerRowIndex: number, column: ColumnGroup | Column): void {\n        this.focusedHeaderPosition = { headerRowIndex, column };\n    }\n\n    public focusHeaderPosition(params: {\n        headerPosition: HeaderPosition | null;\n        direction?: 'Before' | 'After' | null;\n        fromTab?: boolean;\n        allowUserOverride?: boolean;\n        event?: KeyboardEvent;\n    }): boolean {\n        const { direction, fromTab, allowUserOverride, event } = params;\n        let { headerPosition } = params;\n\n        if (allowUserOverride) {\n            const { gridOptionsWrapper } = this;\n            const currentPosition = this.getFocusedHeader();\n            const headerRowCount = this.headerNavigationService.getHeaderRowCount();\n\n            if (fromTab) {\n                const userFunc = gridOptionsWrapper.getTabToNextHeaderFunc();\n                if (userFunc) {\n                    const params: WithoutGridCommon<TabToNextHeaderParams> = {\n                        backwards: direction === 'Before',\n                        previousHeaderPosition: currentPosition,\n                        nextHeaderPosition: headerPosition,\n                        headerRowCount,\n                    };\n                    headerPosition = userFunc(params);\n                }\n            } else {\n                const userFunc = gridOptionsWrapper.getNavigateToNextHeaderFunc();\n                if (userFunc && event) {\n                    const params: WithoutGridCommon<NavigateToNextHeaderParams> = {\n                        key: event.key,\n                        previousHeaderPosition: currentPosition,\n                        nextHeaderPosition: headerPosition,\n                        headerRowCount,\n                        event,\n                    };\n                    headerPosition = userFunc(params);\n                }\n            }\n        }\n\n        if (!headerPosition) { return false; }\n\n        if (headerPosition.headerRowIndex === -1) {\n            return this.focusGridView(headerPosition.column as Column);\n        }\n\n        this.headerNavigationService.scrollToColumn(headerPosition.column, direction);\n\n        const headerRowContainerCtrl = this.ctrlsService.getHeaderRowContainerCtrl(headerPosition.column.getPinned());\n\n        // this will automatically call the setFocusedHeader method above\n        const focusSuccess = headerRowContainerCtrl.focusHeader(headerPosition.headerRowIndex, headerPosition.column, event);\n\n        return focusSuccess;\n    }\n\n    public focusFirstHeader(): boolean {\n        let firstColumn: Column | ColumnGroup = this.columnModel.getAllDisplayedColumns()[0];\n        if (!firstColumn) { return false; }\n\n        if (firstColumn.getParent()) {\n            firstColumn = this.columnModel.getColumnGroupAtLevel(firstColumn, 0)!;\n        }\n\n        return this.focusHeaderPosition({\n            headerPosition: { headerRowIndex: 0, column: firstColumn }\n        });\n    }\n\n    public focusLastHeader(event?: KeyboardEvent): boolean {\n        const headerRowIndex = this.headerNavigationService.getHeaderRowCount() - 1;\n        const column = last(this.columnModel.getAllDisplayedColumns());\n\n        return this.focusHeaderPosition({\n            headerPosition: { headerRowIndex, column },\n            event\n        });\n    }\n\n    public isAnyCellFocused(): boolean {\n        return !!this.focusedCellPosition;\n    }\n\n    public isRowFocused(rowIndex: number, floating?: string | null): boolean {\n        if (this.focusedCellPosition == null) { return false; }\n\n        return this.focusedCellPosition.rowIndex === rowIndex && this.focusedCellPosition.rowPinned === makeNull(floating);\n    }\n\n    public findFocusableElements(rootNode: HTMLElement, exclude?: string | null, onlyUnmanaged = false): HTMLElement[] {\n        const focusableString = Constants.FOCUSABLE_SELECTOR;\n        let excludeString = Constants.FOCUSABLE_EXCLUDE;\n\n        if (exclude) {\n            excludeString += ', ' + exclude;\n        }\n\n        if (onlyUnmanaged) {\n            excludeString += ', [tabindex=\"-1\"]';\n        }\n\n        const nodes = Array.prototype.slice.apply(rootNode.querySelectorAll(focusableString)) as HTMLElement[];\n        const excludeNodes = Array.prototype.slice.apply(rootNode.querySelectorAll(excludeString)) as HTMLElement[];\n\n        if (!excludeNodes.length) {\n            return nodes;\n        }\n\n        const diff = (a: HTMLElement[], b: HTMLElement[]) => a.filter(element => b.indexOf(element) === -1);\n        return diff(nodes, excludeNodes);\n    }\n\n    public focusInto(rootNode: HTMLElement, up = false, onlyUnmanaged = false): boolean {\n        const focusableElements = this.findFocusableElements(rootNode, null, onlyUnmanaged);\n        const toFocus = up ? last(focusableElements) : focusableElements[0];\n\n        if (toFocus) {\n            toFocus.focus();\n            return true;\n        }\n\n        return false;\n    }\n\n    public findNextFocusableElement(rootNode: HTMLElement = this.eGridDiv, onlyManaged?: boolean | null, backwards?: boolean): HTMLElement | null {\n        const focusable = this.findFocusableElements(rootNode, onlyManaged ? ':not([tabindex=\"-1\"])' : null);\n        const eDocument = this.gridOptionsWrapper.getDocument();\n        const activeEl = eDocument.activeElement as HTMLElement;\n        let currentIndex: number;\n\n        if (onlyManaged) {\n            currentIndex = focusable.findIndex(el => el.contains(activeEl));\n        } else {\n            currentIndex = focusable.indexOf(activeEl);\n        }\n\n        const nextIndex = currentIndex + (backwards ? -1 : 1);\n\n        if (nextIndex < 0 || nextIndex >= focusable.length) {\n            return null;\n        }\n\n        return focusable[nextIndex];\n    }\n\n    public isFocusUnderManagedComponent(rootNode: HTMLElement): boolean {\n        const eDocument = this.gridOptionsWrapper.getDocument();\n        const managedContainers = rootNode.querySelectorAll(`.${ManagedFocusFeature.FOCUS_MANAGED_CLASS}`);\n\n        if (!managedContainers.length) { return false; }\n\n        for (let i = 0; i < managedContainers.length; i++) {\n            if (managedContainers[i].contains(eDocument.activeElement)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public findTabbableParent(node: HTMLElement | null, limit: number = 5): HTMLElement | null {\n        let counter = 0;\n\n        while (node && getTabIndex(node) === null && ++counter <= limit) {\n            node = node.parentElement;\n        }\n\n        if (getTabIndex(node) === null) { return null; }\n\n        return node;\n    }\n\n    private onCellFocused(forceBrowserFocus: boolean): void {\n        const event: CellFocusedEvent = {\n            type: Events.EVENT_CELL_FOCUSED,\n            forceBrowserFocus: forceBrowserFocus,\n            rowIndex: null,\n            column: null,\n            floating: null,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            rowPinned: null,\n            isFullWidthCell: false\n        };\n\n        if (this.focusedCellPosition) {\n            const rowIndex = event.rowIndex = this.focusedCellPosition.rowIndex;\n            const rowPinned = event.rowPinned = this.focusedCellPosition.rowPinned;\n\n            event.column = this.focusedCellPosition.column;\n\n            const rowCtrl = this.rowRenderer.getRowByPosition({ rowIndex, rowPinned });\n\n            if (rowCtrl) {\n                event.isFullWidthCell = rowCtrl.isFullWidth();\n            }\n        }\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public focusGridView(column?: Column, backwards?: boolean): boolean {\n        // if suppressCellFocus is `true`, it means the user does not want to\n        // navigate between the cells using tab. Instead, we put focus on either\n        // the header or after the grid, depending on whether tab or shift-tab was pressed.\n        if (this.gridOptionsWrapper.isSuppressCellFocus()) {\n\n            if (backwards) {\n                return this.focusLastHeader();\n            }\n\n            return this.focusNextGridCoreContainer(false);\n        }\n\n        const nextRow = backwards\n            ? this.rowPositionUtils.getLastRow()\n            : this.rowPositionUtils.getFirstRow();\n\n        if (!nextRow) { return false; }\n\n        const { rowIndex, rowPinned } = nextRow;\n        const focusedHeader = this.getFocusedHeader();\n\n        if (!column && focusedHeader) {\n            column = focusedHeader.column as Column;\n        }\n\n        if (rowIndex == null || !column) { return false; }\n\n        this.navigationService.ensureCellVisible({ rowIndex, column, rowPinned });\n\n        this.setFocusedCell(rowIndex, column, makeNull(rowPinned), true);\n\n        if (this.rangeService) {\n            const cellPosition = { rowIndex, rowPinned, column };\n            this.rangeService.setRangeToCell(cellPosition);\n        }\n\n        return true;\n    }\n\n    public focusNextGridCoreContainer(backwards: boolean): boolean {\n        if (this.gridCtrl.focusNextInnerContainer(backwards)) {\n            return true;\n        }\n\n        if (!backwards && !this.gridCtrl.isDetailGrid()) {\n            this.gridCtrl.forceFocusOutOfContainer();\n        }\n\n        return false;\n    }\n}\n","import { Autowired, PostConstruct } from '../../context/context';\nimport { Component } from '../../widgets/component';\nimport { UserComponentFactory } from '../../components/framework/userComponentFactory';\nimport { RefSelector } from '../../widgets/componentAnnotations';\nimport { ILoadingOverlayComp, ILoadingOverlayParams } from './loadingOverlayComponent';\nimport { INoRowsOverlayComp, INoRowsOverlayParams } from './noRowsOverlayComponent';\nimport { AgPromise } from '../../utils';\nimport { clearElement } from '../../utils/dom';\nimport { LayoutCssClasses, LayoutFeature, LayoutView, UpdateLayoutClassesParams } from \"../../styling/layoutFeature\";\nimport { PaginationProxy } from \"../../pagination/paginationProxy\";\nimport { Events } from \"../../eventKeys\";\nimport { GridApi } from \"../../gridApi\";\nimport { ColumnModel } from \"../../columns/columnModel\";\nimport { WithoutGridCommon } from '../../interfaces/iCommon';\n\nenum LoadingType { Loading, NoRows }\n\nexport class OverlayWrapperComponent extends Component implements LayoutView {\n\n    // wrapping in outer div, and wrapper, is needed to center the loading icon\n    // The idea for centering came from here: http://www.vanseodesign.com/css/vertical-centering/\n    private static TEMPLATE = /* html */`\n        <div class=\"ag-overlay\" aria-hidden=\"true\">\n            <div class=\"ag-overlay-panel\">\n                <div class=\"ag-overlay-wrapper\" ref=\"eOverlayWrapper\"></div>\n            </div>\n        </div>`;\n\n    @Autowired('userComponentFactory') userComponentFactory: UserComponentFactory;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    @RefSelector('eOverlayWrapper') eOverlayWrapper: HTMLElement;\n\n    private activeOverlay: ILoadingOverlayComp;\n    private inProgress = false;\n    private destroyRequested = false;\n    private manuallyDisplayed: boolean = false;\n\n    constructor() {\n        super(OverlayWrapperComponent.TEMPLATE);\n    }\n\n    public updateLayoutClasses(cssClass: string, params: UpdateLayoutClassesParams): void {\n        const overlayWrapperClassList = this.eOverlayWrapper.classList;\n        overlayWrapperClassList.toggle(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n        overlayWrapperClassList.toggle(LayoutCssClasses.NORMAL, params.normal);\n        overlayWrapperClassList.toggle(LayoutCssClasses.PRINT, params.print);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.createManagedBean(new LayoutFeature(this));\n        this.setDisplayed(false);\n\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_CHANGED, this.onRowDataChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_UPDATED, this.onRowDataChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));\n\n        if (this.gridOptionsWrapper.isRowModelDefault() && !this.gridOptionsWrapper.getRowData()) {\n            this.showLoadingOverlay();\n        }\n\n        this.gridApi.registerOverlayWrapperComp(this);\n    }\n\n    private setWrapperTypeClass(loadingType: LoadingType): void {\n        const overlayWrapperClassList = this.eOverlayWrapper.classList;\n        overlayWrapperClassList.toggle('ag-overlay-loading-wrapper', loadingType === LoadingType.Loading);\n        overlayWrapperClassList.toggle('ag-overlay-no-rows-wrapper', loadingType === LoadingType.NoRows);\n    }\n\n    public showLoadingOverlay(): void {\n        if (this.gridOptionsWrapper.isSuppressLoadingOverlay()) { return; }\n\n        const params: WithoutGridCommon<ILoadingOverlayParams> = {};\n\n        const compDetails = this.userComponentFactory.getLoadingOverlayCompDetails(params);\n        const promise = compDetails.newAgStackInstance();\n\n        this.showOverlay(promise, LoadingType.Loading);\n    }\n\n    public showNoRowsOverlay(): void {\n        if (this.gridOptionsWrapper.isSuppressNoRowsOverlay()) { return; }\n\n        const params: WithoutGridCommon<INoRowsOverlayParams> = {};\n\n        const compDetails = this.userComponentFactory.getNoRowsOverlayCompDetails(params);\n        const promise = compDetails.newAgStackInstance();\n\n        this.showOverlay(promise, LoadingType.NoRows);\n    }\n\n    private showOverlay(workItem: AgPromise<ILoadingOverlayComp | INoRowsOverlayComp> | null, type: LoadingType): void {\n        if (this.inProgress) {\n            return;\n        }\n\n        this.setWrapperTypeClass(type);\n        this.destroyActiveOverlay();\n\n        this.inProgress = true;\n\n        if (workItem) {\n            workItem.then(comp => {\n                this.inProgress = false;\n\n                this.eOverlayWrapper.appendChild(comp!.getGui());\n                this.activeOverlay = comp!;\n\n                if (this.destroyRequested) {\n                    this.destroyRequested = false;\n                    this.destroyActiveOverlay();\n                }\n            });\n        }\n\n        this.manuallyDisplayed = this.columnModel.isReady() && !this.paginationProxy.isEmpty();\n        this.setDisplayed(true);\n    }\n\n    private destroyActiveOverlay(): void {\n        if (this.inProgress) {\n            this.destroyRequested = true;\n            return;\n        }\n\n        if (!this.activeOverlay) {\n            return;\n        }\n\n        this.activeOverlay = this.getContext().destroyBean(this.activeOverlay)!;\n\n        clearElement(this.eOverlayWrapper);\n    }\n\n    public hideOverlay(): void {\n        this.manuallyDisplayed = false;\n        this.destroyActiveOverlay();\n        this.setDisplayed(false);\n    }\n\n    public destroy(): void {\n        this.destroyActiveOverlay();\n        super.destroy();\n    }\n\n    private showOrHideOverlay(): void {\n        const isEmpty = this.paginationProxy.isEmpty();\n        const isSuppressNoRowsOverlay = this.gridOptionsWrapper.isSuppressNoRowsOverlay();\n        if (isEmpty && !isSuppressNoRowsOverlay) {\n            this.showNoRowsOverlay();\n        } else {\n            this.hideOverlay();\n        }\n    }\n\n    private onRowDataChanged(): void {\n        this.showOrHideOverlay();\n    }\n\n    private onNewColumnsLoaded(): void {\n        // hide overlay if columns and rows exist, this can happen if columns are loaded after data.\n        // this problem exists before of the race condition between the services (column controller in this case)\n        // and the view (grid panel). if the model beans were all initialised first, and then the view beans second,\n        // this race condition would not happen.\n        if (this.columnModel.isReady() && !this.paginationProxy.isEmpty() && !this.manuallyDisplayed) {\n            this.hideOverlay();\n        }\n    }\n\n}\n","import { Component } from './component';\nimport { Autowired, PostConstruct } from '../context/context';\nimport { RefSelector } from './componentAnnotations';\nimport { getAriaPosInSet, setAriaSetSize, setAriaPosInSet, setAriaSelected, setAriaChecked, setAriaRole, setAriaLabel } from '../utils/aria';\nimport { KeyCode } from '../constants/keyCode';\nimport { ResizeObserverService } from \"../misc/resizeObserverService\";\nimport { waitUntil } from '../utils/function';\nimport { TabGuardComp } from './tabGuardComp';\nimport { FocusService } from '../focusService';\n\nexport interface VirtualListModel {\n    getRowCount(): number;\n    getRow(index: number): any;\n    isRowSelected?(index: number): boolean | undefined;\n}\n\nexport class VirtualList extends TabGuardComp {\n    private model: VirtualListModel;\n    private renderedRows = new Map<number, { rowComponent: Component, eDiv: HTMLDivElement; }>();\n    private componentCreator: (value: any, listItemElement: HTMLElement) => Component;\n    private rowHeight = 20;\n    private lastFocusedRowIndex: number | null;\n    private isDestroyed = false;\n\n    @Autowired('resizeObserverService') private readonly resizeObserverService: ResizeObserverService;\n    @Autowired('focusService') private readonly focusService: FocusService;\n    @RefSelector('eContainer') private readonly eContainer: HTMLElement;\n\n    constructor(\n        private readonly cssIdentifier = 'default',\n        private readonly ariaRole = 'listbox',\n        private listName?: string\n    ) {\n        super(VirtualList.getTemplate(cssIdentifier));\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addScrollListener();\n        this.rowHeight = this.getItemHeight();\n        this.addResizeObserver();\n\n        this.initialiseTabGuard({\n            onFocusIn: (e: FocusEvent) => this.onFocusIn(e),\n            onFocusOut: (e: FocusEvent) => this.onFocusOut(e),\n            focusInnerElement: (fromBottom: boolean) => this.focusInnerElement(fromBottom),\n            onTabKeyDown: e => this.onTabKeyDown(e),\n            handleKeyDown: e => this.handleKeyDown(e)\n        });\n\n        this.setAriaProperties();\n    }\n\n    private setAriaProperties(): void {\n        const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n        const listName = translate('ariaDefaultListName', this.listName || 'List');\n        const ariaEl = this.eContainer;\n\n        setAriaRole(ariaEl, this.ariaRole);\n        setAriaLabel(ariaEl, listName);\n    }\n\n    private addResizeObserver(): void {\n        const listener = this.drawVirtualRows.bind(this);\n        const destroyObserver = this.resizeObserverService.observeResize(this.getGui(), listener);\n        this.addDestroyFunc(destroyObserver);\n    }\n\n    protected focusInnerElement(fromBottom: boolean): void {\n        this.focusRow(fromBottom ? this.model.getRowCount() - 1 : 0);\n    }\n\n    protected onFocusIn(e: FocusEvent): boolean {\n        const target = e.target as HTMLElement;\n\n        if (target.classList.contains('ag-virtual-list-item')) {\n            this.lastFocusedRowIndex = getAriaPosInSet(target) - 1;\n        }\n\n        return false;\n    }\n\n    protected onFocusOut(e: FocusEvent): boolean {\n        if (!this.getFocusableElement().contains(e.relatedTarget as HTMLElement)) {\n            this.lastFocusedRowIndex = null;\n        }\n\n        return false;\n    }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        switch (e.key) {\n            case KeyCode.UP:\n            case KeyCode.DOWN:\n                if (this.navigate(e.key === KeyCode.UP)) {\n                    e.preventDefault();\n                }\n\n                break;\n        }\n    }\n\n    protected onTabKeyDown(e: KeyboardEvent): void {\n        if (this.navigate(e.shiftKey)) {\n            e.preventDefault();\n        } else {\n            // focus on the first or last focusable element to ensure that any other handlers start from there\n            this.focusService.focusInto(this.getGui(), !e.shiftKey);\n        }\n    }\n\n    private navigate(up: boolean): boolean {\n        if (this.lastFocusedRowIndex == null) { return false; }\n\n        const nextRow = this.lastFocusedRowIndex + (up ? -1 : 1);\n\n        if (nextRow < 0 || nextRow >= this.model.getRowCount()) { return false; }\n\n        this.focusRow(nextRow);\n\n        return true;\n    }\n\n    public getLastFocusedRow(): number | null {\n        return this.lastFocusedRowIndex;\n    }\n\n    public focusRow(rowNumber: number): void {\n        this.ensureIndexVisible(rowNumber);\n\n        window.setTimeout(() => {\n            const renderedRow = this.renderedRows.get(rowNumber);\n\n            if (renderedRow) {\n                renderedRow.eDiv.focus();\n            }\n        }, 10);\n    }\n\n    public getComponentAt(rowIndex: number): Component | undefined {\n        const comp = this.renderedRows.get(rowIndex);\n\n        return comp && comp.rowComponent;\n    }\n\n    private static getTemplate(cssIdentifier: string) {\n        return /* html */`\n            <div class=\"ag-virtual-list-viewport ag-${cssIdentifier}-virtual-list-viewport\" role=\"presentation\">\n                <div class=\"ag-virtual-list-container ag-${cssIdentifier}-virtual-list-container\" ref=\"eContainer\"></div>\n            </div>`;\n    }\n\n    private getItemHeight(): number {\n        return this.gridOptionsWrapper.getListItemHeight();\n    }\n\n    public ensureIndexVisible(index: number): void {\n        const lastRow = this.model.getRowCount();\n\n        if (typeof index !== 'number' || index < 0 || index >= lastRow) {\n            console.warn('AG Grid: invalid row index for ensureIndexVisible: ' + index);\n            return;\n        }\n\n        const rowTopPixel = index * this.rowHeight;\n        const rowBottomPixel = rowTopPixel + this.rowHeight;\n        const eGui = this.getGui();\n\n        const viewportTopPixel = eGui.scrollTop;\n        const viewportHeight = eGui.offsetHeight;\n        const viewportBottomPixel = viewportTopPixel + viewportHeight;\n\n        const viewportScrolledPastRow = viewportTopPixel > rowTopPixel;\n        const viewportScrolledBeforeRow = viewportBottomPixel < rowBottomPixel;\n\n        if (viewportScrolledPastRow) {\n            // if row is before, scroll up with row at top\n            eGui.scrollTop = rowTopPixel;\n        } else if (viewportScrolledBeforeRow) {\n            // if row is below, scroll down with row at bottom\n            const newScrollPosition = rowBottomPixel - viewportHeight;\n            eGui.scrollTop = newScrollPosition;\n        }\n    }\n\n    public setComponentCreator(componentCreator: (value: any, listItemElement: HTMLElement) => Component): void {\n        this.componentCreator = componentCreator;\n    }\n\n    public getRowHeight(): number {\n        return this.rowHeight;\n    }\n\n    public getScrollTop(): number {\n        return this.getGui().scrollTop;\n    }\n\n    public setRowHeight(rowHeight: number): void {\n        this.rowHeight = rowHeight;\n        this.refresh();\n    }\n\n    public refresh(): void {\n        if (this.model == null || this.isDestroyed) { return; }\n\n        const rowCount = this.model.getRowCount();\n        this.eContainer.style.height = `${rowCount * this.rowHeight}px`;\n\n        // ensure height is applied before attempting to redraw rows\n        waitUntil(() => this.eContainer.clientHeight >= rowCount * this.rowHeight,\n            () => {\n                if (this.isDestroyed) { return; }\n\n                this.clearVirtualRows();\n                this.drawVirtualRows();\n            }\n        );\n    }\n\n    private clearVirtualRows() {\n        this.renderedRows.forEach((_, rowIndex) => this.removeRow(rowIndex));\n    }\n\n    private drawVirtualRows() {\n        const gui = this.getGui();\n        const topPixel = gui.scrollTop;\n        const bottomPixel = topPixel + gui.offsetHeight;\n        const firstRow = Math.floor(topPixel / this.rowHeight);\n        const lastRow = Math.floor(bottomPixel / this.rowHeight);\n\n        this.ensureRowsRendered(firstRow, lastRow);\n    }\n\n    private ensureRowsRendered(start: number, finish: number) {\n        // remove any rows that are no longer required\n        this.renderedRows.forEach((_, rowIndex) => {\n            if ((rowIndex < start || rowIndex > finish) && rowIndex !== this.lastFocusedRowIndex) {\n                this.removeRow(rowIndex);\n            }\n        });\n\n        // insert any required new rows\n        for (let rowIndex = start; rowIndex <= finish; rowIndex++) {\n            if (this.renderedRows.has(rowIndex)) { continue; }\n\n            // check this row actually exists (in case overflow buffer window exceeds real data)\n            if (rowIndex < this.model.getRowCount()) {\n                this.insertRow(rowIndex);\n            }\n        }\n    }\n\n    private insertRow(rowIndex: number): void {\n        const value = this.model.getRow(rowIndex);\n        const eDiv = document.createElement('div');\n\n        eDiv.classList.add('ag-virtual-list-item', `ag-${this.cssIdentifier}-virtual-list-item`);\n        setAriaRole(eDiv, this.ariaRole === 'tree' ? 'treeitem' : 'option');\n        setAriaSetSize(eDiv, this.model.getRowCount());\n        setAriaPosInSet(eDiv, rowIndex + 1);\n        eDiv.setAttribute('tabindex', '-1');\n\n        if (typeof this.model.isRowSelected === 'function') {\n            const isSelected = this.model.isRowSelected(rowIndex);\n\n            setAriaSelected(eDiv, !!isSelected);\n            setAriaChecked(eDiv, isSelected);\n        }\n\n        eDiv.style.height = `${this.rowHeight}px`;\n        eDiv.style.top = `${this.rowHeight * rowIndex}px`;\n\n        const rowComponent = this.componentCreator(value, eDiv);\n\n        rowComponent.addGuiEventListener('focusin', () => this.lastFocusedRowIndex = rowIndex);\n\n        eDiv.appendChild(rowComponent.getGui());\n\n        // keep the DOM order consistent with the order of the rows\n        if (this.renderedRows.has(rowIndex - 1)) {\n            this.renderedRows.get(rowIndex - 1)!.eDiv.insertAdjacentElement('afterend', eDiv);\n        } else if (this.renderedRows.has(rowIndex + 1)) {\n            this.renderedRows.get(rowIndex + 1)!.eDiv.insertAdjacentElement('beforebegin', eDiv);\n        } else {\n            this.eContainer.appendChild(eDiv);\n        }\n\n        this.renderedRows.set(rowIndex, { rowComponent, eDiv });\n    }\n\n    private removeRow(rowIndex: number) {\n        const component = this.renderedRows.get(rowIndex)!;\n\n        this.eContainer.removeChild(component.eDiv);\n        this.destroyBean(component.rowComponent);\n        this.renderedRows.delete(rowIndex);\n    }\n\n    private addScrollListener() {\n        this.addGuiEventListener('scroll', () => this.drawVirtualRows());\n    }\n\n    public setModel(model: VirtualListModel): void {\n        this.model = model;\n    }\n\n    public destroy(): void {\n        if (this.isDestroyed) { return; }\n\n        this.clearVirtualRows();\n        this.isDestroyed = true;\n\n        super.destroy();\n    }\n}\n","import { IFrameworkOverrides } from \"./interfaces/iFrameworkOverrides\";\nimport { includes } from \"./utils/array\";\nimport { AgPromise } from \"./utils\";\n\nconst OUTSIDE_ANGULAR_EVENTS = ['mouseover', 'mouseout', 'mouseenter', 'mouseleave'];\nconst PASSIVE_EVENTS = ['touchstart', 'touchend', 'touchmove', 'touchcancel'];\n\n/** The base frameworks, eg React & Angular, override this bean with implementations specific to their requirement. */\nexport class VanillaFrameworkOverrides implements IFrameworkOverrides {\n\n    // for Vanilla JS, we use simple timeout\n    public setTimeout(action: any, timeout?: any): void {\n        window.setTimeout(action, timeout);\n    }\n    public setInterval(action: any, timeout?: any): AgPromise<number> {\n        return new AgPromise(resolve => {\n            resolve(window.setInterval(action, timeout));\n        });\n    }\n\n    public isOutsideAngular = (eventType:string) => includes(OUTSIDE_ANGULAR_EVENTS, eventType);\n\n    // for Vanilla JS, we just add the event to the element\n    public addEventListener(\n        element: HTMLElement,\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        useCapture?: boolean\n    ): void {\n        const isPassive = includes(PASSIVE_EVENTS, type);\n        element.addEventListener(type, listener, { capture: !!useCapture, passive: isPassive });\n    }\n\n    // for Vanilla JS, we just execute the listener\n    dispatchEvent(eventType: string, listener: () => {}, global = false): void {\n        listener();\n    }\n\n    frameworkComponent(name: string): any {\n        return null;\n    }\n\n    isFrameworkComponent(comp: any): boolean {\n        return false;\n    }\n}\n","import { Autowired, Bean } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { Constants } from \"./constants/constants\";\nimport { ColumnModel } from \"./columns/columnModel\";\nimport { IRowModel } from \"./interfaces/iRowModel\";\nimport { CellPosition } from \"./entities/cellPosition\";\nimport { RowNode } from \"./entities/rowNode\";\nimport { Column } from \"./entities/column\";\nimport { RowPosition } from \"./entities/rowPosition\";\nimport { PinnedRowModel } from \"./pinnedRowModel/pinnedRowModel\";\nimport { missing } from \"./utils/generic\";\nimport { last } from \"./utils/array\";\nimport { KeyCode } from './constants/keyCode';\nimport { PaginationProxy } from \"./pagination/paginationProxy\";\n\n@Bean('cellNavigationService')\nexport class CellNavigationService extends BeanStub {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('pinnedRowModel') private pinnedRowModel: PinnedRowModel;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n\n    // returns null if no cell to focus on, ie at the end of the grid\n    public getNextCellToFocus(key: string, focusedCell: CellPosition, ctrlPressed: boolean = false): CellPosition | null {\n        if (ctrlPressed) {\n            return this.getNextCellToFocusWithCtrlPressed(key, focusedCell);\n        }\n\n        return this.getNextCellToFocusWithoutCtrlPressed(key, focusedCell);\n    }\n\n    private getNextCellToFocusWithCtrlPressed(key: string, focusedCell: CellPosition): CellPosition | null {\n        const upKey = key === KeyCode.UP;\n        const downKey = key === KeyCode.DOWN;\n        const leftKey = key === KeyCode.LEFT;\n\n        let column: Column;\n        let rowIndex: number;\n\n        if (upKey || downKey) {\n            rowIndex = upKey ? this.paginationProxy.getPageFirstRow() : this.paginationProxy.getPageLastRow();\n            column = focusedCell.column;\n        } else {\n            const allColumns: Column[] = this.columnModel.getAllDisplayedColumns();\n            const isRtl = this.gridOptionsWrapper.isEnableRtl();\n            rowIndex = focusedCell.rowIndex;\n            column = leftKey !== isRtl ? allColumns[0] : last(allColumns);\n        }\n\n        return {\n            rowIndex,\n            rowPinned: null,\n            column\n        };\n    }\n\n    private getNextCellToFocusWithoutCtrlPressed(key: string, focusedCell: CellPosition): CellPosition | null {\n        // starting with the provided cell, we keep moving until we find a cell we can\n        // focus on.\n        let pointer: CellPosition | null = focusedCell;\n        let finished = false;\n\n        // finished will be true when either:\n        // a) cell found that we can focus on\n        // b) run out of cells (ie the method returns null)\n        while (!finished) {\n\n            switch (key) {\n                case KeyCode.UP:\n                    pointer = this.getCellAbove(pointer);\n                    break;\n                case KeyCode.DOWN:\n                    pointer = this.getCellBelow(pointer);\n                    break;\n                case KeyCode.RIGHT:\n                    if (this.gridOptionsWrapper.isEnableRtl()) {\n                        pointer = this.getCellToLeft(pointer);\n                    } else {\n                        pointer = this.getCellToRight(pointer);\n                    }\n                    break;\n                case KeyCode.LEFT:\n                    if (this.gridOptionsWrapper.isEnableRtl()) {\n                        pointer = this.getCellToRight(pointer);\n                    } else {\n                        pointer = this.getCellToLeft(pointer);\n                    }\n                    break;\n                default:\n                    pointer = null;\n                    console.warn('AG Grid: unknown key for navigation ' + key);\n                    break;\n            }\n\n            if (pointer) {\n                finished = this.isCellGoodToFocusOn(pointer);\n            } else {\n                finished = true;\n            }\n        }\n\n        return pointer;\n    }\n\n    private isCellGoodToFocusOn(gridCell: CellPosition): boolean {\n        const column: Column = gridCell.column;\n        let rowNode: RowNode | undefined;\n\n        switch (gridCell.rowPinned) {\n            case Constants.PINNED_TOP:\n                rowNode = this.pinnedRowModel.getPinnedTopRow(gridCell.rowIndex);\n                break;\n            case Constants.PINNED_BOTTOM:\n                rowNode = this.pinnedRowModel.getPinnedBottomRow(gridCell.rowIndex);\n                break;\n            default:\n                rowNode = this.rowModel.getRow(gridCell.rowIndex);\n                break;\n        }\n\n        if (!rowNode) { return false; }\n\n        const suppressNavigable = column.isSuppressNavigable(rowNode);\n        return !suppressNavigable;\n    }\n\n    private getCellToLeft(lastCell: CellPosition | null): CellPosition | null {\n        if (!lastCell) { return null; }\n\n        const colToLeft = this.columnModel.getDisplayedColBefore(lastCell.column);\n        if (!colToLeft) { return null; }\n\n        return {\n            rowIndex: lastCell.rowIndex,\n            column: colToLeft,\n            rowPinned: lastCell.rowPinned\n        } as CellPosition;\n    }\n\n    private getCellToRight(lastCell: CellPosition | null): CellPosition | null {\n        if (!lastCell) { return null; }\n\n        const colToRight = this.columnModel.getDisplayedColAfter(lastCell.column);\n        // if already on right, do nothing\n        if (!colToRight) { return null; }\n\n        return {\n            rowIndex: lastCell.rowIndex,\n            column: colToRight,\n            rowPinned: lastCell.rowPinned\n        } as CellPosition;\n    }\n\n    public getRowBelow(rowPosition: RowPosition): RowPosition | null {\n        // if already on top row, do nothing\n        const index = rowPosition.rowIndex;\n        const pinned = rowPosition.rowPinned;\n        if (this.isLastRowInContainer(rowPosition)) {\n            switch (pinned) {\n                case Constants.PINNED_BOTTOM:\n                    // never any rows after pinned bottom\n                    return null;\n                case Constants.PINNED_TOP:\n                    // if on last row of pinned top, then next row is main body (if rows exist),\n                    // otherwise it's the pinned bottom\n                    if (this.rowModel.isRowsToRender()) {\n                        return { rowIndex: this.paginationProxy.getPageFirstRow(), rowPinned: null } as RowPosition;\n                    }\n\n                    if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_BOTTOM)) {\n                        return { rowIndex: 0, rowPinned: Constants.PINNED_BOTTOM } as RowPosition;\n                    }\n\n                    return null;\n                default:\n                    // if in the main body, then try pinned bottom, otherwise return nothing\n                    if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_BOTTOM)) {\n                        return { rowIndex: 0, rowPinned: Constants.PINNED_BOTTOM } as RowPosition;\n                    }\n                    return null;\n            }\n        }\n\n        return { rowIndex: index + 1, rowPinned: pinned } as RowPosition;\n    }\n\n    private getCellBelow(lastCell: CellPosition | null): CellPosition | null {\n        if (!lastCell) { return null; }\n\n        const rowBelow = this.getRowBelow(lastCell);\n        if (rowBelow) {\n            return {\n                rowIndex: rowBelow.rowIndex,\n                column: lastCell.column,\n                rowPinned: rowBelow.rowPinned\n            } as CellPosition;\n        }\n\n        return null;\n    }\n\n    private isLastRowInContainer(rowPosition: RowPosition): boolean {\n        const pinned = rowPosition.rowPinned;\n        const index = rowPosition.rowIndex;\n\n        if (pinned === Constants.PINNED_TOP) {\n            const lastTopIndex = this.pinnedRowModel.getPinnedTopRowData().length - 1;\n            return lastTopIndex <= index;\n        }\n\n        if (pinned === Constants.PINNED_BOTTOM) {\n            const lastBottomIndex = this.pinnedRowModel.getPinnedBottomRowData().length - 1;\n            return lastBottomIndex <= index;\n        }\n\n        const lastBodyIndex = this.paginationProxy.getPageLastRow();\n        return lastBodyIndex <= index;\n    }\n\n    public getRowAbove(rowPosition: RowPosition): RowPosition | null {\n        // if already on top row, do nothing\n        const index = rowPosition.rowIndex;\n        const pinned = rowPosition.rowPinned;\n        const isFirstRow = pinned ? index === 0 : index === this.paginationProxy.getPageFirstRow();\n\n        // if already on top row, do nothing\n        if (isFirstRow) {\n            if (pinned === Constants.PINNED_TOP) { return null; }\n\n            if (!pinned) {\n                if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_TOP)) {\n                    return this.getLastFloatingTopRow();\n                }\n                return null;\n            }\n\n            // last floating bottom\n            if (this.rowModel.isRowsToRender()) {\n                return this.getLastBodyCell();\n            }\n\n            if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_TOP)) {\n                return this.getLastFloatingTopRow();\n            }\n\n            return null;\n        }\n\n        return { rowIndex: index - 1, rowPinned: pinned } as RowPosition;\n    }\n\n    private getCellAbove(lastCell: CellPosition | null): CellPosition | null {\n        if (!lastCell) { return null; }\n\n        const rowAbove = this.getRowAbove({ rowIndex: lastCell.rowIndex, rowPinned: lastCell.rowPinned });\n\n        if (rowAbove) {\n            return {\n                rowIndex: rowAbove.rowIndex,\n                column: lastCell.column,\n                rowPinned: rowAbove.rowPinned\n            } as CellPosition;\n        }\n\n        return null;\n    }\n\n    private getLastBodyCell(): RowPosition {\n        const lastBodyRow = this.paginationProxy.getPageLastRow();\n\n        return { rowIndex: lastBodyRow, rowPinned: null } as RowPosition;\n    }\n\n    private getLastFloatingTopRow(): RowPosition {\n        const lastFloatingRow = this.pinnedRowModel.getPinnedTopRowData().length - 1;\n\n        return { rowIndex: lastFloatingRow, rowPinned: Constants.PINNED_TOP } as RowPosition;\n    }\n\n    public getNextTabbedCell(gridCell: CellPosition, backwards: boolean): CellPosition | null {\n        if (backwards) {\n            return this.getNextTabbedCellBackwards(gridCell);\n        }\n\n        return this.getNextTabbedCellForwards(gridCell);\n    }\n\n    public getNextTabbedCellForwards(gridCell: CellPosition): CellPosition | null {\n        const displayedColumns = this.columnModel.getAllDisplayedColumns();\n\n        let newRowIndex: number | null = gridCell.rowIndex;\n        let newFloating: string | null | undefined = gridCell.rowPinned;\n\n        // move along to the next cell\n        let newColumn = this.columnModel.getDisplayedColAfter(gridCell.column);\n\n        // check if end of the row, and if so, go forward a row\n        if (!newColumn) {\n            newColumn = displayedColumns[0];\n\n            const rowBelow = this.getRowBelow(gridCell);\n            if (missing(rowBelow)) { return null; }\n\n            // If we are tabbing and there is a paging panel present, tabbing should go\n            // to the paging panel instead of loading the next page.\n            if (!rowBelow.rowPinned && !this.paginationProxy.isRowInPage(rowBelow)) {\n                return null;\n            }\n\n            newRowIndex = rowBelow ? rowBelow.rowIndex : null;\n            newFloating = rowBelow ? rowBelow.rowPinned : null;\n        }\n\n        return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating } as CellPosition;\n    }\n\n    public getNextTabbedCellBackwards(gridCell: CellPosition): CellPosition | null {\n\n        const displayedColumns = this.columnModel.getAllDisplayedColumns();\n\n        let newRowIndex: number | null = gridCell.rowIndex;\n        let newFloating: string | null | undefined = gridCell.rowPinned;\n\n        // move along to the next cell\n        let newColumn = this.columnModel.getDisplayedColBefore(gridCell.column);\n\n        // check if end of the row, and if so, go forward a row\n        if (!newColumn) {\n            newColumn = last(displayedColumns);\n\n            const rowAbove = this.getRowAbove({ rowIndex: gridCell.rowIndex, rowPinned: gridCell.rowPinned });\n\n            if (missing(rowAbove)) { return null; }\n\n            // If we are tabbing and there is a paging panel present, tabbing should go\n            // to the paging panel instead of loading the next page.\n            if (!rowAbove.rowPinned && !this.paginationProxy.isRowInPage(rowAbove)) {\n                return null;\n            }\n\n            newRowIndex = rowAbove ? rowAbove.rowIndex : null;\n            newFloating = rowAbove ? rowAbove.rowPinned : null;\n        }\n\n        return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating } as CellPosition;\n    }\n\n}\n","import { ColumnModel } from \"./columns/columnModel\";\nimport { Logger } from \"./logger\";\nimport { LoggerFactory } from \"./logger\";\nimport {\n    AgEvent,\n    BodyScrollEvent,\n    ColumnEvent,\n    ColumnGroupOpenedEvent,\n    ColumnMovedEvent,\n    ColumnPinnedEvent,\n    ColumnResizedEvent,\n    ColumnVisibleEvent,\n    Events\n} from \"./events\";\nimport { GridOptions } from \"./entities/gridOptions\";\nimport { Column } from \"./entities/column\";\nimport { Bean } from \"./context/context\";\nimport { Qualifier } from \"./context/context\";\nimport { Autowired } from \"./context/context\";\nimport { PostConstruct } from \"./context/context\";\nimport { ProvidedColumnGroup } from \"./entities/providedColumnGroup\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { CtrlsService } from \"./ctrlsService\";\n\n@Bean('alignedGridsService')\nexport class AlignedGridsService extends BeanStub {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private logger: Logger;\n\n    // flag to mark if we are consuming. to avoid cyclic events (ie other grid firing back to master\n    // while processing a master event) we mark this if consuming an event, and if we are, then\n    // we don't fire back any events.\n    private consuming = false;\n\n    private setBeans(@Qualifier('loggerFactory') loggerFactory: LoggerFactory) {\n        this.logger = loggerFactory.create('AlignedGridsService');\n    }\n\n    @PostConstruct\n    private init(): void {\n        this.addManagedListener(this.eventService,  Events.EVENT_COLUMN_MOVED, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService,  Events.EVENT_COLUMN_VISIBLE, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService,  Events.EVENT_COLUMN_PINNED, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService,  Events.EVENT_COLUMN_GROUP_OPENED, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService,  Events.EVENT_COLUMN_RESIZED, this.fireColumnEvent.bind(this));\n        this.addManagedListener(this.eventService,  Events.EVENT_BODY_SCROLL, this.fireScrollEvent.bind(this));\n    }\n\n    // common logic across all the fire methods\n    private fireEvent(callback: (alignedGridService: AlignedGridsService) => void): void {\n        // if we are already consuming, then we are acting on an event from a master,\n        // so we don't cause a cyclic firing of events\n        if (this.consuming) {\n            return;\n        }\n\n        // iterate through the aligned grids, and pass each aligned grid service to the callback\n        const otherGrids = this.gridOptionsWrapper.getAlignedGrids();\n        if (otherGrids) {\n            otherGrids.forEach((otherGridOptions: GridOptions) => {\n                if (otherGridOptions.api) {\n                    const alignedGridService = otherGridOptions.api.__getAlignedGridService();\n                    callback(alignedGridService);\n                }\n            });\n        }\n    }\n\n    // common logic across all consume methods. very little common logic, however extracting\n    // guarantees consistency across the methods.\n    private onEvent(callback: () => void): void {\n        this.consuming = true;\n        callback();\n        this.consuming = false;\n    }\n\n    private fireColumnEvent(event: ColumnEvent): void {\n        this.fireEvent(alignedGridsService => {\n            alignedGridsService.onColumnEvent(event);\n        });\n    }\n\n    private fireScrollEvent(event: BodyScrollEvent): void {\n        if (event.direction !== 'horizontal') { return; }\n        this.fireEvent(alignedGridsService => {\n            alignedGridsService.onScrollEvent(event);\n        });\n    }\n\n    private onScrollEvent(event: BodyScrollEvent): void {\n        this.onEvent(() => {\n            const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n            gridBodyCon.getScrollFeature().setHorizontalScrollPosition(event.left);\n        });\n    }\n\n    public getMasterColumns(event: ColumnEvent): Column[] {\n        const result: Column[] = [];\n        if (event.columns) {\n            event.columns.forEach((column: Column) => {\n                result.push(column);\n            });\n        } else if (event.column) {\n            result.push(event.column);\n        }\n        return result;\n    }\n\n    public getColumnIds(event: ColumnEvent): string[] {\n        const result: string[] = [];\n        if (event.columns) {\n            event.columns.forEach(column => {\n                result.push(column.getColId());\n            });\n        } else if (event.column) {\n            result.push(event.column.getColId());\n        }\n        return result;\n    }\n\n    public onColumnEvent(event: AgEvent): void {\n        this.onEvent(() => {\n\n            switch (event.type) {\n\n                case Events.EVENT_COLUMN_MOVED:\n                case Events.EVENT_COLUMN_VISIBLE:\n                case Events.EVENT_COLUMN_PINNED:\n                case Events.EVENT_COLUMN_RESIZED:\n                    const colEvent = event as ColumnEvent;\n                    this.processColumnEvent(colEvent);\n                    break;\n\n                case Events.EVENT_COLUMN_GROUP_OPENED:\n                    const groupOpenedEvent = event as ColumnGroupOpenedEvent;\n                    this.processGroupOpenedEvent(groupOpenedEvent);\n                    break;\n\n                case Events.EVENT_COLUMN_PIVOT_CHANGED:\n                    // we cannot support pivoting with aligned grids as the columns will be out of sync as the\n                    // grids will have columns created based on the row data of the grid.\n                    console.warn('AG Grid: pivoting is not supported with aligned grids. ' +\n                        'You can only use one of these features at a time in a grid.');\n                    break;\n            }\n\n        });\n    }\n\n    private processGroupOpenedEvent(groupOpenedEvent: ColumnGroupOpenedEvent): void {\n        // likewise for column group\n        const masterColumnGroup = groupOpenedEvent.columnGroup;\n        let otherColumnGroup: ProvidedColumnGroup | null = null;\n\n        if (masterColumnGroup) {\n            const groupId = masterColumnGroup.getGroupId();\n            otherColumnGroup = this.columnModel.getProvidedColumnGroup(groupId);\n        }\n\n        if (masterColumnGroup && !otherColumnGroup) { return; }\n\n        this.logger.log('onColumnEvent-> processing ' + groupOpenedEvent + ' expanded = ' + masterColumnGroup.isExpanded());\n        this.columnModel.setColumnGroupOpened(otherColumnGroup, masterColumnGroup.isExpanded(), \"alignedGridChanged\");\n    }\n\n    private processColumnEvent(colEvent: ColumnEvent): void {\n        // the column in the event is from the master grid. need to\n        // look up the equivalent from this (other) grid\n        const masterColumn = colEvent.column;\n        let otherColumn: Column | null = null;\n\n        if (masterColumn) {\n            otherColumn = this.columnModel.getPrimaryColumn(masterColumn.getColId());\n        }\n        // if event was with respect to a master column, that is not present in this\n        // grid, then we ignore the event\n        if (masterColumn && !otherColumn) { return; }\n\n        // in time, all the methods below should use the column ids, it's a more generic way\n        // of handling columns, and also allows for single or multi column events\n        const masterColumns = this.getMasterColumns(colEvent);\n\n        switch (colEvent.type) {\n            case Events.EVENT_COLUMN_MOVED:\n                // when the user moves columns via setColumnState, we can't depend on moving specific columns\n                // to an index, as there maybe be many indexes columns moved to (as wasn't result of a mouse drag).\n                // so only way to be sure is match the order of all columns using Column State.\n                {\n                    const movedEvent = colEvent as ColumnMovedEvent;\n                    const srcColState = colEvent.columnApi.getColumnState();\n                    const destColState = srcColState.map(s => ({ colId: s.colId }));\n                    this.columnModel.applyColumnState(\n                        {state: destColState, applyOrder: true}, \"alignedGridChanged\");\n                    this.logger.log(`onColumnEvent-> processing ${colEvent.type} toIndex = ${movedEvent.toIndex}`);\n                }\n                break;\n            case Events.EVENT_COLUMN_VISIBLE:\n                // when the user changes visibility via setColumnState, we can't depend on visibility flag in event\n                // as there maybe be mix of true/false (as wasn't result of a mouse click to set visiblity).\n                // so only way to be sure is match the visibility of all columns using Column State.\n                {\n                    const visibleEvent = colEvent as ColumnVisibleEvent;\n                    const srcColState = colEvent.columnApi.getColumnState();\n                    const destColState = srcColState.map(s => ({ colId: s.colId, hide: s.hide }));\n                    this.columnModel.applyColumnState({state: destColState}, \"alignedGridChanged\");\n                    this.logger.log(`onColumnEvent-> processing ${colEvent.type} visible = ${visibleEvent.visible}`);\n                }\n                break;\n            case Events.EVENT_COLUMN_PINNED:\n                {\n                    const pinnedEvent = colEvent as ColumnPinnedEvent;\n                    const srcColState = colEvent.columnApi.getColumnState();\n                    const destColState = srcColState.map(s => ({ colId: s.colId, pinned: s.pinned }));\n                    this.columnModel.applyColumnState({state: destColState}, \"alignedGridChanged\");\n                    this.logger.log(`onColumnEvent-> processing ${colEvent.type} pinned = ${pinnedEvent.pinned}`);\n                }\n                break;\n            case Events.EVENT_COLUMN_RESIZED:\n                const resizedEvent = colEvent as ColumnResizedEvent;\n\n                masterColumns.forEach((column: Column) => {\n                    this.logger.log(`onColumnEvent-> processing ${colEvent.type} actualWidth = ${column.getActualWidth()}`);\n                    const columnWidths = [{key: column.getColId(), newWidth: column.getActualWidth()}];\n                    this.columnModel.setColumnWidths(columnWidths, false, resizedEvent.finished, \"alignedGridChanged\");\n                });\n                break;\n        }\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const isVerticalScrollShowing = gridBodyCon.isVerticalScrollShowing();\n        const alignedGrids = this.gridOptionsWrapper.getAlignedGrids();\n\n        if (alignedGrids) {\n            alignedGrids.forEach((grid) => {\n                if (grid.api) {\n                    grid.api.setAlwaysShowVerticalScroll(isVerticalScrollShowing);\n                }\n            });\n        }\n    }\n}\n","import { RowNode } from \"./entities/rowNode\";\nimport { Bean } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { Qualifier } from \"./context/context\";\nimport { Logger } from \"./logger\";\nimport { LoggerFactory } from \"./logger\";\nimport { Events, SelectionChangedEvent } from \"./events\";\nimport { Autowired } from \"./context/context\";\nimport { IRowModel } from \"./interfaces/iRowModel\";\nimport { PostConstruct } from \"./context/context\";\nimport { Constants } from \"./constants/constants\";\nimport { ColumnApi } from \"./columns/columnApi\";\nimport { GridApi } from \"./gridApi\";\nimport { ChangedPath } from \"./utils/changedPath\";\nimport { IClientSideRowModel } from \"./interfaces/iClientSideRowModel\";\nimport { iterateObject } from \"./utils/object\";\nimport { exists } from \"./utils/generic\";\n\n@Bean('selectionService')\nexport class SelectionService extends BeanStub {\n\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    private selectedNodes: { [key: string]: RowNode | undefined; };\n    private logger: Logger;\n\n    // used for shift selection, so we know where to start the range selection from\n    private lastSelectedNode: RowNode | null;\n\n    private groupSelectsChildren: boolean;\n\n    private setBeans(@Qualifier('loggerFactory') loggerFactory: LoggerFactory) {\n        this.logger = loggerFactory.create('selectionService');\n        this.reset();\n    }\n\n    @PostConstruct\n    private init(): void {\n        this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));\n    }\n\n    public setLastSelectedNode(rowNode: RowNode): void {\n        this.lastSelectedNode = rowNode;\n    }\n\n    public getLastSelectedNode(): RowNode | null {\n        return this.lastSelectedNode;\n    }\n\n    public getSelectedNodes() {\n        const selectedNodes: RowNode[] = [];\n        iterateObject(this.selectedNodes, (key: string, rowNode: RowNode) => {\n            if (rowNode) {\n                selectedNodes.push(rowNode);\n            }\n        });\n        return selectedNodes;\n    }\n\n    public getSelectedRows() {\n        const selectedRows: any[] = [];\n        iterateObject(this.selectedNodes, (key: string, rowNode: RowNode) => {\n            if (rowNode && rowNode.data) {\n                selectedRows.push(rowNode.data);\n            }\n        });\n        return selectedRows;\n    }\n\n    public removeGroupsFromSelection(): void {\n        iterateObject(this.selectedNodes, (key: string, rowNode: RowNode) => {\n            if (rowNode && rowNode.group) {\n                this.selectedNodes[rowNode.id!] = undefined;\n            }\n        });\n    }\n\n    // should only be called if groupSelectsChildren=true\n    public updateGroupsFromChildrenSelections(changedPath?: ChangedPath): void {\n        // we only do this when group selection state depends on selected children\n        if (!this.gridOptionsWrapper.isGroupSelectsChildren()) {\n            return;\n        }\n        // also only do it if CSRM (code should never allow this anyway)\n        if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            return;\n        }\n\n        const clientSideRowModel = this.rowModel as IClientSideRowModel;\n        const rootNode = clientSideRowModel.getRootNode();\n\n        if (!changedPath) {\n            changedPath = new ChangedPath(true, rootNode);\n            changedPath.setInactive();\n        }\n\n        changedPath.forEachChangedNodeDepthFirst(rowNode => {\n            if (rowNode !== rootNode) {\n                rowNode.calculateSelectedFromChildren();\n            }\n        });\n\n        // clientSideRowModel.getTopLevelNodes()!.forEach((rowNode: RowNode) => {\n        //     rowNode.depthFirstSearch((node) => {\n        //         if (node.group) {\n        //         }\n        //     });\n        // });\n\n    }\n\n    public getNodeForIdIfSelected(id: number): RowNode | undefined {\n        return this.selectedNodes[id];\n    }\n\n    public clearOtherNodes(rowNodeToKeepSelected: RowNode): number {\n        const groupsToRefresh: any = {};\n        let updatedCount = 0;\n        iterateObject(this.selectedNodes, (key: string, otherRowNode: RowNode) => {\n            if (otherRowNode && otherRowNode.id !== rowNodeToKeepSelected.id) {\n                const rowNode = this.selectedNodes[otherRowNode.id!];\n                updatedCount += rowNode!.setSelectedParams({\n                    newValue: false,\n                    clearSelection: false,\n                    suppressFinishActions: true\n                });\n                if (this.groupSelectsChildren && otherRowNode.parent) {\n                    groupsToRefresh[otherRowNode.parent.id!] = otherRowNode.parent;\n                }\n            }\n        });\n        iterateObject(groupsToRefresh, (key: string, group: RowNode) => {\n            group.calculateSelectedFromChildren();\n        });\n        return updatedCount;\n    }\n\n    private onRowSelected(event: any): void {\n        const rowNode = event.node;\n\n        // we do not store the group rows when the groups select children\n        if (this.groupSelectsChildren && rowNode.group) {\n            return;\n        }\n\n        if (rowNode.isSelected()) {\n            this.selectedNodes[rowNode.id] = rowNode;\n        } else {\n            this.selectedNodes[rowNode.id] = undefined;\n        }\n    }\n\n    public syncInRowNode(rowNode: RowNode, oldNode: RowNode | null): void {\n        this.syncInOldRowNode(rowNode, oldNode);\n        this.syncInNewRowNode(rowNode);\n    }\n\n    // if the id has changed for the node, then this means the rowNode\n    // is getting used for a different data item, which breaks\n    // our selectedNodes, as the node now is mapped by the old id\n    // which is inconsistent. so to keep the old node as selected,\n    // we swap in the clone (with the old id and old data). this means\n    // the oldNode is effectively a daemon we keep a reference to,\n    // so if client calls api.getSelectedNodes(), it gets the daemon\n    // in the result. when the client un-selects, the reference to the\n    // daemon is removed. the daemon, because it's an oldNode, is not\n    // used by the grid for rendering, it's a copy of what the node used\n    // to be like before the id was changed.\n    private syncInOldRowNode(rowNode: RowNode, oldNode: RowNode | null): void {\n        const oldNodeHasDifferentId = exists(oldNode) && (rowNode.id !== oldNode.id);\n        if (oldNodeHasDifferentId && oldNode) {\n            const id = oldNode.id!;\n            const oldNodeSelected = this.selectedNodes[id] == rowNode;\n            if (oldNodeSelected) {\n                this.selectedNodes[oldNode.id!] = oldNode;\n            }\n        }\n    }\n\n    private syncInNewRowNode(rowNode: RowNode): void {\n        if (exists(this.selectedNodes[rowNode.id!])) {\n            rowNode.setSelectedInitialValue(true);\n            this.selectedNodes[rowNode.id!] = rowNode;\n        } else {\n            rowNode.setSelectedInitialValue(false);\n        }\n    }\n\n    public reset(): void {\n        this.logger.log('reset');\n        this.selectedNodes = {};\n        this.lastSelectedNode = null;\n    }\n\n    // returns a list of all nodes at 'best cost' - a feature to be used\n    // with groups / trees. if a group has all it's children selected,\n    // then the group appears in the result, but not the children.\n    // Designed for use with 'children' as the group selection type,\n    // where groups don't actually appear in the selection normally.\n    public getBestCostNodeSelection(): RowNode[] | undefined {\n        if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            console.warn('AG Grid: `getBestCostNodeSelection` is only available when using normal row model');\n            return;\n        }\n\n        const clientSideRowModel = this.rowModel as IClientSideRowModel;\n\n        const topLevelNodes = clientSideRowModel.getTopLevelNodes();\n\n        if (topLevelNodes === null) {\n            console.warn('AG Grid: `selectAll` not available doing `rowModel=virtual`');\n            return;\n        }\n\n        const result: RowNode[] = [];\n\n        // recursive function, to find the selected nodes\n        function traverse(nodes: RowNode[]) {\n            for (let i = 0, l = nodes.length; i < l; i++) {\n                const node = nodes[i];\n                if (node.isSelected()) {\n                    result.push(node);\n                } else {\n                    // if not selected, then if it's a group, and the group\n                    // has children, continue to search for selections\n                    const maybeGroup = node as any;\n                    if (maybeGroup.group && maybeGroup.children) {\n                        traverse(maybeGroup.children);\n                    }\n                }\n            }\n        }\n\n        traverse(topLevelNodes);\n\n        return result;\n    }\n\n    public setRowModel(rowModel: any) {\n        this.rowModel = rowModel;\n    }\n\n    public isEmpty(): boolean {\n        let count = 0;\n        iterateObject(this.selectedNodes, (nodeId: string, rowNode: RowNode) => {\n            if (rowNode) {\n                count++;\n            }\n        });\n        return count === 0;\n    }\n\n    public deselectAllRowNodes(justFiltered = false) {\n        const callback = (rowNode: RowNode) => rowNode.selectThisNode(false);\n        const rowModelClientSide = this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n\n        if (justFiltered) {\n            if (!rowModelClientSide) {\n                console.error('AG Grid: selecting just filtered only works with In Memory Row Model');\n                return;\n            }\n            const clientSideRowModel = this.rowModel as IClientSideRowModel;\n            clientSideRowModel.forEachNodeAfterFilter(callback);\n        } else {\n            iterateObject(this.selectedNodes, (id: string, rowNode: RowNode) => {\n                // remember the reference can be to null, as we never 'delete' from the map\n                if (rowNode) {\n                    callback(rowNode);\n                }\n            });\n            // this clears down the map (whereas above only sets the items in map to 'undefined')\n            this.reset();\n        }\n\n        // the above does not clean up the parent rows if they are selected\n        if (rowModelClientSide && this.groupSelectsChildren) {\n            this.updateGroupsFromChildrenSelections();\n        }\n\n        const event: SelectionChangedEvent = {\n            type: Events.EVENT_SELECTION_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public selectAllRowNodes(justFiltered = false) {\n        if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            throw new Error(`selectAll only available with normal row model, ie not ${this.rowModel.getType()}`);\n        }\n\n        const clientSideRowModel = this.rowModel as IClientSideRowModel;\n        const callback = (rowNode: RowNode) => rowNode.selectThisNode(true);\n\n        if (justFiltered) {\n            clientSideRowModel.forEachNodeAfterFilter(callback);\n        } else {\n            clientSideRowModel.forEachNode(callback);\n        }\n\n        // the above does not clean up the parent rows if they are selected\n        if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE && this.groupSelectsChildren) {\n            this.updateGroupsFromChildrenSelections();\n        }\n\n        const event: SelectionChangedEvent = {\n            type: Events.EVENT_SELECTION_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    /**\n     * @method\n     * @deprecated\n     */\n    public selectNode(rowNode: RowNode | undefined, tryMulti: boolean) {\n        if (rowNode) {\n            rowNode.setSelectedParams({ newValue: true, clearSelection: !tryMulti });\n        }\n    }\n\n    /**\n     * @method\n     * @deprecated\n     */\n    public deselectIndex(rowIndex: number) {\n        const node = this.rowModel.getRow(rowIndex);\n        this.deselectNode(node);\n    }\n\n    /**\n     * @method\n     * @deprecated\n     */\n    public deselectNode(rowNode: RowNode | undefined) {\n        if (rowNode) {\n            rowNode.setSelectedParams({ newValue: false, clearSelection: false });\n        }\n    }\n\n    /**\n     * @method\n     * @deprecated\n     */\n    public selectIndex(index: any, tryMulti: boolean) {\n        const node = this.rowModel.getRow(index);\n        this.selectNode(node, tryMulti);\n    }\n\n}\n","import { ColDef, ColGroupDef } from \"../entities/colDef\";\nimport { IHeaderColumn } from \"../entities/iHeaderColumn\";\nimport { ColumnModel, ColumnState, ApplyColumnStateParams } from \"./columnModel\";\nimport { ProvidedColumnGroup } from \"../entities/providedColumnGroup\";\nimport { ColumnGroup } from \"../entities/columnGroup\";\nimport { Column } from \"../entities/column\";\nimport { Autowired, Bean, PreDestroy } from \"../context/context\";\nimport { _ } from \"../utils\";\nimport { ColumnEventType } from \"../events\";\n\n@Bean('columnApi')\nexport class ColumnApi {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    /** Gets the grid to size the columns to the specified width in pixels, e.g. `sizeColumnsToFit(900)`. To have the grid fit the columns to the grid's width, use the Grid API `gridApi.sizeColumnsToFit()` instead. */\n    public sizeColumnsToFit(gridWidth: number): void {\n        // AG-3403 validate that gridWidth is provided because this method has the same name as\n        // a method on the grid API that takes no arguments, and it's easy to confuse the two\n        if (typeof gridWidth === \"undefined\") {\n            console.error('AG Grid: missing parameter to columnApi.sizeColumnsToFit(gridWidth)');\n        }\n        this.columnModel.sizeColumnsToFit(gridWidth, 'api');\n    }\n    /** Call this if you want to open or close a column group. */\n    public setColumnGroupOpened(group: ProvidedColumnGroup | string, newValue: boolean): void { this.columnModel.setColumnGroupOpened(group, newValue, 'api'); }\n    /** Returns the column group with the given name. */\n    public getColumnGroup(name: string, instanceId?: number): ColumnGroup | null { return this.columnModel.getColumnGroup(name, instanceId); }\n    /** Returns the provided column group with the given name. */\n    public getProvidedColumnGroup(name: string): ProvidedColumnGroup | null { return this.columnModel.getProvidedColumnGroup(name); }\n\n    /** Returns the display name for a column. Useful if you are doing your own header rendering and want the grid to work out if `headerValueGetter` is used, or if you are doing your own column management GUI, to know what to show as the column name. */\n    public getDisplayNameForColumn(column: Column, location: string | null): string { return this.columnModel.getDisplayNameForColumn(column, location) || ''; }\n    /** Returns the display name for a column group (when grouping columns). */\n    public getDisplayNameForColumnGroup(columnGroup: ColumnGroup, location: string): string { return this.columnModel.getDisplayNameForColumnGroup(columnGroup, location) || ''; }\n\n    /** Returns the column with the given `colKey`, which can either be the `colId` (a string) or the `colDef` (an object). */\n    public getColumn(key: any): Column | null { return this.columnModel.getPrimaryColumn(key); }\n    /** Applies the state of the columns from a previous state. Returns `false` if one or more columns could not be found. */\n    public applyColumnState(params: ApplyColumnStateParams): boolean { return this.columnModel.applyColumnState(params, 'api'); }\n    /** Gets the state of the columns. Typically used when saving column state. */\n    public getColumnState(): ColumnState[] { return this.columnModel.getColumnState(); }\n    /** Sets the state back to match the originally provided column definitions. */\n    public resetColumnState(): void { this.columnModel.resetColumnState('api'); }\n    /** Gets the state of the column groups. Typically used when saving column group state. */\n    public getColumnGroupState(): { groupId: string, open: boolean }[] { return this.columnModel.getColumnGroupState(); }\n    /** Sets the state of the column group state from a previous state. */\n    public setColumnGroupState(stateItems: ({ groupId: string, open: boolean })[]): void { this.columnModel.setColumnGroupState(stateItems, 'api'); }\n    /** Sets the state back to match the originally provided column definitions. */\n    public resetColumnGroupState(): void { this.columnModel.resetColumnGroupState('api'); }\n\n    /** Returns `true` if pinning left or right, otherwise `false`. */\n    public isPinning(): boolean { return this.columnModel.isPinningLeft() || this.columnModel.isPinningRight(); }\n    /** Returns `true` if pinning left, otherwise `false`. */\n    public isPinningLeft(): boolean { return this.columnModel.isPinningLeft(); }\n    /** Returns `true` if pinning right, otherwise `false`. */\n    public isPinningRight(): boolean { return this.columnModel.isPinningRight(); }\n    /** Returns the column to the right of the provided column, taking into consideration open / closed column groups and visible columns. This is useful if you need to know what column is beside yours e.g. if implementing your own cell navigation. */\n    public getDisplayedColAfter(col: Column): Column | null { return this.columnModel.getDisplayedColAfter(col); }\n    /** Same as `getVisibleColAfter` except gives column to the left. */\n    public getDisplayedColBefore(col: Column): Column | null { return this.columnModel.getDisplayedColBefore(col); }\n    /** Sets the visibility of a column. Key can be the column ID or `Column` object. */\n    public setColumnVisible(key: string | Column, visible: boolean): void { this.columnModel.setColumnVisible(key, visible, 'api'); }\n    /** Same as `setColumnVisible`, but provide a list of column keys. */\n    public setColumnsVisible(keys: (string | Column)[], visible: boolean): void { this.columnModel.setColumnsVisible(keys, visible, 'api'); }\n    /** Sets the column pinned / unpinned. Key can be the column ID, field, `ColDef` object or `Column` object. */\n    public setColumnPinned(key: string | Column, pinned: string): void { this.columnModel.setColumnPinned(key, pinned, 'api'); }\n    /** Same as `setColumnPinned`, but provide a list of column keys. */\n    public setColumnsPinned(keys: (string | Column)[], pinned: string): void { this.columnModel.setColumnsPinned(keys, pinned, 'api'); }\n\n    /** Returns all the columns, regardless of visible or not. */\n    public getAllColumns(): Column[] | null { return this.columnModel.getAllPrimaryColumns(); }\n    /**\n     * Returns all the grid columns, same as `getAllColumns()`, except\n     *\n     *  a) it has the order of the columns that are presented in the grid\n     *\n     *  b) it's after the 'pivot' step, so if pivoting, has the value columns for the pivot.\n     */\n    public getAllGridColumns(): Column[] { return this.columnModel.getAllGridColumns(); }\n    /** Same as `getAllDisplayedColumns` but just for the pinned left portion of the grid. */\n    public getDisplayedLeftColumns(): Column[] { return this.columnModel.getDisplayedLeftColumns(); }\n    /** Same as `getAllDisplayedColumns` but just for the center portion of the grid. */\n    public getDisplayedCenterColumns(): Column[] { return this.columnModel.getDisplayedCenterColumns(); }\n    /** Same as `getAllDisplayedColumns` but just for the pinned right portion of the grid. */\n    public getDisplayedRightColumns(): Column[] { return this.columnModel.getDisplayedRightColumns(); }\n    /** Returns all columns currently displayed (e.g. are visible and if in a group, the group is showing the columns) for the pinned left, centre and pinned right portions of the grid. */\n    public getAllDisplayedColumns(): Column[] { return this.columnModel.getAllDisplayedColumns(); }\n    /** Same as `getAllGridColumns()`, except only returns rendered columns, i.e. columns that are not within the viewport and therefore not rendered, due to column virtualisation, are not displayed. */\n    public getAllDisplayedVirtualColumns(): Column[] { return this.columnModel.getViewportColumns(); }\n\n    /** Moves a column to `toIndex`. The column is first removed, then added at the `toIndex` location, thus index locations will change to the right of the column after the removal. */\n    public moveColumn(key: string | Column, toIndex: number): void {\n        if (typeof key === 'number') {\n            // moveColumn used to take indexes, so this is advising user who hasn't moved to new method name\n            console.warn('AG Grid: you are using moveColumn(fromIndex, toIndex) - moveColumn takes a column key and a destination index, not two indexes, to move with indexes use moveColumnByIndex(from,to) instead');\n            this.columnModel.moveColumnByIndex(key as number, toIndex, 'api');\n        } else {\n            this.columnModel.moveColumn(key, toIndex, 'api');\n        }\n    }\n    /** Same as `moveColumn` but works on index locations. */\n    public moveColumnByIndex(fromIndex: number, toIndex: number): void { this.columnModel.moveColumnByIndex(fromIndex, toIndex, 'api'); }\n    /** Same as `moveColumn` but works on list. */\n    public moveColumns(columnsToMoveKeys: (string | Column)[], toIndex: number) { this.columnModel.moveColumns(columnsToMoveKeys, toIndex, 'api'); }\n    /** Move the column to a new position in the row grouping order. */\n    public moveRowGroupColumn(fromIndex: number, toIndex: number): void { this.columnModel.moveRowGroupColumn(fromIndex, toIndex); }\n    /** Sets the agg function for a column. `aggFunc` can be one of `'min' | 'max' | 'sum'`. */\n    public setColumnAggFunc(key: string | Column, aggFunc: string): void { this.columnModel.setColumnAggFunc(key, aggFunc); }\n    /** Sets the column width on a single column. The finished flag gets included in the resulting event and not used internally by the grid. The finished flag is intended for dragging, where a dragging action will produce many `columnWidth` events, so the consumer of events knows when it receives the last event in a stream. The finished parameter is optional, and defaults to `true`. */\n    public setColumnWidth(key: string | Column, newWidth: number, finished: boolean = true, source?: ColumnEventType): void {\n        this.columnModel.setColumnWidths([{ key, newWidth }], false, finished, source);\n    }\n    /** Sets the column widths on multiple columns. This method offers better performance than calling `setColumnWidth` multiple times. The finished flag gets included in the resulting event and not used internally by the grid. The finished flag is intended for dragging, where a dragging action will produce many `columnWidth` events, so the consumer of events knows when it receives the last event in a stream. The finished parameter is optional, and defaults to `true`. */\n    public setColumnWidths(columnWidths: { key: string | Column, newWidth: number }[], finished: boolean = true, source?: ColumnEventType): void {\n        this.columnModel.setColumnWidths(columnWidths, false, finished, source);\n    }\n    /** Set the pivot mode. */\n    public setPivotMode(pivotMode: boolean): void { this.columnModel.setPivotMode(pivotMode); }\n    /** Get the pivot mode. */\n    public isPivotMode(): boolean { return this.columnModel.isPivotMode(); }\n    /** Returns the pivot column for the given `pivotKeys` and `valueColId`. Useful to then call operations on the pivot column. */\n    public getSecondaryPivotColumn(pivotKeys: string[], valueColKey: string | Column): Column | null { return this.columnModel.getSecondaryPivotColumn(pivotKeys, valueColKey); }\n\n    /** Set the value columns. */\n    public setValueColumns(colKeys: (string | Column)[]): void { this.columnModel.setValueColumns(colKeys, 'api'); }\n    /** Get value columns. */\n    public getValueColumns(): Column[] { return this.columnModel.getValueColumns(); }\n    /** Remove a value column. */\n    public removeValueColumn(colKey: (string | Column)): void { this.columnModel.removeValueColumn(colKey, 'api'); }\n    /** Same as `removeValueColumns` but provide a list. */\n    public removeValueColumns(colKeys: (string | Column)[]): void { this.columnModel.removeValueColumns(colKeys, 'api'); }\n    /** Add a value column. */\n    public addValueColumn(colKey: (string | Column)): void { this.columnModel.addValueColumn(colKey, 'api'); }\n    /** Same as `addValueColumn` but provide a list. */\n    public addValueColumns(colKeys: (string | Column)[]): void { this.columnModel.addValueColumns(colKeys, 'api'); }\n\n    /** Set the row group columns. */\n    public setRowGroupColumns(colKeys: (string | Column)[]): void { this.columnModel.setRowGroupColumns(colKeys, 'api'); }\n    /** Remove a column from the row groups. */\n    public removeRowGroupColumn(colKey: string | Column): void { this.columnModel.removeRowGroupColumn(colKey, 'api'); }\n    /** Same as `removeRowGroupColumn` but provide a list of columns. */\n    public removeRowGroupColumns(colKeys: (string | Column)[]): void { this.columnModel.removeRowGroupColumns(colKeys, 'api'); }\n    /** Add a column to the row groups. */\n    public addRowGroupColumn(colKey: string | Column): void { this.columnModel.addRowGroupColumn(colKey, 'api'); }\n    /** Same as `addRowGroupColumn` but provide a list of columns. */\n    public addRowGroupColumns(colKeys: (string | Column)[]): void { this.columnModel.addRowGroupColumns(colKeys, 'api'); }\n    /** Get row group columns. */\n    public getRowGroupColumns(): Column[] { return this.columnModel.getRowGroupColumns(); }\n\n    /** Set the pivot columns. */\n    public setPivotColumns(colKeys: (string | Column)[]): void { this.columnModel.setPivotColumns(colKeys, 'api'); }\n    /** Remove a pivot column. */\n    public removePivotColumn(colKey: string | Column): void { this.columnModel.removePivotColumn(colKey, 'api'); }\n    /** Same as `removePivotColumn` but provide a list of columns. */\n    public removePivotColumns(colKeys: (string | Column)[]): void { this.columnModel.removePivotColumns(colKeys, 'api'); }\n    /** Add a pivot column. */\n    public addPivotColumn(colKey: string | Column): void { this.columnModel.addPivotColumn(colKey, 'api'); }\n    /** Same as `addPivotColumn` but provide a list of columns. */\n    public addPivotColumns(colKeys: (string | Column)[]): void { this.columnModel.addPivotColumns(colKeys, 'api'); }\n    /** Get the pivot columns. */\n    public getPivotColumns(): Column[] { return this.columnModel.getPivotColumns(); }\n\n    /** Same as `getAllDisplayedColumnGroups` but just for the pinned left portion of the grid. */\n    public getLeftDisplayedColumnGroups(): IHeaderColumn[] { return this.columnModel.getDisplayedTreeLeft(); }\n    /** Same as `getAllDisplayedColumnGroups` but just for the center portion of the grid. */\n    public getCenterDisplayedColumnGroups(): IHeaderColumn[] { return this.columnModel.getDisplayedTreeCentre(); }\n    /** Same as `getAllDisplayedColumnGroups` but just for the pinned right portion of the grid. */\n    public getRightDisplayedColumnGroups(): IHeaderColumn[] { return this.columnModel.getDisplayedTreeRight(); }\n    /** Returns all 'root' column headers. If you are not grouping columns, these return the columns. If you are grouping, these return the top level groups - you can navigate down through each one to get the other lower level headers and finally the columns at the bottom. */\n    public getAllDisplayedColumnGroups(): IHeaderColumn[] | null { return this.columnModel.getAllDisplayedTrees(); }\n    /** Auto-sizes a column based on its contents. */\n    public autoSizeColumn(key: string | Column, skipHeader?: boolean): void { return this.columnModel.autoSizeColumn(key, skipHeader, 'api'); }\n\n    /** Same as `autoSizeColumn`, but provide a list of column keys. */\n    public autoSizeColumns(keys: (string | Column)[], skipHeader?: boolean): void {\n        this.columnModel.autoSizeColumns({ columns: keys, skipHeader: skipHeader });\n    }\n\n    /** Calls `autoSizeColumns` on all displayed columns. */\n    public autoSizeAllColumns(skipHeader?: boolean): void { this.columnModel.autoSizeAllColumns(skipHeader, 'api'); }\n\n    /** Set the secondary pivot columns. */\n    public setSecondaryColumns(colDefs: (ColDef | ColGroupDef)[]): void { this.columnModel.setSecondaryColumns(colDefs, 'api'); }\n    /** Returns the grid's secondary columns. */\n    public getSecondaryColumns(): Column[] | null { return this.columnModel.getSecondaryColumns(); }\n    /** Returns the grid's primary columns. */\n    public getPrimaryColumns(): Column[] | null { return this.columnModel.getAllPrimaryColumns(); }\n\n    @PreDestroy\n    private cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid(): void {\n        // some users were raising support issues with regards memory leaks. the problem was the customers applications\n        // were keeping references to the API. trying to educate them all would be difficult, easier to just remove\n        // all references in the API so at least the core grid can be garbage collected.\n        //\n        // wait about 100ms before clearing down the references, in case user has some cleanup to do,\n        // and needs to deference the API first\n        setTimeout(_.removeAllReferences.bind(window, this, 'Column API'), 100);\n    }\n\n    // below goes through deprecated items, prints message to user, then calls the new version of the same method\n\n    // public getColumnDefs(): (ColDef | ColGroupDef)[] {\n    //     this.setColumnGroupOpened(group, newValue);\n    //     return null;\n    // }\n\n    /** @deprecated columnGroupOpened no longer exists, use setColumnGroupOpened */\n    public columnGroupOpened(group: ProvidedColumnGroup | string, newValue: boolean): void {\n        console.error('AG Grid: columnGroupOpened no longer exists, use setColumnGroupOpened');\n        this.setColumnGroupOpened(group, newValue);\n    }\n    /** @deprecated hideColumns is deprecated, use setColumnsVisible */\n    public hideColumns(colIds: any, hide: any): void {\n        console.error('AG Grid: hideColumns is deprecated, use setColumnsVisible');\n        this.columnModel.setColumnsVisible(colIds, !hide, 'api');\n    }\n    /** @deprecated hideColumn is deprecated, use setColumnVisible */\n    public hideColumn(colId: any, hide: any): void {\n        console.error('AG Grid: hideColumn is deprecated, use setColumnVisible');\n        this.columnModel.setColumnVisible(colId, !hide, 'api');\n    }\n    /** @deprecated setState is deprecated, use setColumnState */\n    public setState(columnState: ColumnState[]): boolean {\n        console.error('AG Grid: setState is deprecated, use setColumnState');\n        return this.setColumnState(columnState);\n    }\n    /** @deprecated getState is deprecated, use getColumnState */\n    public getState(): ColumnState[] {\n        console.error('AG Grid: getState is deprecated, use getColumnState');\n        return this.getColumnState();\n    }\n    /** @deprecated resetState is deprecated, use resetColumnState */\n    public resetState(): void {\n        console.error('AG Grid: resetState is deprecated, use resetColumnState');\n        this.resetColumnState();\n    }\n\n    /** @deprecated getAggregationColumns is deprecated, use getValueColumns */\n    public getAggregationColumns(): Column[] {\n        console.error('AG Grid: getAggregationColumns is deprecated, use getValueColumns');\n        return this.columnModel.getValueColumns();\n    }\n\n    /** @deprecated removeAggregationColumn is deprecated, use removeValueColumn */\n    public removeAggregationColumn(colKey: (string | Column)): void {\n        console.error('AG Grid: removeAggregationColumn is deprecated, use removeValueColumn');\n        this.columnModel.removeValueColumn(colKey, 'api');\n    }\n    /** @deprecated removeAggregationColumns is deprecated, use removeValueColumns */\n    public removeAggregationColumns(colKeys: (string | Column)[]): void {\n        console.error('AG Grid: removeAggregationColumns is deprecated, use removeValueColumns');\n        this.columnModel.removeValueColumns(colKeys, 'api');\n    }\n    /** @deprecated addAggregationColumn is deprecated, use addValueColumn */\n    public addAggregationColumn(colKey: (string | Column)): void {\n        console.error('AG Grid: addAggregationColumn is deprecated, use addValueColumn');\n        this.columnModel.addValueColumn(colKey, 'api');\n    }\n    /** @deprecated addAggregationColumns is deprecated, use addValueColumns */\n    public addAggregationColumns(colKeys: (string | Column)[]): void {\n        console.error('AG Grid: addAggregationColumns is deprecated, use addValueColumns');\n        this.columnModel.addValueColumns(colKeys, 'api');\n    }\n    /** @deprecated setColumnAggFunction is deprecated, use setColumnAggFunc */\n    public setColumnAggFunction(column: Column, aggFunc: string): void {\n        console.error('AG Grid: setColumnAggFunction is deprecated, use setColumnAggFunc');\n        this.columnModel.setColumnAggFunc(column, aggFunc, 'api');\n    }\n    /** @deprecated getDisplayNameForCol is deprecated, use getDisplayNameForColumn */\n    public getDisplayNameForCol(column: any): string {\n        console.error('AG Grid: getDisplayNameForCol is deprecated, use getDisplayNameForColumn');\n        return this.getDisplayNameForColumn(column, null);\n    }\n\n    /** @deprecated setColumnState is deprecated, use applyColumnState. */\n    public setColumnState(columnState: ColumnState[]): boolean {\n        console.error('AG Grid: setColumnState is deprecated, use applyColumnState');\n        return this.columnModel.applyColumnState({ state: columnState, applyOrder: true }, 'api');\n    }\n\n    /** @deprecated getOriginalColumnGroup is deprecated, use getProvidedColumnGroup. */\n    public getOriginalColumnGroup(name: string): ProvidedColumnGroup | null {\n        console.error('AG Grid: getOriginalColumnGroup is deprecated, use getProvidedColumnGroup');\n        return this.columnModel.getProvidedColumnGroup(name);\n    }\n\n}\n\n\n","import { ExpressionService } from \"./expressionService\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { NewValueParams, ValueGetterParams, KeyCreatorParams } from \"../entities/colDef\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { Column } from \"../entities/column\";\nimport { CellValueChangedEvent, Events } from \"../events\";\nimport { ValueCache } from \"./valueCache\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { getValueUsingField } from \"../utils/object\";\nimport { missing, exists } from \"../utils/generic\";\nimport { doOnce } from \"../utils/function\";\n\n@Bean('valueService')\nexport class ValueService extends BeanStub {\n\n    @Autowired('expressionService') private expressionService: ExpressionService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('valueCache') private valueCache: ValueCache;\n\n    private cellExpressions: boolean;\n\n    private initialised = false;\n\n    @PostConstruct\n    public init(): void {\n        this.cellExpressions = this.gridOptionsWrapper.isEnableCellExpressions();\n        this.initialised = true;\n\n        // We listen to our own event and use it to call the columnSpecific callback,\n        // this way the handler calls are correctly interleaved with other global events\n        this.eventService.addEventListener(\n            Events.EVENT_CELL_VALUE_CHANGED,\n            (event: CellValueChangedEvent) => this.callColumnCellValueChangedHandler(event),\n            this.gridOptionsWrapper.useAsyncEvents(),\n        );\n    }\n\n    public getValue(column: Column,\n        rowNode?: RowNode | null,\n        forFilter = false,\n        ignoreAggData = false): any {\n\n        // hack - the grid is getting refreshed before this bean gets initialised, race condition.\n        // really should have a way so they get initialised in the right order???\n        if (!this.initialised) {\n            this.init();\n        }\n\n        if (!rowNode) {\n            return;\n        }\n\n        // pull these out to make code below easier to read\n        const colDef = column.getColDef();\n        const field = colDef.field;\n        const colId = column.getId();\n        const data = rowNode.data;\n\n        let result: any;\n\n        // if there is a value getter, this gets precedence over a field\n        const groupDataExists = rowNode.groupData && rowNode.groupData[colId] !== undefined;\n        const aggDataExists = !ignoreAggData && rowNode.aggData && rowNode.aggData[colId] !== undefined;\n\n        if (forFilter && colDef.filterValueGetter) {\n            result = this.executeFilterValueGetter(colDef.filterValueGetter, data, column, rowNode);\n        } else if (this.gridOptionsWrapper.isTreeData() && aggDataExists) {\n            result = rowNode.aggData[colId];\n        } else if (this.gridOptionsWrapper.isTreeData() && colDef.valueGetter) {\n            result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);\n        } else if (this.gridOptionsWrapper.isTreeData() && (field && data)) {\n            result = getValueUsingField(data, field, column.isFieldContainsDots());\n        } else if (groupDataExists) {\n            result = rowNode.groupData![colId];\n        } else if (aggDataExists) {\n            result = rowNode.aggData[colId];\n        } else if (colDef.valueGetter) {\n            result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);\n        } else if (field && data) {\n            result = getValueUsingField(data, field, column.isFieldContainsDots());\n        }\n\n        // the result could be an expression itself, if we are allowing cell values to be expressions\n        if (this.cellExpressions && (typeof result === 'string') && result.indexOf('=') === 0) {\n            const cellValueGetter = result.substring(1);\n            result = this.executeValueGetter(cellValueGetter, data, column, rowNode);\n        }\n\n        if (result == null) {\n            const openedGroup = this.getOpenedGroup(rowNode, column);\n            if (openedGroup != null) {\n                return openedGroup;\n            }\n        }\n\n        return result;\n    }\n\n    private getOpenedGroup(rowNode: RowNode, column: Column): any {\n\n        if (!this.gridOptionsWrapper.isShowOpenedGroup()) { return; }\n\n        const colDef = column.getColDef();\n        if (!colDef.showRowGroup) { return; }\n\n        const showRowGroup = column.getColDef().showRowGroup;\n\n        let pointer = rowNode.parent;\n\n        while (pointer != null) {\n            if (pointer.rowGroupColumn && (showRowGroup === true || showRowGroup === pointer.rowGroupColumn.getId())) {\n                return pointer.key;\n            }\n            pointer = pointer.parent;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sets the value of a GridCell\n     * @param rowNode The `RowNode` to be updated\n     * @param colKey The `Column` to be updated\n     * @param newValue The new value to be set\n     * @param eventSource The event source\n     * @returns `True` if the value has been updated, otherwise`False`.\n     */\n    public setValue(rowNode: RowNode, colKey: string | Column, newValue: any, eventSource?: string): boolean {\n        const column = this.columnModel.getPrimaryColumn(colKey);\n\n        if (!rowNode || !column) {\n            return false;\n        }\n        // this will only happen if user is trying to paste into a group row, which doesn't make sense\n        // the user should not be trying to paste into group rows\n        if (missing(rowNode.data)) {\n            rowNode.data = {};\n        }\n\n        // for backwards compatibility we are also retrieving the newValueHandler as well as the valueSetter\n        const { field, newValueHandler, valueSetter } = column.getColDef();\n\n        // need either a field or a newValueHandler for this to work\n        if (missing(field) && missing(newValueHandler) && missing(valueSetter)) {\n            // we don't tell user about newValueHandler, as that is deprecated\n            console.warn(`AG Grid: you need either field or valueSetter set on colDef for editing to work`);\n            return false;\n        }\n\n        const params: NewValueParams = {\n            node: rowNode,\n            data: rowNode.data,\n            oldValue: this.getValue(column, rowNode),\n            newValue: newValue,\n            colDef: column.getColDef(),\n            column: column,\n            api: this.gridOptionsWrapper.getApi()!,\n            columnApi: this.gridOptionsWrapper.getColumnApi()!,\n            context: this.gridOptionsWrapper.getContext()\n        };\n\n        params.newValue = newValue;\n\n        let valueWasDifferent: boolean;\n\n        if (newValueHandler && exists(newValueHandler)) {\n            valueWasDifferent = newValueHandler(params);\n        } else if (exists(valueSetter)) {\n            valueWasDifferent = this.expressionService.evaluate(valueSetter, params);\n        } else {\n            valueWasDifferent = this.setValueUsingField(rowNode.data, field, newValue, column.isFieldContainsDots());\n        }\n\n        // in case user forgot to return something (possible if they are not using TypeScript\n        // and just forgot, or using an old newValueHandler we didn't always expect a return\n        // value here), we default the return value to true, so we always refresh.\n        if (valueWasDifferent === undefined) {\n            valueWasDifferent = true;\n        }\n\n        // if no change to the value, then no need to do the updating, or notifying via events.\n        // otherwise the user could be tabbing around the grid, and cellValueChange would get called\n        // all the time.\n        if (!valueWasDifferent) {\n            return false;\n        }\n\n        // reset quick filter on this row\n        rowNode.resetQuickFilterAggregateText();\n\n        this.valueCache.onDataChanged();\n\n        params.newValue = this.getValue(column, rowNode);\n\n        const event: CellValueChangedEvent = {\n            type: Events.EVENT_CELL_VALUE_CHANGED,\n            event: null,\n            rowIndex: rowNode.rowIndex!,\n            rowPinned: rowNode.rowPinned,\n            column: params.column,\n            api: params.api!,\n            columnApi: params.columnApi!,\n            colDef: params.colDef,\n            context: params.context,\n            data: rowNode.data,\n            node: rowNode,\n            oldValue: params.oldValue,\n            newValue: params.newValue,\n            value: params.newValue,\n            source: eventSource\n        };\n\n        this.eventService.dispatchEvent(event);\n\n        return true;\n    }\n\n    private callColumnCellValueChangedHandler(event: CellValueChangedEvent) {\n        const onCellValueChanged = event.colDef.onCellValueChanged;\n        if (typeof onCellValueChanged === 'function') {\n            onCellValueChanged({\n                node: event.node,\n                data: event.data,\n                oldValue: event.oldValue,\n                newValue: event.newValue,\n                colDef: event.colDef,\n                column: event.column,\n                api: event.api,\n                columnApi: event.columnApi,\n                context: event.context\n            });\n        }\n    }\n\n    private setValueUsingField(data: any, field: string | undefined, newValue: any, isFieldContainsDots: boolean): boolean {\n        if (!field) {\n            return false;\n        }\n\n        // if no '.', then it's not a deep value\n        const valuesAreSame: boolean = false;\n        if (!isFieldContainsDots) {\n            data[field] = newValue;\n        } else {\n            // otherwise it is a deep value, so need to dig for it\n            const fieldPieces = field.split('.');\n            let currentObject = data;\n            while (fieldPieces.length > 0 && currentObject) {\n                const fieldPiece: any = fieldPieces.shift();\n                if (fieldPieces.length === 0) {\n                    currentObject[fieldPiece] = newValue;\n                } else {\n                    currentObject = currentObject[fieldPiece];\n                }\n            }\n        }\n        return !valuesAreSame;\n    }\n\n    private executeFilterValueGetter(valueGetter: string | Function, data: any, column: Column, rowNode: RowNode): any {\n        const params: ValueGetterParams = {\n            data: data,\n            node: rowNode,\n            column: column,\n            colDef: column.getColDef(),\n            api: this.gridOptionsWrapper.getApi()!,\n            columnApi: this.gridOptionsWrapper.getColumnApi()!,\n            context: this.gridOptionsWrapper.getContext(),\n            getValue: this.getValueCallback.bind(this, rowNode)\n        };\n\n        return this.expressionService.evaluate(valueGetter, params);\n    }\n\n    private executeValueGetter(valueGetter: string | Function, data: any, column: Column, rowNode: RowNode): any {\n\n        const colId = column.getId();\n\n        // if inside the same turn, just return back the value we got last time\n        const valueFromCache = this.valueCache.getValue(rowNode, colId);\n\n        if (valueFromCache !== undefined) {\n            return valueFromCache;\n        }\n\n        const params: ValueGetterParams = {\n            data: data,\n            node: rowNode,\n            column: column,\n            colDef: column.getColDef(),\n            api: this.gridOptionsWrapper.getApi()!,\n            columnApi: this.gridOptionsWrapper.getColumnApi()!,\n            context: this.gridOptionsWrapper.getContext(),\n            getValue: this.getValueCallback.bind(this, rowNode)\n        };\n\n        const result = this.expressionService.evaluate(valueGetter, params);\n\n        // if a turn is active, store the value in case the grid asks for it again\n        this.valueCache.setValue(rowNode, colId, result);\n\n        return result;\n    }\n\n    private getValueCallback(node: RowNode, field: string | Column): any {\n        const otherColumn = this.columnModel.getPrimaryColumn(field);\n\n        if (otherColumn) {\n            return this.getValue(otherColumn, node);\n        }\n\n        return null;\n    }\n\n    // used by row grouping and pivot, to get key for a row. col can be a pivot col or a row grouping col\n    public getKeyForNode(col: Column, rowNode: RowNode): any {\n        const value = this.getValue(col, rowNode);\n        const keyCreator = col.getColDef().keyCreator;\n\n        let result = value;\n        if (keyCreator) {\n            const keyParams: KeyCreatorParams = {\n                value: value,\n                colDef: col.getColDef(),\n                column: col,\n                node: rowNode,\n                data: rowNode.data,\n                api: this.gridOptionsWrapper.getApi()!,\n                columnApi: this.gridOptionsWrapper.getColumnApi()!,\n                context: this.gridOptionsWrapper.getContext()\n            };\n            result = keyCreator(keyParams);\n        }\n\n        // if already a string, or missing, just return it\n        if (typeof result === 'string' || result == null) {\n            return result;\n        }\n\n        result = String(result);\n\n        if (result === '[object Object]') {\n            doOnce(() => {\n                console.warn('AG Grid: a column you are grouping or pivoting by has objects as values. If you want to group by complex objects then either a) use a colDef.keyCreator (se AG Grid docs) or b) to toString() on the object to return a key');\n            }, 'getKeyForNode - warn about [object,object]');\n        }\n\n        return result;\n    }\n}\n","import { Logger, LoggerFactory } from \"../logger\";\nimport { Bean } from \"../context/context\";\nimport { Qualifier } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\n\n@Bean('expressionService')\nexport class ExpressionService extends BeanStub {\n\n    private expressionToFunctionCache = {} as any;\n    private logger: Logger;\n\n    private setBeans(@Qualifier('loggerFactory') loggerFactory: LoggerFactory) {\n        this.logger = loggerFactory.create('ExpressionService');\n    }\n\n    public evaluate(expressionOrFunc: Function | string | undefined, params: any): any {\n        if (typeof expressionOrFunc === 'function') {\n            // valueGetter is a function, so just call it\n            const func = expressionOrFunc;\n            return func(params);\n        } else if (typeof expressionOrFunc === 'string') {\n            // valueGetter is an expression, so execute the expression\n            const expression = expressionOrFunc;\n            return this.evaluateExpression(expression, params);\n        } else {\n            console.error('AG Grid: value should be either a string or a function', expressionOrFunc);\n        }\n    }\n\n    private evaluateExpression(expression: string, params: any): any {\n        try {\n            const javaScriptFunction = this.createExpressionFunction(expression);\n            // the params don't have all these values, rather we add every possible\n            // value a params can have, which makes whatever is in the params available.\n            const result = javaScriptFunction(params.value, params.context,\n                params.oldValue, params.newValue, params.value, params.node,\n                params.data, params.colDef, params.rowIndex, params.api, params.columnApi,\n                params.getValue, params.column, params.columnGroup);\n            return result;\n        } catch (e) {\n            // the expression failed, which can happen, as it's the client that\n            // provides the expression. so print a nice message\n            // tslint:disable-next-line\n            console.log('Processing of the expression failed');\n            // tslint:disable-next-line\n            console.log('Expression = ' + expression);\n            // tslint:disable-next-line\n            console.log('Params =', params);\n            // tslint:disable-next-line\n            console.log('Exception = ' + e);\n            return null;\n        }\n    }\n\n    private createExpressionFunction(expression: any) {\n        // check cache first\n        if (this.expressionToFunctionCache[expression]) {\n            return this.expressionToFunctionCache[expression];\n        }\n        // if not found in cache, return the function\n        const functionBody = this.createFunctionBody(expression);\n        const theFunction = new Function('x, ctx, oldValue, newValue, value, node, data, colDef, rowIndex, api, columnApi, getValue, column, columnGroup', functionBody);\n\n        // store in cache\n        this.expressionToFunctionCache[expression] = theFunction;\n\n        return theFunction;\n    }\n\n    private createFunctionBody(expression: any) {\n        // if the expression has the 'return' word in it, then use as is,\n        // if not, then wrap it with return and ';' to make a function\n        if (expression.indexOf('return') >= 0) {\n            return expression;\n        } else {\n            return 'return ' + expression + ';';\n        }\n    }\n}\n","import { Autowired } from \"./context/context\";\nimport { Bean } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\n\n@Bean('templateService')\nexport class TemplateService extends BeanStub {\n\n    private templateCache:any = {};\n    private waitingCallbacks:any = {};\n\n    // returns the template if it is loaded, or null if it is not loaded\n    // but will call the callback when it is loaded\n    getTemplate(url: any, callback: any) {\n\n        const templateFromCache = this.templateCache[url];\n        if (templateFromCache) {\n            return templateFromCache;\n        }\n\n        let callbackList = this.waitingCallbacks[url];\n        const that = this;\n        if (!callbackList) {\n            // first time this was called, so need a new list for callbacks\n            callbackList = [];\n            this.waitingCallbacks[url] = callbackList;\n            // and also need to do the http request\n            const client = new XMLHttpRequest();\n            client.onload = function() {\n                that.handleHttpResult(this, url);\n            };\n            client.open(\"GET\", url);\n            client.send();\n        }\n\n        // add this callback\n        if (callback) {\n            callbackList.push(callback);\n        }\n\n        // caller needs to wait for template to load, so return null\n        return null;\n    }\n\n    handleHttpResult(httpResult: any, url: any) {\n\n        if (httpResult.status !== 200 || httpResult.response === null) {\n            console.warn(`AG Grid: Unable to get template error ${httpResult.status} - ${url}`);\n            return;\n        }\n\n        // response success, so process it\n        // in IE9 the response is in - responseText\n        this.templateCache[url] = httpResult.response || httpResult.responseText;\n\n        // inform all listeners that this is now in the cache\n        const callbacks = this.waitingCallbacks[url];\n        for (let i = 0; i < callbacks.length; i++) {\n            const callback = callbacks[i];\n            // we could pass the callback the response, however we know the client of this code\n            // is the cell renderer, and it passes the 'cellRefresh' method in as the callback\n            // which doesn't take any parameters.\n            callback();\n        }\n    }\n}\n","import { GridOptionsWrapper } from \"./gridOptionsWrapper\";\nimport { Bean } from \"./context/context\";\nimport { Qualifier } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\n\n@Bean('loggerFactory')\nexport class LoggerFactory extends BeanStub {\n\n    private logging: boolean;\n\n    private setBeans(@Qualifier('gridOptionsWrapper') gridOptionsWrapper: GridOptionsWrapper): void {\n        this.logging = gridOptionsWrapper.isDebug();\n    }\n\n    public create(name: string) {\n        return new Logger(name, this.isLogging.bind(this));\n    }\n\n    public isLogging(): boolean {\n        return this.logging;\n    }\n}\n\nexport class Logger {\n\n    private isLoggingFunc: () => boolean | undefined;\n    private name: string;\n\n    constructor(name: string, isLoggingFunc: () => boolean | undefined) {\n        this.name = name;\n        this.isLoggingFunc = isLoggingFunc;\n    }\n\n    public isLogging(): boolean | undefined {\n        return this.isLoggingFunc();\n    }\n\n    public log(message: string) {\n        if (this.isLoggingFunc()) {\n            // tslint:disable-next-line\n            console.log('AG Grid.' + this.name + ': ' + message);\n        }\n    }\n\n}\n","import { Autowired, PostConstruct } from \"../context/context\";\nimport { GridApi } from \"../gridApi\";\nimport { FocusService } from \"../focusService\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { ModuleRegistry } from \"../modules/moduleRegistry\";\nimport { ModuleNames } from \"../modules/moduleNames\";\nimport { LayoutFeature, LayoutView } from \"../styling/layoutFeature\";\nimport { Events } from \"../eventKeys\";\nimport { ResizeObserverService } from \"../misc/resizeObserverService\";\nimport { GridSizeChangedEvent } from \"../events\";\nimport { ColumnApi } from \"../columns/columnApi\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { MouseEventService } from \"../gridBodyComp/mouseEventService\";\nimport { last } from \"../utils/array\";\n\nexport interface IGridComp extends LayoutView {\n    setRtlClass(cssClass: string): void;\n    destroyGridUi(): void;\n    forceFocusOutOfContainer(up: boolean): void;\n    addOrRemoveKeyboardFocusClass(value: boolean): void;\n    getFocusableContainers(): HTMLElement[];\n    setCursor(value: string | null): void;\n    setUserSelect(value: string | null): void;\n}\n\nexport class GridCtrl extends BeanStub {\n\n    @Autowired('columnApi') private readonly columnApi: ColumnApi;\n    @Autowired('gridApi') private readonly gridApi: GridApi;\n    @Autowired('focusService') protected readonly focusService: FocusService;\n    @Autowired('resizeObserverService') private readonly resizeObserverService: ResizeObserverService;\n    @Autowired('columnModel') private readonly columnModel: ColumnModel;\n    @Autowired('ctrlsService') private readonly ctrlsService: CtrlsService;\n    @Autowired('mouseEventService') private readonly mouseEventService: MouseEventService;\n\n    private view: IGridComp;\n    private eGridHostDiv: HTMLElement;\n    private eGui: HTMLElement;\n\n    public setComp(view: IGridComp, eGridDiv: HTMLElement, eGui: HTMLElement): void {\n        this.view = view;\n        this.eGridHostDiv = eGridDiv;\n        this.eGui = eGui;\n\n        this.mouseEventService.stampTopLevelGridCompWithGridInstance(eGridDiv);\n\n        this.createManagedBean(new LayoutFeature(this.view));\n\n        // important to set rtl before doLayout, as setting the RTL class impacts the scroll position,\n        // which doLayout indirectly depends on\n        this.addRtlSupport();\n\n        this.addManagedListener(this, Events.EVENT_KEYBOARD_FOCUS, () => {\n            this.view.addOrRemoveKeyboardFocusClass(true);\n        });\n\n        this.addManagedListener(this, Events.EVENT_MOUSE_FOCUS, () => {\n            this.view.addOrRemoveKeyboardFocusClass(false);\n        });\n\n        const unsubscribeFromResize = this.resizeObserverService.observeResize(\n            this.eGridHostDiv, this.onGridSizeChanged.bind(this));\n        this.addDestroyFunc(() => unsubscribeFromResize());\n\n        this.ctrlsService.registerGridCtrl(this);\n    }\n\n    public isDetailGrid(): boolean {\n        const el = this.focusService.findTabbableParent(this.getGui());\n\n        return el?.getAttribute('row-id')?.startsWith('detail') || false;\n    }\n\n    public showDropZones(): boolean {\n        return ModuleRegistry.isRegistered(ModuleNames.RowGroupingModule);\n    }\n\n    public showSideBar(): boolean {\n        return ModuleRegistry.isRegistered(ModuleNames.SideBarModule);\n    }\n\n    public showStatusBar(): boolean {\n        return ModuleRegistry.isRegistered(ModuleNames.StatusBarModule);\n    }\n\n    public showWatermark(): boolean {\n        return ModuleRegistry.isRegistered(ModuleNames.EnterpriseCoreModule);\n    }\n\n    private onGridSizeChanged(): void {\n        const event: GridSizeChangedEvent = {\n            type: Events.EVENT_GRID_SIZE_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            clientWidth: this.eGridHostDiv.clientWidth,\n            clientHeight: this.eGridHostDiv.clientHeight\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private addRtlSupport(): void {\n        const cssClass = this.gridOptionsWrapper.isEnableRtl() ? 'ag-rtl' : 'ag-ltr';\n        this.view.setRtlClass(cssClass);\n    }\n\n    public destroyGridUi(): void {\n        this.view.destroyGridUi();\n    }\n\n    public getGui(): HTMLElement {\n        return this.eGui;\n    }\n\n    public setResizeCursor(on: boolean): void {\n        this.view.setCursor(on ? 'ew-resize' : null);\n    }\n\n    public disableUserSelect(on: boolean): void {\n        this.view.setUserSelect(on ? 'none' : null);\n    }\n\n    public focusNextInnerContainer(backwards: boolean): boolean {\n        const eDocument = this.gridOptionsWrapper.getDocument();\n        const focusableContainers = this.view.getFocusableContainers();\n        const idxWithFocus = focusableContainers.findIndex(container => container.contains(eDocument.activeElement));\n        const nextIdx = idxWithFocus + (backwards ? -1 : 1);\n\n        if (nextIdx <= 0 || nextIdx >= focusableContainers.length) {\n            return false;\n        }\n\n        return this.focusService.focusInto(focusableContainers[nextIdx]);\n    }\n\n    public focusInnerElement(fromBottom?: boolean) {\n        const focusableContainers = this.view.getFocusableContainers();\n\n        if (fromBottom) {\n            if (focusableContainers.length > 1) {\n                return this.focusService.focusInto(last(focusableContainers), true);\n            }\n\n            const lastColumn = last(this.columnModel.getAllDisplayedColumns());\n            if (this.focusService.focusGridView(lastColumn, true)) { return true; }\n        }\n\n        return this.focusService.focusFirstHeader();\n    }\n\n    public forceFocusOutOfContainer(up = false): void {\n        this.view.forceFocusOutOfContainer(up);\n    }\n\n}","import { GridBodyComp } from \"../gridBodyComp/gridBodyComp\";\nimport { Logger, LoggerFactory } from \"../logger\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { Component } from \"../widgets/component\";\nimport { ISideBar } from \"../interfaces/iSideBar\";\nimport { RefSelector } from \"../widgets/componentAnnotations\";\nimport { isVisible } from \"../utils/dom\";\nimport { FocusService } from \"../focusService\";\nimport { GridCtrl, IGridComp } from \"./gridCtrl\";\nimport { LayoutCssClasses, UpdateLayoutClassesParams } from \"../styling/layoutFeature\";\nimport { TabGuardComp } from \"../widgets/tabGuardComp\";\n\nexport class GridComp extends TabGuardComp {\n\n    @Autowired('loggerFactory') private readonly loggerFactory: LoggerFactory;\n\n    @RefSelector('gridBody') private readonly gridBodyComp: GridBodyComp;\n    @RefSelector('sideBar') private readonly sideBarComp: ISideBar & Component;\n    @RefSelector('rootWrapperBody') private readonly eRootWrapperBody: HTMLElement;\n\n    private logger: Logger;\n    private eGridDiv: HTMLElement;\n    private ctrl: GridCtrl;\n\n    constructor(eGridDiv: HTMLElement) {\n        super(undefined);\n        this.eGridDiv = eGridDiv;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.logger = this.loggerFactory.create('GridComp');\n\n        const compProxy: IGridComp = {\n            destroyGridUi:\n                () => this.destroyBean(this),\n            setRtlClass:\n                (cssClass: string) => this.addCssClass(cssClass),\n            addOrRemoveKeyboardFocusClass:\n                (addOrRemove: boolean) => this.addOrRemoveCssClass(FocusService.AG_KEYBOARD_FOCUS, addOrRemove),\n            forceFocusOutOfContainer: this.forceFocusOutOfContainer.bind(this),\n            updateLayoutClasses: this.updateLayoutClasses.bind(this),\n            getFocusableContainers: this.getFocusableContainers.bind(this),\n            setUserSelect: value => {\n                this.getGui().style.userSelect = value != null ? value : '';\n                this.getGui().style.webkitUserSelect = value != null ? value : '';\n            },\n            setCursor: value => {\n                this.getGui().style.cursor = value != null ? value : '';\n            }\n        };\n\n        this.ctrl = this.createManagedBean(new GridCtrl());\n\n        const template = this.createTemplate();\n        this.setTemplate(template);\n\n        this.ctrl.setComp(compProxy, this.eGridDiv, this.getGui());\n\n        this.insertGridIntoDom();\n\n        this.initialiseTabGuard({\n            // we want to override the default behaviour to do nothing for onTabKeyDown\n            onTabKeyDown: () => undefined,\n            focusInnerElement: fromBottom => this.ctrl.focusInnerElement(fromBottom)\n        });\n    }\n\n    private insertGridIntoDom(): void {\n        const eGui = this.getGui();\n        this.eGridDiv.appendChild(eGui);\n        this.addDestroyFunc(() => {\n            this.eGridDiv.removeChild(eGui);\n            this.logger.log('Grid removed from DOM');\n        });\n    }\n\n    private updateLayoutClasses(cssClass: string, params: UpdateLayoutClassesParams): void {\n        const eRootWrapperBodyClassList = this.eRootWrapperBody.classList;\n        eRootWrapperBodyClassList.toggle(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n        eRootWrapperBodyClassList.toggle(LayoutCssClasses.NORMAL, params.normal);\n        eRootWrapperBodyClassList.toggle(LayoutCssClasses.PRINT, params.print);\n\n        this.addOrRemoveCssClass(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);\n        this.addOrRemoveCssClass(LayoutCssClasses.NORMAL, params.normal);\n        this.addOrRemoveCssClass(LayoutCssClasses.PRINT, params.print);\n    }\n\n    private createTemplate(): string {\n        const dropZones = this.ctrl.showDropZones() ? '<ag-grid-header-drop-zones></ag-grid-header-drop-zones>' : '';\n        const sideBar = this.ctrl.showSideBar() ? '<ag-side-bar ref=\"sideBar\"></ag-side-bar>' : '';\n        const statusBar = this.ctrl.showStatusBar() ? '<ag-status-bar ref=\"statusBar\"></ag-status-bar>' : '';\n        const watermark = this.ctrl.showWatermark() ? '<ag-watermark></ag-watermark>' : '';\n\n        const template = /* html */\n            `<div class=\"ag-root-wrapper\">\n                ${dropZones}\n                <div class=\"ag-root-wrapper-body\" ref=\"rootWrapperBody\">\n                    <ag-grid-body ref=\"gridBody\"></ag-grid-body>\n                    ${sideBar}\n                </div>\n                ${statusBar}\n                <ag-pagination></ag-pagination>\n                ${watermark}\n            </div>`;\n\n        return template;\n    }\n\n    public getFocusableElement(): HTMLElement {\n        return this.eRootWrapperBody;\n    }\n\n    protected getFocusableContainers(): HTMLElement[] {\n        const focusableContainers = [\n            this.gridBodyComp.getGui()\n        ];\n\n        if (this.sideBarComp) {\n            focusableContainers.push(\n                this.sideBarComp.getGui()\n            );\n        }\n\n        return focusableContainers.filter(el => isVisible(el));\n    }\n\n}\n","import { Autowired, Bean } from \"./context/context\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { Column } from \"./entities/column\";\nimport { Constants } from \"./constants/constants\";\nimport { ColumnApi } from \"./columns/columnApi\";\nimport { ColumnModel } from \"./columns/columnModel\";\nimport { ColumnEventType, Events, SortChangedEvent } from \"./events\";\nimport { GridApi } from \"./gridApi\";\nimport { SortOption } from \"./rowNodes/rowNodeSorter\";\n\nexport interface SortModelItem {\n    /** Column Id to apply the sort to. */\n    colId: string;\n    /** Sort direction */\n    sort: 'asc' | 'desc';\n}\n\n@Bean('sortController')\nexport class SortController extends BeanStub {\n\n    private static DEFAULT_SORTING_ORDER = [Constants.SORT_ASC, Constants.SORT_DESC, null];\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    public progressSort(column: Column, multiSort: boolean, source: ColumnEventType): void {\n        const nextDirection = this.getNextSortDirection(column);\n        this.setSortForColumn(column, nextDirection, multiSort, source);\n    }\n\n    public setSortForColumn(column: Column, sort: 'asc' | 'desc' | null, multiSort: boolean, source: ColumnEventType): void {\n        // auto correct - if sort not legal value, then set it to 'no sort' (which is null)\n        if (sort !== Constants.SORT_ASC && sort !== Constants.SORT_DESC) {\n            sort = null;\n        }\n\n        // update sort on current col\n        column.setSort(sort, source);\n\n        const doingMultiSort = (multiSort || this.gridOptionsWrapper.isAlwaysMultiSort()) && !this.gridOptionsWrapper.isSuppressMultiSort();\n\n        // clear sort on all columns except this one, and update the icons\n        if (!doingMultiSort) {\n            this.clearSortBarThisColumn(column, source);\n        }\n\n        // sortIndex used for knowing order of cols when multi-col sort\n        this.updateSortIndex(column);\n\n        this.dispatchSortChangedEvents(source);\n    }\n\n    private updateSortIndex(lastColToChange: Column) {\n        // update sortIndex on all sorting cols\n        const allSortedCols = this.getColumnsWithSortingOrdered();\n        let sortIndex = 0;\n        allSortedCols.forEach(col => {\n            if (col !== lastColToChange) {\n                col.setSortIndex(sortIndex);\n                sortIndex++;\n            }\n        });\n        // last col to change always gets the last sort index, it's added to the end\n        if (lastColToChange.getSort()) {\n            lastColToChange.setSortIndex(sortIndex);\n        }\n\n        // clear sort index on all cols not sorting\n        const allCols = this.columnModel.getPrimaryAndSecondaryAndAutoColumns();\n        allCols.filter(col => col.getSort() == null).forEach(col => col.setSortIndex());\n    }\n\n    // gets called by API, so if data changes, use can call this, which will end up\n    // working out the sort order again of the rows.\n    public onSortChanged(source: string): void {\n        this.dispatchSortChangedEvents(source);\n    }\n\n    public isSortActive(): boolean {\n        // pull out all the columns that have sorting set\n        const allCols = this.columnModel.getPrimaryAndSecondaryAndAutoColumns();\n        const sortedCols = allCols.filter(column => !!column.getSort());\n        return sortedCols && sortedCols.length > 0;\n    }\n\n    public dispatchSortChangedEvents(source: string): void {\n        const event: SortChangedEvent = {\n            type: Events.EVENT_SORT_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            source\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private clearSortBarThisColumn(columnToSkip: Column, source: ColumnEventType): void {\n        this.columnModel.getPrimaryAndSecondaryAndAutoColumns().forEach((columnToClear: Column) => {\n            // Do not clear if either holding shift, or if column in question was clicked\n            if (columnToClear !== columnToSkip) {\n                // setting to 'undefined' as null means 'none' rather than cleared, otherwise issue will arise\n                // if sort order is: ['desc', null , 'asc'], as it will start at null rather than 'desc'.\n                columnToClear.setSort(undefined, source);\n            }\n        });\n    }\n\n    private getNextSortDirection(column: Column): 'asc' | 'desc' | null {\n        let sortingOrder: ('asc' | 'desc' | null)[] | null | undefined;\n\n        if (column.getColDef().sortingOrder) {\n            sortingOrder = column.getColDef().sortingOrder;\n        } else if (this.gridOptionsWrapper.getSortingOrder()) {\n            sortingOrder = this.gridOptionsWrapper.getSortingOrder();\n        } else {\n            sortingOrder = SortController.DEFAULT_SORTING_ORDER;\n        }\n\n        if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {\n            console.warn(`AG Grid: sortingOrder must be an array with at least one element, currently it\\'s ${sortingOrder}`);\n            return null;\n        }\n\n        const currentIndex = sortingOrder.indexOf(column.getSort()!);\n        const notInArray = currentIndex < 0;\n        const lastItemInArray = currentIndex == sortingOrder.length - 1;\n        let result: 'asc' | 'desc' | null;\n\n        if (notInArray || lastItemInArray) {\n            result = sortingOrder[0];\n        } else {\n            result = sortingOrder[currentIndex + 1];\n        }\n\n        // verify the sort type exists, as the user could provide the sortingOrder, need to make sure it's valid\n        if (SortController.DEFAULT_SORTING_ORDER.indexOf(result) < 0) {\n            console.warn('AG Grid: invalid sort type ' + result);\n            return null;\n        }\n\n        return result;\n    }\n\n    public getColumnsWithSortingOrdered(): Column[] {\n        // pull out all the columns that have sorting set\n        const allColumnsIncludingAuto = this.columnModel.getPrimaryAndSecondaryAndAutoColumns();\n        const columnsWithSorting = allColumnsIncludingAuto.filter(column => !!column.getSort());\n\n        // when both cols are missing sortIndex, we use the position of the col in all cols list.\n        // this means if colDefs only have sort, but no sortIndex, we deterministically pick which\n        // cols is sorted by first.\n        const allColsIndexes: { [id: string]: number } = {};\n        allColumnsIncludingAuto.forEach((col: Column, index: number) => allColsIndexes[col.getId()] = index);\n\n        // put the columns in order of which one got sorted first\n        columnsWithSorting.sort((a: Column, b: Column) => {\n            const iA = a.getSortIndex();\n            const iB = b.getSortIndex();\n            if (iA != null && iB != null) {\n                return iA - iB; // both present, normal comparison\n            } else if (iA == null && iB == null) {\n                // both missing, compare using column positions\n                const posA = allColsIndexes[a.getId()];\n                const posB = allColsIndexes[b.getId()];\n                return posA > posB ? 1 : -1;\n            } else if (iB == null) {\n                return -1; // iB missing\n            } else {\n                return 1; // iA missing\n            }\n        });\n\n        return columnsWithSorting;\n    }\n\n    // used by server side row models, to sent sort to server\n    public getSortModel(): SortModelItem[] {\n        return this.getColumnsWithSortingOrdered().map(column => ({\n            sort: column.getSort()!,\n            colId: column.getId()\n        }));\n    }\n\n    public getSortOptions(): SortOption[] {\n        return this.getColumnsWithSortingOrdered().map(column => ({\n            sort: column.getSort()!,\n            column\n        }));\n    }\n}\n","import { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { Events, ColumnHoverChangedEvent } from \"../events\";\nimport { Column } from \"../entities/column\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { ColumnApi } from \"../columns/columnApi\";\nimport { GridApi } from \"../gridApi\";\n\n@Bean('columnHoverService')\nexport class ColumnHoverService extends BeanStub {\n\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    private selectedColumns: Column[] | null;\n\n    public setMouseOver(columns: Column[]): void {\n        this.selectedColumns = columns;\n        const event: ColumnHoverChangedEvent = {\n            type: Events.EVENT_COLUMN_HOVER_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public clearMouseOver(): void {\n        this.selectedColumns = null;\n        const event: ColumnHoverChangedEvent = {\n            type: Events.EVENT_COLUMN_HOVER_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    public isHovered(column: Column): boolean {\n        return !!this.selectedColumns && this.selectedColumns.indexOf(column) >= 0;\n    }\n}\n","import { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { GridBodyCtrl } from \"../gridBodyComp/gridBodyCtrl\";\nimport { CtrlsService } from \"../ctrlsService\";\n\n@Bean('columnAnimationService')\nexport class ColumnAnimationService extends BeanStub {\n\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private gridBodyCtrl: GridBodyCtrl;\n\n    private executeNextFuncs: Function[] = [];\n    private executeLaterFuncs: Function[] = [];\n\n    private active = false;\n\n    private animationThreadCount = 0;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.ctrlsService.whenReady(p => this.gridBodyCtrl = p.gridBodyCtrl);\n    }\n\n    public isActive(): boolean {\n        return this.active;\n    }\n\n    public start(): void {\n        if (this.active) { return; }\n\n        if (this.gridOptionsWrapper.isSuppressColumnMoveAnimation()) { return; }\n\n        // if doing RTL, we don't animate open / close as due to how the pixels are inverted,\n        // the animation moves all the row the the right rather than to the left (ie it's the static\n        // columns that actually get their coordinates updated)\n        if (this.gridOptionsWrapper.isEnableRtl()) { return; }\n\n        this.ensureAnimationCssClassPresent();\n\n        this.active = true;\n    }\n\n    public finish(): void {\n        if (!this.active) { return; }\n        this.flush();\n        this.active = false;\n    }\n\n    public executeNextVMTurn(func: Function): void {\n        if (this.active) {\n            this.executeNextFuncs.push(func);\n        } else {\n            func();\n        }\n    }\n\n    public executeLaterVMTurn(func: Function): void {\n        if (this.active) {\n            this.executeLaterFuncs.push(func);\n        } else {\n            func();\n        }\n    }\n\n    private ensureAnimationCssClassPresent(): void {\n        // up the count, so we can tell if someone else has updated the count\n        // by the time the 'wait' func executes\n        this.animationThreadCount++;\n        const animationThreadCountCopy = this.animationThreadCount;\n        this.gridBodyCtrl.setColumnMovingCss(true);\n\n        this.executeLaterFuncs.push(() => {\n            // only remove the class if this thread was the last one to update it\n            if (this.animationThreadCount === animationThreadCountCopy) {\n                this.gridBodyCtrl.setColumnMovingCss(false);\n            }\n        });\n    }\n\n    public flush(): void {\n\n        const nowFuncs = this.executeNextFuncs;\n        this.executeNextFuncs = [];\n\n        const waitFuncs = this.executeLaterFuncs;\n        this.executeLaterFuncs = [];\n\n        if (nowFuncs.length === 0 && waitFuncs.length === 0) { return; }\n\n        window.setTimeout(() => nowFuncs.forEach(func => func()), 0);\n        window.setTimeout(() => waitFuncs.forEach(func => func()), 300);\n    }\n}\n","import { Autowired, Bean } from \"../context/context\";\nimport { Column } from \"../entities/column\";\nimport { ColDef } from \"../entities/colDef\";\nimport { ColumnModel } from \"./columnModel\";\nimport { ColumnFactory } from \"./columnFactory\";\nimport { Constants } from \"../constants/constants\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { mergeDeep } from \"../utils/object\";\nimport { missing } from \"../utils/generic\";\n\n@Bean('autoGroupColService')\nexport class AutoGroupColService extends BeanStub {\n\n    public static GROUP_AUTO_COLUMN_BUNDLE_ID = Constants.GROUP_AUTO_COLUMN_ID;\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('columnFactory') private columnFactory: ColumnFactory;\n\n    public createAutoGroupColumns(existingCols: Column[], rowGroupColumns: Column[]): Column[] {\n        const groupAutoColumns: Column[] = [];\n\n        const doingTreeData = this.gridOptionsWrapper.isTreeData();\n        let doingMultiAutoColumn = this.gridOptionsWrapper.isGroupMultiAutoColumn();\n\n        if (doingTreeData && doingMultiAutoColumn) {\n            console.warn('AG Grid: you cannot mix groupMultiAutoColumn with treeData, only one column can be used to display groups when doing tree data');\n            doingMultiAutoColumn = false;\n        }\n\n        // if doing groupMultiAutoColumn, then we call the method multiple times, once\n        // for each column we are grouping by\n        if (doingMultiAutoColumn) {\n            rowGroupColumns.forEach((rowGroupCol: Column, index: number) => {\n                groupAutoColumns.push(this.createOneAutoGroupColumn(existingCols, rowGroupCol, index));\n            });\n        } else {\n            groupAutoColumns.push(this.createOneAutoGroupColumn(existingCols));\n        }\n\n        return groupAutoColumns;\n    }\n\n    // rowGroupCol and index are missing if groupMultiAutoColumn=false\n    private createOneAutoGroupColumn(existingCols: Column[], rowGroupCol?: Column, index?: number): Column {\n        // if one provided by user, use it, otherwise create one\n        let defaultAutoColDef: ColDef = this.generateDefaultColDef(rowGroupCol);\n        // if doing multi, set the field\n        let colId: string;\n        if (rowGroupCol) {\n            colId = `${Constants.GROUP_AUTO_COLUMN_ID}-${rowGroupCol.getId()}`;\n        } else {\n            colId = AutoGroupColService.GROUP_AUTO_COLUMN_BUNDLE_ID;\n        }\n\n        const userAutoColDef = this.gridOptionsWrapper.getAutoGroupColumnDef();\n        mergeDeep(defaultAutoColDef, userAutoColDef);\n\n        defaultAutoColDef = this.columnFactory.mergeColDefs(defaultAutoColDef);\n\n        defaultAutoColDef.colId = colId;\n\n        // For tree data the filter is always allowed\n        if (!this.gridOptionsWrapper.isTreeData()) {\n            // we would only allow filter if the user has provided field or value getter. otherwise the filter\n            // would not be able to work.\n            const noFieldOrValueGetter = missing(defaultAutoColDef.field) && missing(defaultAutoColDef.valueGetter) && missing(defaultAutoColDef.filterValueGetter);\n            if (noFieldOrValueGetter) {\n                defaultAutoColDef.filter = false;\n            }\n        }\n\n        // if showing many cols, we don't want to show more than one with a checkbox for selection\n        if (index && index > 0) {\n            defaultAutoColDef.headerCheckboxSelection = false;\n        }\n\n        const existingCol = existingCols.find( col => col.getId()==colId );\n\n        if (existingCol) {\n            existingCol.setColDef(defaultAutoColDef, null);\n            this.columnFactory.applyColumnState(existingCol, defaultAutoColDef);\n            return existingCol;\n        }\n\n        const newCol = new Column(defaultAutoColDef, null, colId, true);\n        this.context.createBean(newCol);\n        return newCol;\n    }\n\n    private generateDefaultColDef(rowGroupCol?: Column): ColDef {\n        const userDef = this.gridOptionsWrapper.getAutoGroupColumnDef();\n        const localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();\n\n        const res: ColDef = {\n            headerName: localeTextFunc('group', 'Group')\n        };\n\n        const userHasProvidedGroupCellRenderer =\n            userDef &&\n            (userDef.cellRenderer || userDef.cellRendererFramework || userDef.cellRendererSelector);\n\n        // only add the default group cell renderer if user hasn't provided one\n        if (!userHasProvidedGroupCellRenderer) {\n            res.cellRenderer = 'agGroupCellRenderer';\n        }\n\n        // we never allow moving the group column\n        // defaultAutoColDef.suppressMovable = true;\n\n        if (rowGroupCol) {\n            const colDef = rowGroupCol.getColDef();\n            Object.assign(res, {\n                // cellRendererParams.groupKey: colDefToCopy.field;\n                headerName: this.columnModel.getDisplayNameForColumn(rowGroupCol, 'header'),\n                headerValueGetter: colDef.headerValueGetter\n            });\n\n            if (colDef.cellRenderer || colDef.cellRendererFramework) {\n                Object.assign(res, {\n                    cellRendererParams: {\n                        innerRenderer: colDef.cellRenderer,\n                        innerRendererFramework: colDef.cellRendererFramework,\n                        innerRendererParams: colDef.cellRendererParams\n                    }\n                });\n            }\n            res.showRowGroup = rowGroupCol.getColId();\n        } else {\n            res.showRowGroup = true;\n        }\n\n        return res;\n    }\n\n}\n","import { BeanStub } from \"../context/beanStub\";\nimport { Events } from \"../events\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { RowContainerCtrl } from \"../gridBodyComp/rowContainer/rowContainerCtrl\";\n\n@Bean('paginationAutoPageSizeService')\nexport class PaginationAutoPageSizeService extends BeanStub {\n\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private centerRowContainerCon: RowContainerCtrl;\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.ctrlsService.whenReady(p => {\n            this.centerRowContainerCon = p.centerRowContainerCtrl;\n\n            this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.onBodyHeightChanged.bind(this));\n            this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));\n            this.checkPageSize();\n        });\n    }\n\n    private notActive(): boolean {\n        return !this.gridOptionsWrapper.isPaginationAutoPageSize();\n    }\n\n    private onScrollVisibilityChanged(): void {\n        this.checkPageSize();\n    }\n\n    private onBodyHeightChanged(): void {\n        this.checkPageSize();\n    }\n\n    private checkPageSize(): void {\n        if (this.notActive()) {\n            return;\n        }\n\n        const rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();\n        const bodyHeight = this.centerRowContainerCon.getViewportSizeFeature().getBodyHeight();\n\n        if (bodyHeight > 0) {\n            const newPageSize = Math.floor(bodyHeight / rowHeight);\n            this.gridOptionsWrapper.setProperty('paginationPageSize', newPageSize);\n        }\n    }\n}\n","import { Bean, PostConstruct } from \"../context/context\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { BeanStub } from \"../context/beanStub\";\n\n@Bean('valueCache')\nexport class ValueCache extends BeanStub {\n\n    private cacheVersion = 0;\n    private active: boolean;\n    private neverExpires: boolean;\n\n    @PostConstruct\n    public init(): void {\n        this.active = this.gridOptionsWrapper.isValueCache();\n        this.neverExpires = this.gridOptionsWrapper.isValueCacheNeverExpires();\n    }\n\n    public onDataChanged(): void {\n        if (this.neverExpires) { return; }\n\n        this.expire();\n    }\n\n    public expire(): void {\n        this.cacheVersion++;\n    }\n\n    public setValue(rowNode: RowNode, colId: string, value: any): any {\n        if (this.active) {\n            if (rowNode.__cacheVersion !== this.cacheVersion) {\n                rowNode.__cacheVersion = this.cacheVersion;\n                rowNode.__cacheData = {};\n            }\n\n            rowNode.__cacheData[colId] = value;\n        }\n    }\n\n    public getValue(rowNode: RowNode, colId: string): any {\n        if (!this.active || rowNode.__cacheVersion !== this.cacheVersion) {\n            return undefined;\n        }\n\n        return rowNode.__cacheData[colId];\n    }\n}\n","import { BeanStub } from \"../context/beanStub\";\nimport { Column } from \"../entities/column\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { ChangedPath } from \"../utils/changedPath\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { RowRenderer } from \"../rendering/rowRenderer\";\nimport { Constants } from \"../constants/constants\";\nimport { CellValueChangedEvent, Events } from \"../events\";\nimport { IClientSideRowModel } from \"../interfaces/iClientSideRowModel\";\n\n@Bean('changeDetectionService')\nexport class ChangeDetectionService extends BeanStub {\n\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n\n    private clientSideRowModel: IClientSideRowModel;\n\n    @PostConstruct\n    private init(): void {\n        if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            this.clientSideRowModel = this.rowModel as IClientSideRowModel;\n        }\n\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged.bind(this));\n    }\n\n    private onCellValueChanged(event: CellValueChangedEvent): void {\n\n        // Clipboard service manages its own change detection, so no need to do it here.\n        // The clipboard manages its own as otherwise this would happen once for every cell\n        // that got updated as part of a paste operation, so e.g. if 100 cells in a paste operation,\n        // this doChangeDetection would get called 100 times (once for each cell), instead clipboard\n        // service executes the logic we have here once (in essence batching up all cell changes\n        // into one change detection).\n        if (event.source === Constants.SOURCE_PASTE) { return; }\n\n        this.doChangeDetection(event.node, event.column);\n    }\n\n    private doChangeDetection(rowNode: RowNode, column: Column): void {\n        if (this.gridOptionsWrapper.isSuppressChangeDetection()) { return; }\n\n        // step 1 of change detection is to update the aggregated values\n        if (this.clientSideRowModel && !rowNode.isRowPinned()) {\n            const onlyChangedColumns = this.gridOptionsWrapper.isAggregateOnlyChangedColumns();\n            const changedPath = new ChangedPath(onlyChangedColumns, this.clientSideRowModel.getRootNode());\n            changedPath.addParentNode(rowNode.parent, [column]);\n            this.clientSideRowModel.doAggregate(changedPath);\n        }\n\n        // step 2 of change detection is to refresh the cells\n        this.rowRenderer.refreshCells();\n    }\n}\n","import { Autowired, Bean } from \"../../context/context\";\nimport { IComponent } from \"../../interfaces/iComponent\";\nimport { ComponentMetadata, ComponentMetadataProvider } from \"./componentMetadataProvider\";\nimport { ICellRendererComp, ICellRendererParams } from \"../../rendering/cellRenderers/iCellRenderer\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { loadTemplate } from \"../../utils/dom\";\n\n@Bean(\"agComponentUtils\")\nexport class AgComponentUtils extends BeanStub {\n\n    @Autowired(\"componentMetadataProvider\")\n    private componentMetadataProvider: ComponentMetadataProvider;\n\n    public adaptFunction(propertyName: string, jsCompFunc: any): any {\n        const metadata: ComponentMetadata = this.componentMetadataProvider.retrieve(propertyName);\n        if (metadata && metadata.functionAdapter) {\n            return metadata.functionAdapter(jsCompFunc);\n        }\n        return null;\n    }\n\n    public adaptCellRendererFunction(callback: any): { new(): IComponent<ICellRendererParams>; } {\n        class Adapter implements ICellRendererComp {\n\n            private eGui: HTMLElement;\n\n            refresh(params: ICellRendererParams): boolean {\n                return false;\n            }\n\n            getGui(): HTMLElement {\n                return this.eGui;\n            }\n\n            init?(params: ICellRendererParams): void {\n                const callbackResult: string | HTMLElement = callback(params);\n                const type = typeof callbackResult;\n                if (type === 'string' || type === 'number' || type === 'boolean') {\n                    this.eGui = loadTemplate('<span>' + callbackResult + '</span>');\n                    return;\n                }\n                if (callbackResult==null) {\n                    this.eGui = loadTemplate('<span></span>');\n                    return;\n                }\n                this.eGui =  callbackResult as HTMLElement;\n            }\n        }\n\n        return Adapter;\n    }\n\n    public doesImplementIComponent(candidate: any): boolean {\n        if (!candidate) { return false; }\n        return (candidate as any).prototype && 'getGui' in (candidate as any).prototype;\n    }\n}\n","import { Autowired, Bean, PostConstruct } from \"../../context/context\";\nimport { IComponent } from \"../../interfaces/iComponent\";\nimport { AgComponentUtils } from \"./agComponentUtils\";\nimport { BeanStub } from \"../../context/beanStub\";\n\nexport interface ComponentMetadata {\n    mandatoryMethodList: string[];\n    optionalMethodList: string[];\n    functionAdapter?: (callback: any) => { new(): IComponent<any> };\n}\n\n@Bean(\"componentMetadataProvider\")\nexport class ComponentMetadataProvider extends BeanStub {\n\n    private componentMetaData: { [key: string]: ComponentMetadata };\n\n    @Autowired(\"agComponentUtils\")\n    private agComponentUtils: AgComponentUtils;\n\n    @PostConstruct\n    public postConstruct() {\n        this.componentMetaData = {\n            dateComponent: {\n                mandatoryMethodList: ['getDate', 'setDate'],\n                optionalMethodList: ['afterGuiAttached', 'setInputPlaceholder', 'setInputAriaLabel']\n            },\n            detailCellRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh'],\n                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)\n            },\n            headerComponent: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh']\n            },\n            headerGroupComponent: {\n                mandatoryMethodList: [],\n                optionalMethodList: []\n            },\n            loadingCellRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: []\n            },\n            loadingOverlayComponent: {\n                mandatoryMethodList: [],\n                optionalMethodList: []\n            },\n            noRowsOverlayComponent: {\n                mandatoryMethodList: [],\n                optionalMethodList: []\n            },\n            floatingFilterComponent: {\n                mandatoryMethodList: ['onParentModelChanged'],\n                optionalMethodList: ['afterGuiAttached']\n            },\n            floatingFilterWrapperComponent: {\n                mandatoryMethodList: [],\n                optionalMethodList: []\n            },\n            cellRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh', 'afterGuiAttached'],\n                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)\n            },\n            cellEditor: {\n                mandatoryMethodList: ['getValue'],\n                optionalMethodList: ['isPopup', 'isCancelBeforeStart', 'isCancelAfterEnd', 'getPopupPosition', 'focusIn', 'focusOut', 'afterGuiAttached']\n            },\n            innerRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['afterGuiAttached'],\n                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)\n            },\n            fullWidthCellRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh', 'afterGuiAttached'],\n                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)\n            },\n            pinnedRowCellRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh', 'afterGuiAttached'],\n                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)\n            },\n            groupRowRenderer: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['afterGuiAttached'],\n                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)\n            },\n            filter: {\n                mandatoryMethodList: ['isFilterActive', 'doesFilterPass', 'getModel', 'setModel'],\n                optionalMethodList: ['afterGuiAttached', 'onNewRowsLoaded', 'getModelAsString', 'onFloatingFilterChanged']\n            },\n            filterComponent: {\n                mandatoryMethodList: ['isFilterActive', 'doesFilterPass', 'getModel', 'setModel'],\n                optionalMethodList: ['afterGuiAttached', 'onNewRowsLoaded', 'getModelAsString', 'onFloatingFilterChanged']\n            },\n            statusPanel: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['afterGuiAttached'],\n            },\n            toolPanel: {\n                mandatoryMethodList: [],\n                optionalMethodList: ['refresh', 'afterGuiAttached']\n            },\n            tooltipComponent: {\n                mandatoryMethodList: [],\n                optionalMethodList: []\n            }\n        };\n    }\n\n    public retrieve(name: string): ComponentMetadata {\n        return this.componentMetaData[name];\n    }\n}\n","import { Bean, Autowired } from './context/context';\nimport { BeanStub } from \"./context/beanStub\";\nimport { doOnce } from './utils/function';\n\nexport type SASS_PROPERTIES = 'headerHeight' | 'headerCellMinWidth' | 'listItemHeight' | 'rowHeight' | 'chartMenuPanelWidth';\n\ninterface HardCodedSize {\n    [key: string]: {\n        [key in SASS_PROPERTIES]?: number;\n    };\n}\n\nconst MAT_GRID_SIZE = 8;\nconst BASE_GRID_SIZE = 4;\nconst BALHAM_GRID_SIZE = 4;\nconst ALPINE_GRID_SIZE = 6;\n\nconst HARD_CODED_SIZES: HardCodedSize = {\n    // this item is required for custom themes\n    'ag-theme-custom': {\n        headerHeight: 25,\n        headerCellMinWidth: 24,\n        listItemHeight: BASE_GRID_SIZE * 5,\n        rowHeight: 25,\n        chartMenuPanelWidth: 220\n    },\n    'ag-theme-material': {\n        headerHeight: MAT_GRID_SIZE * 7,\n        headerCellMinWidth: 48,\n        listItemHeight: MAT_GRID_SIZE * 4,\n        rowHeight: MAT_GRID_SIZE * 6,\n        chartMenuPanelWidth: 240\n    },\n    'ag-theme-balham': {\n        headerHeight: BALHAM_GRID_SIZE * 8,\n        headerCellMinWidth: 24,\n        listItemHeight: BALHAM_GRID_SIZE * 6,\n        rowHeight: BALHAM_GRID_SIZE * 7,\n        chartMenuPanelWidth: 220\n    },\n    'ag-theme-alpine': {\n        headerHeight: ALPINE_GRID_SIZE * 8,\n        headerCellMinWidth: 36,\n        listItemHeight: ALPINE_GRID_SIZE * 4,\n        rowHeight: ALPINE_GRID_SIZE * 7,\n        chartMenuPanelWidth: 240\n    }\n};\n\n/**\n * this object contains a list of Sass variables and an array\n * of CSS styles required to get the correct value.\n * eg. $virtual-item-height requires a structure, so we can get its height.\n * <div class=\"ag-theme-balham\">\n *     <div class=\"ag-virtual-list-container\">\n *         <div class=\"ag-virtual-list-item\"></div>\n *     </div>\n * </div>\n */\nconst SASS_PROPERTY_BUILDER: { [key in SASS_PROPERTIES]: string[] } = {\n    headerHeight: ['ag-header-row'],\n    headerCellMinWidth: ['ag-header-cell'],\n    listItemHeight: ['ag-virtual-list-item'],\n    rowHeight: ['ag-row'],\n    chartMenuPanelWidth: ['ag-chart-docked-container']\n};\n\nconst CALCULATED_SIZES: HardCodedSize = {};\n\n@Bean('environment')\nexport class Environment extends BeanStub {\n\n    @Autowired('eGridDiv') private eGridDiv: HTMLElement;\n\n    public getSassVariable(theme: string, key: SASS_PROPERTIES): number | undefined {\n        const useTheme = 'ag-theme-' + (theme.match('material') ? 'material' : theme.match('balham') ? 'balham' : theme.match('alpine') ? 'alpine' : 'custom');\n        const defaultValue = HARD_CODED_SIZES[useTheme][key];\n        let calculatedValue = 0;\n\n        if (!CALCULATED_SIZES[theme]) {\n            CALCULATED_SIZES[theme] = {};\n        }\n\n        const size = CALCULATED_SIZES[theme][key];\n\n        if (size != null) {\n            return size;\n        }\n\n        if (SASS_PROPERTY_BUILDER[key]) {\n            const classList = SASS_PROPERTY_BUILDER[key];\n            const div = document.createElement('div');\n            div.classList.add(theme);\n            div.style.position = 'absolute';\n\n            const el: HTMLDivElement = classList.reduce((prevEl: HTMLDivElement, currentClass: string) => {\n                const currentDiv = document.createElement('div');\n                currentDiv.style.position = 'static';\n                currentDiv.classList.add(currentClass);\n                prevEl.appendChild(currentDiv);\n\n                return currentDiv;\n            }, div);\n\n            if (document.body) {\n                document.body.appendChild(div);\n                const sizeName = key.toLowerCase().indexOf('height') !== -1 ? 'height' : 'width';\n                calculatedValue = parseInt(window.getComputedStyle(el)[sizeName]!, 10);\n                document.body.removeChild(div);\n            }\n        }\n\n        CALCULATED_SIZES[theme][key] = calculatedValue || defaultValue;\n\n        return CALCULATED_SIZES[theme][key];\n    }\n\n    public isThemeDark(): boolean {\n        const { theme } = this.getTheme();\n        return !!theme && theme.indexOf('dark') >= 0;\n    }\n\n    public chartMenuPanelWidth() {\n        const theme = this.getTheme().themeFamily;\n        return this.getSassVariable(theme!, 'chartMenuPanelWidth');\n    }\n\n    public getTheme(): { theme?: string; el?: HTMLElement; themeFamily?: string; } {\n        const reg = /\\bag-(material|(?:theme-([\\w\\-]*)))\\b/;\n        let el: HTMLElement | undefined = this.eGridDiv;\n        let themeMatch: RegExpMatchArray | null = null;\n\n        while (el) {\n            themeMatch = reg.exec(el.className);\n            if (!themeMatch) {\n                el = el.parentElement || undefined;\n            } else {\n                break;\n            }\n        }\n\n        if (!themeMatch) { return {}; }\n\n        const theme = themeMatch[0];\n        const usingOldTheme = themeMatch[2] === undefined;\n\n        if (usingOldTheme) {\n            const newTheme = theme.replace('ag-', 'ag-theme-');\n            doOnce(() => console.warn(`AG Grid: As of v19 old theme are no longer provided. Please replace ${theme} with ${newTheme}.`), 'using-old-theme');\n        }\n\n        return { theme, el, themeFamily: theme.replace(/-dark$/, '') };\n    }\n}\n","import { BeanStub } from \"../context/beanStub\";\nimport { Autowired, Bean, PostConstruct, Qualifier } from \"../context/context\";\nimport { Events } from \"../eventKeys\";\nimport { getMaxDivHeight } from \"../utils/browser\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { Logger, LoggerFactory } from \"../logger\";\n\n/**\n * This class solves the 'max height' problem, where the user might want to show more data than\n * the max div height actually allows.\n */\n\n@Bean('rowContainerHeightService')\nexport class RowContainerHeightService extends BeanStub {\n\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    private maxDivHeight: number;\n\n    // if false, then stretching is not active, logic in this class is not used,\n    // the pixel height of the row container matches what is actually needed,\n    // no scaling applied.\n    private stretching: boolean;\n\n    private modelHeight: number | null; // how many pixels the model needs\n    private uiContainerHeight: number | null; // how many pixels we actually have\n    private pixelsToShave: number; // the number of pixels we need to shave\n\n    // the number of pixels we add to each rowTop - depends on the scroll position\n    private divStretchOffset: number;\n\n    // the scrollY position\n    private scrollY = 0;\n    // how tall the body is\n    private uiBodyHeight = 0;\n\n    // the max scroll position\n    private maxScrollY: number;\n\n    private logger: Logger;\n\n    public agWire(@Qualifier(\"loggerFactory\") loggerFactory: LoggerFactory) {\n        this.logger = loggerFactory.create(\"RowContainerHeightService\");\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.updateOffset.bind(this));\n        this.maxDivHeight = getMaxDivHeight();\n        this.logger.log('maxDivHeight = ' + this.maxDivHeight);\n    }\n\n    public isStretching(): boolean {\n        return this.stretching;\n    }\n\n    public getDivStretchOffset(): number {\n        return this.divStretchOffset;\n    }\n\n    public updateOffset(): void {\n        if (!this.stretching) { return; }\n\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const newScrollY = gridBodyCon.getScrollFeature().getVScrollPosition().top;\n        const newBodyHeight = this.getUiBodyHeight();\n\n        const atLeastOneChanged = newScrollY !== this.scrollY || newBodyHeight !== this.uiBodyHeight;\n        if (atLeastOneChanged) {\n            this.scrollY = newScrollY;\n            this.uiBodyHeight = newBodyHeight;\n            this.calculateOffset();\n        }\n    }\n\n    private calculateOffset(): void {\n        this.setUiContainerHeight(this.maxDivHeight);\n        this.pixelsToShave = this.modelHeight! - this.uiContainerHeight!;\n\n        this.maxScrollY = this.uiContainerHeight! - this.uiBodyHeight;\n        const scrollPercent = this.scrollY / this.maxScrollY;\n\n        const divStretchOffset = scrollPercent * this.pixelsToShave;\n\n        this.logger.log(`Div Stretch Offset = ${divStretchOffset} (${this.pixelsToShave} * ${scrollPercent})`);\n\n        this.setDivStretchOffset(divStretchOffset);\n    }\n\n    private setUiContainerHeight(height: number | null): void {\n        if (height !== this.uiContainerHeight) {\n            this.uiContainerHeight = height;\n            this.eventService.dispatchEvent({type: Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED});\n        }\n    }\n\n    private clearOffset(): void {\n        this.setUiContainerHeight(this.modelHeight);\n        this.pixelsToShave = 0;\n        this.setDivStretchOffset(0);\n    }\n\n    private setDivStretchOffset(newOffset: number): void {\n        // because we are talking pixels, no point in confusing things with half numbers\n        const newOffsetFloor = typeof newOffset === 'number' ? Math.floor(newOffset) : null;\n        if (this.divStretchOffset === newOffsetFloor) { return; }\n\n        this.divStretchOffset = newOffsetFloor!;\n        this.eventService.dispatchEvent({type: Events.EVENT_HEIGHT_SCALE_CHANGED});\n    }\n\n    public setModelHeight(modelHeight: number | null): void {\n        this.modelHeight = modelHeight;\n        this.stretching = modelHeight != null // null happens when in print layout\n                        && this.maxDivHeight > 0\n                        && modelHeight! > this.maxDivHeight;\n        if (this.stretching) {\n            this.calculateOffset();\n        } else {\n            this.clearOffset();\n        }\n    }\n\n    public getUiContainerHeight(): number | null {\n        return this.uiContainerHeight;\n    }\n\n    public getRealPixelPosition(modelPixel: number): number {\n        return modelPixel - this.divStretchOffset;\n    }\n\n    private getUiBodyHeight(): number {\n        const gridBodyCon = this.ctrlsService.getGridBodyCtrl();\n        const pos = gridBodyCon.getScrollFeature().getVScrollPosition();\n        return pos.bottom - pos.top;\n    }\n\n    public getScrollPositionForPixel(rowTop: number): number {\n        if (this.pixelsToShave <= 0) { return rowTop; }\n\n        const modelMaxScroll = this.modelHeight! - this.getUiBodyHeight();\n        const scrollPercent = rowTop / modelMaxScroll;\n        const scrollPixel = this.maxScrollY * scrollPercent;\n        return scrollPixel;\n    }\n}\n","import { RowNode } from \"../entities/rowNode\";\nimport { Bean, PostConstruct } from \"../context/context\";\nimport { IsRowSelectable } from \"../entities/gridOptions\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { exists } from \"../utils/generic\";\n\n@Bean('selectableService')\nexport class SelectableService extends BeanStub {\n\n    private groupSelectsChildren: boolean;\n    private isRowSelectableFunc?: IsRowSelectable;\n\n    @PostConstruct\n    public init(): void {\n        this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n        this.isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();\n    }\n\n    public updateSelectableAfterGrouping(rowNode: RowNode): void {\n        if (this.isRowSelectableFunc) {\n            const nextChildrenFunc = (node: RowNode) => node.childrenAfterGroup;\n            this.recurseDown(rowNode.childrenAfterGroup, nextChildrenFunc);\n        }\n    }\n\n    private recurseDown(children: RowNode[] | null, nextChildrenFunc: ((rowNode: RowNode) => RowNode[] | null)): void {\n        if (!children) { return; }\n\n        children.forEach((child: RowNode) => {\n\n            if (!child.group) { return; } // only interested in groups\n\n            if (child.hasChildren()) {\n                this.recurseDown(nextChildrenFunc(child), nextChildrenFunc);\n            }\n\n            let rowSelectable: boolean;\n\n            if (this.groupSelectsChildren) {\n                // have this group selectable if at least one direct child is selectable\n                const firstSelectable = (nextChildrenFunc(child) || []).find(rowNode => rowNode.selectable ===  true);\n                rowSelectable = exists(firstSelectable);\n            } else {\n                // directly retrieve selectable value from user callback\n                rowSelectable = this.isRowSelectableFunc ? this.isRowSelectableFunc(child) : false;\n            }\n\n            child.setRowSelectable(rowSelectable);\n        });\n    }\n\n}\n","import { Component } from \"../widgets/component\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { RefSelector } from \"../widgets/componentAnnotations\";\nimport { Events } from \"../events\";\nimport { PaginationProxy } from \"./paginationProxy\";\nimport { createIconNoSpan } from \"../utils/icon\";\nimport { formatNumberCommas } from \"../utils/number\";\nimport { setAriaDisabled } from \"../utils/aria\";\nimport { KeyCode } from '../constants/keyCode';\nimport { RowNodeBlockLoader } from \"../rowNodeCache/rowNodeBlockLoader\";\nimport { PaginationNumberFormatterParams } from \"../entities/iCallbackParams\";\nimport { WithoutGridCommon } from \"../interfaces/iCommon\";\n\nexport class PaginationComp extends Component {\n\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n    @Autowired('rowNodeBlockLoader') private rowNodeBlockLoader: RowNodeBlockLoader;\n\n    @RefSelector('btFirst') private btFirst: HTMLElement;\n    @RefSelector('btPrevious') private btPrevious: HTMLElement;\n    @RefSelector('btNext') private btNext: HTMLElement;\n    @RefSelector('btLast') private btLast: HTMLElement;\n\n    @RefSelector('lbRecordCount') private lbRecordCount: any;\n    @RefSelector('lbFirstRowOnPage') private lbFirstRowOnPage: any;\n    @RefSelector('lbLastRowOnPage') private lbLastRowOnPage: any;\n    @RefSelector('lbCurrent') private lbCurrent: any;\n    @RefSelector('lbTotal') private lbTotal: any;\n\n    private previousAndFirstButtonsDisabled = false;\n    private nextButtonDisabled = false;\n    private lastButtonDisabled = false;\n\n    constructor() {\n        super();\n    }\n\n    @PostConstruct\n    protected postConstruct(): void {\n        const isRtl = this.gridOptionsWrapper.isEnableRtl();\n        this.setTemplate(this.getTemplate());\n        this.btFirst.insertAdjacentElement('afterbegin', createIconNoSpan(isRtl ? 'last' : 'first', this.gridOptionsWrapper)!);\n        this.btPrevious.insertAdjacentElement('afterbegin', createIconNoSpan(isRtl ? 'next' : 'previous', this.gridOptionsWrapper)!);\n        this.btNext.insertAdjacentElement('afterbegin', createIconNoSpan(isRtl ? 'previous' : 'next', this.gridOptionsWrapper)!);\n        this.btLast.insertAdjacentElement('afterbegin', createIconNoSpan(isRtl ? 'first' : 'last', this.gridOptionsWrapper)!);\n\n        const isPaging = this.gridOptionsWrapper.isPagination();\n        const paginationPanelEnabled = isPaging && !this.gridOptionsWrapper.isSuppressPaginationPanel();\n\n        if (!paginationPanelEnabled) {\n            this.setDisplayed(false);\n            return;\n        }\n\n        this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));\n\n        [\n            { el: this.btFirst, fn: this.onBtFirst.bind(this) },\n            { el: this.btPrevious, fn: this.onBtPrevious.bind(this) },\n            { el: this.btNext, fn: this.onBtNext.bind(this) },\n            { el: this.btLast, fn: this.onBtLast.bind(this) }\n        ].forEach(item => {\n            const { el, fn } = item;\n            this.addManagedListener(el, 'click', fn);\n            this.addManagedListener(el, 'keydown', (e: KeyboardEvent) => {\n                if (e.key === KeyCode.ENTER || e.key === KeyCode.SPACE) {\n                    e.preventDefault();\n                    fn();\n                }\n            });\n        });\n\n        this.onPaginationChanged();\n    }\n\n    private onPaginationChanged(): void {\n        this.enableOrDisableButtons();\n        this.updateRowLabels();\n        this.setCurrentPageLabel();\n        this.setTotalLabels();\n    }\n\n    private onBtFirst() {\n        if (!this.previousAndFirstButtonsDisabled) {\n            this.paginationProxy.goToFirstPage();\n        }\n    }\n\n    private setCurrentPageLabel(): void {\n        const pagesExist = this.paginationProxy.getTotalPages() > 0;\n        const currentPage = this.paginationProxy.getCurrentPage();\n        const toDisplay = pagesExist ? currentPage + 1 : 0;\n\n        this.lbCurrent.innerHTML = this.formatNumber(toDisplay);\n    }\n\n    private formatNumber(value: number): string {\n        const userFunc = this.gridOptionsWrapper.getPaginationNumberFormatterFunc();\n\n        if (userFunc) {\n            const params: WithoutGridCommon<PaginationNumberFormatterParams> = { value: value };\n            return userFunc(params);\n        }\n\n        const localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();\n        const thousandSeparator = localeTextFunc('thousandSeparator', ',');\n        const decimalSeparator = localeTextFunc('decimalSeparator', '.');\n\n        return formatNumberCommas(value, thousandSeparator, decimalSeparator);\n    }\n\n    private getTemplate(): string {\n        const localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();\n\n        const strPage = localeTextFunc('page', 'Page');\n        const strTo = localeTextFunc('to', 'to');\n        const strOf = localeTextFunc('of', 'of');\n        const strFirst = localeTextFunc('firstPage', 'First Page');\n        const strPrevious = localeTextFunc('previousPage', 'Previous Page');\n        const strNext = localeTextFunc('nextPage', 'Next Page');\n        const strLast = localeTextFunc('lastPage', 'Last Page');\n        const compId = this.getCompId();\n\n        return /* html */`<div class=\"ag-paging-panel ag-unselectable\" id=\"ag-${compId}\">\n                <span class=\"ag-paging-row-summary-panel\" role=\"status\">\n                    <span id=\"ag-${compId}-first-row\" ref=\"lbFirstRowOnPage\" class=\"ag-paging-row-summary-panel-number\"></span>\n                    <span id=\"ag-${compId}-to\">${strTo}</span>\n                    <span id=\"ag-${compId}-last-row\" ref=\"lbLastRowOnPage\" class=\"ag-paging-row-summary-panel-number\"></span>\n                    <span id=\"ag-${compId}-of\">${strOf}</span>\n                    <span id=\"ag-${compId}-row-count\" ref=\"lbRecordCount\" class=\"ag-paging-row-summary-panel-number\"></span>\n                </span>\n                <span class=\"ag-paging-page-summary-panel\" role=\"presentation\">\n                    <div ref=\"btFirst\" class=\"ag-paging-button\" role=\"button\" aria-label=\"${strFirst}\"></div>\n                    <div ref=\"btPrevious\" class=\"ag-paging-button\" role=\"button\" aria-label=\"${strPrevious}\"></div>\n                    <span class=\"ag-paging-description\" role=\"status\">\n                        <span id=\"ag-${compId}-start-page\">${strPage}</span>\n                        <span id=\"ag-${compId}-start-page-number\" ref=\"lbCurrent\" class=\"ag-paging-number\"></span>\n                        <span id=\"ag-${compId}-of-page\">${strOf}</span>\n                        <span id=\"ag-${compId}-of-page-number\" ref=\"lbTotal\" class=\"ag-paging-number\"></span>\n                    </span>\n                    <div ref=\"btNext\" class=\"ag-paging-button\" role=\"button\" aria-label=\"${strNext}\"></div>\n                    <div ref=\"btLast\" class=\"ag-paging-button\" role=\"button\" aria-label=\"${strLast}\"></div>\n                </span>\n            </div>`;\n    }\n\n    private onBtNext() {\n        if (!this.nextButtonDisabled) {\n            this.paginationProxy.goToNextPage();\n        }\n    }\n\n    private onBtPrevious() {\n        if (!this.previousAndFirstButtonsDisabled) {\n            this.paginationProxy.goToPreviousPage();\n        }\n    }\n\n    private onBtLast() {\n        if (!this.lastButtonDisabled) {\n            this.paginationProxy.goToLastPage();\n        }\n    }\n\n    private enableOrDisableButtons() {\n        const currentPage = this.paginationProxy.getCurrentPage();\n        const maxRowFound = this.paginationProxy.isLastPageFound();\n        const totalPages = this.paginationProxy.getTotalPages();\n\n        this.previousAndFirstButtonsDisabled = currentPage === 0;\n        this.toggleButtonDisabled(this.btFirst, this.previousAndFirstButtonsDisabled);\n        this.toggleButtonDisabled(this.btPrevious, this.previousAndFirstButtonsDisabled);\n\n        const zeroPagesToDisplay = this.isZeroPagesToDisplay();\n        const onLastPage = maxRowFound && currentPage === (totalPages - 1);\n\n        this.nextButtonDisabled = onLastPage || zeroPagesToDisplay;\n        this.lastButtonDisabled = !maxRowFound || zeroPagesToDisplay || currentPage === (totalPages - 1);\n\n        this.toggleButtonDisabled(this.btNext, this.nextButtonDisabled);\n        this.toggleButtonDisabled(this.btLast, this.lastButtonDisabled);\n    }\n\n    private toggleButtonDisabled(button: HTMLElement, disabled: boolean) {\n        setAriaDisabled(button, disabled);\n        button.classList.toggle('ag-disabled', disabled);\n\n        if (disabled) {\n            button.removeAttribute('tabindex');\n        } else {\n            button.setAttribute('tabindex', '0');\n        }\n    }\n\n    private updateRowLabels() {\n        const currentPage = this.paginationProxy.getCurrentPage();\n        const pageSize = this.paginationProxy.getPageSize();\n        const maxRowFound = this.paginationProxy.isLastPageFound();\n        const rowCount = this.paginationProxy.isLastPageFound() ?\n            this.paginationProxy.getMasterRowCount() : null;\n\n        let startRow: any;\n        let endRow: any;\n\n        if (this.isZeroPagesToDisplay()) {\n            startRow = endRow = 0;\n        } else {\n            startRow = (pageSize * currentPage) + 1;\n            endRow = startRow + pageSize - 1;\n            if (maxRowFound && endRow > rowCount!) {\n                endRow = rowCount;\n            }\n        }\n\n        this.lbFirstRowOnPage.innerHTML = this.formatNumber(startRow);\n        if (this.rowNodeBlockLoader.isLoading()) {\n            this.lbLastRowOnPage.innerHTML = '?';\n        } else {\n            this.lbLastRowOnPage.innerHTML = this.formatNumber(endRow);\n        }\n    }\n\n    private isZeroPagesToDisplay() {\n        const maxRowFound = this.paginationProxy.isLastPageFound();\n        const totalPages = this.paginationProxy.getTotalPages();\n        return maxRowFound && totalPages === 0;\n    }\n\n    private setTotalLabels() {\n        const lastPageFound = this.paginationProxy.isLastPageFound();\n        const totalPages = this.paginationProxy.getTotalPages();\n        const rowCount = lastPageFound ? this.paginationProxy.getMasterRowCount() : null;\n\n        // When `pivotMode=true` and no grouping or value columns exist, a single 'hidden' group row (root node) is in\n        // the grid and the pagination totals will correctly display total = 1. However this is confusing to users as\n        // they can't see it. To address this UX issue we simply set the totals to zero in the pagination panel.\n        if (rowCount === 1) {\n            const firstRow = this.paginationProxy.getRow(0);\n\n            // a group node with no group or agg data will not be visible to users\n            const hiddenGroupRow = firstRow && firstRow.group && !(firstRow.groupData || firstRow.aggData);\n            if (hiddenGroupRow) {\n                this.setTotalLabelsToZero();\n                return;\n            }\n        }\n\n        if (lastPageFound) {\n            this.lbTotal.innerHTML = this.formatNumber(totalPages);\n            this.lbRecordCount.innerHTML = this.formatNumber(rowCount!);\n        } else {\n            const moreText = this.gridOptionsWrapper.getLocaleTextFunc()('more', 'more');\n            this.lbTotal.innerHTML = moreText;\n            this.lbRecordCount.innerHTML = moreText;\n        }\n    }\n\n    private setTotalLabelsToZero() {\n        this.lbFirstRowOnPage.innerHTML = this.formatNumber(0);\n        this.lbCurrent.innerHTML = this.formatNumber(0);\n        this.lbLastRowOnPage.innerHTML = this.formatNumber(0);\n        this.lbTotal.innerHTML = this.formatNumber(0);\n        this.lbRecordCount.innerHTML = this.formatNumber(0);\n    }\n}\n","import { Autowired, Bean } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { Constants } from \"../constants/constants\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { RowNode } from \"./rowNode\";\nimport { PinnedRowModel } from \"../pinnedRowModel/pinnedRowModel\";\nimport { exists } from \"../utils/generic\";\nimport { PaginationProxy } from \"../pagination/paginationProxy\";\n\nexport interface RowPosition {\n    /** A positive number from 0 to n, where n is the last row the grid is rendering\n    * or -1 if you want to navigate to the grid header */\n    rowIndex: number;\n\n    /** Either 'top', 'bottom' or null (for not pinned) */\n    rowPinned: string | null;\n}\n\n@Bean('rowPositionUtils')\nexport class RowPositionUtils extends BeanStub {\n\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('pinnedRowModel') private pinnedRowModel: PinnedRowModel;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n\n    public getFirstRow(): RowPosition | null {\n        let rowIndex = 0;\n        let rowPinned;\n\n        if (this.pinnedRowModel.getPinnedTopRowCount()) {\n            rowPinned = Constants.PINNED_TOP;\n        } else if (this.rowModel.getRowCount()) {\n            rowPinned = null;\n            rowIndex = this.paginationProxy.getPageFirstRow();\n        } else if (this.pinnedRowModel.getPinnedBottomRowCount()) {\n            rowPinned = Constants.PINNED_BOTTOM;\n        }\n\n        return rowPinned === undefined ? null : { rowIndex, rowPinned };\n    }\n\n    public getLastRow(): RowPosition | null {\n        let rowIndex;\n        let rowPinned: string | null = null;\n\n        const pinnedBottomCount = this.pinnedRowModel.getPinnedBottomRowCount();\n        const pinnedTopCount = this.pinnedRowModel.getPinnedTopRowCount();\n\n        if (pinnedBottomCount) {\n            rowPinned = Constants.PINNED_BOTTOM;\n            rowIndex = pinnedBottomCount - 1;\n        } else if (this.rowModel.getRowCount()) {\n            rowPinned = null;\n            rowIndex = this.paginationProxy.getPageLastRow();\n        } else if (pinnedTopCount) {\n            rowPinned = Constants.PINNED_TOP;\n            rowIndex = pinnedTopCount - 1;\n        }\n\n        return rowIndex === undefined ? null : { rowIndex, rowPinned };\n    }\n\n    public getRowNode(gridRow: RowPosition): RowNode | undefined {\n        switch (gridRow.rowPinned) {\n            case Constants.PINNED_TOP:\n                return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];\n            case Constants.PINNED_BOTTOM:\n                return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];\n            default:\n                return this.rowModel.getRow(gridRow.rowIndex);\n        }\n    }\n\n    public sameRow(rowA: RowPosition | undefined, rowB: RowPosition | undefined): boolean {\n        // if both missing\n        if (!rowA && !rowB) { return true; }\n        // if only one missing\n        if ((rowA && !rowB) || (!rowA && rowB)) { return false; }\n        // otherwise compare (use == to compare rowPinned because it can be null or undefined)\n        return rowA!.rowIndex === rowB!.rowIndex && rowA!.rowPinned == rowB!.rowPinned;\n    }\n\n    // tests if this row selection is before the other row selection\n    public before(rowA: RowPosition, rowB: RowPosition): boolean {\n        switch (rowA.rowPinned) {\n            case Constants.PINNED_TOP:\n                // we we are floating top, and other isn't, then we are always before\n                if (rowB.rowPinned !== Constants.PINNED_TOP) { return true; }\n                break;\n            case Constants.PINNED_BOTTOM:\n                // if we are floating bottom, and the other isn't, then we are never before\n                if (rowB.rowPinned !== Constants.PINNED_BOTTOM) { return false; }\n                break;\n            default:\n                // if we are not floating, but the other one is floating...\n                if (exists(rowB.rowPinned)) {\n                    return rowB.rowPinned !== Constants.PINNED_TOP;\n                }\n                break;\n        }\n        return rowA.rowIndex < rowB.rowIndex;\n    }\n}\n","import { Bean } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { Column } from \"./column\";\nimport { RowPosition } from \"./rowPosition\";\n\n// this is what gets pass into and out of the api, as JavaScript users\nexport interface CellPosition extends RowPosition {\n/** The grid column */\n    column: Column;\n}\n\n@Bean('cellPositionUtils')\nexport class CellPositionUtils extends BeanStub {\n\n    public createId(cellPosition: CellPosition): string {\n        const { rowIndex, rowPinned, column } = cellPosition;\n        return this.createIdFromValues(rowIndex, column, rowPinned);\n    }\n\n    public createIdFromValues(rowIndex: number, column: Column, rowPinned: string | undefined | null): string {\n        return `${rowIndex}.${rowPinned == null ? 'null' : rowPinned}.${column.getId()}`;\n    }\n\n    public equals(cellA: CellPosition, cellB: CellPosition): boolean {\n        const colsMatch = cellA.column === cellB.column;\n        const floatingMatch = cellA.rowPinned === cellB.rowPinned;\n        const indexMatch = cellA.rowIndex === cellB.rowIndex;\n        return colsMatch && floatingMatch && indexMatch;\n    }\n\n}\n","import { CellRange } from \"../interfaces/IRangeService\";\n\nexport interface CellValueChange {\n    rowPinned: string | null;\n    rowIndex: number;\n    columnId: string;\n    oldValue: any;\n    newValue: any;\n}\n\nexport interface LastFocusedCell {\n    rowPinned?: string | null;\n    rowIndex: number;\n    columnId: string;\n}\n\nexport class UndoRedoAction {\n    cellValueChanges: CellValueChange[];\n\n    constructor(cellValueChanges: CellValueChange[]) {\n        this.cellValueChanges = cellValueChanges;\n    }\n}\n\nexport class FillUndoRedoAction extends UndoRedoAction {\n    initialRange: CellRange;\n    finalRange: CellRange;\n\n    constructor(cellValueChanges: CellValueChange[], initialRange: CellRange, finalRange: CellRange) {\n        super(cellValueChanges);\n        this.initialRange = initialRange;\n        this.finalRange = finalRange;\n    }\n}\n\nexport class UndoRedoStack {\n    private static DEFAULT_STACK_SIZE = 10;\n\n    private readonly maxStackSize: number;\n\n    private actionStack: UndoRedoAction[] = [];\n\n    constructor(maxStackSize?: number) {\n        this.maxStackSize = maxStackSize ? maxStackSize : UndoRedoStack.DEFAULT_STACK_SIZE;\n        this.actionStack = new Array<UndoRedoAction>(this.maxStackSize);\n    }\n\n    public pop(): UndoRedoAction | undefined {\n        return this.actionStack.pop();\n    }\n\n    public push(item: UndoRedoAction): void {\n        const shouldAddActions = item.cellValueChanges && item.cellValueChanges.length > 0;\n\n        if (!shouldAddActions) { return; }\n\n        if (this.actionStack.length === this.maxStackSize) {\n            this.actionStack.shift();\n        }\n\n        this.actionStack.push(item);\n    }\n\n    public clear(): void {\n        this.actionStack = [];\n    }\n\n    public getCurrentStackSize(): number {\n        return this.actionStack.length;\n    }\n}\n","import { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { Events } from \"../eventKeys\";\nimport { CellEditingStartedEvent, CellValueChangedEvent, FillEndEvent, RowEditingStartedEvent } from \"../events\";\nimport { FocusService } from \"../focusService\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { GridApi } from \"../gridApi\";\nimport { PinnedRowModel } from \"../pinnedRowModel/pinnedRowModel\";\nimport { CellValueChange, FillUndoRedoAction, LastFocusedCell, UndoRedoAction, UndoRedoStack } from \"./undoRedoStack\";\nimport { RowPosition, RowPositionUtils } from \"../entities/rowPosition\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { Constants } from \"../constants/constants\";\nimport { ModuleNames } from \"../modules/moduleNames\";\nimport { ModuleRegistry } from \"../modules/moduleRegistry\";\nimport { CellRange, CellRangeParams } from \"../interfaces/IRangeService\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { CellPosition, CellPositionUtils } from \"../entities/cellPosition\";\n\n@Bean('undoRedoService')\nexport class UndoRedoService extends BeanStub {\n\n    @Autowired('focusService') private focusService: FocusService;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('pinnedRowModel') private pinnedRowModel: PinnedRowModel;\n    @Autowired('cellPositionUtils') private cellPositionUtils: CellPositionUtils;\n    @Autowired('rowPositionUtils') private rowPositionUtils: RowPositionUtils;\n\n    private cellValueChanges: CellValueChange[] = [];\n\n    private undoStack: UndoRedoStack;\n    private redoStack: UndoRedoStack;\n\n    private activeCellEdit: CellPosition | null = null;\n    private activeRowEdit: RowPosition | null = null;\n\n    private isPasting = false;\n    private isFilling = false;\n\n    @PostConstruct\n    public init(): void {\n        if (!this.gridOptionsWrapper.isUndoRedoCellEditing()) { return; }\n\n        const undoRedoLimit = this.gridOptionsWrapper.getUndoRedoCellEditingLimit();\n\n        if (undoRedoLimit! <= 0) { return; }\n\n        this.undoStack = new UndoRedoStack(undoRedoLimit);\n        this.redoStack = new UndoRedoStack(undoRedoLimit);\n\n        this.addRowEditingListeners();\n        this.addCellEditingListeners();\n        this.addPasteListeners();\n        this.addFillListeners();\n\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged);\n        // undo / redo is restricted to actual editing so we clear the stacks when other operations are\n        // performed that change the order of the row / cols.\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.clearStacks);\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_DRAG_END, this.clearStacks);\n    }\n\n    private onCellValueChanged = (event: CellValueChangedEvent): void => {\n        const eventCell: CellPosition = { column: event.column, rowIndex: event.rowIndex!, rowPinned: event.rowPinned };\n        const isCellEditing = this.activeCellEdit !== null && this.cellPositionUtils.equals(this.activeCellEdit, eventCell);\n        const isRowEditing = this.activeRowEdit !== null && this.rowPositionUtils.sameRow(this.activeRowEdit, eventCell);\n\n        const shouldCaptureAction = isCellEditing || isRowEditing || this.isPasting || this.isFilling;\n\n        if (!shouldCaptureAction) { return; }\n\n        const { rowPinned, rowIndex, column, oldValue, value } = event;\n\n        const cellValueChange: CellValueChange = {\n            rowPinned,\n            rowIndex: rowIndex!,\n            columnId: column.getColId(),\n            newValue: value,\n            oldValue\n        };\n\n        this.cellValueChanges.push(cellValueChange);\n    }\n\n    private clearStacks = () => {\n        this.undoStack.clear();\n        this.redoStack.clear();\n    }\n\n    public getCurrentUndoStackSize(): number {\n        return this.undoStack ? this.undoStack.getCurrentStackSize() : 0;\n    }\n\n    public getCurrentRedoStackSize(): number {\n        return this.redoStack ? this.redoStack.getCurrentStackSize() : 0;\n    }\n\n    public undo() {\n        if (!this.undoStack) { return; }\n\n        const undoAction: UndoRedoAction | undefined = this.undoStack.pop();\n\n        if (!undoAction || !undoAction.cellValueChanges) { return; }\n\n        this.processAction(undoAction, (cellValueChange: CellValueChange) => cellValueChange.oldValue);\n\n        if (undoAction instanceof FillUndoRedoAction) {\n            this.processRangeAndCellFocus(undoAction.cellValueChanges, undoAction.initialRange);\n        } else {\n            this.processRangeAndCellFocus(undoAction.cellValueChanges);\n        }\n\n        this.redoStack.push(undoAction);\n    }\n\n    public redo() {\n        if (!this.redoStack) { return; }\n\n        const redoAction: UndoRedoAction | undefined = this.redoStack.pop();\n\n        if (!redoAction || !redoAction.cellValueChanges) { return; }\n\n        this.processAction(redoAction, (cellValueChange: CellValueChange) => cellValueChange.newValue);\n\n        if (redoAction instanceof FillUndoRedoAction) {\n            this.processRangeAndCellFocus(redoAction.cellValueChanges, redoAction.finalRange);\n        } else {\n            this.processRangeAndCellFocus(redoAction.cellValueChanges);\n        }\n\n        this.undoStack.push(redoAction);\n    }\n\n    private processAction(action: UndoRedoAction, valueExtractor: (cellValueChange: CellValueChange) => any) {\n        action.cellValueChanges.forEach(cellValueChange => {\n            const { rowIndex, rowPinned, columnId } = cellValueChange;\n            const rowPosition: RowPosition = { rowIndex, rowPinned };\n            const currentRow = this.getRowNode(rowPosition);\n\n            // checks if the row has been filtered out\n            if (!currentRow!.displayed) { return; }\n\n            currentRow!.setDataValue(columnId, valueExtractor(cellValueChange));\n        });\n    }\n\n    private processRangeAndCellFocus(cellValueChanges: CellValueChange[], range?: CellRange) {\n        let lastFocusedCell: LastFocusedCell;\n\n        if (range) {\n            const startRow = range.startRow;\n            const endRow = range.endRow;\n\n            lastFocusedCell = {\n                rowPinned: startRow!.rowPinned,\n                rowIndex: startRow!.rowIndex,\n                columnId: range.startColumn.getColId()\n            };\n\n            this.setLastFocusedCell(lastFocusedCell);\n\n            const cellRangeParams: CellRangeParams = {\n                rowStartIndex: startRow!.rowIndex,\n                rowStartPinned: startRow!.rowPinned,\n                rowEndIndex: endRow!.rowIndex,\n                rowEndPinned: endRow!.rowPinned,\n                columnStart: range.startColumn,\n                columns: range.columns\n            };\n\n            this.gridApi.addCellRange(cellRangeParams);\n\n            return;\n        }\n\n        const cellValueChange = cellValueChanges[0];\n        const { rowIndex, rowPinned } = cellValueChange;\n        const rowPosition: RowPosition = { rowIndex, rowPinned };\n        const row = this.getRowNode(rowPosition);\n\n        lastFocusedCell = {\n            rowPinned: cellValueChange.rowPinned,\n            rowIndex: row!.rowIndex!,\n            columnId: cellValueChange.columnId\n        };\n\n        this.setLastFocusedCell(lastFocusedCell);\n    }\n\n    private setLastFocusedCell(lastFocusedCell: LastFocusedCell) {\n        const { rowIndex, columnId, rowPinned } = lastFocusedCell;\n\n        this.gridApi.ensureIndexVisible(rowIndex);\n        this.gridApi.ensureColumnVisible(columnId);\n\n        if (ModuleRegistry.isRegistered(ModuleNames.RangeSelectionModule)) {\n            this.gridApi.clearRangeSelection();\n        }\n\n        this.focusService.setFocusedCell(rowIndex, columnId, rowPinned, true);\n    }\n\n    private addRowEditingListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_EDITING_STARTED, (e: RowEditingStartedEvent) => {\n            this.activeRowEdit = { rowIndex: e.rowIndex!, rowPinned: e.rowPinned};\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_ROW_EDITING_STOPPED, () => {\n            const action = new UndoRedoAction(this.cellValueChanges);\n            this.pushActionsToUndoStack(action);\n            this.activeRowEdit = null;\n        });\n    }\n\n    private addCellEditingListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_EDITING_STARTED, (e: CellEditingStartedEvent) => {\n            this.activeCellEdit = { column: e.column, rowIndex: e.rowIndex!, rowPinned: e.rowPinned };\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_EDITING_STOPPED, () => {\n            this.activeCellEdit = null;\n\n            const shouldPushAction = !this.activeRowEdit && !this.isPasting && !this.isFilling;\n\n            if (shouldPushAction) {\n                const action = new UndoRedoAction(this.cellValueChanges);\n                this.pushActionsToUndoStack(action);\n            }\n        });\n    }\n\n    private addPasteListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_PASTE_START, () => {\n            this.isPasting = true;\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_PASTE_END, () => {\n            const action = new UndoRedoAction(this.cellValueChanges);\n            this.pushActionsToUndoStack(action);\n            this.isPasting = false;\n        });\n    }\n\n    private addFillListeners(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_FILL_START, () => {\n            this.isFilling = true;\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_FILL_END, (event: FillEndEvent) => {\n            const action = new FillUndoRedoAction(this.cellValueChanges, event.initialRange, event.finalRange);\n            this.pushActionsToUndoStack(action);\n            this.isFilling = false;\n        });\n    }\n\n    private pushActionsToUndoStack(action: UndoRedoAction) {\n        this.undoStack.push(action);\n\n        this.cellValueChanges = [];\n        this.redoStack.clear();\n    }\n\n    private getRowNode(gridRow: RowPosition): RowNode | undefined {\n        switch (gridRow.rowPinned) {\n            case Constants.PINNED_TOP:\n                return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];\n            case Constants.PINNED_BOTTOM:\n                return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];\n            default:\n                return this.rowModel.getRow(gridRow.rowIndex);\n        }\n    }\n}\n","import { ColumnModel } from \"../../columns/columnModel\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Autowired, Bean } from \"../../context/context\";\nimport { CtrlsService } from \"../../ctrlsService\";\nimport { Column } from \"../../entities/column\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { HeaderRowType } from \"../row/headerRowComp\";\n\nexport interface HeaderPosition {\n/** A number from 0 to n, where n is the last header row the grid is rendering */\n    headerRowIndex: number;\n/** The grid column or column group */\n    column: Column | ColumnGroup;\n}\n\n@Bean('headerPositionUtils')\nexport class HeaderPositionUtils extends BeanStub {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('ctrlsService') private ctrlsService: CtrlsService;\n\n    public findHeader(focusedHeader: HeaderPosition, direction: 'Before' | 'After'): HeaderPosition | undefined {\n        let nextColumn: Column | ColumnGroup;\n        let getGroupMethod: 'getDisplayedGroupBefore' | 'getDisplayedGroupAfter';\n        let getColMethod: 'getDisplayedColBefore' | 'getDisplayedColAfter';\n\n        if (focusedHeader.column instanceof ColumnGroup) {\n            getGroupMethod = `getDisplayedGroup${direction}` as any;\n            nextColumn = this.columnModel[getGroupMethod](focusedHeader.column)!;\n        } else {\n            getColMethod = `getDisplayedCol${direction}` as any;\n            nextColumn = this.columnModel[getColMethod](focusedHeader.column)!;\n        }\n\n        if (nextColumn) {\n            return {\n                column: nextColumn,\n                headerRowIndex: focusedHeader.headerRowIndex\n            };\n        }\n    }\n\n    public findColAtEdgeForHeaderRow(level: number, position: 'start' | 'end'): HeaderPosition | undefined {\n        const displayedColumns = this.columnModel.getAllDisplayedColumns();\n        const column = displayedColumns[position === 'start' ? 0 : displayedColumns.length - 1];\n\n        if (!column) { return; }\n\n        const childContainer = this.ctrlsService.getHeaderRowContainerCtrl(column.getPinned());\n        const type = childContainer.getRowType(level);\n\n        if (type == HeaderRowType.COLUMN_GROUP) {\n            const columnGroup = this.columnModel.getColumnGroupAtLevel(column, level);\n            return {\n                headerRowIndex: level,\n                column: columnGroup!\n            };\n        }\n\n        return {\n            // if type==null, means the header level didn't exist\n            headerRowIndex: type == null ? -1 : level,\n            column\n        };\n    }\n}\n","import { ColDef, ColGroupDef } from \"../entities/colDef\";\nimport { Column } from \"../entities/column\";\nimport { Bean } from \"../context/context\";\nimport { deepCloneDefinition } from \"../utils/object\";\nimport { ProvidedColumnGroup } from \"../entities/providedColumnGroup\";\n\n@Bean('columnDefFactory')\nexport class ColumnDefFactory {\n\n    public buildColumnDefs(cols: Column[], rowGroupColumns: Column[], pivotColumns: Column[]): (ColDef | ColGroupDef)[] {\n\n        const res: (ColDef | ColGroupDef)[] = [];\n\n        const colGroupDefs: {[id: string]: ColGroupDef} = {};\n\n        cols.forEach(col => {\n            const colDef = this.createDefFromColumn(col, rowGroupColumns, pivotColumns);\n\n            let addToResult = true;\n\n            let childDef: ColDef | ColGroupDef = colDef;\n\n            let pointer = col.getOriginalParent();\n\n            while (pointer) {\n\n                let parentDef: ColGroupDef | null | undefined = null;\n\n                // we don't include padding groups, as the column groups provided\n                // by application didn't have these. the whole point of padding groups\n                // is to balance the column tree that the user provided.\n                if (pointer.isPadding()) {\n                    pointer = pointer.getOriginalParent();\n                    continue;\n                }\n\n                // if colDef for this group already exists, use it\n                const existingParentDef = colGroupDefs[pointer.getGroupId()];\n                if (existingParentDef) {\n                    existingParentDef.children.push(childDef);\n                    // if we added to result, it would be the second time we did it\n                    addToResult = false;\n                    // we don't want to continue up the tree, as it has already been\n                    // done for this group\n                    break;\n                }\n\n                parentDef = this.createDefFromGroup(pointer);\n\n                if (parentDef) {\n                    parentDef.children = [childDef];\n                    colGroupDefs[parentDef.groupId!] = parentDef;\n                    childDef = parentDef;\n                    pointer = pointer.getOriginalParent();\n                }\n            }\n\n            if (addToResult) {\n                res.push(childDef);\n            }\n        });\n\n        return res;\n    }\n\n    private createDefFromGroup(group: ProvidedColumnGroup): ColGroupDef | null | undefined {\n        const defCloned = deepCloneDefinition(group.getColGroupDef(), ['children']);\n\n        if (defCloned) {\n            defCloned.groupId = group.getGroupId();\n        }\n\n        return defCloned;\n    }\n\n    private createDefFromColumn(col: Column, rowGroupColumns: Column[], pivotColumns: Column[]): ColDef {\n        const colDefCloned = deepCloneDefinition(col.getColDef())!;\n\n        colDefCloned.colId = col.getColId();\n\n        colDefCloned.width = col.getActualWidth();\n        colDefCloned.rowGroup = col.isRowGroupActive();\n        colDefCloned.rowGroupIndex = col.isRowGroupActive() ? rowGroupColumns.indexOf(col) : null;\n        colDefCloned.pivot = col.isPivotActive();\n        colDefCloned.pivotIndex = col.isPivotActive() ? pivotColumns.indexOf(col) : null;\n        colDefCloned.aggFunc = col.isValueActive() ? col.getAggFunc() : null;\n        colDefCloned.hide = col.isVisible() ? undefined : true;\n        colDefCloned.pinned = col.isPinned() ? col.getPinned() : null;\n\n        colDefCloned.sort = col.getSort() ? col.getSort() : null;\n        colDefCloned.sortIndex = col.getSortIndex() != null ? col.getSortIndex() : null;\n\n        return colDefCloned;\n    }\n\n}","import { exists } from \"../../utils/generic\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { pushAll } from \"../../utils/array\";\nimport { GridOptionsWrapper } from \"../../gridOptionsWrapper\";\nimport { Autowired, Bean } from \"../../context/context\";\nimport { StylingService } from \"../../styling/stylingService\";\nimport { RowClassParams } from \"../../entities/gridOptions\";\nimport { Constants } from \"../../constants/constants\";\nimport { WithoutGridCommon } from \"../../interfaces/iCommon\";\n\nexport interface RowCssClassCalculatorParams {\n    rowNode: RowNode;\n    rowIsEven: boolean;\n    rowLevel: number;\n    fullWidthRow?: boolean;\n    firstRowOnPage: boolean;\n    lastRowOnPage: boolean;\n    printLayout: boolean;\n    expandable: boolean;\n\n    pinned?: string | null;\n    extraCssClass?: string;\n    rowFocused?: boolean;\n    fadeRowIn?: boolean;\n}\n\n@Bean('rowCssClassCalculator')\nexport class RowCssClassCalculator {\n\n    @Autowired('stylingService') public stylingService: StylingService;\n    @Autowired('gridOptionsWrapper') public gridOptionsWrapper: GridOptionsWrapper;\n\n    public getInitialRowClasses(params: RowCssClassCalculatorParams): string[] {\n\n        const classes: string[] = [];\n\n        if (exists(params.extraCssClass)) {\n            classes.push(params.extraCssClass);\n        }\n\n        classes.push('ag-row');\n        classes.push(params.rowFocused ? 'ag-row-focus' : 'ag-row-no-focus');\n\n        if (params.fadeRowIn) {\n            classes.push('ag-opacity-zero');\n        }\n\n        classes.push(params.rowIsEven ? 'ag-row-even' : 'ag-row-odd');\n\n        if (params.rowNode.isRowPinned()) {\n            classes.push('ag-row-pinned');\n        }\n\n        if (params.rowNode.isSelected()) {\n            classes.push('ag-row-selected');\n        }\n\n        if (params.rowNode.footer) {\n            classes.push('ag-row-footer');\n        }\n\n        classes.push('ag-row-level-' + params.rowLevel);\n\n        if (params.rowNode.stub) {\n            classes.push('ag-row-loading');\n        }\n\n        if (params.fullWidthRow) {\n            classes.push('ag-full-width-row');\n        }\n\n        if (params.expandable) {\n            classes.push('ag-row-group');\n            classes.push(params.rowNode.expanded ? 'ag-row-group-expanded' : 'ag-row-group-contracted');\n        }\n\n        if (params.rowNode.dragging) {\n            classes.push('ag-row-dragging');\n        }\n\n        pushAll(classes, this.processClassesFromGridOptions(params.rowNode));\n        pushAll(classes, this.preProcessRowClassRules(params.rowNode));\n\n        // we use absolute position unless we are doing print layout\n        classes.push(params.printLayout ? 'ag-row-position-relative' : 'ag-row-position-absolute');\n\n        if (params.firstRowOnPage) {\n            classes.push('ag-row-first');\n        }\n\n        if (params.lastRowOnPage) {\n            classes.push('ag-row-last');\n        }\n\n        if (params.fullWidthRow) {\n            if (params.pinned === Constants.PINNED_LEFT) {\n                classes.push('ag-cell-last-left-pinned');\n            }\n            if (params.pinned === Constants.PINNED_RIGHT) {\n                classes.push('ag-cell-first-right-pinned');\n            }\n        }\n\n        return classes;\n    }\n\n    public processClassesFromGridOptions(rowNode: RowNode): string[] {\n        const res: string[] = [];\n\n        const process = (rowCls: string | string[] | undefined) => {\n            if (typeof rowCls === 'string') {\n                res.push(rowCls);\n            } else if (Array.isArray(rowCls)) {\n                rowCls.forEach(e => res.push(e));\n            }\n        };\n\n        // part 1 - rowClass\n        const rowClass = this.gridOptionsWrapper.getRowClass();\n        if (rowClass) {\n            if (typeof rowClass === 'function') {\n                console.warn('AG Grid: rowClass should not be a function, please use getRowClass instead');\n                return [];\n            }\n            process(rowClass);\n        }\n\n        // part 2 - rowClassFunc\n        const rowClassFunc = this.gridOptionsWrapper.getRowClassFunc();\n\n        if (rowClassFunc) {\n            const params: WithoutGridCommon<RowClassParams> = {\n                data: rowNode.data,\n                node: rowNode,\n                rowIndex: rowNode.rowIndex!\n            };\n            const rowClassFuncResult = rowClassFunc(params);\n            process(rowClassFuncResult);\n        }\n\n        return res;\n    }\n\n    private preProcessRowClassRules(rowNode: RowNode): string[] {\n        const res: string[] = [];\n\n        this.processRowClassRules(rowNode, (className: string) => {\n                res.push(className);\n            },\n            (className: string) => {\n                // not catered for, if creating, no need\n                // to remove class as it was never there\n            }\n        );\n\n        return res;\n    }\n\n    public processRowClassRules(rowNode: RowNode, onApplicableClass: (className: string) => void, onNotApplicableClass?: (className: string) => void): void {\n        const rowClassParams: RowClassParams = {\n            data: rowNode.data,\n            node: rowNode,\n            rowIndex: rowNode.rowIndex!,\n            api: this.gridOptionsWrapper.getApi()!,\n            columnApi: this.gridOptionsWrapper.getColumnApi()!,\n            context: this.gridOptionsWrapper.getContext()\n        };\n\n        this.stylingService.processClassRules(\n            this.gridOptionsWrapper.rowClassRules(),\n            rowClassParams,\n            onApplicableClass,\n            onNotApplicableClass\n        );\n    }\n\n    public calculateRowLevel(rowNode: RowNode): number {\n        if (rowNode.group) {\n            return rowNode.level;\n        }\n\n        // if a leaf, and a parent exists, put a level of the parent, else put level of 0 for top level item\n        return rowNode.parent ? (rowNode.parent.level + 1) : 0;\n    }\n\n}\n","import { Column } from \"../entities/column\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { Autowired, Bean } from \"../context/context\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { ValueService } from \"../valueService/valueService\";\nimport { _ } from \"../utils\";\nimport { Constants } from \"../constants/constants\";\nimport { ColumnModel } from \"../columns/columnModel\";\n\nexport interface SortOption {\n    sort: 'asc' | 'desc';\n    column: Column;\n}\n\nexport interface SortedRowNode {\n    currentPos: number;\n    rowNode: RowNode;\n}\n\n// this logic is used by both SSRM and CSRM\n\n@Bean('rowNodeSorter')\nexport class RowNodeSorter {\n\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('valueService') private valueService: ValueService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    public doFullSort(rowNodes: RowNode[], sortOptions: SortOption[]): RowNode[] {\n\n        const mapper = (rowNode: RowNode, pos: number) => ({ currentPos: pos, rowNode: rowNode });\n        const sortedRowNodes: SortedRowNode[] = rowNodes.map(mapper);\n\n        sortedRowNodes.sort(this.compareRowNodes.bind(this, sortOptions));\n\n        return sortedRowNodes.map(item => item.rowNode);\n    }\n\n    public compareRowNodes(sortOptions: SortOption[], sortedNodeA: SortedRowNode, sortedNodeB: SortedRowNode): number {\n        const nodeA: RowNode = sortedNodeA.rowNode;\n        const nodeB: RowNode = sortedNodeB.rowNode;\n\n        // Iterate columns, return the first that doesn't match\n        for (let i = 0, len = sortOptions.length; i < len; i++) {\n            const sortOption = sortOptions[i];\n            const isInverted = sortOption.sort === Constants.SORT_DESC;\n\n            const valueA: any = this.getValue(nodeA, sortOption.column);\n            const valueB: any = this.getValue(nodeB, sortOption.column);\n\n            let comparatorResult: number;\n            const providedComparator = this.getComparator(sortOption, nodeA);\n            if (providedComparator) {\n                //if comparator provided, use it\n                comparatorResult = providedComparator(valueA, valueB, nodeA, nodeB, isInverted);\n            } else {\n                //otherwise do our own comparison\n                comparatorResult = _.defaultComparator(valueA, valueB, this.gridOptionsWrapper.isAccentedSort());\n            }\n\n            // user provided comparators can return 'NaN' if they don't correctly handle 'undefined' values, this\n            // typically occurs when the comparator is used on a group row\n            const validResult = !isNaN(comparatorResult);\n\n            if (validResult && comparatorResult !== 0) {\n                return sortOption.sort === Constants.SORT_ASC ? comparatorResult : comparatorResult * -1;\n            }\n        }\n        // All matched, we make is so that the original sort order is kept:\n        return sortedNodeA.currentPos - sortedNodeB.currentPos;\n    }\n\n    private getComparator(sortOption: SortOption, rowNode: RowNode):\n        ((valueA: any, valueB: any, nodeA: RowNode, nodeB: RowNode, isInverted: boolean) => number) | undefined {\n\n        const column = sortOption.column;\n\n        // comparator on col get preference over everything else\n        const comparatorOnCol = column.getColDef().comparator;\n        if (comparatorOnCol != null) {\n            return comparatorOnCol;\n        }\n\n        // if no comparator on col, see if we are showing a group, and if we are, get comparator from row group col\n        if (rowNode.rowGroupColumn) {\n            return rowNode.rowGroupColumn.getColDef().comparator;\n        }\n\n        if (!column.getColDef().showRowGroup) { return; }\n\n        // if a 'field' is supplied on the autoGroupColumnDef we need to use the associated column comparator\n        const groupLeafField = !rowNode.group && column.getColDef().field;\n        if (!groupLeafField) { return; }\n\n        const primaryColumn = this.columnModel.getPrimaryColumn(groupLeafField);\n        if (!primaryColumn) { return; }\n\n        return primaryColumn.getColDef().comparator;\n    }\n\n    private getValue(nodeA: RowNode, column: Column): string {\n        return this.valueService.getValue(column, nodeA, false, false);\n    }\n}","import { GridCtrl } from \"./gridComp/gridCtrl\";\nimport { Bean } from \"./context/context\";\nimport { GridBodyCtrl } from \"./gridBodyComp/gridBodyCtrl\";\nimport { RowContainerCtrl } from \"./gridBodyComp/rowContainer/rowContainerCtrl\";\nimport { FakeHScrollCtrl } from \"./gridBodyComp/fakeHScrollCtrl\";\nimport { BeanStub } from \"./context/beanStub\";\nimport { GridHeaderCtrl } from \"./headerRendering/gridHeaderCtrl\";\nimport { Constants } from \"./constants/constants\";\nimport { HeaderRowContainerCtrl } from \"./headerRendering/rowContainer/headerRowContainerCtrl\";\n\n// for all controllers that are singletons, they can register here so other parts\n// of the application can access them.\n\ninterface ReadyParams {\n    gridCtrl: GridCtrl;\n    gridBodyCtrl: GridBodyCtrl;\n\n    centerRowContainerCtrl: RowContainerCtrl;\n    leftRowContainerCtrl: RowContainerCtrl;\n    rightRowContainerCtrl: RowContainerCtrl;\n\n    bottomCenterRowContainerCtrl: RowContainerCtrl;\n    bottomLeftRowContainerCtrl: RowContainerCtrl;\n    bottomRightRowContainerCtrl: RowContainerCtrl;\n\n    topCenterRowContainerCtrl: RowContainerCtrl;\n    topLeftRowContainerCtrl: RowContainerCtrl;\n    topRightRowContainerCtrl: RowContainerCtrl;\n\n    fakeHScrollCtrl: FakeHScrollCtrl;\n    gridHeaderCtrl: GridHeaderCtrl;\n\n    centerHeaderRowContainerCtrl: HeaderRowContainerCtrl;\n    leftHeaderRowContainerCtrl: HeaderRowContainerCtrl;\n    rightHeaderRowContainerCtrl: HeaderRowContainerCtrl;\n}\n\n@Bean(CtrlsService.NAME)\nexport class CtrlsService extends BeanStub {\n\n    public static readonly NAME = 'ctrlsService';\n\n    private gridCtrl: GridCtrl;\n    private gridBodyCtrl: GridBodyCtrl;\n\n    private centerRowContainerCtrl: RowContainerCtrl;\n    private leftRowContainerCtrl: RowContainerCtrl;\n    private rightRowContainerCtrl: RowContainerCtrl;\n\n    private bottomCenterRowContainerCtrl: RowContainerCtrl;\n    private bottomLeftRowContainerCtrl: RowContainerCtrl;\n    private bottomRightRowContainerCtrl: RowContainerCtrl;\n\n    private topCenterRowContainerCtrl: RowContainerCtrl;\n    private topLeftRowContainerCtrl: RowContainerCtrl;\n    private topRightRowContainerCtrl: RowContainerCtrl;\n\n    private centerHeaderRowContainerCtrl: HeaderRowContainerCtrl;\n    private leftHeaderRowContainerCtrl: HeaderRowContainerCtrl;\n    private rightHeaderRowContainerCtrl: HeaderRowContainerCtrl;\n\n    private fakeHScrollCtrl: FakeHScrollCtrl;\n\n    private gridHeaderCtrl: GridHeaderCtrl;\n\n    private ready = false;\n    private readyCallbacks: ((p: ReadyParams) => void)[] = [];\n\n    private checkReady(): void {\n        this.ready =\n            this.gridCtrl != null\n            && this.gridBodyCtrl != null\n\n            && this.centerRowContainerCtrl != null\n            && this.leftRowContainerCtrl != null\n            && this.rightRowContainerCtrl != null\n\n            && this.bottomCenterRowContainerCtrl != null\n            && this.bottomLeftRowContainerCtrl != null\n            && this.bottomRightRowContainerCtrl != null\n\n            && this.topCenterRowContainerCtrl != null\n            && this.topLeftRowContainerCtrl != null\n            && this.topRightRowContainerCtrl != null\n\n            && this.centerHeaderRowContainerCtrl != null\n            && this.leftHeaderRowContainerCtrl != null\n            && this.rightHeaderRowContainerCtrl != null\n\n            && this.fakeHScrollCtrl != null\n            && this.gridHeaderCtrl != null;\n\n        if (this.ready) {\n            const p = this.createReadyParams();\n            this.readyCallbacks.forEach(c => c(p));\n            this.readyCallbacks.length = 0;\n        }\n    }\n\n    public whenReady(callback: (p: ReadyParams) => void): void {\n        if (this.ready) {\n            callback(this.createReadyParams());\n        } else {\n            this.readyCallbacks.push(callback);\n        }\n    }\n\n    private createReadyParams(): ReadyParams {\n        return {\n            centerRowContainerCtrl: this.centerRowContainerCtrl,\n            leftRowContainerCtrl: this.leftRowContainerCtrl,\n            rightRowContainerCtrl: this.rightRowContainerCtrl,\n\n            bottomCenterRowContainerCtrl: this.bottomCenterRowContainerCtrl,\n            bottomLeftRowContainerCtrl: this.bottomLeftRowContainerCtrl,\n            bottomRightRowContainerCtrl: this.bottomRightRowContainerCtrl,\n\n            topCenterRowContainerCtrl: this.topCenterRowContainerCtrl,\n            topLeftRowContainerCtrl: this.topLeftRowContainerCtrl,\n            topRightRowContainerCtrl: this.topRightRowContainerCtrl,\n\n            centerHeaderRowContainerCtrl: this.centerHeaderRowContainerCtrl,\n            leftHeaderRowContainerCtrl: this.leftHeaderRowContainerCtrl,\n            rightHeaderRowContainerCtrl: this.rightHeaderRowContainerCtrl,\n\n            fakeHScrollCtrl: this.fakeHScrollCtrl,\n            gridBodyCtrl: this.gridBodyCtrl,\n            gridCtrl: this.gridCtrl,\n            gridHeaderCtrl: this.gridHeaderCtrl,\n        };\n    }\n\n    public registerFakeHScrollCtrl(ctrl: FakeHScrollCtrl): void {\n        this.fakeHScrollCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public registerGridHeaderCtrl(gridHeaderCtrl: GridHeaderCtrl): void {\n        this.gridHeaderCtrl = gridHeaderCtrl;\n        this.checkReady();\n    }\n\n    public registerCenterRowContainerCtrl(ctrl: RowContainerCtrl): void {\n        this.centerRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public registerLeftRowContainerCtrl(ctrl: RowContainerCtrl): void {\n        this.leftRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public registerRightRowContainerCtrl(ctrl: RowContainerCtrl): void {\n        this.rightRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public registerTopCenterRowContainerCtrl(ctrl: RowContainerCtrl): void {\n        this.topCenterRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public registerTopLeftRowContainerCon(ctrl: RowContainerCtrl): void {\n        this.topLeftRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public registerTopRightRowContainerCtrl(ctrl: RowContainerCtrl): void {\n        this.topRightRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public registerBottomCenterRowContainerCtrl(ctrl: RowContainerCtrl): void {\n        this.bottomCenterRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public registerBottomLeftRowContainerCtrl(ctrl: RowContainerCtrl): void {\n        this.bottomLeftRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public registerBottomRightRowContainerCtrl(ctrl: RowContainerCtrl): void {\n        this.bottomRightRowContainerCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public registerHeaderContainer(ctrl: HeaderRowContainerCtrl, pinned: string | null): void {\n        switch (pinned) {\n            case Constants.PINNED_LEFT:\n                this.leftHeaderRowContainerCtrl = ctrl;\n                break;\n            case Constants.PINNED_RIGHT:\n                this.rightHeaderRowContainerCtrl = ctrl;\n                break;\n            default: this.centerHeaderRowContainerCtrl = ctrl;\n                break;\n        }\n        this.checkReady();\n    }\n\n    public registerGridBodyCtrl(ctrl: GridBodyCtrl): void {\n        this.gridBodyCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public registerGridCtrl(ctrl: GridCtrl): void {\n        this.gridCtrl = ctrl;\n        this.checkReady();\n    }\n\n    public getFakeHScrollCtrl(): FakeHScrollCtrl {\n        return this.fakeHScrollCtrl;\n    }\n\n    public getGridHeaderCtrl(): GridHeaderCtrl {\n        return this.gridHeaderCtrl;\n    }\n\n    public getGridCtrl(): GridCtrl {\n        return this.gridCtrl;\n    }\n\n    public getCenterRowContainerCtrl(): RowContainerCtrl {\n        return this.centerRowContainerCtrl;\n    }\n\n    public getTopCenterRowContainerCtrl(): RowContainerCtrl {\n        return this.topCenterRowContainerCtrl;\n    }\n\n    public getBottomCenterRowContainerCtrl(): RowContainerCtrl {\n        return this.bottomCenterRowContainerCtrl;\n    }\n\n    public getGridBodyCtrl(): GridBodyCtrl {\n        return this.gridBodyCtrl;\n    }\n\n    public getHeaderRowContainerCtrls(): HeaderRowContainerCtrl[] {\n        return [this.leftHeaderRowContainerCtrl, this.rightHeaderRowContainerCtrl, this.centerHeaderRowContainerCtrl];\n    }\n\n    public getHeaderRowContainerCtrl(pinned?: string | null): HeaderRowContainerCtrl {\n        switch (pinned) {\n            case Constants.PINNED_LEFT: return this.leftHeaderRowContainerCtrl;\n            case Constants.PINNED_RIGHT: return this.rightHeaderRowContainerCtrl;\n            default: return this.centerHeaderRowContainerCtrl;\n        }\n    }\n}","import { BeanStub } from \"./context/beanStub\";\nimport { Bean, ControllerMeta } from \"./context/context\";\n\n@Bean('ctrlsFactory')\nexport class CtrlsFactory extends BeanStub {\n\n    private registry: {[name: string]: new () => Object} = {};\n\n    public register(meta: ControllerMeta): void {\n        this.registry[meta.controllerName] = meta.controllerClass;\n    }\n\n    public getInstance(name: string): any {\n        const ControllerClass = this.registry[name];\n\n        if (ControllerClass == null) { return undefined; }\n\n        return new ControllerClass();\n    }\n\n}","import { BeanStub } from \"../context/beanStub\";\nimport { isInvisibleScrollbar } from \"../utils/browser\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { ScrollVisibleService } from \"./scrollVisibleService\";\nimport { Events } from \"../eventKeys\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { CtrlsService } from \"../ctrlsService\";\nimport { BodyScrollEvent } from \"../events\";\n\nexport interface IFakeHScrollComp {\n    setHeight(height: number): void;\n    setViewportHeight(height: number): void;\n    setContainerHeight(height: number): void;\n    setRightSpacerFixedWidth(width: number): void;\n    setLeftSpacerFixedWidth(width: number): void;\n\n    addOrRemoveCssClass(cssClassName: string, on: boolean): void;\n    includeLeftSpacerScrollerCss(cssClass: string, include: boolean): void;\n    includeRightSpacerScrollerCss(cssClass: string, include: boolean): void;\n}\n\nexport class FakeHScrollCtrl extends BeanStub {\n\n    @Autowired('scrollVisibleService') private scrollVisibleService: ScrollVisibleService;\n    @Autowired('columnModel') private columnModel: ColumnModel;\n    @Autowired('ctrlsService') public ctrlsService: CtrlsService;\n\n    private view: IFakeHScrollComp;\n\n    private enableRtl: boolean;\n    private invisibleScrollbar: boolean;\n    private eViewport: HTMLElement;\n    private eContainer: HTMLElement;\n    private eGui: HTMLElement;\n\n    constructor() {\n        super();\n    }\n\n    public setComp(view: IFakeHScrollComp, eGui: HTMLElement, eViewport: HTMLElement, eContainer: HTMLElement): void {\n        this.view = view;\n        this.eViewport = eViewport;\n        this.eContainer = eContainer;\n        this.eGui = eGui;\n\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));\n        this.onScrollVisibilityChanged();\n\n        // When doing printing, this changes whether cols are pinned or not\n        const spacerWidthsListener = this.setFakeHScrollSpacerWidths.bind(this);\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, spacerWidthsListener);\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, spacerWidthsListener);\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, spacerWidthsListener);\n        this.setFakeHScrollSpacerWidths();\n\n        if (this.invisibleScrollbar) {\n            this.hideAndShowInvisibleScrollAsNeeded();\n            this.addActiveListenerToggles();\n        }\n\n        this.ctrlsService.registerFakeHScrollCtrl(this);\n    }\n\n    addActiveListenerToggles(): void {\n        const activateEvents = ['mouseenter', 'mousedown', 'touchstart'];\n        const deactivateEvents = ['mouseleave', 'mouseup', 'touchend'];\n\n        activateEvents.forEach(eventName => this.addManagedListener(this.eGui, eventName, () => this.view.addOrRemoveCssClass('ag-scrollbar-active', true)));\n        deactivateEvents.forEach(eventName => this.addManagedListener(this.eGui, eventName, () => this.view.addOrRemoveCssClass('ag-scrollbar-active', false)));\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.enableRtl = this.gridOptionsWrapper.isEnableRtl();\n        this.invisibleScrollbar = isInvisibleScrollbar();\n    }\n\n    private onScrollVisibilityChanged(): void {\n        this.setScrollVisible();\n        this.setFakeHScrollSpacerWidths();\n    }\n\n    private hideAndShowInvisibleScrollAsNeeded(): void {\n        this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, (params: BodyScrollEvent) => {\n            if (params.direction === 'horizontal') {\n                this.view.addOrRemoveCssClass('ag-scrollbar-scrolling', true);\n            }\n        });\n        this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL_END, () => this.view.addOrRemoveCssClass('ag-scrollbar-scrolling', false));\n    }\n\n    private setFakeHScrollSpacerWidths(): void {\n        const vScrollShowing = this.scrollVisibleService.isVerticalScrollShowing();\n\n        // we pad the right based on a) if cols are pinned to the right and\n        // b) if v scroll is showing on the right (normal position of scroll)\n        let rightSpacing = this.columnModel.getDisplayedColumnsRightWidth();\n        const scrollOnRight = !this.enableRtl && vScrollShowing;\n        const scrollbarWidth = this.gridOptionsWrapper.getScrollbarWidth();\n\n        if (scrollOnRight) {\n            rightSpacing += scrollbarWidth;\n        }\n        this.view.setRightSpacerFixedWidth(rightSpacing);\n        this.view.includeRightSpacerScrollerCss('ag-scroller-corner', rightSpacing <= scrollbarWidth);\n\n        // we pad the left based on a) if cols are pinned to the left and\n        // b) if v scroll is showing on the left (happens in LTR layout only)\n        let leftSpacing = this.columnModel.getDisplayedColumnsLeftWidth();\n        const scrollOnLeft = this.enableRtl && vScrollShowing;\n\n        if (scrollOnLeft) {\n            leftSpacing += scrollbarWidth;\n        }\n\n        this.view.setLeftSpacerFixedWidth(leftSpacing);\n        this.view.includeLeftSpacerScrollerCss('ag-scroller-corner', leftSpacing <= scrollbarWidth);\n    }\n\n    private setScrollVisible(): void {\n        const hScrollShowing = this.scrollVisibleService.isHorizontalScrollShowing();\n        const invisibleScrollbar = this.invisibleScrollbar;\n        const isSuppressHorizontalScroll = this.gridOptionsWrapper.isSuppressHorizontalScroll();\n        const scrollbarWidth = hScrollShowing ? (this.gridOptionsWrapper.getScrollbarWidth() || 0) : 0;\n        const adjustedScrollbarWidth = (scrollbarWidth === 0 && invisibleScrollbar) ? 15 : scrollbarWidth;\n        const scrollContainerSize = !isSuppressHorizontalScroll ? adjustedScrollbarWidth : 0;\n\n        this.view.addOrRemoveCssClass('ag-scrollbar-invisible', invisibleScrollbar);\n        this.view.setHeight(scrollContainerSize);\n        this.view.setViewportHeight(scrollContainerSize);\n        this.view.setContainerHeight(scrollContainerSize);\n    }\n\n    public getViewport(): HTMLElement {\n        return this.eViewport;\n    }\n\n    public getContainer(): HTMLElement {\n        return this.eContainer;\n    }\n}\n","import { Component } from \"../widgets/component\";\nimport { RefSelector } from \"../widgets/componentAnnotations\";\nimport { PostConstruct } from \"../context/context\";\nimport { FakeHScrollCtrl, IFakeHScrollComp } from \"./fakeHScrollCtrl\";\nimport { setFixedHeight, setFixedWidth } from \"../utils/dom\";\nimport { CenterWidthFeature } from \"./centerWidthFeature\";\n\nexport class FakeHScrollComp extends Component {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-body-horizontal-scroll\" aria-hidden=\"true\">\n            <div class=\"ag-horizontal-left-spacer\" ref=\"eLeftSpacer\"></div>\n            <div class=\"ag-body-horizontal-scroll-viewport\" ref=\"eViewport\">\n                <div class=\"ag-body-horizontal-scroll-container\" ref=\"eContainer\"></div>\n            </div>\n            <div class=\"ag-horizontal-right-spacer\" ref=\"eRightSpacer\"></div>\n        </div>`;\n\n    // fake horizontal scroller\n    @RefSelector('eLeftSpacer') private eLeftSpacer: HTMLElement;\n    @RefSelector('eRightSpacer') private eRightSpacer: HTMLElement;\n    @RefSelector('eViewport') private eViewport: HTMLElement;\n    @RefSelector('eContainer') private eContainer: HTMLElement;\n\n    constructor() {\n        super(FakeHScrollComp.TEMPLATE);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        const compProxy: IFakeHScrollComp = {\n            addOrRemoveCssClass: (cssClassName, on) => this.addOrRemoveCssClass(cssClassName, on),\n            setHeight: height => setFixedHeight(this.getGui(), height),\n            setContainerHeight: height => setFixedHeight(this.eContainer, height),\n            setViewportHeight: height => setFixedHeight(this.eViewport, height),\n            setRightSpacerFixedWidth: width => setFixedWidth(this.eRightSpacer, width),\n            setLeftSpacerFixedWidth: width => setFixedWidth(this.eLeftSpacer, width),\n            includeLeftSpacerScrollerCss: (cssClass: string, include: boolean) =>\n                this.eLeftSpacer.classList.toggle(cssClass, include),\n            includeRightSpacerScrollerCss: (cssClass: string, include: boolean) =>\n                this.eRightSpacer.classList.toggle(cssClass, include),\n        };\n        const ctrl = this.createManagedBean(new FakeHScrollCtrl());\n        ctrl.setComp(compProxy, this.getGui(), this.eViewport, this.eContainer);\n\n        this.createManagedBean(new CenterWidthFeature(width => this.eContainer.style.width = `${width}px`));\n    }\n\n}","import { BeanStub } from \"../context/beanStub\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { Events } from \"../eventKeys\";\nimport { ColumnModel } from \"../columns/columnModel\";\nimport { Constants } from \"../constants/constants\";\n\n@Bean('pinnedWidthService')\nexport class PinnedWidthService extends BeanStub {\n\n    @Autowired('columnModel') private columnModel: ColumnModel;\n\n    private leftWidth: number;\n    private rightWidth: number;\n\n    @PostConstruct\n    private postConstruct(): void {\n        const listener = this.checkContainerWidths.bind(this);\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, listener);\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, listener);\n    }\n\n    private checkContainerWidths() {\n\n        const printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;\n\n        const newLeftWidth = printLayout ? 0 : this.columnModel.getDisplayedColumnsLeftWidth();\n        const newRightWidth = printLayout ? 0 : this.columnModel.getDisplayedColumnsRightWidth();\n\n        if (newLeftWidth != this.leftWidth) {\n            this.leftWidth = newLeftWidth;\n            this.eventService.dispatchEvent({type: Events.EVENT_LEFT_PINNED_WIDTH_CHANGED});\n        }\n\n        if (newRightWidth != this.rightWidth) {\n            this.rightWidth = newRightWidth;\n            this.eventService.dispatchEvent({type: Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED});\n        }\n    }\n\n    public getPinnedRightWidth(): number {\n        return this.rightWidth;\n    }\n\n    public getPinnedLeftWidth(): number {\n        return this.leftWidth;\n    }\n}","import { Constants } from \"../constants/constants\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { RowGroupOpenedEvent } from \"../events\";\nimport { IClientSideRowModel } from \"../interfaces/iClientSideRowModel\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { AnimationFrameService } from \"../misc/animationFrameService\";\n\n@Bean('rowNodeEventThrottle')\nexport class RowNodeEventThrottle extends BeanStub {\n\n    @Autowired('animationFrameService') private animationFrameService: AnimationFrameService;\n    @Autowired('rowModel') private rowModel: IRowModel;\n\n    private clientSideRowModel: IClientSideRowModel;\n\n    private events: RowGroupOpenedEvent[] = [];\n\n    private dispatchExpandedDebounced: () => void;\n\n    @PostConstruct\n    private postConstruct(): void {\n        if (this.rowModel.getType() == Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            this.clientSideRowModel = this.rowModel as IClientSideRowModel;\n        }\n    }\n\n    // because the user can call rowNode.setExpanded() many times in one VM turn,\n    // we throttle the calls to ClientSideRowModel using animationFrameService. this means for 100\n    // row nodes getting expanded, we only update the CSRM once, and then we fire all events after\n    // CSRM has updated.\n    //\n    // if we did not do this, then the user could call setExpanded on 100+ rows, causing the grid\n    // to re-render 100+ times, which would be a performance lag.\n    //\n    // we use animationFrameService\n    // rather than _.debounce() so this will get done if anyone flushes the animationFrameService\n    // (eg user calls api.ensureRowVisible(), which in turn flushes ).\n    public dispatchExpanded(event: RowGroupOpenedEvent): void {\n\n        // if not using CSRM, we don't debounce. otherwise this breaks the SSRM.\n        if (this.clientSideRowModel == null) {\n            this.eventService.dispatchEvent(event);\n            return;\n        }\n\n        this.events.push(event);\n\n        const func = () => {\n            if (this.clientSideRowModel) {\n                this.clientSideRowModel.onRowGroupOpened();\n            }\n            this.events.forEach(e => this.eventService.dispatchEvent(e));\n            this.events = [];\n        };\n\n        if (this.dispatchExpandedDebounced == null) {\n            this.dispatchExpandedDebounced = this.animationFrameService.debounce(func);\n        }\n\n        this.dispatchExpandedDebounced();\n    }\n}","import { GridOptions } from \"./entities/gridOptions\";\nimport { GridOptionsWrapper } from \"./gridOptionsWrapper\";\nimport { SelectionService } from \"./selectionService\";\nimport { ColumnApi } from \"./columns/columnApi\";\nimport { ColumnModel } from \"./columns/columnModel\";\nimport { RowRenderer } from \"./rendering/rowRenderer\";\nimport { GridHeaderComp } from \"./headerRendering/gridHeaderComp\";\nimport { FilterManager } from \"./filter/filterManager\";\nimport { ValueService } from \"./valueService/valueService\";\nimport { EventService } from \"./eventService\";\nimport { GridBodyComp } from \"./gridBodyComp/gridBodyComp\";\nimport { GridApi } from \"./gridApi\";\nimport { ColumnFactory } from \"./columns/columnFactory\";\nimport { DisplayedGroupCreator } from \"./columns/displayedGroupCreator\";\nimport { ExpressionService } from \"./valueService/expressionService\";\nimport { TemplateService } from \"./templateService\";\nimport { PopupService } from \"./widgets/popupService\";\nimport { Logger, LoggerFactory } from \"./logger\";\nimport { ColumnUtils } from \"./columns/columnUtils\";\nimport { AutoWidthCalculator } from \"./rendering/autoWidthCalculator\";\nimport { HorizontalResizeService } from \"./headerRendering/common/horizontalResizeService\";\nimport { ComponentMeta, Context, ContextParams } from \"./context/context\";\nimport { GridComp } from \"./gridComp/gridComp\";\nimport { DragAndDropService } from \"./dragAndDrop/dragAndDropService\";\nimport { DragService } from \"./dragAndDrop/dragService\";\nimport { SortController } from \"./sortController\";\nimport { FocusService } from \"./focusService\";\nimport { MouseEventService } from \"./gridBodyComp/mouseEventService\";\nimport { CellNavigationService } from \"./cellNavigationService\";\nimport { Events, GridReadyEvent } from \"./events\";\nimport { ValueFormatterService } from \"./rendering/valueFormatterService\";\nimport { AgCheckbox } from \"./widgets/agCheckbox\";\nimport { AgRadioButton } from \"./widgets/agRadioButton\";\nimport { VanillaFrameworkOverrides } from \"./vanillaFrameworkOverrides\";\nimport { IFrameworkOverrides } from \"./interfaces/iFrameworkOverrides\";\nimport { ScrollVisibleService } from \"./gridBodyComp/scrollVisibleService\";\nimport { StylingService } from \"./styling/stylingService\";\nimport { ColumnHoverService } from \"./rendering/columnHoverService\";\nimport { ColumnAnimationService } from \"./rendering/columnAnimationService\";\nimport { AutoGroupColService } from \"./columns/autoGroupColService\";\nimport { PaginationProxy } from \"./pagination/paginationProxy\";\nimport { PaginationAutoPageSizeService } from \"./pagination/paginationAutoPageSizeService\";\nimport { IRowModel } from \"./interfaces/iRowModel\";\nimport { Constants } from \"./constants/constants\";\nimport { ValueCache } from \"./valueService/valueCache\";\nimport { ChangeDetectionService } from \"./valueService/changeDetectionService\";\nimport { AlignedGridsService } from \"./alignedGridsService\";\nimport { UserComponentFactory } from \"./components/framework/userComponentFactory\";\nimport { UserComponentRegistry } from \"./components/framework/userComponentRegistry\";\nimport { AgComponentUtils } from \"./components/framework/agComponentUtils\";\nimport { ComponentMetadataProvider } from \"./components/framework/componentMetadataProvider\";\nimport { Beans } from \"./rendering/beans\";\nimport { Environment } from \"./environment\";\nimport { AnimationFrameService } from \"./misc/animationFrameService\";\nimport { NavigationService } from \"./gridBodyComp/navigationService\";\nimport { RowContainerHeightService } from \"./rendering/rowContainerHeightService\";\nimport { SelectableService } from \"./rowNodes/selectableService\";\nimport { PaginationComp } from \"./pagination/paginationComp\";\nimport { ResizeObserverService } from \"./misc/resizeObserverService\";\nimport { OverlayWrapperComponent } from \"./rendering/overlays/overlayWrapperComponent\";\nimport { Module } from \"./interfaces/iModule\";\nimport { AgGroupComponent } from \"./widgets/agGroupComponent\";\nimport { AgDialog } from \"./widgets/agDialog\";\nimport { AgPanel } from \"./widgets/agPanel\";\nimport { AgInputTextField } from \"./widgets/agInputTextField\";\nimport { AgInputTextArea } from \"./widgets/agInputTextArea\";\nimport { AgSlider } from \"./widgets/agSlider\";\nimport { AgColorPicker } from \"./widgets/agColorPicker\";\nimport { AgInputNumberField } from \"./widgets/agInputNumberField\";\nimport { AgInputRange } from \"./widgets/agInputRange\";\nimport { AgSelect } from \"./widgets/agSelect\";\nimport { AgAngleSelect } from \"./widgets/agAngleSelect\";\nimport { AgToggleButton } from \"./widgets/agToggleButton\";\nimport { RowPositionUtils } from \"./entities/rowPosition\";\nimport { CellPositionUtils } from \"./entities/cellPosition\";\nimport { PinnedRowModel } from \"./pinnedRowModel/pinnedRowModel\";\nimport { ModuleRegistry } from \"./modules/moduleRegistry\";\nimport { ModuleNames } from \"./modules/moduleNames\";\nimport { UndoRedoService } from \"./undoRedo/undoRedoService\";\nimport { AgStackComponentsRegistry } from \"./components/agStackComponentsRegistry\";\nimport { HeaderPositionUtils } from \"./headerRendering/common/headerPosition\";\nimport { HeaderNavigationService } from \"./headerRendering/common/headerNavigationService\";\nimport { exists, missing } from \"./utils/generic\";\nimport { iterateObject } from \"./utils/object\";\nimport { ColumnDefFactory } from \"./columns/columnDefFactory\";\nimport { RowCssClassCalculator } from \"./rendering/row/rowCssClassCalculator\";\nimport { RowNodeBlockLoader } from \"./rowNodeCache/rowNodeBlockLoader\";\nimport { RowNodeSorter } from \"./rowNodes/rowNodeSorter\";\nimport { CtrlsService } from \"./ctrlsService\";\nimport { CtrlsFactory } from \"./ctrlsFactory\";\nimport { FakeHScrollComp } from \"./gridBodyComp/fakeHScrollComp\";\nimport { PinnedWidthService } from \"./gridBodyComp/pinnedWidthService\";\nimport { RowContainerComp } from \"./gridBodyComp/rowContainer/rowContainerComp\";\nimport { RowNodeEventThrottle } from \"./entities/rowNodeEventThrottle\";\nimport { StandardMenuFactory } from \"./headerRendering/cells/column/standardMenu\";\n\nexport interface GridParams {\n    // used by Web Components\n    globalEventListener?: Function;\n\n\n    // this allows the base frameworks (React, Angular, etc) to provide alternative cellRenderers and cellEditors\n    frameworkOverrides?: IFrameworkOverrides;\n\n    // bean instances to add to the context\n    providedBeanInstances?: { [key: string]: any; };\n\n    modules?: Module[];\n}\n\n// creates JavaScript vanilla Grid, including JavaScript (ag-stack) components, which can\n// be wrapped by the framework wrappers\nexport class Grid {\n\n    protected logger: Logger;\n\n    private readonly gridOptions: GridOptions;\n\n    constructor(eGridDiv: HTMLElement, gridOptions: GridOptions, params?: GridParams) {\n\n        if (!gridOptions) {\n            console.error('AG Grid: no gridOptions provided to the grid');\n            return;\n        }\n\n        this.gridOptions = gridOptions;\n\n        new GridCoreCreator().create(eGridDiv, gridOptions, context => {\n            const gridComp = new GridComp(eGridDiv);\n            context.createBean(gridComp);\n        }, undefined, params);\n    }\n\n    public destroy(): void {\n        if (this.gridOptions && this.gridOptions.api) {\n            this.gridOptions.api.destroy();\n        }\n    }\n}\n\n// created services of grid only, no UI, so frameworks can use this if providing\n// their own UI\nexport class GridCoreCreator {\n\n    public create(eGridDiv: HTMLElement, gridOptions: GridOptions, createUi: (context: Context) => void, acceptChanges?: (context: Context)=>void, params?: GridParams): void {\n\n        const debug = !!gridOptions.debug;\n\n        const registeredModules = this.getRegisteredModules(params);\n\n        const beanClasses = this.createBeansList(gridOptions.rowModelType, registeredModules);\n        const providedBeanInstances = this.createProvidedBeans(eGridDiv, gridOptions, params);\n\n        if (!beanClasses) { return; } // happens when no row model found\n\n        const contextParams: ContextParams = {\n            providedBeanInstances: providedBeanInstances,\n            beanClasses: beanClasses,\n            debug: debug\n        };\n\n        const logger = new Logger('AG Grid', () => gridOptions.debug);\n        const contextLogger = new Logger('Context', () => contextParams.debug);\n        const context = new Context(contextParams, contextLogger);\n        const beans = context.getBean('beans') as Beans;\n\n        this.registerModuleUserComponents(beans, registeredModules);\n        this.registerStackComponents(beans, registeredModules);\n        this.registerControllers(beans, registeredModules);\n\n        createUi(context);\n\n        // we wait until the UI has finished initialising before setting in columns and rows\n        beans.ctrlsService.whenReady(() => {\n            this.setColumnsAndData(beans);\n            this.dispatchGridReadyEvent(beans, gridOptions);\n            const isEnterprise = ModuleRegistry.isRegistered(ModuleNames.EnterpriseCoreModule);\n            logger.log(`initialised successfully, enterprise = ${isEnterprise}`);\n        });\n\n        if (acceptChanges) { acceptChanges(context); }\n    }\n\n    private registerControllers(beans: Beans, registeredModules: Module[]): void {\n        registeredModules.forEach(module => {\n            if (module.controllers) {\n                module.controllers.forEach(meta => beans.ctrlsFactory.register(meta));\n            }\n        });\n    }\n\n    private registerStackComponents(beans: Beans, registeredModules: Module[]): void {\n        const agStackComponents = this.createAgStackComponentsList(registeredModules);\n        beans.agStackComponentsRegistry.setupComponents(agStackComponents);\n    }\n\n    private getRegisteredModules(params?: GridParams): Module[] {\n        const passedViaConstructor: Module[] | undefined | null = params ? params.modules : null;\n        const registered = ModuleRegistry.getRegisteredModules();\n\n        const allModules: Module[] = [];\n        const mapNames: { [name: string]: boolean; } = {};\n\n        // adds to list and removes duplicates\n        function addModule(moduleBased: boolean, mod: Module) {\n            function addIndividualModule(currentModule: Module) {\n                if (!mapNames[currentModule.moduleName]) {\n                    mapNames[currentModule.moduleName] = true;\n                    allModules.push(currentModule);\n                    ModuleRegistry.register(currentModule, moduleBased);\n                }\n            }\n\n            addIndividualModule(mod);\n            if (mod.dependantModules) {\n                mod.dependantModules.forEach(addModule.bind(null, moduleBased));\n            }\n        }\n\n        if (passedViaConstructor) {\n            passedViaConstructor.forEach(addModule.bind(null, true));\n        }\n\n        if (registered) {\n            registered.forEach(addModule.bind(null, !ModuleRegistry.isPackageBased()));\n        }\n\n        return allModules;\n    }\n\n    private registerModuleUserComponents(beans: Beans, registeredModules: Module[]): void {\n        const moduleUserComps: { componentName: string, componentClass: any; }[]\n            = this.extractModuleEntity(registeredModules,\n                (module) => module.userComponents ? module.userComponents : []);\n\n        moduleUserComps.forEach(compMeta => {\n            beans.userComponentRegistry.registerDefaultComponent(compMeta.componentName, compMeta.componentClass);\n        });\n    }\n\n    private createProvidedBeans(eGridDiv: HTMLElement, gridOptions: GridOptions, params?: GridParams): any {\n        let frameworkOverrides = params ? params.frameworkOverrides : null;\n        if (missing(frameworkOverrides)) {\n            frameworkOverrides = new VanillaFrameworkOverrides();\n        }\n\n        const seed = {\n            gridOptions: gridOptions,\n            eGridDiv: eGridDiv,\n            globalEventListener: params ? params.globalEventListener : null,\n            frameworkOverrides: frameworkOverrides\n        };\n        if (params && params.providedBeanInstances) {\n            Object.assign(seed, params.providedBeanInstances);\n        }\n\n        return seed;\n    }\n\n    private createAgStackComponentsList(registeredModules: Module[]): any[] {\n        let components: ComponentMeta[] = [\n            { componentName: 'AgCheckbox', componentClass: AgCheckbox },\n            { componentName: 'AgRadioButton', componentClass: AgRadioButton },\n            { componentName: 'AgToggleButton', componentClass: AgToggleButton },\n            { componentName: 'AgInputTextField', componentClass: AgInputTextField },\n            { componentName: 'AgInputTextArea', componentClass: AgInputTextArea },\n            { componentName: 'AgInputNumberField', componentClass: AgInputNumberField },\n            { componentName: 'AgInputRange', componentClass: AgInputRange },\n            { componentName: 'AgSelect', componentClass: AgSelect },\n            { componentName: 'AgSlider', componentClass: AgSlider },\n            { componentName: 'AgAngleSelect', componentClass: AgAngleSelect },\n            { componentName: 'AgColorPicker', componentClass: AgColorPicker },\n            { componentName: 'AgGridBody', componentClass: GridBodyComp },\n            { componentName: 'AgHeaderRoot', componentClass: GridHeaderComp },\n            { componentName: 'AgPagination', componentClass: PaginationComp },\n            { componentName: 'AgOverlayWrapper', componentClass: OverlayWrapperComponent },\n            { componentName: 'AgGroupComponent', componentClass: AgGroupComponent },\n            { componentName: 'AgPanel', componentClass: AgPanel },\n            { componentName: 'AgDialog', componentClass: AgDialog },\n            { componentName: 'AgRowContainer', componentClass: RowContainerComp },\n            { componentName: 'AgFakeHorizontalScroll', componentClass: FakeHScrollComp }\n        ];\n\n        const moduleAgStackComps = this.extractModuleEntity(registeredModules,\n            (module) => module.agStackComponents ? module.agStackComponents : []);\n\n        components = components.concat(moduleAgStackComps);\n\n        return components;\n    }\n\n    private createBeansList(rowModelType: string | undefined, registeredModules: Module[]): any[] | undefined {\n        const rowModelClass = this.getRowModelClass(rowModelType, registeredModules);\n\n        if (!rowModelClass) { return; }\n\n        // beans should only contain SERVICES, it should NEVER contain COMPONENTS\n\n        const beans = [\n            rowModelClass, Beans, RowPositionUtils, CellPositionUtils, HeaderPositionUtils,\n            PaginationAutoPageSizeService, GridApi, UserComponentRegistry, AgComponentUtils,\n            ComponentMetadataProvider, ResizeObserverService, UserComponentFactory,\n            RowContainerHeightService, HorizontalResizeService,\n            PinnedRowModel, DragService, DisplayedGroupCreator, EventService, GridOptionsWrapper,\n            PopupService, SelectionService, FilterManager, ColumnModel, HeaderNavigationService,\n            PaginationProxy, RowRenderer, ExpressionService, ColumnFactory, TemplateService,\n            AlignedGridsService, NavigationService, ValueCache, ValueService, LoggerFactory,\n            ColumnUtils, AutoWidthCalculator, StandardMenuFactory, DragAndDropService, ColumnApi,\n            FocusService, MouseEventService, Environment, CellNavigationService, ValueFormatterService,\n            StylingService, ScrollVisibleService, SortController, ColumnHoverService, ColumnAnimationService,\n            SelectableService, AutoGroupColService, ChangeDetectionService, AnimationFrameService,\n            UndoRedoService, AgStackComponentsRegistry, ColumnDefFactory,\n            RowCssClassCalculator, RowNodeBlockLoader, RowNodeSorter, CtrlsService,\n            PinnedWidthService, RowNodeEventThrottle, CtrlsFactory\n        ];\n\n        const moduleBeans = this.extractModuleEntity(registeredModules, (module) => module.beans ? module.beans : []);\n        beans.push(...moduleBeans);\n\n        // check for duplicates, as different modules could include the same beans that\n        // they depend on, eg ClientSideRowModel in enterprise, and ClientSideRowModel in community\n        const beansNoDuplicates: any[] = [];\n        beans.forEach(bean => {\n            if (beansNoDuplicates.indexOf(bean) < 0) {\n                beansNoDuplicates.push(bean);\n            }\n        });\n\n        return beansNoDuplicates;\n    }\n\n    private extractModuleEntity(moduleEntities: any[], extractor: (module: any) => any) {\n        return [].concat(...moduleEntities.map(extractor));\n    }\n\n    private setColumnsAndData(beans: Beans): void {\n        const columnDefs = beans.gridOptionsWrapper.getColumnDefs();\n        beans.columnModel.setColumnDefs(columnDefs || [], \"gridInitializing\");\n        beans.rowModel.start();\n    }\n\n    private dispatchGridReadyEvent(beans: Beans, gridOptions: GridOptions): void {\n        const readyEvent: GridReadyEvent = {\n            type: Events.EVENT_GRID_READY,\n            api: gridOptions.api!,\n            columnApi: gridOptions.columnApi!\n        };\n        beans.eventService.dispatchEvent(readyEvent);\n    }\n\n    private getRowModelClass(rowModelType: string | undefined, registeredModules: Module[]): any {\n\n        // default to client side\n        if (!rowModelType) {\n            rowModelType = Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n        }\n\n        const rowModelClasses: { [name: string]: { new(): IRowModel; }; } = {};\n        registeredModules.forEach(module => {\n            iterateObject(module.rowModels, (key: string, value: { new(): IRowModel; }) => {\n                rowModelClasses[key] = value;\n            });\n        });\n\n        const rowModelClass = rowModelClasses[rowModelType];\n\n        if (exists(rowModelClass)) { return rowModelClass; }\n\n\n\n        if (ModuleRegistry.isPackageBased()) {\n            if ([Constants.ROW_MODEL_TYPE_VIEWPORT, Constants.ROW_MODEL_TYPE_SERVER_SIDE].includes(rowModelType))\n                // If package based only the enterprise row models could be missing.\n                console.error(`AG Grid: Row Model \"${rowModelType}\" not found. Please ensure the package 'ag-grid-enterprise' is imported. Please see: https://www.ag-grid.com/javascript-grid/packages/`);\n            else {\n                console.error('AG Grid: could not find row model for rowModelType ' + rowModelType);\n            }\n        } else {\n            if (rowModelType === Constants.ROW_MODEL_TYPE_INFINITE) {\n                console.error(`AG Grid: Row Model \"Infinite\" not found. Please ensure the ${ModuleNames.InfiniteRowModelModule} module is registered. Please see: https://www.ag-grid.com/javascript-grid/modules/`);\n            } else if (rowModelType === Constants.ROW_MODEL_TYPE_VIEWPORT) {\n                console.error(`AG Grid: Row Model \"Viewport\" not found. Please ensure the AG Grid Enterprise Module ${ModuleNames.ViewportRowModelModule} module is registered. Please see: https://www.ag-grid.com/javascript-grid/modules/`);\n            } else if (rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE) {\n                console.error(`AG Grid: Row Model \"Server Side\" not found. Please ensure the AG Grid Enterprise Module ${ModuleNames.ServerSideRowModelModule} module is registered. Please see: https://www.ag-grid.com/javascript-grid/modules/`);\n            } else if (rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n                console.error(`AG Grid: Row Model \"Client Side\" not found. Please ensure the ${ModuleNames.ClientSideRowModelModule} module is registered. Please see: https://www.ag-grid.com/javascript-grid/modules/`);\n            } else {\n                console.error('AG Grid: could not find row model for rowModelType ' + rowModelType);\n            }\n        }\n\n    }\n\n}\n","import { RowNode } from \"./entities/rowNode\";\nimport { exists, defaultComparator } from \"./utils/generic\";\n\nexport function defaultGroupComparator(valueA: any, valueB: any, nodeA: RowNode, nodeB: RowNode, accentedCompare: boolean = false): number {\n    console.warn('AG Grid: Since ag-grid 11.0.0 defaultGroupComparator is not necessary. You can remove this from your colDef');\n    const nodeAIsGroup = exists(nodeA) && nodeA.group;\n    const nodeBIsGroup = exists(nodeB) && nodeB.group;\n\n    const bothAreGroups = nodeAIsGroup && nodeBIsGroup;\n    const bothAreNormal = !nodeAIsGroup && !nodeBIsGroup;\n\n    if (bothAreGroups) {\n        return defaultComparator(nodeA.key, nodeB.key, accentedCompare);\n    }\n\n    if (bothAreNormal) {\n        return defaultComparator(valueA, valueB, accentedCompare);\n    }\n\n    if (nodeAIsGroup) {\n        return 1;\n    }\n\n    return -1;\n}\n","import { IComponent } from \"../../interfaces/iComponent\";\nimport { ComponentType } from \"./componentTypes\";\n\n/**\n * B the business interface (ie IHeader)\n * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid\n */\nexport interface FrameworkComponentWrapper {\n    wrap<A extends IComponent<any>>(frameworkComponent: { new(): any } | null,\n                                    methodList: string[],\n                                    optionalMethodList: string[],\n                                    componentType: ComponentType\n    ): A;\n}\n\nexport interface WrappableInterface {\n    hasMethod(name: string): boolean;\n\n    callMethod(name: string, args: IArguments): void;\n\n    addMethod(name: string, callback: Function): void;\n}\n\nexport abstract class BaseComponentWrapper<F extends WrappableInterface> implements FrameworkComponentWrapper {\n    public wrap<A extends IComponent<any>>(OriginalConstructor: { new(): any },\n                                    mandatoryMethodList: string[],\n                                    optionalMethodList: string[] = [],\n                                    componentType: ComponentType): A {\n        const wrapper: F = this.createWrapper(OriginalConstructor, componentType);\n\n        mandatoryMethodList.forEach((methodName => {\n            this.createMethod(wrapper, methodName, true);\n        }));\n\n        optionalMethodList.forEach((methodName => {\n            this.createMethod(wrapper, methodName, false);\n        }));\n\n        return wrapper as any as A;\n\n    }\n\n    public unwrap(comp: any): any {\n        return comp;\n    }\n\n    abstract createWrapper(OriginalConstructor: { new(): any }, componentType: ComponentType): F;\n\n    private createMethod(wrapper: F, methodName: string, mandatory: boolean): void {\n        wrapper.addMethod(methodName, this.createMethodProxy(wrapper, methodName, mandatory));\n    }\n\n    protected createMethodProxy(wrapper: F, methodName: string, mandatory: boolean): Function {\n        return function() {\n            if (wrapper.hasMethod(methodName)) {\n                return wrapper.callMethod(methodName, arguments);\n            }\n\n            if (mandatory) {\n                console.warn('AG Grid: Framework component is missing the method ' + methodName + '()');\n            }\n            return null;\n        };\n    }\n}\n","import { ICellRendererParams } from \"../rendering/cellRenderers/iCellRenderer\";\n\nexport interface ISparklineCellRendererParams extends ICellRendererParams {\n    sparklineOptions?: SparklineOptions;\n}\n\nexport type SparklineOptions = LineSparklineOptions | AreaSparklineOptions | ColumnSparklineOptions | BarSparklineOptions;\n\nexport interface BaseSparklineOptions {\n    /** The key to use to retrieve X values from the data. This will only be used if the data array contains objects with key-value pairs.\n     * Default: `'x'`\n     */\n    xKey?: string;\n    /** The key to use to retrieve Y values from the data. This will only be used if the data array contains objects with key-value pairs.\n     * Default: `'y'`\n     */\n    yKey?: string;\n    /** Configuration for the padding in pixels shown around the sparklines. */\n    padding?: PaddingOptions;\n    /** The options for the x-axis in the sparklines. */\n    axis?: SparklineAxisOptions;\n    /** The configuration for the highlighting used when the items are hovered over. */\n    highlightStyle?: HighlightStyleOptions;\n    /** Configuration for the tooltips. */\n    tooltip?: SparklineTooltipOptions;\n}\n\nexport interface LineSparklineOptions extends BaseSparklineOptions {\n    /** The type of sparklines to create, in this case it would be `'line'`. */\n    type?: 'line';\n    /** The configuration for the line. */\n    line?: SparklineLineOptions;\n    /** The configuration for the marker styles. */\n    marker?: SparklineMarkerOptions;\n    /** The configuration for the crosshairs. */\n    crosshairs?: SparklineCrosshairsOptions;\n}\n\nexport interface AreaSparklineOptions extends BaseSparklineOptions {\n    /** The type of sparklines to create, in this case it would be `'area'`. */\n    type?: 'area';\n    /** The CSS colour value for the fill of the area.\n     * Default: `'rgba(124, 181, 236, 0.25)'`\n     */\n    fill?: string;\n    /** The configuration for the line. */\n    line?: SparklineLineOptions;\n    /** The configuration for the marker styles. */\n    marker?: SparklineMarkerOptions;\n    /** The configuration for the crosshairs. */\n    crosshairs?: SparklineCrosshairsOptions;\n}\n\nexport interface ColumnSparklineOptions extends BaseSparklineOptions {\n    /** The type of sparklines to create, in this case it would be `'column'`. */\n    type?: 'column';\n    /** The CSS colour value for the fill of the columns.\n     * Default: `'rgb(124, 181, 236)'`\n     */\n    fill?: string;\n    /** The CSS colour value for the outline of the columns.\n     * Default: `'silver'`\n     */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the columns.\n     * Default: `0`\n     */\n    strokeWidth?: number;\n    /** The size of the gap between the columns as a proportion, between 0 and 1. This value is a fraction of the “step”, which is the interval between the start of a band and the start of the next band.\n     * Default: `0.1`\n     */\n    paddingInner?: number;\n    /** The padding on the outside i.e. left and right of the first and last columns, to leave some room for the axis. In association with `paddingInner`, this value can be between 0 and 1.\n     * Default: `0.2`\n     */\n    paddingOuter?: number;\n    /** User override for the automatically determined domain (based on data min and max values). Only applied to `number` axes.\n     * Used to interpolate the numeric pixel values corresponding to each data value.\n     */\n    valueAxisDomain?: [number, number];\n    /** A callback function to return format styles of type ColumnFormat, based on the data represented by individual columns. */\n    formatter?: SparklineColumnFormatter;\n    /** Configuration for the labels. */\n    label?: SparklineLabelOptions;\n}\n\nexport interface BarSparklineOptions extends BaseSparklineOptions {\n    /** The type of sparklines to create, in this case it would be `'bar'`. */\n    type?: 'bar';\n    /** The CSS colour value for the fill of the bars.\n     * Default: `'rgb(124, 181, 236)'`\n     */\n    fill?: string;\n    /** The CSS colour value for the outline of the bars.\n     * Default `'silver'`\n     */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the bars.\n     * Default: `0`\n     */\n    strokeWidth?: number;\n    /** The size of the gap between the bars as a proportion, between 0 and 1. This value is a fraction of the “step”, which is the interval between the start of a band and the start of the next band.\n     * Default: `0.1`\n     */\n    paddingInner?: number;\n    /** The padding on the outside i.e. left and right of the first and last bars, to leave some room for the axis. In association with `paddingInner`, this value can be between 0 and 1.\n     * Default: `0.2`\n     */\n    paddingOuter?: number;\n    /** User override for the automatically determined domain (based on data min and max values). Only applied to `number` axes.\n     * Used to interpolate the numeric pixel values corresponding to each data value.\n     */\n    valueAxisDomain?: [number, number];\n    /** A callback function to return format styles of type BarFormat, based on the data represented by individual bars. */\n    formatter?: SparklineBarFormatter;\n    /** Configuration for the labels. */\n    label?: SparklineLabelOptions;\n}\n\nexport interface SparklineLabelOptions {\n    /** Set to true to enable labels. */\n    enabled?: boolean;\n    /** Set size of the font. */\n    fontSize?: number;\n    /** Specify the font for the label text. */\n    fontFamily?: string;\n    /** Specify the font style for the label text. */\n    fontStyle?: 'normal' | 'italic' | 'oblique';\n    /** Set how thick or thin characters in label text should be displayed. */\n    fontWeight?: 'normal' | 'bold' | 'bolder' | 'lighter' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';\n    /** Set the color of the label text. The color can be specified by a color name, a HEX or an RGB value. */\n    color?: string;\n    /** A callback function to return the text to be displayed as the label, based on the value represented by the column or bar. By default the values are simply stringified. */\n    formatter?: (params: LabelFormatterParams) => string;\n    /** Where to render labels relative to the segments.\n    * Default: `insideEnd`\n    * */\n    placement?: BarColumnLabelPlacement;\n}\n\nexport interface LabelFormatterParams {\n    /** The Y value of the data point. */\n    value: number | undefined;\n}\n\nexport enum BarColumnLabelPlacement {\n    InsideBase = 'insideBase',\n    InsideEnd = 'insideEnd',\n    Center = 'center',\n    OutsideEnd = 'outsideEnd',\n}\n\nexport interface PaddingOptions {\n    /** The number of pixels of padding at the top of the sparkline area.\n     * Default: `3`\n     */\n    top?: number;\n    /** The number of pixels of padding at the right of the sparkline area.\n     * Default: `3`\n     */\n    right?: number;\n    /** The number of pixels of padding at the bottom of the sparkline area.\n     * Default: `3`\n     */\n    bottom?: number;\n    /** The number of pixels of padding at the left of the sparkline area.\n     * Default: `3`\n     */\n    left?: number;\n}\n\nexport interface SparklineAxisOptions {\n    /** The type of x-axis used to plot the data.\n     * Default: `'category'`\n     */\n    type?: AxisType;\n    /** The CSS colour value for the outline of the horizontal axis line.\n     * Default: `'rgb(204, 214, 235)'`\n     */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the horizontal axis line.\n     * Default: `1`\n     */\n    strokeWidth?: number;\n}\n\nexport type AxisType = 'number' | 'category' | 'time';\n\nexport interface SparklineTooltipOptions {\n    /** Set to false to disable tooltips. */\n    enabled?: boolean;\n    /** The element to place the tooltip into. This can be used to confine the tooltip to a specific area which may be outside of the sparkline grid cell. */\n    container?: HTMLElement;\n    /** The horizontal distance in pixels between the cursor and the top left corner of the tooltip.\n     * Default: `10`\n     */\n    xOffset?: number;\n    /** The vertical distance in pixels between the cursor and the top left corner of the tooltip.\n     * Default: `0`\n     */\n    yOffset?: number;\n    /** A callback function used to create the content for the tooltips. This function should return an object or a HTML string used to render the tooltip. */\n    renderer?: SparklineTooltipRenderer;\n}\n\nexport type SparklineTooltipRenderer = (params: TooltipRendererParams) => TooltipRendererResult;\nexport interface TooltipRendererResult {\n    /** Set to false to disable individual tooltip. */\n    enabled?: boolean;\n    /** The content to display in each tooltip. */\n    content?: string;\n    /** The title of the tooltip. */\n    title?: string;\n    /** The CSS color for the title text. */\n    color?: string;\n    /** The CSS color for the background of the tooltip title. */\n    backgroundColor?: string;\n    /** The opacity of the background for the tooltip title. */\n    opacity?: number;\n}\nexport interface TooltipRendererParams {\n    /** The grid context, includes row data, giving access to data from other columns in the same row. */\n    context?: any;\n    /** The raw datum associated with the point. */\n    datum: any;\n    /** The X value of the data point. */\n    xValue: any;\n    /** The Y value of the data point. */\n    yValue: any;\n}\n\nexport interface SparklineLineOptions {\n    /** The CSS colour value for the line.\n     *  Default: `'rgb(124, 181, 236)'`\n     */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the line.\n     * Default: `1`\n     */\n    strokeWidth?: number;\n}\n\nexport interface HighlightStyleOptions {\n    /** The width in pixels of the markers when hovered over. This is only for the Line and Area sparklines as Column and Bar sparklines do not have markers.\n     * Default: `6`\n     */\n    size?: number;\n    /** The fill colour of the markers, columns or bars when hovered over. Use `undefined` for no highlight fill.\n     * Default: `'yellow'`\n     */\n    fill?: string;\n    /** The CSS colour value for the outline of the markers, columns or bars when hovered over. Use `undefined` for no highlight stroke.\n     * Default: `'silver'`\n     */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the markers, columns or bars when hovered over.\n     * Default: `1`\n     */\n    strokeWidth?: number;\n}\nexport interface SparklineCrosshairsOptions {\n    xLine?: CrosshairLineOptions;\n    yLine?: CrosshairLineOptions;\n}\nexport interface CrosshairLineOptions {\n    /** Set to true to show crosshair line.\n     * Default: false\n     */\n    enabled?: boolean;\n    /** The CSS colour value for the crosshair line.\n     * Default: `rgba(0,0,0, 0.54)`\n     */\n    stroke?: string;\n    /** The thickness in pixels for the crosshair line.\n     * Default: 1\n     */\n    strokeWidth?: number;\n    /**\n     * Defines how the crosshair stroke is rendered. This can be one of the lineDash style options.\n     * The default is `solid`, this renders a solid stroke with no gaps.\n     */\n    lineDash?: 'dash' | 'dashDot' | 'dashDotDot' | 'dot' | 'longDash' | 'longDashDot' | 'longDashDotDot' | 'shortDash' | 'shortDashDot' | 'shortDashDotDot' | 'shortDot' | 'solid';\n    /**\n     * The shape used to draw the end points of the crosshair line.\n     * The options include `butt` (the ends of the line are squared off at the endpoints), `round` (the ends of the line are rounded) and `square` (the ends of the line are squared off by adding a box with width equal to the line's strokeWidth and height equal to half the line's strokeWidth).\n     * Default: `butt`\n     */\n    lineCap?: 'round' | 'square' | 'butt';\n}\n\nexport type SparklineColumnFormatter = (params: ColumnFormatterParams) => ColumnFormat;\nexport type SparklineBarFormatter = (params: BarFormatterParams) => BarFormat;\nexport interface ColumnFormatterParams {\n    /** The raw data associated with the specific column. */\n    datum: any;\n    /** The X value of the data point. */\n    xValue: any;\n    /** The Y value of the data point. */\n    yValue: any;\n    /** The width of the column in pixels. */\n    width: number;\n    /** The height of the column in pixels. */\n    height: number;\n    /** Whether or not the column is a minimum point. */\n    min?: boolean;\n    /** Whether or not the column is a maximum point. */\n    max?: boolean;\n    /** Whether or not the column represents the first data point. */\n    first?: boolean;\n    /** Whether or not the column represents the last data point. */\n    last?: boolean;\n    /** The CSS colour value for the fill of the individual column. */\n    fill?: string;\n    /** The CSS colour value for the outline of the individual column. */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the individual column. */\n    strokeWidth: number;\n    /** Whether or not the column is highlighted. */\n    highlighted: boolean;\n}\n\nexport interface ColumnFormat {\n    /** The CSS colour value for the fill of the individual column. */\n    fill?: string;\n    /** The CSS colour value for the outline of the individual column. */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the individual column.*/\n    strokeWidth?: number;\n}\n\nexport interface BarFormatterParams {\n    /** The raw data associated with the specific bar. */\n    datum: any;\n    /** The X value of the data point. */\n    xValue: any;\n    /** The Y value of the data point. */\n    yValue: any;\n    /** The width of the bar in pixels. */\n    width: number;\n    /** The height of the bar in pixels. */\n    height: number;\n    /** Whether or not the bar is a minimum point. */\n    min?: boolean;\n    /** Whether or not the bar is a maximum point. */\n    max?: boolean;\n    /** Whether or not the bar represents the first data point. */\n    first?: boolean;\n    /** Whether or not the bar represents the last data point. */\n    last?: boolean;\n    /** The CSS colour value for the fill of the individual bar. */\n    fill?: string;\n    /** The CSS colour value for the outline of the individual bar. */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the individual bar. */\n    strokeWidth: number;\n    /** Whether or not the bar is highlighted. */\n    highlighted: boolean;\n}\nexport interface BarFormat {\n    /** The CSS colour value for the fill of the individual bar. */\n    fill?: string;\n    /** The CSS colour value for the outline of the individual bar. */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the individual bar.*/\n    strokeWidth?: number;\n}\n\nexport interface SparklineMarkerOptions {\n    /** By default this is set to `true` whilst marker size is set to `0`, which means the markers are present but not visible.\n     * Default: `true`\n     */\n    enabled?: boolean;\n    /** The shape of the markers.\n     * Default: `'circle'`\n     */\n    shape?: string;\n    /** The width in pixels of markers. By default this is `0`, increase the size to make markers visible.\n     * Default: `0`\n     */\n    size?: number;\n    /** The CSS colour value for the fill of the markers.\n     * Default: `'rgb(124, 181, 236)'`\n     */\n    fill?: string;\n    /** The CSS colour value for the outline of the markers.\n     * Default: `'rgb(124, 181, 236)'`\n     */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the markers.\n     * Default: `1`\n     */\n    strokeWidth?: number;\n    /** A callback function to return format styles for individual markers. */\n    formatter?: SparklineMarkerFormatter;\n}\n\nexport type SparklineMarkerFormatter = (params: MarkerFormatterParams) => MarkerFormat;\nexport interface MarkerFormatterParams {\n    /** The raw data associated with the specific marker. */\n    datum: any;\n    /** The X value of the data point. */\n    xValue: any;\n    /** The Y value of the data point. */\n    yValue: any;\n    /** Whether or not the marker is a minimum point. */\n    min?: boolean;\n    /** Whether or not the marker is a maximum point. */\n    max?: boolean;\n    /** Whether or not the marker represents the first data point. */\n    first?: boolean;\n    /** Whether or not the marker represents the last data point. */\n    last?: boolean;\n    /** The CSS colour value for the fill of the individual marker. */\n    fill?: string;\n    /** The CSS colour value for the outline of the individual marker. */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the individual marker. */\n    strokeWidth: number;\n    /** The width in pixels of the individual marker. */\n    size: number;\n    /** Whether or not the marker is highlighted. */\n    highlighted: boolean;\n}\n\nexport interface MarkerFormat {\n    /** Set to false to make marker invisible. */\n    enabled?: boolean;\n    /** The width in pixels of the individual marker. */\n    size?: number;\n    /** The CSS colour value for the fill of the individual marker. */\n    fill?: string;\n    /** The CSS colour value for the outline of the individual marker. */\n    stroke?: string;\n    /** The thickness in pixels for the stroke of the individual marker.*/\n    strokeWidth?: number;\n}","// to satisfy server side compilation\ndeclare let global: any;\nconst globalObj = typeof global === 'undefined' ? {} : global;\nglobalObj.HTMLElement = typeof HTMLElement === 'undefined' ? {} : HTMLElement;\nglobalObj.HTMLButtonElement = typeof HTMLButtonElement === 'undefined' ? {} : HTMLButtonElement;\nglobalObj.HTMLSelectElement = typeof HTMLSelectElement === 'undefined' ? {} : HTMLSelectElement;\nglobalObj.HTMLInputElement = typeof HTMLInputElement === 'undefined' ? {} : HTMLInputElement;\nglobalObj.Node = typeof Node === 'undefined' ? {} : Node;\nglobalObj.MouseEvent = typeof MouseEvent === 'undefined' ? {} : MouseEvent;\n\n// columns\nexport { ColumnFactory } from \"./columns/columnFactory\";\nexport { ColumnModel, ColumnState, ColumnStateParams, ApplyColumnStateParams } from \"./columns/columnModel\";\nexport { ColumnKeyCreator } from \"./columns/columnKeyCreator\";\nexport { ColumnUtils } from \"./columns/columnUtils\";\nexport { DisplayedGroupCreator } from \"./columns/displayedGroupCreator\";\nexport { GroupInstanceIdCreator } from \"./columns/groupInstanceIdCreator\";\n\n// components\nexport { ComponentUtil } from \"./components/componentUtil\";\nexport { AgStackComponentsRegistry } from \"./components/agStackComponentsRegistry\";\n\nexport { ColDefUtil } from \"./components/colDefUtil\";\nexport { UserComponentRegistry } from \"./components/framework/userComponentRegistry\";\nexport { UserComponentFactory, UserCompDetails } from \"./components/framework/userComponentFactory\";\nexport { ComponentType } from \"./components/framework/componentTypes\";\n\n// context\nexport { BeanStub } from \"./context/beanStub\";\nexport {\n    Context,\n    ComponentMeta,\n    Autowired,\n    PostConstruct,\n    PreConstruct,\n    Optional,\n    Bean,\n    Qualifier,\n    PreDestroy\n} from \"./context/context\";\nexport { QuerySelector, RefSelector } from \"./widgets/componentAnnotations\";\n\n// excel\nexport {\n    ColumnWidthCallbackParams,\n    RowHeightCallbackParams,\n    IExcelCreator,\n    ExcelAlignment,\n    ExcelBorder,\n    ExcelBorders,\n    ExcelCell,\n    ExcelColumn,\n    ExcelContentType,\n    ExcelData,\n    ExcelDataType,\n    ExcelExportParams,\n    ExcelHeaderFooterConfig,\n    ExcelHeaderFooter,\n    ExcelHeaderFooterContent,\n    ExcelImage,\n    ExcelSheetMargin,\n    ExcelExportMultipleSheetParams,\n    ExcelSheetPageSetup,\n    ExcelFont,\n    ExcelInterior,\n    ExcelNumberFormat,\n    ExcelOOXMLDataType,\n    ExcelOOXMLTemplate,\n    ExcelProtection,\n    ExcelRelationship,\n    ExcelFactoryMode,\n    ExcelRow,\n    ExcelStyle,\n    ExcelTable,\n    ExcelXMLTemplate,\n    ExcelWorksheet\n} from \"./interfaces/iExcelCreator\";\n\n// dragAndDrop\nexport {\n    DragAndDropService,\n    DragSourceType,\n    HorizontalDirection,\n    VerticalDirection,\n    DropTarget,\n    DragSource,\n    DraggingEvent\n} from \"./dragAndDrop/dragAndDropService\";\nexport { RowDropZoneParams } from \"./gridBodyComp/rowDragFeature\";\nexport { DragService } from \"./dragAndDrop/dragService\";\nexport { IRowDragItem } from \"./rendering/row/rowDragComp\";\n\n// entities\nexport { Column } from \"./entities/column\";\nexport { ColumnGroup } from \"./entities/columnGroup\";\nexport { ProvidedColumnGroup } from \"./entities/providedColumnGroup\";\nexport { RowNode, RowHighlightPosition } from \"./entities/rowNode\";\nexport { SideBarDef, ToolPanelDef } from \"./entities/sideBar\";\n\n// filter\nexport { IFilterDef, IFilterParams, IFilterOptionDef, IDoesFilterPassParams, ProvidedFilterModel, IFilter, IFilterComp, IFilterType, IFloatingFilterType } from \"./interfaces/iFilter\";\nexport { ISetFilter, SetFilterModel, ISetFilterParams, SetFilterValues, SetFilterModelValue, SetFilterValuesFunc, SetFilterValuesFuncParams } from \"./interfaces/iSetFilter\";\nexport { FilterManager, FilterWrapper, FilterRequestSource } from \"./filter/filterManager\";\nexport { IMultiFilter, IMultiFilterModel, IMultiFilterComp, IMultiFilterParams, IMultiFilterDef } from './interfaces/iMultiFilter';\n\nexport { ProvidedFilter, IProvidedFilter, IProvidedFilterParams } from \"./filter/provided/providedFilter\";\nexport { ISimpleFilter, SimpleFilter, ISimpleFilterParams, ISimpleFilterModel, ICombinedSimpleModel, JoinOperator } from \"./filter/provided/simpleFilter\";\nexport { ScalarFilter, IScalarFilterParams } from \"./filter/provided/scalarFilter\";\n\nexport { NumberFilter, INumberFilterParams, NumberFilterModel } from \"./filter/provided/number/numberFilter\";\nexport { TextFilter, ITextFilterParams, TextFilterModel, TextFormatter } from \"./filter/provided/text/textFilter\";\nexport { DateFilter, IDateFilterParams, DateFilterModel } from \"./filter/provided/date/dateFilter\";\n\nexport { IFloatingFilter, IFloatingFilterParams, IFloatingFilterComp, BaseFloatingFilterChange, IFloatingFilterParent, IFloatingFilterParentCallback } from \"./filter/floating/floatingFilter\";\nexport { TextFloatingFilter } from './filter/provided/text/textFloatingFilter';\nexport { HeaderFilterCellComp } from './headerRendering/cells/floatingFilter/headerFilterCellComp';\nexport { FloatingFilterMapper } from './filter/floating/floatingFilterMapper';\n\n// gridPanel\nexport { GridBodyComp } from \"./gridBodyComp/gridBodyComp\";\nexport { GridBodyCtrl, IGridBodyComp, RowAnimationCssClasses } from \"./gridBodyComp/gridBodyCtrl\";\nexport { ScrollVisibleService } from \"./gridBodyComp/scrollVisibleService\";\nexport { MouseEventService } from \"./gridBodyComp/mouseEventService\";\nexport { NavigationService } from \"./gridBodyComp/navigationService\";\n\n// rowContainer\nexport { RowContainerComp } from \"./gridBodyComp/rowContainer/rowContainerComp\";\nexport { RowContainerName, IRowContainerComp, RowContainerCtrl, RowContainerType, getRowContainerTypeForName } from \"./gridBodyComp/rowContainer/rowContainerCtrl\";\n\n// headerRendering\nexport { BodyDropPivotTarget } from \"./headerRendering/columnDrag/bodyDropPivotTarget\";\nexport { BodyDropTarget } from \"./headerRendering/columnDrag/bodyDropTarget\";\nexport { CssClassApplier } from \"./headerRendering/cells/cssClassApplier\";\nexport { HeaderRowContainerComp } from \"./headerRendering/rowContainer/headerRowContainerComp\";\nexport { GridHeaderComp } from \"./headerRendering/gridHeaderComp\";\nexport { GridHeaderCtrl, IGridHeaderComp } from \"./headerRendering/gridHeaderCtrl\";\nexport { HeaderRowComp, HeaderRowType } from \"./headerRendering/row/headerRowComp\";\nexport { HeaderRowCtrl, IHeaderRowComp } from \"./headerRendering/row/headerRowCtrl\";\nexport { HeaderCellCtrl, IHeaderCellComp } from \"./headerRendering/cells/column/headerCellCtrl\";\nexport { HeaderFilterCellCtrl, IHeaderFilterCellComp } from \"./headerRendering/cells/floatingFilter/headerFilterCellCtrl\";\nexport { HeaderGroupCellCtrl, IHeaderGroupCellComp } from \"./headerRendering/cells/columnGroup/headerGroupCellCtrl\";\nexport { AbstractHeaderCellCtrl, IAbstractHeaderCellComp } from \"./headerRendering/cells/abstractCell/abstractHeaderCellCtrl\";\nexport { HeaderRowContainerCtrl, IHeaderRowContainerComp } from \"./headerRendering/rowContainer/headerRowContainerCtrl\";\nexport { HorizontalResizeService } from \"./headerRendering/common/horizontalResizeService\";\nexport { MoveColumnFeature } from \"./headerRendering/columnDrag/moveColumnFeature\";\nexport { StandardMenuFactory } from \"./headerRendering/cells/column/standardMenu\";\n\n// layout\nexport { TabbedLayout, TabbedItem } from \"./layout/tabbedLayout\";\n\n// misc\nexport { simpleHttpRequest } from \"./misc/simpleHttpRequest\";\nexport { ResizeObserverService } from \"./misc/resizeObserverService\";\nexport { IImmutableService } from \"./interfaces/iImmutableService\";\nexport { AnimationFrameService } from \"./misc/animationFrameService\";\n\n// editing / cellEditors\nexport { ICellEditor, ICellEditorComp, ICellEditorParams } from \"./interfaces/iCellEditor\";\nexport { LargeTextCellEditor } from \"./rendering/cellEditors/largeTextCellEditor\";\nexport { PopupEditorWrapper } from \"./rendering/cellEditors/popupEditorWrapper\";\nexport { PopupSelectCellEditor } from \"./rendering/cellEditors/popupSelectCellEditor\";\nexport { PopupTextCellEditor } from \"./rendering/cellEditors/popupTextCellEditor\";\nexport { SelectCellEditor } from \"./rendering/cellEditors/selectCellEditor\";\nexport { TextCellEditor } from \"./rendering/cellEditors/textCellEditor\";\n\n// rendering / cellRenderers\nexport { Beans } from \"./rendering/beans\";\nexport { ICellRenderer, ICellRendererFunc, ICellRendererComp, ICellRendererParams, ISetFilterCellRendererParams } from \"./rendering/cellRenderers/iCellRenderer\";\nexport { AnimateShowChangeCellRenderer } from \"./rendering/cellRenderers/animateShowChangeCellRenderer\";\nexport { AnimateSlideCellRenderer } from \"./rendering/cellRenderers/animateSlideCellRenderer\";\nexport { GroupCellRenderer, } from \"./rendering/cellRenderers/groupCellRenderer\";\nexport { GroupCellRendererParams, FooterValueGetterFunc, IGroupCellRenderer, GroupCellRendererCtrl } from \"./rendering/cellRenderers/groupCellRendererCtrl\";\n\n// status bar components\nexport { StatusPanelDef, IStatusPanel, IStatusPanelComp, IStatusPanelParams } from \"./interfaces/iStatusPanel\";\nexport { IStatusBarService } from \"./interfaces/iStatusBarService\";\n\n// tool panel components\nexport { IToolPanel, IToolPanelComp, IToolPanelParams, IPrimaryColsPanel, ToolPanelColumnCompParams } from \"./interfaces/iToolPanel\";\nexport { IColumnToolPanel } from \"./interfaces/iColumnToolPanel\";\nexport { IFiltersToolPanel } from \"./interfaces/iFiltersToolPanel\";\n\n// overlays\nexport { ILoadingOverlayComp, ILoadingOverlayParams } from \"./rendering/overlays/loadingOverlayComponent\";\nexport { INoRowsOverlayComp, INoRowsOverlayParams } from \"./rendering/overlays/noRowsOverlayComponent\";\n\n// features\nexport { SetLeftFeature } from \"./rendering/features/setLeftFeature\";\nexport { PositionableFeature, ResizableStructure, ResizableSides, PositionableOptions } from \"./rendering/features/positionableFeature\";\n\n// rendering\nexport { AutoWidthCalculator } from \"./rendering/autoWidthCalculator\";\nexport { CheckboxSelectionComponent } from \"./rendering/checkboxSelectionComponent\";\nexport { CellComp } from \"./rendering/cell/cellComp\";\nexport { CellCtrl, ICellComp } from \"./rendering/cell/cellCtrl\";\nexport { RowCtrl, IRowComp } from \"./rendering/row/rowCtrl\";\nexport { RowRenderer } from \"./rendering/rowRenderer\";\nexport { ValueFormatterService } from \"./rendering/valueFormatterService\";\nexport { ILoadingCellRenderer, ILoadingCellRendererComp, ILoadingCellRendererParams } from \"./rendering/cellRenderers/loadingCellRenderer\";\n\n// row models\nexport { PinnedRowModel } from \"./pinnedRowModel/pinnedRowModel\";\nexport { RowNodeTransaction } from \"./interfaces/rowNodeTransaction\";\nexport { RowDataTransaction } from \"./interfaces/rowDataTransaction\";\nexport { ServerSideTransaction, ServerSideTransactionResult, ServerSideTransactionResultStatus } from \"./interfaces/serverSideTransaction\";\nexport { ChangedPath } from \"./utils/changedPath\";\nexport { RowNodeBlock, LoadCompleteEvent, LoadSuccessParams } from \"./rowNodeCache/rowNodeBlock\";\nexport { RowNodeBlockLoader } from \"./rowNodeCache/rowNodeBlockLoader\";\nexport { PaginationProxy } from \"./pagination/paginationProxy\";\nexport { IClientSideRowModel, ClientSideRowModelSteps, RefreshModelParams } from \"./interfaces/iClientSideRowModel\";\nexport { IInfiniteRowModel } from \"./interfaces/iInfiniteRowModel\";\n\nexport { ColumnVO } from \"./interfaces/iColumnVO\";\n\nexport { IServerSideDatasource, IServerSideGetRowsParams, IServerSideGetRowsRequest } from \"./interfaces/iServerSideDatasource\";\nexport { IServerSideRowModel, IServerSideTransactionManager, RefreshStoreParams } from \"./interfaces/iServerSideRowModel\";\nexport { IServerSideStore, StoreRefreshAfterParams, ServerSideStoreState } from \"./interfaces/IServerSideStore\";\n\nexport { ISideBar } from \"./interfaces/iSideBar\";\nexport { IGetRowsParams, IDatasource } from \"./interfaces/iDatasource\";\n\n//styling\nexport { StylingService } from \"./styling/stylingService\";\nexport { UpdateLayoutClassesParams, LayoutCssClasses } from \"./styling/layoutFeature\";\n\n// widgets\nexport { AgAbstractField, FieldElement } from \"./widgets/agAbstractField\";\nexport { AgCheckbox } from \"./widgets/agCheckbox\";\nexport { AgRadioButton } from \"./widgets/agRadioButton\";\nexport { AgToggleButton } from \"./widgets/agToggleButton\";\nexport { AgInputTextField } from \"./widgets/agInputTextField\";\nexport { AgInputTextArea } from \"./widgets/agInputTextArea\";\nexport { AgInputNumberField } from \"./widgets/agInputNumberField\";\nexport { AgInputRange } from \"./widgets/agInputRange\";\nexport { AgSelect } from \"./widgets/agSelect\";\nexport { AgSlider } from \"./widgets/agSlider\";\nexport { AgAngleSelect } from \"./widgets/agAngleSelect\";\nexport { AgColorPicker } from \"./widgets/agColorPicker\";\nexport { AgGroupComponent, AgGroupComponentParams } from \"./widgets/agGroupComponent\";\nexport { AgMenuItemComponent, MenuItemActivatedEvent, MenuItemSelectedEvent } from \"./widgets/agMenuItemComponent\";\nexport { AgMenuList } from \"./widgets/agMenuList\";\nexport { AgMenuPanel } from \"./widgets/agMenuPanel\";\nexport { AgDialog } from \"./widgets/agDialog\";\nexport { AgPanel } from \"./widgets/agPanel\";\nexport { ListOption } from \"./widgets/agList\";\nexport { Component, VisibleChangedEvent, CssClassManager } from \"./widgets/component\";\nexport { ManagedFocusFeature, ManagedFocusCallbacks } from \"./widgets/managedFocusFeature\";\nexport { TabGuardComp } from \"./widgets/tabGuardComp\";\nexport { TabGuardCtrl, ITabGuard } from \"./widgets/tabGuardCtrl\";\nexport { PopupComponent } from \"./widgets/popupComponent\";\nexport { PopupService, AgPopup } from \"./widgets/popupService\";\nexport { TouchListener, TapEvent, LongTapEvent } from \"./widgets/touchListener\";\nexport { VirtualList, VirtualListModel } from \"./widgets/virtualList\";\n\n// range\nexport {\n    CellRange, CellRangeParams, CellRangeType, RangeSelection, AddRangeSelectionParams, IRangeService,\n    ISelectionHandle, SelectionHandleType, ISelectionHandleFactory\n} from \"./interfaces/IRangeService\";\nexport { IChartService, ChartModel, GetChartImageDataUrlParams, ChartModelType } from \"./interfaces/IChartService\";\n\n// master detail\nexport { IDetailCellRendererParams, GetDetailRowData, GetDetailRowDataParams, IDetailCellRenderer, IDetailCellRendererCtrl } from './interfaces/masterDetail';\n\n// exporter\nexport {\n    CsvExportParams, CsvCell, CsvCellData, CsvCustomContent, ExportParams, PackageFileParams,\n    ProcessCellForExportParams, ProcessHeaderForExportParams, ProcessGroupHeaderForExportParams,\n    ProcessRowGroupForExportParams, ShouldRowBeSkippedParams, BaseExportParams\n} from \"./interfaces/exportParams\";\nexport { HeaderElement, PrefixedXmlAttributes, XmlElement } from \"./interfaces/iXmlFactory\";\nexport { ICsvCreator } from \"./interfaces/iCsvCreator\";\n\n// root\nexport { AutoScrollService } from './autoScrollService';\nexport { VanillaFrameworkOverrides } from \"./vanillaFrameworkOverrides\";\nexport { CellNavigationService } from \"./cellNavigationService\";\nexport { AlignedGridsService } from \"./alignedGridsService\";\nexport { Constants } from \"./constants/constants\";\nexport { KeyCode } from \"./constants/keyCode\";\nexport { Grid, GridParams, GridCoreCreator } from \"./grid\";\nexport { GridApi, RedrawRowsParams, RefreshCellsParams, StartEditingCellParams, DetailGridInfo, CreateRangeChartParams, ChartParamsCellRange, CreatePivotChartParams, CreateCrossFilterChartParams } from \"./gridApi\";\nexport { Events } from \"./eventKeys\";\nexport { FocusService } from \"./focusService\";\nexport { defaultGroupComparator } from \"./functions\";\nexport { GridOptionsWrapper } from \"./gridOptionsWrapper\";\nexport { EventService } from \"./eventService\";\nexport { SelectableService } from \"./rowNodes/selectableService\";\nexport { RowNodeSorter, SortedRowNode, SortOption } from \"./rowNodes/rowNodeSorter\";\nexport { CtrlsService } from \"./ctrlsService\";\nexport { GridComp } from \"./gridComp/gridComp\";\nexport { GridCtrl, IGridComp } from \"./gridComp/gridCtrl\";\nexport { Logger, LoggerFactory } from \"./logger\";\nexport { SelectionService } from \"./selectionService\";\nexport { SortController, SortModelItem } from \"./sortController\";\nexport { TemplateService } from \"./templateService\";\nexport * from \"./utils\";\nexport { ColumnSortState } from \"./utils/aria\";\nexport { ValueService } from \"./valueService/valueService\";\nexport { ValueCache } from \"./valueService/valueCache\";\nexport { ExpressionService } from \"./valueService/expressionService\";\n\n// uncatalogued\nexport { IRowModel, RowBounds } from \"./interfaces/iRowModel\";\nexport { IAggFuncService } from \"./interfaces/iAggFuncService\";\nexport { IClipboardService, IClipboardCopyParams, IClipboardCopyRowsParams } from \"./interfaces/iClipboardService\";\nexport { IMenuFactory } from \"./interfaces/iMenuFactory\";\nexport { CellPosition, CellPositionUtils } from \"./entities/cellPosition\";\nexport { RowPosition, RowPositionUtils } from \"./entities/rowPosition\";\nexport { HeaderPosition, HeaderPositionUtils } from \"./headerRendering/common/headerPosition\";\nexport { HeaderNavigationService, HeaderNavigationDirection } from \"./headerRendering/common/headerNavigationService\";\nexport {\n    IAggFunc,\n    IAggFuncParams,\n    ColGroupDef,\n    ColDef,\n    AbstractColDef,\n    ValueSetterParams,\n    ValueParserParams,\n    ValueFormatterParams,\n    ValueFormatterFunc,\n    ValueParserFunc,\n    ValueGetterFunc,\n    ValueSetterFunc,\n    HeaderValueGetterFunc,\n    HeaderValueGetterParams,\n    ColSpanParams,\n    RowSpanParams,\n    SuppressKeyboardEventParams,\n    SuppressHeaderKeyboardEventParams,\n    ValueGetterParams,\n    NewValueParams,\n    CellClassParams,\n    CellClassFunc,\n    CellStyleFunc,\n    CellStyle,\n    CellClassRules,\n    CellEditorSelectorFunc,\n    CellEditorSelectorResult,\n    CellRendererSelectorFunc,\n    CellRendererSelectorResult,\n    GetQuickFilterTextParams,\n    ColumnFunctionCallbackParams,\n    CheckboxSelectionCallbackParams,\n    CheckboxSelectionCallback,\n    RowDragCallback,\n    RowDragCallbackParams,\n    DndSourceCallback,\n    DndSourceCallbackParams,\n    DndSourceOnRowDragParams,\n    EditableCallbackParams,\n    EditableCallback,\n    SuppressPasteCallback,\n    SuppressPasteCallbackParams,\n    SuppressNavigableCallback,\n    SuppressNavigableCallbackParams,\n    HeaderCheckboxSelectionCallbackParams,\n    HeaderCheckboxSelectionCallback,\n    ColumnsMenuParams,\n    HeaderClassParams,\n    HeaderClass,\n    ToolPanelClassParams,\n    ToolPanelClass,\n    KeyCreatorParams,\n    // deprecated params\n    IsColumnFunc,\n    IsColumnFuncParams\n} from \"./entities/colDef\";\nexport {\n    GridOptions,\n    IsApplyServerSideTransaction,\n    GetContextMenuItems,\n    GetDataPath,\n    IsRowMaster,\n    IsRowSelectable,\n    IsRowFilterable,\n    MenuItemLeafDef,\n    MenuItemDef,\n    GetMainMenuItems,\n    GetRowNodeIdFunc,\n    GetRowIdFunc,\n    ChartRef,\n    ChartRefParams,\n    RowClassRules,\n    RowStyle,\n    RowClassParams,\n    ServerSideStoreType,\n    ServerSideStoreParams,\n    GetServerSideGroupKey,\n    IsServerSideGroup,\n    GetChartToolbarItems,\n    RowGroupingDisplayType,\n    TreeDataDisplayType,\n    LoadingCellRendererSelectorFunc,\n    LoadingCellRendererSelectorResult,\n} from \"./entities/gridOptions\";\n\nexport {\n    FillOperationParams,\n    RowHeightParams,\n    GetRowIdParams,\n    ProcessRowParams,\n    IsServerSideGroupOpenByDefaultParams,\n    IsApplyServerSideTransactionParams,\n    IsGroupOpenByDefaultParams,\n    GetServerSideStoreParamsParams,\n    PaginationNumberFormatterParams,\n    ProcessDataFromClipboardParams,\n    SendToClipboardParams,\n    GetChartToolbarItemsParams,\n    NavigateToNextHeaderParams,\n    TabToNextHeaderParams,\n    NavigateToNextCellParams,\n    TabToNextCellParams,\n    GetContextMenuItemsParams,\n    GetMainMenuItemsParams,\n    PostProcessPopupParams,\n    IsExternalFilterPresentParams,\n    InitialGroupOrderComparatorParams,\n    GetGroupRowAggParams,\n    IsFullWidthRowParams,\n    PostSortRowsParams,\n    GetLocaleTextParams,\n    GetGroupAggFilteringParams,\n} from \"./entities/iCallbackParams\"\nexport {\n    WithoutGridCommon\n} from \"./interfaces/iCommon\";\n\n\nexport * from \"./propertyKeys\";\nexport { IProvidedColumn } from \"./entities/iProvidedColumn\";\nexport { IHeaderColumn } from \"./entities/iHeaderColumn\";\nexport { IViewportDatasource, IViewportDatasourceParams } from \"./interfaces/iViewportDatasource\";\nexport { IContextMenuFactory } from \"./interfaces/iContextMenuFactory\";\nexport { IRowNodeStage, StageExecuteParams } from \"./interfaces/iRowNodeStage\";\nexport { IDateParams, IDate, IDateComp } from \"./rendering/dateComponent\";\nexport { IAfterGuiAttachedParams, ContainerType } from \"./interfaces/iAfterGuiAttachedParams\";\nexport { IComponent } from \"./interfaces/iComponent\";\nexport { IEventEmitter } from \"./interfaces/iEventEmitter\";\nexport { IHeaderParams, IHeaderComp, IHeader } from \"./headerRendering/cells/column/headerComp\";\nexport { IHeaderGroupParams, IHeaderGroup, IHeaderGroupComp } from \"./headerRendering/cells/columnGroup/headerGroupComp\";\nexport { ColumnApi } from \"./columns/columnApi\";\nexport { IRichCellEditorParams } from \"./interfaces/iRichCellEditorParams\";\nexport { WrappableInterface, BaseComponentWrapper, FrameworkComponentWrapper } from \"./components/framework/frameworkComponentWrapper\";\nexport { IFrameworkOverrides } from \"./interfaces/iFrameworkOverrides\";\nexport { Environment } from \"./environment\";\nexport { ITooltipComp, ITooltipParams } from \"./rendering/tooltipComponent\";\nexport { CustomTooltipFeature } from \"./widgets/customTooltipFeature\";\nexport { IAggregationStage } from \"./interfaces/iAggregationStage\";\n\n// charts\nexport * from \"./interfaces/iChartOptions\";\nexport * from \"./interfaces/iAgChartOptions\";\n\n// sparklines\nexport * from \"./interfaces/iSparklineCellRendererParams\";\n\n// modules\nexport { Module } from \"./interfaces/iModule\";\nexport { ModuleNames } from \"./modules/moduleNames\";\nexport { ModuleRegistry } from \"./modules/moduleRegistry\";\n\n//  events\nexport * from \"./events\";\n","import React, { Component } from 'react';\nimport { AgGridReactLegacy } from './legacy/agGridReactLegacy';\nimport { AgGridReactUi } from './reactUi/agGridReactUi';\nimport { AgGridReactProps, AgReactUiProps } from './shared/interfaces';\nimport { ColumnApi, GridApi } from '@ag-grid-community/core';\n\n\nexport class AgGridReact extends Component<AgGridReactProps | AgReactUiProps, {}> {\n    public api!: GridApi;\n    public columnApi!: ColumnApi;\n\n    private setGridApi = (api: GridApi, columnApi: ColumnApi) => {\n        this.api = api;\n        this.columnApi = columnApi\n    }\n\n    render() {\n        const ReactComponentToUse = this.props.suppressReactUi ? AgGridReactLegacy : AgGridReactUi;\n        return <ReactComponentToUse { ...this.props } setGridApi={ this.setGridApi } />;\n    }\n}\n","import {\n    BaseComponentWrapper,\n    ColumnApi,\n    ComponentType,\n    ComponentUtil,\n    FrameworkComponentWrapper,\n    Grid,\n    GridApi,\n    GridOptions,\n    WrappableInterface, _\n} from '@ag-grid-community/core';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { LegacyReactComponent } from './legacyReactComponent';\nimport { AgGridColumn } from '../shared/agGridColumn';\nimport { ChangeDetectionService, ChangeDetectionStrategyType } from '../shared/changeDetectionService';\nimport { AgGridReactProps } from '../shared/interfaces';\nimport { NewReactComponent } from '../shared/newReactComponent';\nimport { PortalManager } from '../shared/portalManager';\nimport { ReactFrameworkOverrides } from '../shared/reactFrameworkOverrides';\n\nexport class AgGridReactLegacy extends Component<AgGridReactProps, {}> {\n\n    private static MAX_COMPONENT_CREATION_TIME_IN_MS: number = 1000; // a second should be more than enough to instantiate a component\n\n    static propTypes: any;\n\n    static defaultProps = {\n        legacyComponentRendering: false,\n        disableStaticMarkup: false,\n        maxComponentCreationTimeMs: AgGridReactLegacy.MAX_COMPONENT_CREATION_TIME_IN_MS\n    };\n\n    gridOptions!: GridOptions;\n\n    changeDetectionService = new ChangeDetectionService();\n\n    api: GridApi | null = null;\n    columnApi!: ColumnApi;\n\n    portalManager: PortalManager;\n\n    destroyed = false;\n\n    protected eGridDiv!: HTMLElement;\n\n    readonly SYNCHRONOUS_CHANGE_PROPERTIES = ['context']\n\n    constructor(public props: AgGridReactProps) {\n        super(props);\n\n        this.portalManager = new PortalManager(this, props.componentWrappingElement, props.maxComponentCreationTimeMs);\n    }\n\n    render() {\n        return React.createElement('div', {\n            style: this.createStyleForDiv(),\n            className: this.props.className,\n            ref: (e: HTMLElement) => {\n                this.eGridDiv = e;\n            }\n        }, this.portalManager.getPortals());\n    }\n\n    createStyleForDiv() {\n        return {\n            height: '100%',\n            ...(this.props.containerStyle || {})\n        };\n    }\n\n    componentDidMount() {\n        const modules = this.props.modules || [];\n        const gridParams = {\n            providedBeanInstances: {\n                agGridReact: this,\n                frameworkComponentWrapper: new ReactFrameworkComponentWrapper(this, this.portalManager)\n            },\n            modules,\n            frameworkOverrides: new ReactFrameworkOverrides(false)\n        };\n\n        const gridOptions = this.props.gridOptions || {};\n        const {children} = this.props;\n\n        if (AgGridColumn.hasChildColumns(children)) {\n            gridOptions.columnDefs = AgGridColumn.mapChildColumnDefs(children);\n        }\n\n        this.gridOptions = ComponentUtil.copyAttributesToGridOptions(gridOptions, this.props);\n\n        // don't need the return value\n        new Grid(this.eGridDiv, this.gridOptions, gridParams);\n\n        this.api = this.gridOptions.api!;\n        this.columnApi = this.gridOptions.columnApi!;\n\n        this.props.setGridApi!(this.api, this.columnApi);\n    }\n\n    private getStrategyTypeForProp(propKey: string) {\n        if (propKey === 'rowData') {\n            if (this.props.rowDataChangeDetectionStrategy) {\n                return this.props.rowDataChangeDetectionStrategy;\n            } else if (this.isImmutableDataActive()) {\n                return ChangeDetectionStrategyType.IdentityCheck;\n            }\n        }\n\n        // all other cases will default to DeepValueCheck\n        return ChangeDetectionStrategyType.DeepValueCheck;\n    }\n\n    private isImmutableDataActive() {\n        return (this.props.deltaRowDataMode || this.props.immutableData) || this.props.getRowId != null ||\n            (this.props.gridOptions && (\n                this.props.gridOptions.deltaRowDataMode\n                 || this.props.gridOptions.immutableData\n                  || this.props.gridOptions.getRowId != null));\n    }\n\n    shouldComponentUpdate(nextProps: any) {\n        this.processPropsChanges(this.props, nextProps);\n\n        // we want full control of the dom, as AG Grid doesn't use React internally,\n        // so for performance reasons we tell React we don't need render called after\n        // property changes.\n        return false;\n    }\n\n    componentDidUpdate(prevProps: any) {\n        this.processPropsChanges(prevProps, this.props);\n    }\n\n    processPropsChanges(prevProps: any, nextProps: any) {\n        const changes = {};\n\n        this.extractGridPropertyChanges(prevProps, nextProps, changes);\n        this.extractDeclarativeColDefChanges(nextProps, changes);\n\n        this.processSynchronousChanges(changes);\n        this.processAsynchronousChanges(changes);\n    }\n\n    private extractDeclarativeColDefChanges(nextProps: any, changes: any) {\n        // if columnDefs are provided on gridOptions we use those - you can't combine both\n        // we also skip if columnDefs are provided as a prop directly on AgGridReact\n        if ((this.props.gridOptions && this.props.gridOptions.columnDefs) || this.props.columnDefs) {\n            return;\n        }\n\n        const debugLogging = !!nextProps.debug;\n        const propKey = 'columnDefs';\n        const currentColDefs = this.gridOptions.columnDefs;\n\n        if (AgGridColumn.hasChildColumns(nextProps.children)) {\n            const detectionStrategy = this.changeDetectionService.getStrategy(this.getStrategyTypeForProp(propKey));\n            const newColDefs = AgGridColumn.mapChildColumnDefs(nextProps.children);\n\n            if (!detectionStrategy.areEqual(currentColDefs, newColDefs)) {\n                if (debugLogging) {\n                    console.log(`agGridReact: colDefs definitions changed`);\n                }\n\n                changes[propKey] =\n                    {\n                        previousValue: currentColDefs,\n                        currentValue: newColDefs\n                    };\n            }\n        } else if (currentColDefs && currentColDefs.length > 0) {\n            changes[propKey] =\n                {\n                    previousValue: currentColDefs,\n                    currentValue: []\n                };\n        }\n    }\n\n    private extractGridPropertyChanges(prevProps: any, nextProps: any, changes: any) {\n        const debugLogging = !!nextProps.debug;\n\n        Object.keys(nextProps).forEach(propKey => {\n            if (_.includes(ComponentUtil.ALL_PROPERTIES, propKey)) {\n                const changeDetectionStrategy = this.changeDetectionService.getStrategy(this.getStrategyTypeForProp(propKey));\n\n                if (!changeDetectionStrategy.areEqual(prevProps[propKey], nextProps[propKey])) {\n                    if (debugLogging) {\n                        console.log(`agGridReact: [${propKey}] property changed`);\n                    }\n\n                    changes[propKey] = {\n                        previousValue: prevProps[propKey],\n                        currentValue: nextProps[propKey]\n                    };\n                }\n            }\n        });\n\n        ComponentUtil.getEventCallbacks().forEach(funcName => {\n            if (prevProps[funcName] !== nextProps[funcName]) {\n                if (debugLogging) {\n                    console.log(`agGridReact: [${funcName}] event callback changed`);\n                }\n\n                changes[funcName] = {\n                    previousValue: prevProps[funcName],\n                    currentValue: nextProps[funcName]\n                };\n            }\n        });\n    }\n\n    componentWillUnmount() {\n        if (this.api) {\n            this.api.destroy();\n            this.api = null;\n        }\n\n        this.destroyed = true;\n        this.portalManager.destroy();\n    }\n\n    public isDisableStaticMarkup(): boolean {\n        return this.props.disableStaticMarkup === true;\n    }\n\n    public isLegacyComponentRendering(): boolean {\n        return this.props.legacyComponentRendering === true;\n    }\n\n    private processSynchronousChanges(changes: any): {} {\n        const asyncChanges = {...changes};\n        if (Object.keys(asyncChanges).length > 0) {\n            const synchronousChanges: { [key: string]: any } = {};\n            this.SYNCHRONOUS_CHANGE_PROPERTIES.forEach((synchronousChangeProperty: string) => {\n                if (asyncChanges[synchronousChangeProperty]) {\n                    synchronousChanges[synchronousChangeProperty] = asyncChanges[synchronousChangeProperty];\n                    delete asyncChanges[synchronousChangeProperty];\n                }\n            })\n\n            if(Object.keys(synchronousChanges).length > 0 && !!this.api) {\n                ComponentUtil.processOnChange(synchronousChanges, this.gridOptions, this.api, this.columnApi)\n            }\n        }\n        return asyncChanges;\n    }\n\n    private processAsynchronousChanges(changes: {}) {\n        if (Object.keys(changes).length > 0) {\n            window.setTimeout(() => {\n                // destroyed?\n                if (this.api) {\n                    ComponentUtil.processOnChange(changes, this.gridOptions, this.api, this.columnApi)\n                }\n            });\n        }\n    }\n}\n\nAgGridReactLegacy.propTypes = {\n    gridOptions: PropTypes.object\n};\n\naddProperties(ComponentUtil.getEventCallbacks(), PropTypes.func);\naddProperties(ComponentUtil.BOOLEAN_PROPERTIES, PropTypes.bool);\naddProperties(ComponentUtil.STRING_PROPERTIES, PropTypes.string);\naddProperties(ComponentUtil.OBJECT_PROPERTIES, PropTypes.object);\naddProperties(ComponentUtil.ARRAY_PROPERTIES, PropTypes.array);\naddProperties(ComponentUtil.NUMBER_PROPERTIES, PropTypes.number);\naddProperties(ComponentUtil.FUNCTION_PROPERTIES, PropTypes.func);\n\nfunction addProperties(listOfProps: string[], propType: any) {\n    listOfProps.forEach(propKey => {\n        (AgGridReactLegacy as any)[propKey] = propType;\n    });\n}\n\nclass ReactFrameworkComponentWrapper extends BaseComponentWrapper<WrappableInterface> implements FrameworkComponentWrapper {\n\n    private readonly agGridReact!: AgGridReactLegacy;\n    private readonly portalManager!: PortalManager;\n\n    constructor(agGridReact: AgGridReactLegacy, portalManager: PortalManager) {\n        super();\n        this.agGridReact = agGridReact;\n        this.portalManager = portalManager;\n    }\n\n    createWrapper(UserReactComponent: { new(): any; }, componentType: ComponentType): WrappableInterface {\n        if (this.agGridReact.isLegacyComponentRendering())  {\n            return new LegacyReactComponent(UserReactComponent, this.agGridReact, this.portalManager, componentType);\n        } else {\n            return new NewReactComponent(UserReactComponent, this.portalManager, componentType);\n        }\n    }\n}\n","import { createElement, ReactPortal } from 'react';\nimport { createPortal } from 'react-dom';\nimport { AgPromise, ComponentType } from '@ag-grid-community/core';\nimport { ReactComponent } from '../shared/reactComponent';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport generateNewKey from '../shared/keyGenerator';\nimport { AgGridReactLegacy } from './agGridReactLegacy';\nimport { PortalManager } from '../shared/portalManager';\n\nexport class LegacyReactComponent extends ReactComponent {\n    static SLOW_RENDERING_THRESHOLD = 3;\n\n    private staticMarkup: HTMLElement | null | string = null;\n    private staticRenderTime: number = 0;\n\n    private parentComponent: AgGridReactLegacy;\n\n    constructor(reactComponent: any, parentComponent: AgGridReactLegacy, portalManager: PortalManager, componentType: ComponentType) {\n        super(reactComponent, portalManager, componentType);\n        this.parentComponent = parentComponent;\n    }\n\n    public init(params: any): AgPromise<void> {\n        this.eParentElement = this.createParentElement(params);\n        this.renderStaticMarkup(params);\n\n        return new AgPromise<void>(resolve => this.createReactComponent(params, resolve));\n    }\n\n    private createReactComponent(params: any, resolve: (value: any) => void) {\n        // regular components (ie not functional)\n        if (!this.isStatelessComponent()) {\n            // grab hold of the actual instance created\n            params.ref = (element: any) => {\n                this.componentInstance = element;\n                this.addParentContainerStyleAndClasses();\n\n                this.removeStaticMarkup();\n            };\n        }\n\n        const reactComponent = createElement(this.reactComponent, params);\n        const portal: ReactPortal = createPortal(\n            reactComponent,\n            this.eParentElement as any,\n            generateNewKey() // fixed deltaRowModeRefreshCompRenderer\n        );\n\n        this.portal = portal;\n        this.portalManager.mountReactPortal(portal, this, (value: any) => {\n            resolve(value);\n\n            // functional/stateless components have a slightly different lifecycle (no refs) so we'll clean them up\n            // here\n            if (this.isStatelessComponent()) {\n                if (this.isSlowRenderer()) {\n                    this.removeStaticMarkup();\n                }\n                setTimeout(() => {\n                    this.removeStaticMarkup();\n                });\n            }\n        });\n    }\n\n    protected fallbackMethodAvailable(name: string): boolean {\n        return false;\n    }\n\n    protected fallbackMethod(name: string, params: any): void { /* no op */ }\n\n    private isSlowRenderer() {\n        return this.staticRenderTime >= LegacyReactComponent.SLOW_RENDERING_THRESHOLD;\n    }\n\n    public isNullValue(): boolean {\n        return this.staticMarkup === '';\n    }\n\n    /*\n     * Attempt to render the component as static markup if possible\n     * What this does is eliminate any visible flicker for the user in the scenario where a component is destroyed and\n     * recreated with exactly the same data (ie with force refresh)\n     * Note: Some use cases will throw an error (ie when using Context) so if an error occurs just ignore it any move on\n     */\n    private renderStaticMarkup(params: any) {\n        if (this.parentComponent.isDisableStaticMarkup() || !this.componentType.cellRenderer) {\n            return;\n        }\n\n        const originalConsoleError = console.error;\n        const reactComponent = createElement(this.reactComponent, params);\n\n        try {\n            // if a user is doing anything that uses useLayoutEffect (like material ui) then it will throw and we\n            // can't do anything to stop it; this is just a warning and has no effect on anything so just suppress it\n            // for this single operation\n            console.error = () => {\n            };\n\n            const start = Date.now();\n            const staticMarkup = renderToStaticMarkup(reactComponent);\n            this.staticRenderTime = Date.now() - start;\n\n            console.error = originalConsoleError;\n\n            // if the render method returns null the result will be an empty string\n            if (staticMarkup === '') {\n                this.staticMarkup = staticMarkup;\n            } else {\n                if (staticMarkup) {\n                    // we wrap the content as if there is \"trailing\" text etc it's not easy to safely remove\n                    // the same is true for memoized renderers, renderers that that return simple strings or NaN etc\n                    this.staticMarkup = document.createElement('span');\n                    this.staticMarkup.innerHTML = staticMarkup;\n                    this.eParentElement.appendChild(this.staticMarkup);\n                }\n            }\n        } catch (e) {\n            // we tried - this can happen with certain (rare) edge cases\n        } finally {\n            console.error = originalConsoleError;\n        }\n    }\n\n    private removeStaticMarkup() {\n        if (this.parentComponent.isDisableStaticMarkup() || !this.componentType.cellRenderer) {\n            return;\n        }\n\n        if (this.staticMarkup) {\n            if ((this.staticMarkup as HTMLElement).remove) {\n                // everyone else in the world\n                (this.staticMarkup as HTMLElement).remove();\n                this.staticMarkup = null;\n            } else if (this.eParentElement.removeChild) {\n                // ie11...\n                this.eParentElement.removeChild(this.staticMarkup as any);\n                this.staticMarkup = null;\n            }\n        }\n    }\n\n    rendered(): boolean {\n        return this.isNullValue() ||\n            !!this.staticMarkup || (this.isStatelessComponent() && this.statelessComponentRendered()) ||\n            !!(!this.isStatelessComponent() && this.getFrameworkComponentInstance());\n    }\n}\n","import { BaseComponentWrapper, CtrlsService, ColumnApi, ComponentType, ComponentUtil, Context, FrameworkComponentWrapper, GridApi, GridCoreCreator, GridOptions, GridParams, WrappableInterface, _ } from '@ag-grid-community/core';\nimport React, { Component } from 'react';\nimport { AgGridColumn } from '../shared/agGridColumn';\nimport { ChangeDetectionService, ChangeDetectionStrategyType } from '../shared/changeDetectionService';\nimport { AgReactUiProps } from '../shared/interfaces';\nimport { NewReactComponent } from '../shared/newReactComponent';\nimport { PortalManager } from '../shared/portalManager';\nimport GridComp from './gridComp';\nimport { ReactFrameworkOverrides } from '../shared/reactFrameworkOverrides';\n\nfunction debug(msg: string, obj?: any) {\n    // console.log(msg, obj);\n}\n\nexport class AgGridReactUi extends Component<AgReactUiProps, { context: Context | undefined }> {\n\n    public api!: GridApi;\n    public columnApi!: ColumnApi;\n\n    private gridOptions!: GridOptions;\n\n    private destroyFuncs: (() => void)[] = [];\n    private changeDetectionService = new ChangeDetectionService();\n    private eGui = React.createRef<HTMLDivElement>();\n\n    private portalManager: PortalManager;\n\n    private whenReadyFuncs: (()=>void)[] = [];\n    private ready = false;\n\n    private renderedAfterMount = false;\n    private mounted = false;\n\n    constructor(public props: any) {\n        super(props);\n        debug('AgGridReactUi.constructor');\n        this.state = {context: undefined};\n        this.portalManager = new PortalManager(this, props.componentWrappingElement, props.maxComponentCreationTimeMs);\n        this.destroyFuncs.push(() => this.portalManager.destroy());\n    }\n\n    public render() {\n        debug('AgGridReactUi.render, context = ' + (this.state.context));\n        if (this.state.context) {\n            this.renderedAfterMount = true;\n        }\n\n        return (\n            <div style={ this.createStyleForDiv() } className={ this.props.className } ref={ this.eGui }>\n                { this.state.context && <GridComp context={ this.state.context }/> }\n                { this.portalManager.getPortals() }\n            </div>\n        );\n    }\n\n    private createStyleForDiv() {\n        return {\n            height: '100%',\n            ...(this.props.containerStyle || {})\n        };\n    }\n\n    public componentDidMount() {\n\n        if (this.mounted) {\n            debug('AgGridReactUi.componentDidMount - skipping');\n            return;\n        }\n        debug('AgGridReactUi.componentDidMount');\n        this.mounted = true;\n\n        const modules = this.props.modules || [];\n        const gridParams: GridParams = {\n            providedBeanInstances: {\n                frameworkComponentWrapper: new ReactFrameworkComponentWrapper(this.portalManager)\n            },\n            modules,\n            frameworkOverrides: new ReactFrameworkOverrides(true)\n        };\n\n        this.gridOptions = this.props.gridOptions || {};\n        const {children} = this.props;\n\n        if (AgGridColumn.hasChildColumns(children)) {\n            this.gridOptions.columnDefs = AgGridColumn.mapChildColumnDefs(children);\n        }\n\n        this.gridOptions = ComponentUtil.copyAttributesToGridOptions(this.gridOptions, this.props);\n\n        const createUiCallback = (context: Context) => {\n            this.setState({context: context});\n\n            // because React is Async, we need to wait for the UI to be initialised before exposing the API's\n            const ctrlsService = context.getBean(CtrlsService.NAME) as CtrlsService;\n            ctrlsService.whenReady( ()=> {\n                debug('AgGridReactUi.createUiCallback');\n\n                this.api = this.gridOptions.api!;\n                this.columnApi = this.gridOptions.columnApi!;\n                this.props.setGridApi(this.api, this.columnApi);\n                this.destroyFuncs.push(() => this.api.destroy());\n            });\n        };\n\n        // this callback adds to ctrlsService.whenReady(), just like above, however because whenReady() executes\n        // funcs in the order they were received, we know adding items here will be AFTER the grid has set columns\n        // and data. this is because GridCoreCreator sets these between calling createUiCallback and acceptChangesCallback\n        const acceptChangesCallback = (context: Context)=> {\n            const ctrlsService = context.getBean(CtrlsService.NAME) as CtrlsService;\n            ctrlsService.whenReady( ()=> {\n                debug('AgGridReactUi.acceptChangesCallback');\n                this.whenReadyFuncs.forEach( f => f() );\n                this.whenReadyFuncs.length = 0;\n                this.ready = true;\n            });\n        }\n\n        // don't need the return value\n        const gridCoreCreator = new GridCoreCreator();\n        gridCoreCreator.create(this.eGui.current!, this.gridOptions, createUiCallback, acceptChangesCallback, gridParams);\n    }\n\n    public componentWillUnmount() {\n        if (this.renderedAfterMount) {\n            debug('AgGridReactUi.componentWillUnmount - executing');\n            this.destroyFuncs.forEach(f => f());\n            this.destroyFuncs.length = 0;\n        } else {\n            debug('AgGridReactUi.componentWillUnmount - skipping');\n        }\n    }\n\n    public componentDidUpdate(prevProps: any) {\n        this.processPropsChanges(prevProps, this.props);\n    }\n\n    public processPropsChanges(prevProps: any, nextProps: any) {\n        const changes = {};\n\n        this.extractGridPropertyChanges(prevProps, nextProps, changes);\n        this.extractDeclarativeColDefChanges(nextProps, changes);\n\n        this.processChanges(changes);\n    }\n\n    private extractDeclarativeColDefChanges(nextProps: any, changes: any) {\n        // if columnDefs are provided on gridOptions we use those - you can't combine both\n        // we also skip if columnDefs are provided as a prop directly on AgGridReact\n        if ((this.props.gridOptions && this.props.gridOptions.columnDefs) || this.props.columnDefs) {\n            return;\n        }\n\n        const debugLogging = !!nextProps.debug;\n        const propKey = 'columnDefs';\n        const currentColDefs = this.gridOptions.columnDefs;\n\n        if (AgGridColumn.hasChildColumns(nextProps.children)) {\n            const detectionStrategy = this.changeDetectionService.getStrategy(this.getStrategyTypeForProp(propKey));\n            const newColDefs = AgGridColumn.mapChildColumnDefs(nextProps.children);\n\n            if (!detectionStrategy.areEqual(currentColDefs, newColDefs)) {\n                if (debugLogging) {\n                    console.log(`agGridReact: colDefs definitions changed`);\n                }\n\n                changes[propKey] =\n                    {\n                        previousValue: currentColDefs,\n                        currentValue: newColDefs\n                    };\n            }\n        } else if (currentColDefs && currentColDefs.length > 0) {\n            changes[propKey] =\n                {\n                    previousValue: currentColDefs,\n                    currentValue: []\n                };\n        }\n    }\n\n    private extractGridPropertyChanges(prevProps: any, nextProps: any, changes: any) {\n        const debugLogging = !!nextProps.debug;\n\n        Object.keys(nextProps).forEach(propKey => {\n            if (_.includes(ComponentUtil.ALL_PROPERTIES, propKey)) {\n                const changeDetectionStrategy = this.changeDetectionService.getStrategy(this.getStrategyTypeForProp(propKey));\n\n                if (!changeDetectionStrategy.areEqual(prevProps[propKey], nextProps[propKey])) {\n                    if (debugLogging) {\n                        console.log(`agGridReact: [${propKey}] property changed`);\n                    }\n\n                    changes[propKey] = {\n                        previousValue: prevProps[propKey],\n                        currentValue: nextProps[propKey]\n                    };\n                }\n            }\n        });\n\n        ComponentUtil.getEventCallbacks().forEach(funcName => {\n            if (prevProps[funcName] !== nextProps[funcName]) {\n                if (debugLogging) {\n                    console.log(`agGridReact: [${funcName}] event callback changed`);\n                }\n\n                changes[funcName] = {\n                    previousValue: prevProps[funcName],\n                    currentValue: nextProps[funcName]\n                };\n            }\n        });\n    }\n\n    private processChanges(changes: {}) {\n        this.processWhenReady( ()=>\n            ComponentUtil.processOnChange(changes, this.gridOptions, this.api, this.columnApi)\n        );\n    }\n\n    private processWhenReady(func: ()=>void): void {\n        if (this.ready) {\n            debug('AgGridReactUi.processWhenReady sync');\n            func();\n        } else {\n            debug('AgGridReactUi.processWhenReady async');\n            this.whenReadyFuncs.push(func);\n        }\n    }\n\n    private getStrategyTypeForProp(propKey: string) {\n        if (propKey === 'rowData') {\n            if (this.props.rowDataChangeDetectionStrategy) {\n                return this.props.rowDataChangeDetectionStrategy;\n            }\n            if (this.isImmutableDataActive()) {\n                return ChangeDetectionStrategyType.IdentityCheck;\n            }\n        }\n\n        // all other cases will default to DeepValueCheck\n        return ChangeDetectionStrategyType.DeepValueCheck;\n    }\n\n    private isImmutableDataActive() {\n        return (this.props.deltaRowDataMode || this.props.immutableData || this.props.getRowId != null) ||\n            (this.props.gridOptions && (this.props.gridOptions.deltaRowDataMode\n                || this.props.gridOptions.immutableData\n                || this.props.gridOptions.getRowId != null));\n    }\n}\n\nclass ReactFrameworkComponentWrapper extends BaseComponentWrapper<WrappableInterface> implements FrameworkComponentWrapper {\n\n    private readonly parent: PortalManager;    \n\n    constructor(parent: PortalManager) {\n        super();\n        this.parent = parent;\n    }\n\n    createWrapper(UserReactComponent: { new(): any; }, componentType: ComponentType): WrappableInterface {\n        return new NewReactComponent(UserReactComponent, this.parent, componentType);\n    }\n}\n","import React from 'react';\nimport { Beans } from '@ag-grid-community/core';\n\nexport const BeansContext = React.createContext<Beans>({} as Beans);\n","import React, { useState, useMemo, useRef, useContext, useCallback, forwardRef, useImperativeHandle } from \"react\";\nimport { CssClasses } from \"../utils\";\nimport { IDetailCellRenderer, IDetailCellRendererCtrl, IDetailCellRendererParams, GridOptions, GridApi, ColumnApi } from \"@ag-grid-community/core\";\nimport { BeansContext } from \"../beansContext\";\nimport { AgGridReactUi } from \"../agGridReactUi\";\nimport { useEffectOnce } from \"../useEffectOnce\";\n\nconst DetailCellRenderer = (props: IDetailCellRendererParams, ref: any) => {\n\n    const {ctrlsFactory, context, gridOptionsWrapper, resizeObserverService, clientSideRowModel, serverSideRowModel} = useContext(BeansContext);\n\n    const [cssClasses, setCssClasses] = useState<CssClasses>(new CssClasses());\n    const [gridCssClasses, setGridCssClasses] = useState<CssClasses>(new CssClasses());\n    const [detailGridOptions, setDetailGridOptions] = useState<GridOptions>();\n    const [detailRowData, setDetailRowData] = useState<any[]>();\n\n    const ctrlRef = useRef<IDetailCellRendererCtrl>();\n    const eGuiRef = useRef<HTMLDivElement>(null);\n\n    const topClassName = useMemo(() => cssClasses.toString() + ' ag-details-row', [cssClasses]);\n    const gridClassName = useMemo(() => gridCssClasses.toString() + ' ag-details-grid', [gridCssClasses]);\n\n    if (ref) {\n        useImperativeHandle(ref, () => ({\n            refresh() { return ctrlRef.current!.refresh(); }\n        }));\n    }\n    \n    useEffectOnce(() => {\n        if (props.template && typeof props.template === 'string') {\n            console.warn('AG Grid: detailCellRendererParams.template is not supported by React - this only works with frameworks that work against String templates. To change the template, please provide your own React Detail Cell Renderer.');\n        }\n    });\n\n    useEffectOnce(() => {\n        const compProxy: IDetailCellRenderer = {\n            addOrRemoveCssClass: (name: string, on: boolean) => setCssClasses(prev => prev.setClass(name, on)),\n            addOrRemoveDetailGridCssClass: (name: string, on: boolean) => setGridCssClasses(prev => prev.setClass(name, on)),\n            setDetailGrid: gridOptions => setDetailGridOptions(gridOptions),\n            setRowData: rowData => setDetailRowData(rowData),\n            getGui: () => eGuiRef.current!\n        };\n\n        const ctrl = ctrlsFactory.getInstance('detailCellRenderer') as IDetailCellRendererCtrl;\n        if (!ctrl) { return; } // should never happen, means master/detail module not loaded\n        context.createBean(ctrl);\n\n        ctrl.init(compProxy, props);\n\n        ctrlRef.current = ctrl;\n\n        let resizeObserverDestroyFunc: () => void;\n\n        if (gridOptionsWrapper.isDetailRowAutoHeight()) {\n            const checkRowSizeFunc = () => {\n                // when disposed, current is null, so nothing to do, and the resize observer will\n                // be disposed of soon\n                if (eGuiRef.current==null) { return; }\n\n                const clientHeight = eGuiRef.current.clientHeight;\n\n                // if the UI is not ready, the height can be 0, which we ignore, as otherwise a flicker will occur\n                // as UI goes from the default height, to 0, then to the real height as UI becomes ready. this means\n                // it's not possible for have 0 as auto-height, however this is an improbable use case, as even an\n                // empty detail grid would still have some styling around it giving at least a few pixels.\n                if (clientHeight != null && clientHeight > 0) {\n                    // we do the update in a timeout, to make sure we are not calling from inside the grid\n                    // doing another update\n                    const updateRowHeightFunc = () => {\n                        props.node.setRowHeight(clientHeight);\n                        if (clientSideRowModel) {\n                            clientSideRowModel.onRowHeightChanged();\n                        } else if (serverSideRowModel) {\n                            serverSideRowModel.onRowHeightChanged();\n                        }\n                    };\n                    setTimeout(updateRowHeightFunc, 0);\n                }\n            };\n    \n            resizeObserverDestroyFunc = resizeObserverService.observeResize(eGuiRef.current!, checkRowSizeFunc);\n            checkRowSizeFunc();\n        }\n\n        return () => {\n            context.destroyBean(ctrl);\n            if (resizeObserverDestroyFunc) {\n                resizeObserverDestroyFunc();\n            }\n        };\n    });\n\n    const setGridApi = useCallback( (api: GridApi, columnApi: ColumnApi) => {\n        ctrlRef.current!.registerDetailWithMaster(api, columnApi)\n    }, []);\n\n    return (\n        <div className={topClassName} ref={eGuiRef}>\n            {\n                detailGridOptions &&\n                <AgGridReactUi className={gridClassName} {...detailGridOptions} rowData={detailRowData} setGridApi={ setGridApi }></AgGridReactUi> \n            }\n        </div>\n    );\n};\n\nexport default forwardRef(DetailCellRenderer);\n","import { GroupCellRendererCtrl, GroupCellRendererParams, IGroupCellRenderer, UserCompDetails } from \"@ag-grid-community/core\";\nimport React, { useContext, useImperativeHandle, forwardRef, useEffect, useMemo, useRef, useState, memo } from 'react';\nimport { BeansContext } from \"../beansContext\";\nimport { showJsComp } from \"../jsComp\";\nimport { useEffectOnce } from \"../useEffectOnce\";\nimport { CssClasses } from \"../utils\";\n\nconst GroupCellRenderer = forwardRef((props: GroupCellRendererParams, ref) => {\n\n    const context = useContext(BeansContext).context!;\n\n    const eGui = useRef<HTMLElement>(null);\n    const eValueRef = useRef<HTMLElement>(null);\n    const eCheckboxRef = useRef<HTMLElement>(null);\n    const eExpandedRef = useRef<HTMLElement>(null);\n    const eContractedRef = useRef<HTMLElement>(null);\n\n    const [innerCompDetails, setInnerCompDetails] = useState<UserCompDetails>();\n    const [childCount, setChildCount] = useState<string>();\n    const [value, setValue] = useState<any>();\n    const [cssClasses, setCssClasses] = useState<CssClasses>(new CssClasses());\n    const [expandedCssClasses, setExpandedCssClasses] = useState<CssClasses>(new CssClasses('ag-hidden'));\n    const [contractedCssClasses, setContractedCssClasses] = useState<CssClasses>(new CssClasses('ag-hidden'));\n    const [checkboxCssClasses, setCheckboxCssClasses] = useState<CssClasses>(new CssClasses('ag-invisible'));\n\n    useImperativeHandle(ref, () => {\n        return {\n            // force new instance when grid tries to refresh\n            refresh() { return false; }\n        };\n    });\n\n    useEffect(() => {\n        return showJsComp(innerCompDetails, context, eValueRef.current!);\n    }, [innerCompDetails]);\n\n    useEffectOnce( ()=> {\n\n        const compProxy: IGroupCellRenderer = {\n            setInnerRenderer: (details, valueToDisplay) => {\n                setInnerCompDetails(details);\n                setValue(valueToDisplay);\n            },\n            setChildCount: count => setChildCount(count),\n            addOrRemoveCssClass: (name, on) => setCssClasses(prev => prev.setClass(name, on)),\n            setContractedDisplayed: displayed => setContractedCssClasses(prev => prev.setClass('ag-hidden', !displayed)),\n            setExpandedDisplayed: displayed => setExpandedCssClasses(prev => prev.setClass('ag-hidden', !displayed)),\n            setCheckboxVisible: visible => setCheckboxCssClasses(prev => prev.setClass('ag-invisible', !visible))\n        };\n\n        const ctrl = context.createBean(new GroupCellRendererCtrl());\n        ctrl.init(compProxy, eGui.current!, eCheckboxRef.current!, eExpandedRef.current!, eContractedRef.current!, GroupCellRenderer, props);\n\n        return () => { context.destroyBean(ctrl);};\n    });\n\n    const className = useMemo(() => `ag-cell-wrapper ${cssClasses.toString()}`, [cssClasses]);\n    const expandedClassName = useMemo(() => `ag-group-expanded ${expandedCssClasses.toString()}`, [expandedCssClasses]);\n    const contractedClassName = useMemo(() => `ag-group-contracted ${contractedCssClasses.toString()}`, [contractedCssClasses]);\n    const checkboxClassName = useMemo(() => `ag-group-checkbox ${checkboxCssClasses.toString()}`, [checkboxCssClasses]);\n\n    const useFwRenderer = innerCompDetails && innerCompDetails.componentFromFramework;\n    const FwRenderer = useFwRenderer ? innerCompDetails!.componentClass : undefined;\n    const useValue = innerCompDetails == null && value != null;\n\n    return (\n        <span className={className} ref={eGui} {...(!props.colDef ? { role: 'gridcell' } : {})}>\n            <span className={expandedClassName} ref={eExpandedRef}></span>\n            <span className={contractedClassName} ref={eContractedRef}></span>\n            <span className={checkboxClassName} ref={eCheckboxRef}></span>\n            <span className=\"ag-group-value\" ref={eValueRef}>\n                { useValue && <>{value}</> }\n                { useFwRenderer && <FwRenderer {...innerCompDetails!.params}/> }\n            </span>\n            <span className=\"ag-group-child-count\">{childCount}</span>\n        </span>\n        );\n});\n\n// we do not memo() here, as it would stop the forwardRef working\nexport default GroupCellRenderer;","import { CellCtrl, Component, ICellComp, ICellEditor, ICellRendererComp, UserCompDetails, _, ICellEditorComp } from '@ag-grid-community/core';\nimport React, { MutableRefObject, useCallback, useEffect, useRef, useState, useMemo, memo, useContext } from 'react';\nimport { CssClasses, isComponentStateless } from '../utils';\nimport PopupEditorComp from './popupEditorComp';\nimport useJsCellRenderer from './showJsRenderer';\nimport { BeansContext } from '../beansContext';\nimport { createSyncJsComp } from '../jsComp';\nimport { useEffectOnce } from '../useEffectOnce';\n\nexport enum CellCompState { ShowValue, EditValue }\n\nconst checkCellEditorDeprecations = (popup: boolean, cellEditor: ICellEditor, cellCtrl: CellCtrl) => {\n\n    const col = cellCtrl.getColumn();\n\n    // cellEditor is written to be a popup editor, however colDef.cellEditorPopup is not set\n    if (!popup && cellEditor.isPopup && cellEditor.isPopup()) {\n        const msg = `AG Grid: Found an issue in column ${col.getColId()}. If using React, specify an editor is a popup using colDef.cellEditorPopup=true. AG Grid React cannot depend on the editor component specifying if it's in a popup (via the isPopup() method on the editor), as React needs to know this information BEFORE the component is created.`;\n        _.doOnce(() => console.warn(msg), 'jsEditorComp-isPopup-' + cellCtrl.getColumn().getColId());\n    }\n\n    // cellEditor is a popup and is trying to position itself the deprecated way\n    if (popup && cellEditor.getPopupPosition && cellEditor.getPopupPosition()!=null) {\n        const msg = `AG Grid: Found an issue in column ${col.getColId()}. If using React, specify an editor popup position using colDef.cellEditorPopupPosition=true. AG Grid React cannot depend on the editor component specifying it's position (via the getPopupPosition() method on the editor), as React needs to know this information BEFORE the component is created.`;\n        _.doOnce(() => console.warn(msg), 'jsEditorComp-getPopupPosition-' + cellCtrl.getColumn().getColId());\n    }\n}\n\nconst jsxEditValue = (\n        editDetails: EditDetails, \n        setInlineCellEditorRef: (cellEditor: ICellEditor | undefined)=>void,\n        setPopupCellEditorRef: (cellEditor: ICellEditor | undefined)=>void,\n        eGui: HTMLElement, \n        cellCtrl: CellCtrl,\n        jsEditorComp: ICellEditorComp | undefined ) => {\n\n    const compDetails = editDetails.compDetails;\n    const CellEditorClass = compDetails.componentClass;\n\n    const reactInlineEditor = compDetails.componentFromFramework && !editDetails.popup;\n    const reactPopupEditor = compDetails.componentFromFramework && editDetails.popup;\n    const jsPopupEditor = !compDetails.componentFromFramework && editDetails.popup;\n\n    return (\n        <>\n\n            { \n                reactInlineEditor \n                && <CellEditorClass { ...editDetails.compDetails.params } ref={ setInlineCellEditorRef }/> \n            }\n\n            { \n                reactPopupEditor \n                && <PopupEditorComp editDetails={editDetails} cellCtrl={cellCtrl} eParentCell={eGui}\n                            wrappedContent={ \n                                <CellEditorClass { ...editDetails.compDetails.params } ref={ setPopupCellEditorRef }/> \n                            }/> \n            }\n\n            { \n                jsPopupEditor && jsEditorComp && <PopupEditorComp editDetails={editDetails} cellCtrl={cellCtrl} \n                            eParentCell={eGui} jsChildComp={ jsEditorComp } /> \n            }\n        </>\n    )\n}\n\nconst jsxShowValue = (\n    showDetails: RenderDetails,\n    key: number,\n    parentId: string,\n    cellRendererRef: MutableRefObject<any>,\n    showCellWrapper: boolean,\n    reactCellRendererStateless: boolean,\n    setECellValue: (ref:any) => void\n) => {\n    const {compDetails, value} = showDetails;\n\n    const noCellRenderer = !compDetails;\n    const reactCellRenderer = compDetails && compDetails.componentFromFramework;\n\n    const CellRendererClass = compDetails && compDetails.componentClass;\n\n    // if we didn't do this, objects would cause React error. we depend on objects for things\n    // like the aggregation functions avg and count, which return objects and depend on toString()\n    // getting called.\n    const valueForNoCellRenderer = (value && value.toString) ? value.toString() : value;\n\n    const bodyJsxFunc = () => (\n        <>\n            { noCellRenderer && <>{ valueForNoCellRenderer }</> }\n            { reactCellRenderer && !reactCellRendererStateless && <CellRendererClass { ...compDetails!.params } key={key} ref={ cellRendererRef }/> }\n            { reactCellRenderer && reactCellRendererStateless && <CellRendererClass { ...compDetails!.params } key={key}/> }\n        </>\n    );\n\n    return (\n        <>\n            { showCellWrapper ?\n                    <span role=\"presentation\" id={`cell-${parentId}`} className=\"ag-cell-value\" ref={ setECellValue }>\n                        { bodyJsxFunc() }\n                    </span>\n                :\n                bodyJsxFunc()\n            }\n        </>\n    );\n}\n\nexport interface RenderDetails {\n    compDetails: UserCompDetails | undefined;\n    value?: any;\n    force?: boolean;\n}\nexport interface EditDetails {\n    compDetails: UserCompDetails;\n    popup?: boolean;\n    popupPosition?: string;\n}\n\nconst CellComp = (props: {\n    cellCtrl: CellCtrl,\n    printLayout: boolean, \n    editingRow: boolean\n}) => {\n\n    const {context} = useContext(BeansContext);\n\n    const { cellCtrl, printLayout, editingRow } = props;\n\n    const [renderDetails, setRenderDetails ] = useState<RenderDetails>();\n    const [editDetails, setEditDetails ] = useState<EditDetails>();\n    const [renderKey, setRenderKey] = useState<number>(1);\n\n    const [cssClasses, setCssClasses] = useState<CssClasses>(new CssClasses());\n    const [userStyles, setUserStyles] = useState<any>();\n\n    const [tabIndex, setTabIndex] = useState<number>();\n    const [ariaDescribedBy, setAriaDescribedBy] = useState<string | undefined>();\n    const [role, setRole] = useState<string>();\n    const [colId, setColId] = useState<string>();\n    const [title, setTitle] = useState<string | undefined>();\n    const [includeSelection, setIncludeSelection] = useState<boolean>(false);\n    const [includeRowDrag, setIncludeRowDrag] = useState<boolean>(false);\n    const [includeDndSource, setIncludeDndSource] = useState<boolean>(false);\n\n    const [jsEditorComp, setJsEditorComp] = useState<ICellEditorComp>();\n\n    const forceWrapper = useMemo( ()=> cellCtrl.isForceWrapper(), [] );\n    const eGui = useRef<HTMLDivElement>(null);\n    const cellRendererRef = useRef<any>(null);\n    const jsCellRendererRef = useRef<ICellRendererComp>();\n    const cellEditorRef = useRef<ICellEditor>();\n\n    // when setting the ref, we also update the state item to force a re-render\n    const eCellWrapper = useRef<HTMLDivElement>();\n    const [cellWrapperVersion, setCellWrapperVersion] = useState(0);\n    const setCellWrapperRef = useCallback((ref: HTMLDivElement) => {\n        eCellWrapper.current = ref;\n        setCellWrapperVersion( v => v+1 );\n    }, []);\n\n    // when setting the ref, we also update the state item to force a re-render\n    const eCellValue = useRef<HTMLDivElement>();\n    const [cellValueVersion, setCellValueVersion] = useState(0);\n    const setCellValueRef = useCallback( (ref: HTMLDivElement) => {\n        eCellValue.current = ref;\n        setCellValueVersion( v => v+1 );\n    }, []);\n    \n    const showTools = renderDetails != null && (includeSelection || includeDndSource || includeRowDrag);\n    const showCellWrapper = forceWrapper || showTools;\n\n    const setCellEditorRef = useCallback((popup: boolean, cellEditor: ICellEditor | undefined) => {\n        cellEditorRef.current = cellEditor;\n        if (cellEditor) {\n            checkCellEditorDeprecations(popup, cellEditor, cellCtrl);\n            const editingCancelledByUserComp = cellEditor.isCancelBeforeStart && cellEditor.isCancelBeforeStart();\n            if (editingCancelledByUserComp) {\n                // we cannot set state inside render, so hack is to do it in next VM turn\n                setTimeout( ()=> cellCtrl.stopEditing(), 0);\n            }\n        }\n    }, []);\n\n    const setPopupCellEditorRef = useCallback( \n        (cellRenderer: ICellEditor | undefined) => setCellEditorRef(true, cellRenderer),\n        []\n    );\n\n    const setInlineCellEditorRef = useCallback(\n        (cellRenderer: ICellEditor | undefined) => setCellEditorRef(false, cellRenderer), \n        []\n    );\n\n    useJsCellRenderer(renderDetails, showCellWrapper, eCellValue.current, cellValueVersion, jsCellRendererRef, eGui);\n\n    // if RenderDetails changed, need to call refresh. This is not our preferred way (the preferred\n    // way for React is just allow the new props to propagate down to the React Cell Renderer)\n    // however we do this for backwards compatibility, as having refresh used to be supported.\n    const lastRenderDetails = useRef<RenderDetails>();\n    useEffect( ()=> {\n        const oldDetails = lastRenderDetails.current;\n        const newDetails = renderDetails;\n        lastRenderDetails.current = renderDetails;\n\n        // if not updating renderDetails, do nothing\n        if (oldDetails==null || oldDetails.compDetails==null \n            || newDetails==null || newDetails.compDetails==null) { return; }\n\n        const oldCompDetails = oldDetails.compDetails;\n        const newCompDetails = newDetails.compDetails;\n        // if different Cell Renderer, then do nothing, as renderer will be recreated\n        if (oldCompDetails.componentClass!=newCompDetails.componentClass) { return; }\n\n        // if no refresh method, do nothing\n        if (cellRendererRef.current==null || cellRendererRef.current.refresh==null) {  return; }\n\n        const result = cellRendererRef.current.refresh(newCompDetails.params);\n        if (result!=true) {\n            // increasing the render key forces the refresh. this is undocumented (for React users,\n            // we don't document the refresh method, instead we tell them to act on new params).\n            // however the GroupCellRenderer has this logic in it and would need a small refactor\n            // to get it working without using refresh() returning false. so this hack staying in,\n            // in React if refresh() is implemented and returns false (or undefined), we force a refresh\n            setRenderKey( prev => prev + 1 );\n        }\n\n    }, [renderDetails]);\n\n    useEffect(() => {\n        const doingJsEditor = editDetails && !editDetails.compDetails.componentFromFramework;\n        if (!doingJsEditor) { return; }\n\n        const compDetails = editDetails!.compDetails;\n        const isPopup = editDetails!.popup===true;\n    \n        const cellEditor = createSyncJsComp(compDetails) as ICellEditorComp;\n        if (!cellEditor) { return; }\n\n        const compGui = cellEditor.getGui();\n\n        setCellEditorRef(isPopup, cellEditor);\n\n        if (!isPopup) {\n            eGui.current!.appendChild(compGui);\n            cellEditor.afterGuiAttached && cellEditor.afterGuiAttached();\n        }\n\n        setJsEditorComp(cellEditor);\n\n        return () => {\n            context.destroyBean(cellEditor);\n            setCellEditorRef(isPopup, undefined);\n            setJsEditorComp(undefined);\n            if (compGui && compGui.parentElement) {\n                compGui.parentElement.removeChild(compGui);\n            }\n        };\n    }, [editDetails]);\n\n    // tool widgets effect\n    useEffect(() => {\n        if (!cellCtrl || !context) { return; }\n\n        setAriaDescribedBy(!!eCellWrapper.current ? `cell-${cellCtrl.getInstanceId()}` : undefined);\n\n        if (!eCellWrapper.current || !showCellWrapper) { return; }\n\n        const destroyFuncs: (()=>void)[] = [];\n\n        const addComp = (comp: Component | undefined) => {\n            if (comp) {\n                const eGui = comp.getGui();\n                eCellWrapper.current!.insertAdjacentElement('afterbegin', eGui);\n                destroyFuncs.push( ()=> {\n                    context.destroyBean(comp);\n                    _.removeFromParent(eGui);\n                });\n            }\n            return comp;\n        }\n\n        if (includeSelection) {\n            addComp(cellCtrl.createSelectionCheckbox());\n        }\n\n        if (includeDndSource) {\n            addComp(cellCtrl.createDndSource());\n        }\n\n        if (includeRowDrag) {\n            addComp(cellCtrl.createRowDragComp());\n        }\n\n        return () => {\n            destroyFuncs.forEach(f => {\n                f();\n            })\n        };\n\n    }, [showCellWrapper, includeDndSource, includeRowDrag, includeSelection, cellWrapperVersion]);\n\n    useEffectOnce(() => {\n        if (!cellCtrl) { return; }\n\n        const compProxy: ICellComp = {\n            addOrRemoveCssClass: (name, on) => setCssClasses(prev => prev.setClass(name, on)),\n            setUserStyles: styles => setUserStyles(styles),\n            getFocusableElement: () => eGui.current!,\n            setTabIndex: tabIndex => setTabIndex(tabIndex),\n            setRole: role => setRole(role),\n            setColId: colId => setColId(colId),\n            setTitle: title => setTitle(title),\n            setIncludeSelection: include => setIncludeSelection(include),\n            setIncludeRowDrag: include => setIncludeRowDrag(include),\n            setIncludeDndSource: include => setIncludeDndSource(include),\n            \n            getCellEditor: () => cellEditorRef.current || null,\n            getCellRenderer: () => cellRendererRef.current ? cellRendererRef.current : jsCellRendererRef.current,\n            getParentOfValue: () => eCellValue.current ? eCellValue.current : eCellWrapper.current ? eCellWrapper.current : eGui.current,\n\n            setRenderDetails: (compDetails, value, force) => {\n                setRenderDetails({\n                    value,\n                    compDetails,\n                    force\n                });\n            },\n            \n            setEditDetails: (compDetails, popup, popupPosition) => {\n                if (compDetails) {\n                    // start editing\n                    setEditDetails({\n                        compDetails: compDetails!,\n                        popup,\n                        popupPosition\n                    });\n                    if (!popup) {\n                        setRenderDetails(undefined);\n                    }\n                } else {\n                    // stop editing\n                    setEditDetails(undefined);\n                }\n            }\n        };\n\n        const cellWrapperOrUndefined = eCellWrapper.current || undefined;\n\n        cellCtrl.setComp(compProxy, eGui.current!, cellWrapperOrUndefined, printLayout, editingRow);\n\n    });\n\n    const reactCellRendererStateless = useMemo( ()=> {\n        const res = renderDetails && renderDetails.compDetails \n                    && renderDetails.compDetails.componentFromFramework \n                    && isComponentStateless(renderDetails.compDetails.componentClass);\n        return !!res;\n    }, [renderDetails]);\n\n    const className = useMemo(() => {\n        let res = cssClasses.toString();\n        if (!showCellWrapper) {\n            res += ' ag-cell-value';\n        }\n        return res;\n    }, [cssClasses, showTools]);\n\n    const cellInstanceId = useMemo(() => cellCtrl.getInstanceId(), []);\n\n    const showContents = ()=> <>\n            { renderDetails != null && jsxShowValue(\n                renderDetails,\n                renderKey,\n                cellInstanceId,\n                cellRendererRef,\n                showCellWrapper,\n                reactCellRendererStateless,\n                setCellValueRef) \n            }\n            { editDetails != null && jsxEditValue(editDetails, setInlineCellEditorRef, setPopupCellEditorRef, eGui.current!, cellCtrl, jsEditorComp) }\n                            </>;\n\n    return (\n        <div ref={ eGui } className={ className } style={ userStyles } tabIndex={ tabIndex }\n             role={ role } col-id={ colId } title={ title } \n             aria-describedby={ ariaDescribedBy }>\n\n            { showCellWrapper ?\n                <div className=\"ag-cell-wrapper\" role=\"presentation\" ref={ setCellWrapperRef }>\n                    { showContents() }\n                </div>\n                :\n                showContents()\n            }\n\n        </div>\n    );\n}\n\nexport default memo(CellComp);\n","import { CellCtrl, PopupEditorWrapper } from '@ag-grid-community/core';\nimport React, { useEffect, useState, memo, useContext } from 'react';\nimport { createPortal } from 'react-dom';\nimport { EditDetails } from './cellComp';\nimport { BeansContext } from '../beansContext';\nimport { useEffectOnce } from '../useEffectOnce';\n\nconst PopupEditorComp = (props: {\n            editDetails: EditDetails, \n            cellCtrl: CellCtrl, \n            eParentCell: HTMLElement,\n            wrappedContent?: any,\n            jsChildComp?: any\n        }) => {\n\n    const [popupEditorWrapper, setPopupEditorWrapper] = useState<PopupEditorWrapper>();\n\n    const {context, popupService, gridOptionsWrapper} = useContext(BeansContext);\n\n    useEffectOnce( () => {\n        const {editDetails, cellCtrl, eParentCell} = props;\n        const {compDetails} = editDetails;\n\n        const useModelPopup = gridOptionsWrapper.isStopEditingWhenCellsLoseFocus();\n        \n        const wrapper = context.createBean(new PopupEditorWrapper(compDetails.params));\n        const ePopupGui = wrapper.getGui();\n\n        if (props.jsChildComp) {\n            const eChildGui = props.jsChildComp.getGui();\n            if (eChildGui) {\n                ePopupGui.appendChild(eChildGui);\n            }\n        }\n\n        const positionParams = {\n            column: cellCtrl.getColumn(),\n            rowNode: cellCtrl.getRowNode(),\n            type: 'popupCellEditor',\n            eventSource: eParentCell,\n            ePopup: ePopupGui,\n            keepWithinBounds: true\n        };\n    \n        const positionCallback = editDetails!.popupPosition === 'under' ?\n            popupService.positionPopupUnderComponent.bind(popupService, positionParams)\n            : popupService.positionPopupOverComponent.bind(popupService, positionParams);\n\n        const translate = gridOptionsWrapper.getLocaleTextFunc();\n    \n        const addPopupRes = popupService.addPopup({\n            modal: useModelPopup,\n            eChild: ePopupGui,\n            closeOnEsc: true,\n            closedCallback: () => { cellCtrl.onPopupEditorClosed(); },\n            anchorToElement: eParentCell,\n            positionCallback,\n            ariaLabel: translate('ariaLabelCellEditor', 'Cell Editor')\n        });\n    \n        const hideEditorPopup: (()=>void) | undefined = addPopupRes ? addPopupRes.hideFunc : undefined;\n\n        setPopupEditorWrapper(wrapper);\n\n        props.jsChildComp && props.jsChildComp.afterGuiAttached && props.jsChildComp.afterGuiAttached();\n\n        return ()=> {\n            if (hideEditorPopup!=null) {\n                hideEditorPopup();\n            }\n            context.destroyBean(wrapper);\n        };\n\n    });\n\n    return (\n        <>\n            { popupEditorWrapper && props.wrappedContent \n                                 && createPortal(props.wrappedContent, popupEditorWrapper.getGui()) }\n        </>\n    );\n};\n\nexport default memo(PopupEditorComp);\n","import { ICellRendererComp } from '@ag-grid-community/core';\nimport { MutableRefObject, useCallback, useContext, useEffect } from 'react';\nimport { BeansContext } from '../beansContext';\nimport { useEffectOnce } from '../useEffectOnce';\nimport { RenderDetails } from './cellComp';\n\nconst useJsCellRenderer = (\n    showDetails: RenderDetails | undefined,\n    showTools: boolean,\n    eCellValue: HTMLElement | undefined,\n    cellValueVersion: number,\n    jsCellRendererRef: MutableRefObject<ICellRendererComp|undefined>,\n    eGui: MutableRefObject<any>) => {\n\n        const {context, userComponentFactory} = useContext(BeansContext);\n\n        const destroyCellRenderer = useCallback(() => {\n            const comp = jsCellRendererRef.current;\n            if (!comp) { return; }\n\n            const compGui = comp.getGui();\n\n            if (compGui && compGui.parentElement) {\n                compGui.parentElement.removeChild(compGui);\n            }\n\n            context.destroyBean(comp);\n            jsCellRendererRef.current = undefined;\n        }, []);\n\n        // create or refresh JS cell renderer\n        useEffect(() => {\n            const showValue = showDetails != null;\n            const jsCompDetails = showDetails && showDetails.compDetails && !showDetails.compDetails.componentFromFramework;\n            const waitingForToolsSetup = showTools && eCellValue == null;\n            const showComp = showValue && jsCompDetails && !waitingForToolsSetup;\n\n            // if not showing comp, destroy any existing one and return\n            if (!showComp) {\n                destroyCellRenderer();\n                return;\n            }\n\n            const compDetails = showDetails!.compDetails;\n\n            if (jsCellRendererRef.current) {\n                // attempt refresh if refresh method exists\n                const comp = jsCellRendererRef.current;\n                const attemptRefresh = comp.refresh != null && showDetails!.force == false;\n                const refreshResult = attemptRefresh ? comp.refresh(compDetails!.params) : false;\n                const refreshWorked = refreshResult === true || refreshResult === undefined;\n\n                // if refresh worked, nothing else to do\n                if (refreshWorked) { return; }\n\n                // if refresh didn't work, we destroy it and continue, so new cell renderer created below\n                destroyCellRenderer();\n            }\n\n            const promise = compDetails!.newAgStackInstance();;\n            if (!promise) { return; }\n\n            const comp = promise.resolveNow(null, x => x); // js comps are never async\n            if (!comp) { return; }\n\n            const compGui = comp.getGui();\n            if (!compGui) { return; }\n\n            const parent = showTools ? eCellValue! : eGui.current!;\n            parent.appendChild(compGui);\n\n            jsCellRendererRef.current = comp;\n\n        }, [showDetails, showTools, cellValueVersion]);\n\n        // this effect makes sure destroyCellRenderer gets called when the\n        // component is destroyed. as the other effect only updates when there\n        // is a change in state\n        useEffectOnce(() => {\n            return destroyCellRenderer;\n        });\n}\n\nexport default useJsCellRenderer;\n","import { GridBodyCtrl, IGridBodyComp, RowContainerName } from '@ag-grid-community/core';\nimport React, { memo, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { BeansContext } from './beansContext';\nimport GridHeaderComp from './header/gridHeaderComp';\nimport useReactCommentEffect from './reactComment';\nimport RowContainerComp from './rows/rowContainerComp';\nimport { useEffectOnce } from './useEffectOnce';\nimport { classesList } from './utils';\n\ninterface SectionProperties {\n    section: React.RefObject<HTMLDivElement>;\n    className: string;\n    style?: React.CSSProperties;\n}\n\nconst GridBodyComp = () => {\n\n    const {context, agStackComponentsRegistry, resizeObserverService} = useContext(BeansContext);\n\n    const [rowAnimationClass, setRowAnimationClass] = useState<string>('');\n    const [ariaColCount, setAriaColCount] = useState<number>(0);\n    const [ariaRowCount, setAriaRowCount] = useState<number>(0);\n    const [topHeight, setTopHeight] = useState<number>(0);\n    const [bottomHeight, setBottomHeight] = useState<number>(0);\n    const [topDisplay, setTopDisplay] = useState<string>('');\n    const [bottomDisplay, setBottomDisplay] = useState<string>('');\n    const [movingCss, setMovingCss] = useState<string | null>(null);\n    const [forceVerticalScrollClass, setForceVerticalScrollClass] = useState<string | null>(null);\n    const [topAndBottomOverflowY, setTopAndBottomOverflowY] = useState<string>('');\n    const [cellSelectableCss, setCellSelectableCss] = useState<string | null>(null);\n\n    // we initialise layoutClass to 'ag-layout-normal', because if we don't, the comp will initially\n    // render with no width (as ag-layout-normal sets width to 0, which is needed for flex) which\n    // gives the grid a massive width, which then renders a massive amount of columns. this problem\n    // is due to React been async, for the non-async version (ie when not using React) this is not a\n    // problem as the UI will finish initialising before we set data.\n    const [layoutClass, setLayoutClass] = useState<string>('ag-layout-normal');\n\n    const eRoot = useRef<HTMLDivElement>(null);\n    const eTop = useRef<HTMLDivElement>(null);\n    const eBodyViewport = useRef<HTMLDivElement>(null);\n    const eBottom = useRef<HTMLDivElement>(null);\n\n    useReactCommentEffect(' AG Grid Body ', eRoot);\n    useReactCommentEffect(' AG Pinned Top ', eTop);\n    useReactCommentEffect(' AG Middle ', eBodyViewport);\n    useReactCommentEffect(' AG Pinned Bottom ', eBottom);\n\n    useEffectOnce( () => {\n        const beansToDestroy: any[] = [];\n        const destroyFuncs: (() => void)[] = [];\n\n        if (!context) { return; }\n\n        const newComp = (tag: string) => {\n            const CompClass = agStackComponentsRegistry.getComponentClass(tag);\n            const comp = context.createBean(new CompClass());\n            beansToDestroy.push(comp);\n            return comp;\n        };\n\n        eRoot.current!.appendChild(document.createComment(' AG Fake Horizontal Scroll '));\n        eRoot.current!.appendChild(newComp('AG-FAKE-HORIZONTAL-SCROLL').getGui());\n\n        eRoot.current!.appendChild(document.createComment(' AG Overlay Wrapper '));\n        eRoot.current!.appendChild(newComp('AG-OVERLAY-WRAPPER').getGui());\n\n        const compProxy: IGridBodyComp = {\n            setRowAnimationCssOnBodyViewport: setRowAnimationClass,\n            setColumnCount: setAriaColCount,\n            setRowCount: setAriaRowCount,\n            setTopHeight: setTopHeight,\n            setBottomHeight: setBottomHeight,\n            setTopDisplay: setTopDisplay,\n            setBottomDisplay: setBottomDisplay,\n            setColumnMovingCss: setMovingCss,\n            updateLayoutClasses: setLayoutClass,\n            setAlwaysVerticalScrollClass: setForceVerticalScrollClass,\n            setPinnedTopBottomOverflowY: setTopAndBottomOverflowY,\n            setCellSelectableCss: setCellSelectableCss,\n\n            registerBodyViewportResizeListener: listener => {\n                const unsubscribeFromResize = resizeObserverService.observeResize(eBodyViewport.current!, listener);\n                destroyFuncs.push(() => unsubscribeFromResize());\n            }\n        };\n\n        const ctrl = context.createBean(new GridBodyCtrl());\n        beansToDestroy.push(ctrl);\n        ctrl.setComp(compProxy, eRoot.current!, eBodyViewport.current!, eTop.current!, eBottom.current!);\n\n        return () => {\n            context.destroyBeans(beansToDestroy);\n            destroyFuncs.forEach(f => f());\n        };\n\n    });\n\n    const rootClasses = useMemo( ()=> \n        classesList('ag-root','ag-unselectable', movingCss, layoutClass), \n        [movingCss, layoutClass]\n    );\n    const bodyViewportClasses = useMemo( ()=> \n        classesList('ag-body-viewport', rowAnimationClass, layoutClass, forceVerticalScrollClass, cellSelectableCss), \n        [rowAnimationClass, layoutClass, forceVerticalScrollClass, cellSelectableCss]\n    );\n    const topClasses = useMemo( ()=> \n        classesList('ag-floating-top', cellSelectableCss), \n        [cellSelectableCss]\n    );\n    const bottomClasses = useMemo( ()=> \n        classesList('ag-floating-bottom', cellSelectableCss), \n        [cellSelectableCss]\n    );\n\n    const topStyle: React.CSSProperties = useMemo( () => ({\n        height: topHeight,\n        minHeight: topHeight,\n        display: topDisplay,\n        overflowY: (topAndBottomOverflowY as any)\n    }), [topHeight, topDisplay, topAndBottomOverflowY]);\n\n    const bottomStyle: React.CSSProperties = useMemo( ()=> ({\n        height: bottomHeight,\n        minHeight: bottomHeight,\n        display: bottomDisplay,\n        overflowY: (topAndBottomOverflowY as any)\n    }), [bottomHeight, bottomDisplay, topAndBottomOverflowY]);\n\n    const createRowContainer = (container: RowContainerName) => <RowContainerComp name={ container } key={`${container}-container`} />;\n    const createSection = ({\n        section, \n        children,\n        className, \n        style\n    }: SectionProperties & { children: RowContainerName[] } ) => (\n        <div ref={ section } className={ className } role=\"presentation\" style={ style }>\n            { children.map(createRowContainer) }\n        </div>\n    );\n\n    return (\n        <div ref={ eRoot } className={ rootClasses } role=\"grid\" aria-colcount={ ariaColCount } aria-rowcount={ ariaRowCount }>\n            <GridHeaderComp/>\n            { createSection({ section: eTop, className: topClasses, style: topStyle, children: [\n                RowContainerName.TOP_LEFT,\n                RowContainerName.TOP_CENTER,\n                RowContainerName.TOP_RIGHT,\n                RowContainerName.TOP_FULL_WIDTH,\n            ]}) }\n            { createSection({ section: eBodyViewport, className: bodyViewportClasses, children: [\n                RowContainerName.LEFT,\n                RowContainerName.CENTER,\n                RowContainerName.RIGHT,\n                RowContainerName.FULL_WIDTH,\n            ]}) }\n            { createSection({ section: eBottom, className: bottomClasses, style: bottomStyle, children: [\n                RowContainerName.BOTTOM_LEFT,\n                RowContainerName.BOTTOM_CENTER,\n                RowContainerName.BOTTOM_RIGHT,\n                RowContainerName.BOTTOM_FULL_WIDTH,\n            ]}) }\n        </div>\n    );\n};\n\nexport default memo(GridBodyComp);\n","import {\n    Beans, Context,\n    FocusService,\n    GridCtrl,\n    IGridComp\n} from '@ag-grid-community/core';\nimport React, { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { BeansContext } from './beansContext';\nimport GridBodyComp from './gridBodyComp';\nimport useReactCommentEffect from './reactComment';\nimport TabGuardComp, { TabGuardCompCallback } from './tabGuardComp';\nimport { useEffectOnce } from './useEffectOnce';\nimport { classesList } from './utils';\n\ninterface GridCompProps {\n    context: Context;\n}\n\nconst GridComp = ({ context }: GridCompProps) => {\n\n    const [rtlClass, setRtlClass] = useState<string>('');\n    const [keyboardFocusClass, setKeyboardFocusClass] = useState<string>('');\n    const [layoutClass, setLayoutClass] = useState<string>('');\n    const [cursor, setCursor] = useState<string | null>(null);\n    const [userSelect, setUserSelect] = useState<string | null>(null);\n    const [initialised, setInitialised] = useState<boolean>(false);\n    const [tabGuardReady, setTabGuardReady] = useState<any>();\n\n    const gridCtrlRef = useRef<GridCtrl | null>(null);\n    const eRootWrapperRef = useRef<HTMLDivElement>(null);\n    const tabGuardRef = useRef<TabGuardCompCallback>();\n    const eGridBodyParentRef = useRef<HTMLDivElement>(null);\n    const focusInnerElementRef = useRef<((fromBottom?: boolean) => void)>(() => undefined);\n\n    const onTabKeyDown = useCallback(() => undefined, []);\n\n    const beans = useMemo( ()=> context.getBean('beans') as Beans, []);\n\n    useReactCommentEffect(' AG Grid ', eRootWrapperRef);\n\n    // create shared controller.\n    useEffectOnce(() => {\n        const currentController = gridCtrlRef.current = context.createBean(new GridCtrl());\n\n        return () => {\n            context.destroyBean(currentController);\n            gridCtrlRef.current = null;\n        }\n    });\n\n    // initialise the UI\n    useEffectOnce(() => {\n        const gridCtrl = gridCtrlRef.current!;\n\n        focusInnerElementRef.current = gridCtrl.focusInnerElement.bind(gridCtrl);\n\n        const compProxy: IGridComp = {\n            destroyGridUi:\n                () => {}, // do nothing, as framework users destroy grid by removing the comp\n            setRtlClass: setRtlClass,\n            addOrRemoveKeyboardFocusClass:\n                (addOrRemove: boolean) => setKeyboardFocusClass(addOrRemove ? FocusService.AG_KEYBOARD_FOCUS : ''),\n            forceFocusOutOfContainer: () => {\n                tabGuardRef.current!.forceFocusOutOfContainer();\n            },\n            updateLayoutClasses: setLayoutClass,\n            getFocusableContainers: () => {\n                const els: HTMLElement[] = [];\n\n                const gridBodyCompEl = eRootWrapperRef.current!.querySelector('.ag-root');\n                const sideBarEl = eRootWrapperRef.current!.querySelector('.ag-side-bar')\n\n                if (gridBodyCompEl) {\n                    els.push(gridBodyCompEl as HTMLElement);\n                }\n\n                if (sideBarEl) {\n                    els.push(sideBarEl as HTMLElement);\n                }\n\n                return els;\n            },\n            setCursor,\n            setUserSelect\n        };\n\n        gridCtrl.setComp(compProxy, eRootWrapperRef.current!, eRootWrapperRef.current!);\n\n        setInitialised(true);\n    });\n\n    // initialise the extra components\n    useEffect(() => {\n        if (!tabGuardReady) { return; }\n\n        const gridCtrl = gridCtrlRef.current!;\n        const beansToDestroy: any[] = [];\n\n        const {agStackComponentsRegistry} = beans;\n\n        const HeaderDropZonesClass = agStackComponentsRegistry.getComponentClass('AG-GRID-HEADER-DROP-ZONES');\n        const SideBarClass = agStackComponentsRegistry.getComponentClass('AG-SIDE-BAR');\n        const StatusBarClass = agStackComponentsRegistry.getComponentClass('AG-STATUS-BAR');\n        const WatermarkClass = agStackComponentsRegistry.getComponentClass('AG-WATERMARK');\n        const PaginationClass = agStackComponentsRegistry.getComponentClass('AG-PAGINATION');\n        const additionalEls: HTMLDivElement[] = [];\n        const eRootWrapper = eRootWrapperRef.current!;\n        const eGridBodyParent = eGridBodyParentRef.current!;\n\n        if (gridCtrl.showDropZones() && HeaderDropZonesClass) {\n            const headerDropZonesComp = context.createBean(new HeaderDropZonesClass());\n            const eGui = headerDropZonesComp.getGui();\n            eRootWrapper.insertAdjacentElement('afterbegin', eGui);\n            additionalEls.push(eGui);\n            beansToDestroy.push(headerDropZonesComp);\n        }\n\n        if (gridCtrl.showSideBar() && SideBarClass) {\n            const sideBarComp = context.createBean(new SideBarClass());\n            const eGui = sideBarComp.getGui();\n            const bottomTabGuard = eGridBodyParent.querySelector('.ag-tab-guard-bottom');\n            if (bottomTabGuard) {\n                bottomTabGuard.insertAdjacentElement('beforebegin', eGui);\n                additionalEls.push(eGui);\n            }\n\n            beansToDestroy.push(sideBarComp);\n        }\n\n        if (gridCtrl.showStatusBar() && StatusBarClass) {\n            const statusBarComp = context.createBean(new StatusBarClass());\n            const eGui = statusBarComp.getGui();\n            eRootWrapper.insertAdjacentElement('beforeend', eGui);\n            additionalEls.push(eGui);\n            beansToDestroy.push(statusBarComp);\n        }\n\n        if (PaginationClass) {\n            const paginationComp = context.createBean(new PaginationClass());\n            const eGui = paginationComp.getGui();\n            eRootWrapper.insertAdjacentElement('beforeend', eGui);\n            additionalEls.push(eGui);\n            beansToDestroy.push(paginationComp);\n        }\n\n        if (gridCtrl.showWatermark() && WatermarkClass) {\n            const watermarkComp = context.createBean(new WatermarkClass());\n            const eGui = watermarkComp.getGui();\n            eRootWrapper.insertAdjacentElement('beforeend', eGui);\n            additionalEls.push(eGui);\n            beansToDestroy.push(watermarkComp);\n        }\n\n        return () => {\n            context.destroyBeans(beansToDestroy);\n            additionalEls.forEach(el => {\n                if (el.parentElement) {\n                    el.parentElement.removeChild(el);\n                }\n            });\n        }\n    }, [tabGuardReady])\n\n    const rootWrapperClasses = useMemo( ()=> classesList('ag-root-wrapper', rtlClass, keyboardFocusClass, layoutClass), [rtlClass, keyboardFocusClass, layoutClass]);\n    const rootWrapperBodyClasses = useMemo( () => classesList('ag-root-wrapper-body', 'ag-focus-managed', layoutClass), [layoutClass]);\n\n    const topStyle: React.CSSProperties = useMemo(() => ({\n        userSelect: userSelect != null ? (userSelect as any) : '',\n        WebkitUserSelect: userSelect != null ? (userSelect as any) : '',\n        cursor: cursor != null ? cursor : ''\n    }), [userSelect, cursor]);\n\n    const eGridBodyParent = eGridBodyParentRef.current;\n\n    const setTabGuardCompRef = useCallback((ref: TabGuardCompCallback) => {\n        tabGuardRef.current = ref;\n        setTabGuardReady(true);\n    }, []);\n    \n    return (\n        <div ref={ eRootWrapperRef } className={ rootWrapperClasses } style={ topStyle }>\n            <div className={ rootWrapperBodyClasses } ref={ eGridBodyParentRef }>\n                { initialised && eGridBodyParent &&\n                    <BeansContext.Provider value={beans}>\n                        <TabGuardComp\n                            ref={ setTabGuardCompRef }\n                            eFocusableElement= { eGridBodyParent }\n                            onTabKeyDown={ onTabKeyDown }\n                            gridCtrl={ gridCtrlRef.current! }>\n                        { // we wait for initialised before rending the children, so GridComp has created and registered with it's\n                        // GridCtrl before we create the child GridBodyComp. Otherwise the GridBodyComp would initialise first,\n                        // before we have set the the Layout CSS classes, causing the GridBodyComp to render rows to a grid that\n                        // doesn't have it's height specified, which would result if all the rows getting rendered (and if many rows,\n                        // hangs the UI)\n                            <GridBodyComp/>\n                        }\n                        </TabGuardComp>\n                    </BeansContext.Provider>\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default memo(GridComp);\n","import React, { memo, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { BeansContext } from '../beansContext';\nimport {\n    IGridHeaderComp, GridHeaderCtrl, Constants\n} from '@ag-grid-community/core';\nimport { CssClasses } from '../utils';\nimport HeaderRowContainerComp from './headerRowContainerComp';\nimport { useEffectOnce } from '../useEffectOnce';\n\n\nconst GridHeaderComp = () => {\n\n    const [cssClasses, setCssClasses] = useState<CssClasses>(new CssClasses());\n    const [height, setHeight] = useState<string>();\n\n    const {context} = useContext(BeansContext);\n    const eGui = useRef<HTMLDivElement>(null);\n\n    useEffectOnce(() => {\n\n        const compProxy: IGridHeaderComp = {\n            addOrRemoveCssClass: (name, on) => setCssClasses(prev => prev.setClass(name, on)),\n            setHeightAndMinHeight: height => setHeight(height)\n        };\n\n        const ctrl = context.createBean(new GridHeaderCtrl());\n        ctrl.setComp(compProxy, eGui.current!, eGui.current!);\n\n        return () => {\n            context.destroyBean(ctrl);\n        };\n\n    });\n\n    const className = useMemo( ()=> {\n        let res = cssClasses.toString();\n        return 'ag-header ' + res;\n    }, [cssClasses]);\n\n    const style = useMemo( ()=> ({\n        height: height,\n        minHeight: height\n    }), [height]);\n\n    return (\n        <div ref={eGui} className={className} style={style} role=\"presentation\">\n            <HeaderRowContainerComp pinned={Constants.PINNED_LEFT}/>\n            <HeaderRowContainerComp pinned={null}/>\n            <HeaderRowContainerComp pinned={Constants.PINNED_RIGHT}/>\n        </div>\n    );\n};\n\nexport default memo(GridHeaderComp);\n","import React, { memo, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { BeansContext } from '../beansContext';\nimport { ColumnSortState, CssClassManager, HeaderCellCtrl, IHeader, IHeaderCellComp, UserCompDetails } from '@ag-grid-community/core';\nimport { isComponentStateless } from '../utils';\nimport { showJsComp } from '../jsComp';\nimport { useEffectOnce } from '../useEffectOnce';\n\nconst HeaderCellComp = (props: {ctrl: HeaderCellCtrl}) => {\n\n    const { context } = useContext(BeansContext);\n    const [width, setWidth] = useState<string>();\n    const [title, setTitle] = useState<string>();\n    const [colId, setColId] = useState<string>();\n    const [ariaSort, setAriaSort] = useState<ColumnSortState>();\n    const [ariaDescription, setAriaDescription] = useState<string>();\n    const [userCompDetails, setUserCompDetails] = useState<UserCompDetails>();\n\n    const eGui = useRef<HTMLDivElement>(null);\n    const eResize = useRef<HTMLDivElement>(null);\n    const userCompRef = useRef<IHeader>();\n\n    const { ctrl } = props;\n\n    const cssClassManager = useMemo(() => new CssClassManager(() => eGui.current!), []);\n\n    useEffectOnce(() => {\n        const compProxy: IHeaderCellComp = {\n            setWidth: width => setWidth(width),\n            addOrRemoveCssClass: (name, on) => cssClassManager.addOrRemoveCssClass(name, on),\n            setColId: id => setColId(id),\n            setTitle: title => setTitle(title),\n\n            setAriaDescription: description => setAriaDescription(description),\n            setAriaSort: sort => setAriaSort(sort),\n            setUserCompDetails: compDetails => setUserCompDetails(compDetails),\n            getUserCompInstance: () => userCompRef.current || undefined\n        };\n\n        ctrl.setComp(compProxy, eGui.current!, eResize.current!);\n\n        const selectAllGui = ctrl.getSelectAllGui();\n        eResize.current!.insertAdjacentElement('afterend', selectAllGui);\n    });\n\n    // js comps\n    useEffect(() => showJsComp(\n        userCompDetails, context, eGui.current!, userCompRef\n    ), [userCompDetails]);\n\n    // add drag handling, must be done after component is added to the dom\n    useEffect(() => {\n        let userCompDomElement: HTMLElement | undefined = undefined;\n        eGui.current!.childNodes.forEach( node => {\n            if (node != null && node !== eResize.current) {\n                userCompDomElement = node as HTMLElement;\n            }\n        });\n\n        ctrl.setDragSource(userCompDomElement);\n    }, [userCompDetails]);\n\n    const style = useMemo(() => ({ width }), [width]);\n\n    const userCompStateless = useMemo(() => {\n        const res = userCompDetails?.componentFromFramework && isComponentStateless(userCompDetails.componentClass);\n        return !!res;\n    }, [userCompDetails]);\n\n    const reactUserComp = userCompDetails && userCompDetails.componentFromFramework;\n    const UserCompClass = userCompDetails && userCompDetails.componentClass;\n\n    return (\n        <div\n            ref={eGui}\n            className=\"ag-header-cell\"\n            style={ style }\n            title={ title }\n            col-id={ colId }\n            aria-sort={ ariaSort }\n            role=\"columnheader\"\n            tabIndex={-1}\n            aria-description={ ariaDescription }\n        >\n            <div ref={eResize} className=\"ag-header-cell-resize\" role=\"presentation\"></div>\n            { reactUserComp && userCompStateless && <UserCompClass { ...userCompDetails!.params } /> }\n            { reactUserComp && !userCompStateless && <UserCompClass { ...userCompDetails!.params } ref={ userCompRef }/> }\n        </div>\n    );\n};\n\nexport default memo(HeaderCellComp);\n","import React, { memo, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { BeansContext } from '../beansContext';\nimport { AgPromise, HeaderFilterCellCtrl, ResolveAndRejectCallback, IFloatingFilter, IHeaderFilterCellComp, UserCompDetails } from '@ag-grid-community/core';\nimport { CssClasses, isComponentStateless } from '../utils';\nimport { showJsComp } from '../jsComp';\nimport { useEffectOnce } from '../useEffectOnce';\n\nconst HeaderFilterCellComp = (props: {ctrl: HeaderFilterCellCtrl}) => {\n\n    const {context} = useContext(BeansContext);\n\n    const [cssClasses, setCssClasses] = useState<CssClasses>(new CssClasses());\n    const [cssBodyClasses, setBodyCssClasses] = useState<CssClasses>(new CssClasses());\n    const [cssButtonWrapperClasses, setButtonWrapperCssClasses] = useState<CssClasses>(new CssClasses());\n    const [width, setWidth] = useState<string>();\n    const [userCompDetails, setUserCompDetails] = useState<UserCompDetails>();\n\n    const eGui = useRef<HTMLDivElement>(null);\n    const eFloatingFilterBody = useRef<HTMLDivElement>(null);\n    const eButtonWrapper = useRef<HTMLDivElement>(null);\n    const eButtonShowMainFilter = useRef<HTMLButtonElement>(null);\n\n    const alreadyResolved = useRef<boolean>(false);\n    const userCompResolve = useRef<(value: IFloatingFilter)=>void>();  \n    const userCompPromise = useRef<AgPromise<IFloatingFilter>>();\n    useEffectOnce( ()=> {\n        userCompPromise.current = new AgPromise<IFloatingFilter>( resolve => {\n            userCompResolve.current = resolve;\n        });\n    });\n    \n    const userCompRef = (value: IFloatingFilter) => {\n        // i don't know why, but react was calling this method multiple\n        // times, thus un-setting, them immediately setting the reference again.\n        // because we are resolving a promise, it's not good to be resolving\n        // the promise multiple times, so we only resolve the first time.\n        if (alreadyResolved.current) { return; }\n        // we also skip when it's un-setting\n        if (value==null) { return; }\n\n        userCompResolve.current && userCompResolve.current(value);\n        alreadyResolved.current = true;\n    };\n\n    const { ctrl } = props;\n\n    useEffectOnce(() => {\n\n        const compProxy: IHeaderFilterCellComp = {\n            addOrRemoveCssClass: (name, on) => setCssClasses(prev => prev.setClass(name, on)),\n            addOrRemoveBodyCssClass: (name, on) => setBodyCssClasses(prev => prev.setClass(name, on)),\n            addOrRemoveButtonWrapperCssClass: (name, on) => setButtonWrapperCssClasses(prev => prev.setClass(name, on)),\n            setWidth: width => setWidth(width),\n            setCompDetails: compDetails => setUserCompDetails(compDetails),\n            getFloatingFilterComp: ()=> userCompPromise.current ? userCompPromise.current :  null,\n            setMenuIcon: eIcon => eButtonShowMainFilter.current!.appendChild(eIcon)\n        };\n\n        ctrl.setComp(compProxy, eGui.current!, eButtonShowMainFilter.current!, eFloatingFilterBody.current!);\n\n    });\n\n    // js comps\n    useEffect(() => {\n        return showJsComp(userCompDetails, context, eFloatingFilterBody.current!, userCompRef);\n    }, [userCompDetails]);\n\n    const style = useMemo( ()=> ({\n        width: width\n    }), [width]);\n    \n    const className = useMemo( ()=> 'ag-header-cell ag-floating-filter ' + cssClasses.toString(), [cssClasses] );\n    const bodyClassName = useMemo( ()=> cssBodyClasses.toString(), [cssBodyClasses] );\n    const buttonWrapperClassName = useMemo( ()=> 'ag-floating-filter-button ' + cssButtonWrapperClasses.toString(), [cssBodyClasses] );\n\n    const userCompStateless = useMemo( ()=> {\n        const res = userCompDetails \n                    && userCompDetails.componentFromFramework \n                    && isComponentStateless(userCompDetails.componentClass);\n        return !!res;\n    }, [userCompDetails]);\n\n    const reactUserComp = userCompDetails && userCompDetails.componentFromFramework;\n    const UserCompClass = userCompDetails && userCompDetails.componentClass;\n\n    return (\n        <div ref={eGui} className={className} style={style} role=\"gridcell\" tabIndex={-1}>\n            <div ref={eFloatingFilterBody} className={bodyClassName} role=\"presentation\">\n                { reactUserComp && userCompStateless && <UserCompClass { ...userCompDetails!.params } /> }\n                { reactUserComp && !userCompStateless && <UserCompClass { ...userCompDetails!.params } ref={ userCompRef }/> }\n            </div>\n            <div ref={eButtonWrapper} className={buttonWrapperClassName} role=\"presentation\">\n                <button ref={eButtonShowMainFilter} type=\"button\" aria-label=\"Open Filter Menu\" className=\"ag-floating-filter-button-button\" tabIndex={-1}></button>\n            </div>\n        </div>\n    );\n};\n\nexport default memo(HeaderFilterCellComp);","import { HeaderGroupCellCtrl, IHeaderGroupCellComp, UserCompDetails } from '@ag-grid-community/core';\nimport React, { memo, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { BeansContext } from '../beansContext';\nimport { showJsComp } from '../jsComp';\nimport { useEffectOnce } from '../useEffectOnce';\nimport { CssClasses } from '../utils';\n\nconst HeaderGroupCellComp = (props: {ctrl: HeaderGroupCellCtrl}) => {\n\n    const {context} = useContext(BeansContext);\n\n    const [cssClasses, setCssClasses] = useState<CssClasses>(new CssClasses());\n    const [cssResizableClasses, setResizableCssClasses] = useState<CssClasses>(new CssClasses());\n    const [width, setWidth] = useState<string>();\n    const [title, setTitle] = useState<string>();\n    const [colId, setColId] = useState<string>();\n    const [ariaExpanded, setAriaExpanded] = useState<'true'|'false'|undefined>();\n    const [userCompDetails, setUserCompDetails] = useState<UserCompDetails>();\n\n    const eGui = useRef<HTMLDivElement>(null);\n    const eResize = useRef<HTMLDivElement>(null);\n\n    const { ctrl } = props;\n\n    useEffectOnce(() => {\n\n        const compProxy: IHeaderGroupCellComp = {\n            setWidth: width => setWidth(width),\n            addOrRemoveCssClass: (name, on) => setCssClasses(prev => prev.setClass(name, on)),\n            setColId: id => setColId(id),\n            setTitle: title => setTitle(title),\n            setUserCompDetails: compDetails => setUserCompDetails(compDetails),\n            addOrRemoveResizableCssClass: (name, on) => setResizableCssClasses(prev => prev.setClass(name, on)),\n            setAriaExpanded: expanded => setAriaExpanded(expanded)\n        };\n\n        ctrl.setComp(compProxy, eGui.current!, eResize.current!);\n\n    });\n\n    // js comps\n    useEffect(() => {\n        return showJsComp(userCompDetails, context, eGui.current!);\n    }, [userCompDetails]);\n\n    // add drag handling, must be done after component is added to the dom\n    useEffect(()=> {\n        let userCompDomElement: HTMLElement | undefined = undefined;\n        eGui.current!.childNodes.forEach( node => {\n            if (node!=null && node!==eResize.current) {\n                userCompDomElement = node as HTMLElement;\n            }\n        });\n\n        userCompDomElement && ctrl.setDragSource(userCompDomElement);\n    }, [userCompDetails]);\n\n    const style = useMemo( ()=> ({\n        width: width\n    }), [width]);\n    \n    const className = useMemo( ()=> 'ag-header-group-cell ' + cssClasses.toString(), [cssClasses] );\n    const resizableClassName = useMemo( ()=> 'ag-header-cell-resize ' + cssResizableClasses.toString(), [cssResizableClasses] );\n\n    const reactUserComp = userCompDetails && userCompDetails.componentFromFramework;\n    const UserCompClass = userCompDetails && userCompDetails.componentClass;\n\n    return (\n        <div ref={eGui} className={className} style={style} title={title} col-id={colId} \n                    role=\"columnheader\" tabIndex={-1} aria-expanded={ariaExpanded}>\n            { reactUserComp && <UserCompClass { ...userCompDetails!.params } /> }\n            <div ref={eResize} className={resizableClassName}></div>\n        </div>\n    );\n};\n\nexport default memo(HeaderGroupCellComp);","import { AbstractHeaderCellCtrl, HeaderGroupCellCtrl, HeaderCellCtrl, HeaderFilterCellCtrl, HeaderRowCtrl, HeaderRowType, IHeaderRowComp, _ } from '@ag-grid-community/core';\nimport React, { memo, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { BeansContext } from '../beansContext';\nimport HeaderCellComp from './headerCellComp';\nimport HeaderGroupCellComp from './headerGroupCellComp';\nimport HeaderFilterCellComp from './headerFilterCellComp';\nimport { useEffectOnce } from '../useEffectOnce';\n\nconst HeaderRowComp = (props: {ctrl: HeaderRowCtrl}) => {\n\n    const {gridOptionsWrapper} = useContext(BeansContext);\n\n    const [ transform, setTransform ] = useState<string>();\n    const [ height, setHeight ] = useState<string>();\n    const [ top, setTop ] = useState<string>();\n    const [ width, setWidth ] = useState<string>();\n    const [ ariaRowIndex, setAriaRowIndex ] = useState<number>();\n    const [ cellCtrls, setCellCtrls ] = useState<AbstractHeaderCellCtrl[]>([]);\n\n    const eGui = useRef<HTMLDivElement>(null);\n\n    const { ctrl } = props;\n\n    const typeColumn = ctrl.getType() === HeaderRowType.COLUMN;\n    const typeGroup = ctrl.getType() === HeaderRowType.COLUMN_GROUP;\n    const typeFilter = ctrl.getType() === HeaderRowType.FLOATING_FILTER;\n\n    const setCellCtrlsMaintainOrder = useCallback( (prev: AbstractHeaderCellCtrl[], next: AbstractHeaderCellCtrl[]) => {\n\n        // if we are ensuring dom order, we set the ctrls into the dom in the same order they appear on screen\n        if (gridOptionsWrapper.isEnsureDomOrder()) {\n            return next;\n        }\n\n        // if not maintaining order, we want to keep the dom elements we have and add new ones to the end,\n        // otherwise we will loose transition effects as elements are placed in different dom locations\n        const prevMap = _.mapById(prev, c => c.getInstanceId());\n        const nextMap = _.mapById(next, c => c.getInstanceId());\n\n        const oldCtrlsWeAreKeeping = prev.filter( c => nextMap.has(c.getInstanceId()) );\n        const newCtrls = next.filter( c => !prevMap.has(c.getInstanceId()) )\n\n        return [...oldCtrlsWeAreKeeping, ...newCtrls];\n    }, []);\n\n    useEffectOnce(() => {\n\n        const compProxy: IHeaderRowComp = {\n            setTransform: transform => setTransform(transform),\n            setHeight: height => setHeight(height),\n            setTop: top => setTop(top),\n            setHeaderCtrls: ctrls => setCellCtrls(prev => setCellCtrlsMaintainOrder(prev, ctrls)),\n            setWidth: width => setWidth(width),\n            setAriaRowIndex: rowIndex => setAriaRowIndex(rowIndex)\n        };\n\n        ctrl.setComp(compProxy);\n\n    });\n\n    const style = useMemo( ()=> ({\n        transform: transform,\n        height: height,\n        top: top,\n        width: width\n    }), [transform, height, top, width]);\n\n    const className = useMemo( ()=> {\n        const res: string[] = [`ag-header-row`];\n        \n        typeColumn && res.push(`ag-header-row-column`);\n        typeGroup && res.push(`ag-header-row-column-group`);\n        typeFilter && res.push(`ag-header-row-column-filter`);\n\n        return res.join(' ');\n    }, []);\n\n    const createCellJsx = useCallback( (cellCtrl: AbstractHeaderCellCtrl) => {\n        switch (ctrl.getType()) {\n            case HeaderRowType.COLUMN_GROUP :\n                return <HeaderGroupCellComp ctrl={cellCtrl as HeaderGroupCellCtrl} key={cellCtrl.getInstanceId()} />;\n\n            case HeaderRowType.FLOATING_FILTER :\n                return <HeaderFilterCellComp ctrl={cellCtrl as HeaderFilterCellCtrl} key={cellCtrl.getInstanceId()} />;\n                \n            default :\n                return <HeaderCellComp ctrl={cellCtrl as HeaderCellCtrl} key={cellCtrl.getInstanceId()} />;\n        }\n    }, []);\n\n    // below, we are not doing floating filters, not yet\n    return (\n        <div ref={eGui} className={className} role=\"row\" style={style} aria-rowindex={ariaRowIndex}>\n            { cellCtrls.map( createCellJsx ) }\n        </div>\n    );\n};\n\nexport default memo(HeaderRowComp);\n","import React, { memo, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { BeansContext } from '../beansContext';\nimport {\n    IHeaderRowContainerComp, HeaderRowCtrl, HeaderRowContainerCtrl, Constants\n} from '@ag-grid-community/core';\nimport { CssClasses } from '../utils';\nimport HeaderRowComp from './headerRowComp';\nimport { useEffectOnce } from '../useEffectOnce';\n\n\nconst HeaderRowContainerComp = (props: {pinned: string | null}) => {\n\n    const [cssClasses, setCssClasses] = useState<CssClasses>(new CssClasses());\n    const [centerContainerWidth, setCenterContainerWidth] = useState<string>();\n    const [centerContainerTransform, setCenterContainerTransform] = useState<string>();\n    const [pinnedContainerWidth, setPinnedContainerWidth] = useState<string>();\n    const [headerRowCtrls, setHeaderRowCtrls] = useState<HeaderRowCtrl[]>([]);\n\n    const {context} = useContext(BeansContext);\n    const eGui = useRef<HTMLDivElement>(null);\n\n    const pinnedLeft = props.pinned === Constants.PINNED_LEFT;\n    const pinnedRight = props.pinned === Constants.PINNED_RIGHT;\n    const centre = !pinnedLeft && !pinnedRight;\n\n    useEffectOnce(() => {\n\n        const compProxy: IHeaderRowContainerComp = {\n            addOrRemoveCssClass: (name, on) => setCssClasses(prev => prev.setClass(name, on)),\n            setCtrls: ctrls => setHeaderRowCtrls(ctrls),\n\n            // centre only\n            setCenterWidth: width => setCenterContainerWidth(width),\n            setContainerTransform: transform => setCenterContainerTransform(transform),\n\n            // pinned only\n            setPinnedContainerWidth: width => setPinnedContainerWidth(width)\n        };\n\n        const ctrl = context.createBean(new HeaderRowContainerCtrl(props.pinned));\n        ctrl.setComp(compProxy, eGui.current!);\n\n        return () => {\n            context.destroyBean(ctrl);\n        };\n\n    });\n\n    const className = useMemo( ()=> cssClasses.toString(), [cssClasses]);\n\n    const insertRowsJsx = ()=> headerRowCtrls.map( ctrl => <HeaderRowComp ctrl={ctrl} key={ctrl.getInstanceId()} /> );\n\n    const eCenterContainerStyle = useMemo( ()=> ({\n        width: centerContainerWidth,\n        transform: centerContainerTransform\n    }), [centerContainerWidth, centerContainerTransform]);\n\n    const ePinnedStyle = useMemo( ()=> ({\n        width: pinnedContainerWidth,\n        minWidth: pinnedContainerWidth,\n        maxWidth: pinnedContainerWidth,\n    }), [pinnedContainerWidth]);\n\n    return (\n        <>\n            { \n                pinnedLeft && \n                <div ref={eGui} className={\"ag-pinned-left-header \" + className} role=\"presentation\" style={ePinnedStyle}>\n                    { insertRowsJsx() }\n                </div>\n            }\n            { \n                pinnedRight && \n                <div ref={eGui} className={\"ag-pinned-right-header \" + className} role=\"presentation\" style={ePinnedStyle}>\n                { insertRowsJsx() }\n            </div>\n            }\n            { \n                centre && \n                <div ref={eGui} className={\"ag-header-viewport \" + className} role=\"presentation\">\n                    <div className={\"ag-header-container\"} role=\"rowgroup\" style={eCenterContainerStyle}>\n                        { insertRowsJsx() }\n                    </div>\n                </div>\n            }\n        </>\n    );\n};\n\nexport default memo(HeaderRowContainerComp);\n","import { Context, AgPromise, UserCompDetails, ICellRendererComp } from '@ag-grid-community/core';\nimport { MutableRefObject } from 'react';\n\nexport const showJsComp = (\n    compDetails: UserCompDetails | undefined, \n    context: Context, eParent: HTMLElement, \n    ref?: MutableRefObject<any> | ((ref: any)=>void)\n)  => {\n\n    const doNothing = !compDetails || compDetails.componentFromFramework;\n    if (doNothing) { return; }\n\n    const promise = compDetails.newAgStackInstance();\n    if (!promise) { return; }\n    \n    // almost all JS Comps are NOT async, however the Floating Multi Filter is Async as it could\n    // be wrapping a React filter, so we need to cater for async comps here.\n\n    let comp: any;\n    let compGui: HTMLElement;\n    let destroyed = false;\n\n    promise.then( c => {\n\n        if (destroyed) {\n            context.destroyBean(c);\n            return;\n        }\n\n        comp = c;\n        compGui = comp.getGui();\n        eParent.appendChild(compGui);\n        setRef(ref, comp);    \n    });\n\n    return () => {\n        destroyed = true;\n        if (!comp) { return; } // in case we were destroyed before async comp was returned\n\n        if (compGui && compGui.parentElement) {\n            compGui.parentElement.removeChild(compGui);\n        }\n\n        context.destroyBean(comp);\n\n        if (ref) {\n            setRef(ref, undefined);\n        }\n    };\n}\n\nconst setRef = (ref: MutableRefObject<any> | ((ref: any)=>void) | undefined, value: any) => {\n    if (!ref) { return; }\n    \n    if (ref instanceof Function) {\n        const refCallback = ref as (ref: any)=>void;\n        refCallback(value);\n    } else {\n        const refObj = ref as MutableRefObject<any>;\n        refObj.current = value;\n    }\n};\n\nexport const createSyncJsComp = (compDetails: UserCompDetails): any => {\n    const promise = compDetails.newAgStackInstance();\n    if (!promise) { return; }\n    return promise.resolveNow(null, x => x); // js comps are never async\n};\n","import { RefObject, useEffect } from 'react';\nimport { useEffectOnce } from './useEffectOnce';\n\nconst useReactCommentEffect = (comment: string, eForCommentRef: RefObject<HTMLElement>) => {\n    useEffectOnce( () => {\n        const eForComment = eForCommentRef.current!;\n        const eParent = eForComment.parentElement;\n        if (!eParent) { return; }\n        const eComment = document.createComment(comment);\n        eParent.insertBefore(eComment, eForComment);\n\n        return () => {\n            eParent.removeChild(eComment);\n        };\n    });\n};\n\nexport default useReactCommentEffect;","import React, { useEffect, useRef, useState, useMemo, memo, useContext } from 'react';\nimport { CellCtrl, RowContainerType, IRowComp, RowCtrl, UserCompDetails, ICellRenderer, CssClassManager } from '@ag-grid-community/core';\nimport { showJsComp } from '../jsComp';\nimport { isComponentStateless } from '../utils';\nimport { BeansContext } from '../beansContext';\nimport CellComp from '../cells/cellComp';\nimport { useEffectOnce } from '../useEffectOnce';\n\ninterface CellCtrls {\n    list: CellCtrl[],\n    instanceIdMap: Map<string, CellCtrl>\n}\n\nconst maintainOrderOnColumns = (prev: CellCtrls, next: CellCtrl[], domOrder: boolean): CellCtrls => {\n    if (domOrder) {\n        const res: CellCtrls = { list: next, instanceIdMap: new Map() };\n        next.forEach(c => res.instanceIdMap.set(c.getInstanceId(), c));\n\n        return res;\n    }\n\n    // if dom order not important, we don't want to change the order\n    // of the elements in the dom, as this would break transition styles\n    const oldCellCtrls: CellCtrl[] = [];\n    const newCellCtrls: CellCtrl[] = [];\n    const newInstanceIdMap: Map<string, CellCtrl> = new Map();\n    const tempMap: Map<string, CellCtrl> = new Map();\n\n    next.forEach(c => tempMap.set(c.getInstanceId(), c));\n\n    prev.list.forEach(c => {\n        const instanceId = c.getInstanceId();\n        if (tempMap.has(instanceId)) {\n            oldCellCtrls.push(c);\n            newInstanceIdMap.set(instanceId, c);\n        }\n    });\n\n    next.forEach(c => {\n        const instanceId = c.getInstanceId();\n        if (!prev.instanceIdMap.has(instanceId)) {\n            newCellCtrls.push(c);\n            newInstanceIdMap.set(instanceId, c);\n        }\n    });\n\n    const res: CellCtrls = {\n        list: [...oldCellCtrls, ...newCellCtrls],\n        instanceIdMap: newInstanceIdMap\n    };\n\n    return res;\n}\n\nconst RowComp = (params: {rowCtrl: RowCtrl, containerType: RowContainerType}) => {\n\n    const { context } = useContext(BeansContext);\n    const { rowCtrl, containerType } = params;\n\n    const [rowIndex, setRowIndex] = useState<string>();\n    const [rowId, setRowId] = useState<string>();\n    const [role, setRole] = useState<string>();\n    const [rowBusinessKey, setRowBusinessKey] = useState<string>();\n    const [tabIndex, setTabIndex] = useState<number>();\n    const [userStyles, setUserStyles] = useState<any>();\n    const [cellCtrls, setCellCtrls] = useState<CellCtrls>({ list: [], instanceIdMap: new Map() });\n    const [fullWidthCompDetails, setFullWidthCompDetails] = useState<UserCompDetails>();\n    const [domOrder, setDomOrder] = useState<boolean>(false);\n\n    // these styles have initial values, so element is placed into the DOM with them,\n    // rather than an transition getting applied.\n    const [top, setTop] = useState<string | undefined>(rowCtrl.getInitialRowTop());\n    const [transform, setTransform] = useState<string | undefined>(rowCtrl.getInitialTransform());\n\n    const eGui = useRef<HTMLDivElement>(null);\n    const fullWidthCompRef = useRef<ICellRenderer>();\n\n    const autoHeightSetup = useRef<boolean>(false);\n    const [autoHeightSetupAttempt, setAutoHeightSetupAttempt] = useState<number>(0);\n\n    // puts autoHeight onto full with detail rows. this needs trickery, as we need\n    // the HTMLElement for the provided Detail Cell Renderer, however the Detail Cell Renderer\n    // could be a stateless React Func Comp which won't work with useRef, so we need\n    // to poll (we limit to 10) looking for the Detail HTMLElement (which will be the only\n    // child) after the fullWidthCompDetails is set.\n    useEffect(() => {\n        if (autoHeightSetup.current) { return; }\n        if (!fullWidthCompDetails) { return; }\n        if (autoHeightSetupAttempt>10) { return; }\n\n        const eChild = eGui.current?.firstChild as HTMLElement;\n        if (eChild) {\n            rowCtrl.setupDetailRowAutoHeight(eChild);\n            autoHeightSetup.current = true;\n        } else {\n            setAutoHeightSetupAttempt( prev => prev + 1);\n        }\n\n    }, [fullWidthCompDetails, autoHeightSetupAttempt]);\n\n    const cssClassManager = useMemo(() => new CssClassManager(() => eGui.current!), []);\n\n    useEffectOnce(() => {\n        // because React is asychronous, it's possible the RowCtrl is no longer a valid RowCtrl. This can\n        // happen if user calls two API methods one after the other, with the second API invalidating the rows\n        // the first call created. Thus the rows for the first call could still get created even though no longer needed.\n        if (!rowCtrl.isAlive()) {  return; }\n        const compProxy: IRowComp = {\n            // the rowTop is managed by state, instead of direct style manipulation by rowCtrl (like all the other styles)\n            // as we need to have an initial value when it's placed into he DOM for the first time, for animation to work.\n            setTop: value => setTop(value),\n            setTransform: value => setTransform(value),\n\n            // i found using React for managing classes at the row level was to slow, as modifying classes caused a lot of\n            // React code to execute, so avoiding React for managing CSS Classes made the grid go much faster.\n            addOrRemoveCssClass: (name, on) => cssClassManager.addOrRemoveCssClass(name, on),\n\n            setDomOrder: domOrder => setDomOrder(domOrder),\n            setRowIndex: value => setRowIndex(value),\n            setRowId: value => setRowId(value),\n            setRowBusinessKey: value => setRowBusinessKey(value),\n            setTabIndex: value => setTabIndex(value),\n            setUserStyles: styles => setUserStyles(styles),\n            setRole: value => setRole(value),\n            // if we don't maintain the order, then cols will be ripped out and into the dom\n            // when cols reordered, which would stop the CSS transitions from working\n            setCellCtrls: next => setCellCtrls(prev => maintainOrderOnColumns(prev, next, domOrder)),\n            showFullWidth: compDetails => setFullWidthCompDetails(compDetails),\n            getFullWidthCellRenderer: ()=> fullWidthCompRef.current,\n        };\n        rowCtrl.setComp(compProxy, eGui.current!, containerType);\n    });\n\n    useEffect(() => showJsComp(\n        fullWidthCompDetails, context, eGui.current!, fullWidthCompRef\n    ), [fullWidthCompDetails]);\n\n    const rowStyles = useMemo(() => {\n        const res = { top, transform };\n\n        Object.assign(res, userStyles);\n        return res;\n    }, [top, transform, userStyles]);\n\n    const showFullWidthFramework = fullWidthCompDetails && fullWidthCompDetails.componentFromFramework;\n    const showCells = cellCtrls != null;\n    \n    const reactFullWidthCellRendererStateless = useMemo(() => {\n        const res = fullWidthCompDetails?.componentFromFramework && isComponentStateless(fullWidthCompDetails.componentClass);\n        return !!res;\n    }, [fullWidthCompDetails]);\n\n    const showCellsJsx = () => cellCtrls.list.map(cellCtrl => (\n        <CellComp\n            cellCtrl={ cellCtrl }\n            editingRow={ rowCtrl.isEditing() }\n            printLayout={ rowCtrl.isPrintLayout() }\n            key={ cellCtrl.getInstanceId() }\n        />\n    ));\n\n    const showFullWidthFrameworkJsx = () => {\n        const FullWidthComp = fullWidthCompDetails!.componentClass;\n        return (\n            <>\n                {\n                    reactFullWidthCellRendererStateless \n                    && <FullWidthComp  { ...fullWidthCompDetails!.params } />\n                }\n                {\n                    !reactFullWidthCellRendererStateless \n                    && <FullWidthComp  { ...fullWidthCompDetails!.params } ref={ fullWidthCompRef } />\n                }\n            </>\n        );\n    };\n\n    return (\n        <div\n            ref={ eGui }\n            role={ role }\n            style={ rowStyles }\n            row-index={ rowIndex }\n            row-id={ rowId }\n            row-business-key={ rowBusinessKey }\n            tabIndex={ tabIndex }\n        >\n            { showCells && showCellsJsx() }\n            { showFullWidthFramework && showFullWidthFrameworkJsx() }\n        </div>\n    );\n};\n\nexport default memo(RowComp);\n","import { getRowContainerTypeForName, IRowContainerComp, RowContainerCtrl, RowContainerName, RowCtrl } from '@ag-grid-community/core';\nimport React, { useEffect, useMemo, useRef, useState, memo, useContext } from 'react';\nimport { classesList } from '../utils';\nimport useReactCommentEffect from '../reactComment';\nimport RowComp from './rowComp';\nimport { BeansContext } from '../beansContext';\nimport { useEffectOnce } from '../useEffectOnce';\n\nconst RowContainerComp = (params: {name: RowContainerName}) => {\n\n    const {context} = useContext(BeansContext);\n\n    const [viewportHeight, setViewportHeight] = useState<string>('');\n    const [rowCtrlsOrdered, setRowCtrlsOrdered] = useState<RowCtrl[]>([]);\n    const [rowCtrls, setRowCtrls] = useState<RowCtrl[]>([]);\n    const [domOrder, setDomOrder] = useState<boolean>(false);\n    const [containerWidth, setContainerWidth] = useState<string>('');\n\n    const { name } = params;\n    const containerType = useMemo(() => getRowContainerTypeForName(name), [name]);\n\n    const eWrapper = useRef<HTMLDivElement>(null);\n    const eViewport = useRef<HTMLDivElement>(null);\n    const eContainer = useRef<HTMLDivElement>(null);\n\n    const cssClasses = useMemo(() => RowContainerCtrl.getRowContainerCssClasses(name), [name]);\n    const wrapperClasses = useMemo( ()=> classesList(cssClasses.wrapper), []);\n    const viewportClasses = useMemo( ()=> classesList(cssClasses.viewport), []);\n    const containerClasses = useMemo( ()=> classesList(cssClasses.container), []);\n\n    // no need to useMemo for boolean types\n    const template1 = name === RowContainerName.CENTER;\n    const template2 = name === RowContainerName.TOP_CENTER || name === RowContainerName.BOTTOM_CENTER;\n    const template3 = !template1 && !template2;\n\n    const topLevelRef = template1 ? eWrapper : template2 ? eViewport : eContainer;\n\n    useReactCommentEffect(' AG Row Container ' + name + ' ', topLevelRef);\n\n    // if domOrder=true, then we just copy rowCtrls into rowCtrlsOrdered observing order,\n    // however if false, then we need to keep the order as they are in the dom, otherwise rowAnimation breaks\n    useEffect( () => {\n        setRowCtrlsOrdered( prev => {\n            if (domOrder) {\n                return rowCtrls;\n            }\n            // if dom order not important, we don't want to change the order\n            // of the elements in the dom, as this would break transition styles\n            const oldRows = prev.filter(r => rowCtrls.indexOf(r) >= 0);\n            const newRows = rowCtrls.filter(r => oldRows.indexOf(r) < 0);\n            const next = [...oldRows, ...newRows];\n            return next;\n        });\n    }, [domOrder, rowCtrls]);\n\n    useEffectOnce(() => {\n        const beansToDestroy: any[] = [];\n\n        const compProxy: IRowContainerComp = {\n            setViewportHeight: setViewportHeight,\n            setRowCtrls: rowCtrls => setRowCtrls(rowCtrls),\n            setDomOrder: domOrder => setDomOrder(domOrder),\n            setContainerWidth: width => setContainerWidth(width)\n        };\n\n        const ctrl = context.createBean(new RowContainerCtrl(name));\n        beansToDestroy.push(ctrl);\n        ctrl.setComp(compProxy, eContainer.current!, eViewport.current!, eWrapper.current!);\n\n        return () => {\n            context.destroyBeans(beansToDestroy);\n        };\n\n    });\n\n    const viewportStyle = useMemo(() => ({\n        height: viewportHeight\n    }), [viewportHeight]);\n\n    const containerStyle = useMemo(() => ({\n        width: containerWidth\n    }), [containerWidth]);\n\n    const buildContainer = () => (\n        <div\n            className={ containerClasses }\n            ref={ eContainer }\n            role={ rowCtrls.length ? \"rowgroup\" : \"presentation\" }\n            style={ containerStyle }>\n            {\n                rowCtrlsOrdered.map(rowCtrl => <RowComp rowCtrl={ rowCtrl } containerType={ containerType } key={ rowCtrl.getInstanceId() }></RowComp>)\n            }\n        </div>\n    );\n\n    return (\n        <>\n            {\n                template1 &&\n                <div className={ wrapperClasses } ref={ eWrapper } role=\"presentation\">\n                    <div className={ viewportClasses } ref= { eViewport } role=\"presentation\" style={ viewportStyle }>\n                        { buildContainer() }\n                    </div>\n                </div>\n            }\n            {\n                template2 &&\n                <div className={ viewportClasses } ref= { eViewport } role=\"presentation\" style={ viewportStyle }>\n                    { buildContainer() }\n                </div>\n            }\n            {\n                template3 && buildContainer()\n            }\n        </>\n    );\n};\n\nexport default memo(RowContainerComp);\n","import React, { useRef, useEffect, useState, forwardRef, useImperativeHandle, ForwardRefRenderFunction, memo, useContext } from 'react';\n\nimport {\n    TabGuardCtrl, ITabGuard, GridCtrl\n} from '@ag-grid-community/core';\nimport { BeansContext } from './beansContext';\nimport { useEffectOnce } from './useEffectOnce';\n\nexport interface TabGuardCompCallback {\n    forceFocusOutOfContainer(): void;\n}\n\ninterface TabGuardProps {\n    children: React.ReactNode,\n    eFocusableElement: HTMLDivElement,\n    onTabKeyDown: (e: KeyboardEvent) => void,\n    gridCtrl: GridCtrl,\n}\n\nconst TabGuardCompRef: ForwardRefRenderFunction<TabGuardCompCallback, TabGuardProps> = (props: any, forwardRef: any) => {\n\n    const { children, eFocusableElement, onTabKeyDown, gridCtrl } = props;\n    const { context } = useContext(BeansContext);\n\n    const topTabGuardRef = useRef<HTMLDivElement>(null);\n    const bottomTabGuardRef = useRef<HTMLDivElement>(null);\n    const tabGuardCtrlRef = useRef<TabGuardCtrl>();\n    const [tabIndex, setTabIndex] = useState<number>();\n\n    useImperativeHandle(forwardRef, () => ({\n        forceFocusOutOfContainer() {\n            tabGuardCtrlRef.current!.forceFocusOutOfContainer();\n        }\n    }));\n\n    useEffectOnce(() => {\n        const eTopGuard = topTabGuardRef.current!;\n        const eBottomGuard = bottomTabGuardRef.current!;\n\n        const compProxy: ITabGuard = {\n            setTabIndex: value => value == null ? setTabIndex(undefined) : setTabIndex(parseInt(value, 10))\n        }\n\n        const ctrl = tabGuardCtrlRef.current = context.createBean(new TabGuardCtrl({\n            comp: compProxy,\n            eTopGuard: eTopGuard,\n            eBottomGuard: eBottomGuard,\n            eFocusableElement: eFocusableElement,\n            \n            onTabKeyDown: onTabKeyDown,\n            focusInnerElement: fromBottom => gridCtrl.focusInnerElement(fromBottom)\n        }));\n\n        return () => {\n            context.destroyBean(ctrl);\n        };\n\n    });\n\n    const createTabGuard = (side: 'top' | 'bottom') => (\n        <div \n            className={ `ag-tab-guard ag-tab-guard-${side}` }\n            role=\"presentation\"\n            tabIndex={ tabIndex }\n            ref={ side === 'top' ? topTabGuardRef : bottomTabGuardRef }\n        ></div>\n    )\n    return (\n        <>\n            {createTabGuard('top')}\n            { children }\n            {createTabGuard('bottom')}\n        </>\n    )\n};\n\nconst TabGuardComp = forwardRef(TabGuardCompRef);\n\nexport default memo(TabGuardComp);\n","import { useEffect, useRef, useState } from 'react';\n\nexport const useEffectOnce = (effect: () => void | (() => void)) => {\n    const destroyFunc = useRef<void | (() => void)>();\n    const effectCalled = useRef(false);\n    const renderAfterCalled = useRef(false);\n    const [val, setVal] = useState<number>(0);\n  \n    if (effectCalled.current) {\n      renderAfterCalled.current = true;\n    }\n  \n    useEffect(() => {\n      // only execute the effect first time around\n      if (!effectCalled.current) {\n        destroyFunc.current = effect();\n        effectCalled.current = true;\n      }\n  \n      // this forces one render after the effect is run\n      setVal((val) => val + 1);\n  \n      return () => {\n        // if the comp didn't render since the useEffect was called,\n        // we know it's the dummy React cycle\n        if (!renderAfterCalled.current) { return; }\n\n        // otherwise this is not a dummy destroy, so call the destroy func\n        if (destroyFunc.current) { destroyFunc.current(); }\n      };\n    }, []);\n  };\n","export const classesList = (...list: (string | null | undefined)[]): string => {\n    const filtered = list.filter( s => s != null && s !== '');\n\n    return filtered.join(' ');\n}\n\nexport class CssClasses {\n\n    private classesMap: {[name: string]: boolean} = {};\n\n    constructor(...initialClasses: string[]) {\n        initialClasses.forEach(className => {\n            this.classesMap[className] = true;\n        });\n    }\n\n    public setClass(className: string, on: boolean): CssClasses {\n        // important to not make a copy if nothing has changed, so react\n        // won't trigger a render cycle on new object instance\n        const nothingHasChanged = !!this.classesMap[className] == on;\n        if (nothingHasChanged) { return this; }\n\n        const res = new CssClasses();\n        res.classesMap = {...this.classesMap};\n        res.classesMap[className] = on;\n        return res;\n    }\n\n    public toString(): string {\n        const res = Object.keys(this.classesMap).filter(key => this.classesMap[key]).join(' ');\n        return res;\n    }\n\n}\n\nexport const isComponentStateless = (Component: any) => {\n    const hasSymbol = () => typeof Symbol === 'function' && Symbol.for;\n    const getMemoType = () => hasSymbol() ? Symbol.for('react.memo') : 0xead3;\n\n    return (\n            typeof Component === 'function' && !(Component.prototype && Component.prototype.isReactComponent)\n        ) || (typeof Component === 'object' && Component.$$typeof === getMemoType());\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as AgGrid from '@ag-grid-community/core';\nimport { ColDef, ColGroupDef } from '@ag-grid-community/core';\n\nexport interface AgGridColumnProps extends ColDef {\n}\n\nexport interface AgGridColumnGroupProps extends ColGroupDef {\n}\n\nexport class AgGridColumn extends Component<AgGridColumnProps | AgGridColumnGroupProps, {}> {\n    constructor(public props: any) {\n        super(props);\n    }\n\n    render() {\n        return null;\n    }\n\n    public static mapChildColumnDefs(children: any) {\n        return React.Children.map(children, child => !!child ?  AgGridColumn.toColDef(child.props) : null);\n    }\n\n    public static toColDef(columnProps: any): ColDef {\n        const { children, ...colDef } = columnProps;\n\n        if (AgGridColumn.hasChildColumns(children)) {\n            colDef.children = AgGridColumn.mapChildColumnDefs(children);\n        }\n\n        return colDef;\n    }\n\n    public static hasChildColumns(children: any): boolean {\n        return React.Children.count(children) > 0;\n    }\n}\n\naddProperties(AgGrid.ColDefUtil.BOOLEAN_PROPERTIES, PropTypes.bool);\naddProperties(AgGrid.ColDefUtil.STRING_PROPERTIES, PropTypes.string);\naddProperties(AgGrid.ColDefUtil.OBJECT_PROPERTIES, PropTypes.object);\naddProperties(AgGrid.ColDefUtil.ARRAY_PROPERTIES, PropTypes.array);\naddProperties(AgGrid.ColDefUtil.NUMBER_PROPERTIES, PropTypes.number);\naddProperties(AgGrid.ColDefUtil.FUNCTION_PROPERTIES, PropTypes.func);\n\nfunction addProperties(listOfProps: string[], propType: any) {\n    listOfProps.forEach((propKey: string) => {\n        // @ts-ignore\n        AgGridColumn[propKey] = propType;\n    });\n}\n","export enum ChangeDetectionStrategyType {\n    IdentityCheck = 'IdentityCheck',\n    DeepValueCheck = 'DeepValueCheck',\n    NoCheck = 'NoCheck'\n}\n\nexport interface ChangeDetectionStrategy {\n    areEqual(a: any, b: any): boolean;\n}\n\nclass SimpleFunctionalStrategy implements ChangeDetectionStrategy {\n    private strategy: (a: any, b: any) => boolean;\n\n    constructor(strategy: (a: any, b: any) => boolean) {\n        this.strategy = strategy;\n    }\n\n    areEqual(a: any, b: any): boolean {\n        return this.strategy(a, b);\n    }\n}\n\nclass DeepValueStrategy implements ChangeDetectionStrategy {\n    areEqual(a: any, b: any): boolean {\n        return DeepValueStrategy.areEquivalent(DeepValueStrategy.copy(a), DeepValueStrategy.copy(b));\n    }\n\n    /*\n     * deeper object comparison - taken from https://stackoverflow.com/questions/1068834/object-comparison-in-javascript\n     */\n    static unwrapStringOrNumber(obj: any) {\n        return obj instanceof Number || obj instanceof String ? obj.valueOf() : obj;\n    }\n\n    // sigh, here for ie compatibility\n    static copy(value: any): any {\n        if (!value) {\n            return value;\n        }\n\n        if (Array.isArray(value)) {\n            // shallow copy the array - this will typically be either rowData or columnDefs\n            const arrayCopy = [];\n            for (let i = 0; i < value.length; i++) {\n                arrayCopy.push(this.copy(value[i]));\n            }\n            return arrayCopy;\n        }\n\n        // for anything without keys (boolean, string etc).\n        // Object.keys - chrome will swallow them\n        if (typeof value !== \"object\") {\n            return value;\n        }\n\n        return [{}, value].reduce((r, o) => {\n            Object.keys(o).forEach(function (k) {\n                r[k] = o[k];\n            });\n            return r;\n        }, {});\n    }\n\n    static isNaN(value: any) {\n        if(Number.isNaN) {\n            return Number.isNaN(value);\n        }\n        // for ie11...\n        return typeof(value) === 'number' && isNaN(value);\n    }\n    /*\n     * slightly modified, but taken from https://stackoverflow.com/questions/1068834/object-comparison-in-javascript\n     *\n     * What we're trying to do here is determine if the property being checked has changed in _value_, not just in reference\n     *\n     * For eg, if a user updates the columnDefs via property binding, but the actual columns defs are the same before and\n     * after, then we don't want the grid to re-render\n     */\n    static areEquivalent(a: any, b: any) {\n        a = DeepValueStrategy.unwrapStringOrNumber(a);\n        b = DeepValueStrategy.unwrapStringOrNumber(b);\n        if (a === b) return true; //e.g. a and b both null\n        if (a === null || b === null || typeof a !== typeof b) return false;\n        if(DeepValueStrategy.isNaN(a) && DeepValueStrategy.isNaN(b)) {\n            return true;\n        }\n        if (a instanceof Date) {\n            return b instanceof Date && a.valueOf() === b.valueOf();\n        }\n        if (typeof a === \"function\") {\n            // false to allow for callbacks to be reactive...\n            return false;\n        }\n        if (typeof a !== \"object\" ||\n            (a.$$typeof && a.$$typeof.toString() === \"Symbol(react.element)\")) {\n            return a == b; //for boolean, number, string, function, xml\n        }\n        if(Object.isFrozen(a) || Object.isFrozen(b)) {\n            return a === b;\n        }\n\n        const newA = a.areEquivPropertyTracking === undefined,\n            newB = b.areEquivPropertyTracking === undefined;\n        try {\n            let prop;\n            if (newA) {\n                a.areEquivPropertyTracking = [];\n            } else if (\n                a.areEquivPropertyTracking.some(function (other: any) {\n                    return other === b;\n                })\n            )\n                return true;\n            if (newB) {\n                b.areEquivPropertyTracking = [];\n            } else if (b.areEquivPropertyTracking.some((other: any) => other === a)) {\n                return true;\n            }\n            a.areEquivPropertyTracking.push(b);\n            b.areEquivPropertyTracking.push(a);\n\n            const tmp = {};\n            for (prop in a)\n                if (prop != \"areEquivPropertyTracking\") {\n                    (tmp as any)[prop] = null;\n                }\n            for (prop in b)\n                if (prop != \"areEquivPropertyTracking\") {\n                    (tmp as any)[prop] = null;\n                }\n\n            for (prop in tmp) {\n                if (!this.areEquivalent(a[prop], b[prop])) {\n                    return false;\n                }\n            }\n            return true;\n        } finally {\n            if (newA) delete a.areEquivPropertyTracking;\n            if (newB) delete b.areEquivPropertyTracking;\n        }\n    }\n}\n\nexport class ChangeDetectionService {\n    private strategyMap: { [key in ChangeDetectionStrategyType]: ChangeDetectionStrategy } = {\n        [ChangeDetectionStrategyType.DeepValueCheck]: new DeepValueStrategy(),\n        [ChangeDetectionStrategyType.IdentityCheck]: new SimpleFunctionalStrategy((a, b) => a === b),\n        [ChangeDetectionStrategyType.NoCheck]: new SimpleFunctionalStrategy((a, b) => false)\n    };\n\n    public getStrategy(changeDetectionStrategy: ChangeDetectionStrategyType): ChangeDetectionStrategy {\n        return this.strategyMap[changeDetectionStrategy];\n    }\n}","let counter = 0;\nexport default function generateNewKey() {\n    return `agPortalKey_${++counter}`;\n}\n","import { ReactPortal, createElement } from 'react';\nimport { createPortal } from 'react-dom';\nimport { ComponentType, AgPromise } from '@ag-grid-community/core';\nimport { ReactComponent } from './reactComponent';\nimport { renderToStaticMarkup } from \"react-dom/server\";\nimport generateNewKey from \"./keyGenerator\";\nimport { PortalManager } from './portalManager';\n\n\nexport class NewReactComponent extends ReactComponent {\n    \n    private key: string;\n    private portalKey: string;\n    private oldPortal: ReactPortal | null = null;\n    private reactElement: any;\n    private params: any;\n\n    constructor(reactComponent: any, parentComponent: PortalManager, componentType: ComponentType) {\n        super(reactComponent, parentComponent, componentType);\n\n        this.key = generateNewKey();\n        this.portalKey = generateNewKey();\n    }\n\n    public init(params: any): AgPromise<void> {\n        this.eParentElement = this.createParentElement(params);\n        this.params = params;\n\n        this.createOrUpdatePortal(params);\n\n        return new AgPromise<void>(resolve => this.createReactComponent(resolve));\n    }\n\n    private createOrUpdatePortal(params: any) {\n        if (!this.isStatelessComponent()) {\n            // grab hold of the actual instance created\n            params.ref = (element: any) => {\n                this.componentInstance = element;\n                this.addParentContainerStyleAndClasses();\n            };\n        }\n\n        this.reactElement = createElement(this.reactComponent, { ...params, key: this.key });\n\n        this.portal = createPortal(\n            this.reactElement,\n            this.eParentElement as any,\n            this.portalKey // fixed deltaRowModeRefreshCompRenderer\n        );\n    }\n\n    private createReactComponent(resolve: (value: any) => void) {\n        this.portalManager.mountReactPortal(this.portal!, this, (value: any) => {\n            resolve(value);\n        });\n    }\n\n    public isNullValue(): boolean {\n        return this.valueRenderedIsNull(this.params);\n    }\n\n    rendered(): boolean {\n        return (this.isStatelessComponent() && this.statelessComponentRendered()) ||\n            !!(!this.isStatelessComponent() && this.getFrameworkComponentInstance());\n    }\n\n    private valueRenderedIsNull(params: any): boolean {\n        // we only do this for cellRenderers\n        if (!this.componentType.cellRenderer) {\n            return false;\n        }\n\n        // we've no way of knowing if a component returns null without rendering it first\n        // so we render it to markup and check the output - if it'll be null we know and won't timeout\n        // waiting for a component that will never be created\n\n        const originalConsoleError = console.error;\n        try {\n            // if a user is doing anything that uses useLayoutEffect (like material ui) then it will throw and we\n            // can't do anything to stop it; this is just a warning and has no effect on anything so just suppress it\n            // for this single operation\n            console.error = () => {\n            };\n            const staticMarkup = renderToStaticMarkup(createElement(this.reactComponent, params));\n            return staticMarkup === '';\n        } catch (ignore) {\n        } finally {\n            console.error = originalConsoleError;\n        }\n\n        return false;\n    }\n\n    /*\n    * fallback methods - these will be invoked if a corresponding instance method is not present\n    * for example if refresh is called and is not available on the component instance, then refreshComponent on this\n    * class will be invoked instead\n    *\n    * Currently only refresh is supported\n    */\n    protected refreshComponent(args: any): void {\n        this.oldPortal = this.portal;\n        this.createOrUpdatePortal(args);\n        this.portalManager.updateReactPortal(this.oldPortal!, this.portal!);\n    }\n\n    protected fallbackMethod(name: string, params: any): any {\n        const method = (this as any)[`${name}Component`];\n        if (!!method) {\n            return method.bind(this)(params);\n        }\n    }\n\n    protected fallbackMethodAvailable(name: string): boolean {\n        const method = (this as any)[`${name}Component`];\n        return !!method;\n    }\n}\n","import { Component, ReactPortal } from \"react\";\nimport { ReactComponent } from \"./reactComponent\";\n\nexport class PortalManager {\n\n    private static MAX_COMPONENT_CREATION_TIME_IN_MS: number = 1000; // a second should be more than enough to instantiate a component\n\n    private parent: Component;\n    private wrappingElement: string;\n    private destroyed = false;\n\n    private portals: ReactPortal[] = [];\n    private hasPendingPortalUpdate = false;\n\n    private maxComponentCreationTimeMs: number;\n\n    constructor(parent: Component, wrappingElement?: string, maxComponentCreationTimeMs?: number) {\n        this.wrappingElement = wrappingElement ? wrappingElement : 'div';\n        this.parent = parent;\n        this.maxComponentCreationTimeMs = maxComponentCreationTimeMs ? maxComponentCreationTimeMs : PortalManager.MAX_COMPONENT_CREATION_TIME_IN_MS;\n    }\n\n    public getPortals(): ReactPortal[] {\n        return this.portals;\n    }\n\n    public destroy(): void {\n        this.destroyed = true;\n    }\n\n    public destroyPortal(portal: ReactPortal): void {\n        this.portals = this.portals.filter(curPortal => curPortal !== portal);\n        this.batchUpdate();\n    }\n\n    public getComponentWrappingElement(): string | undefined {\n        return this.wrappingElement;\n    }\n\n    public mountReactPortal(portal: ReactPortal, reactComponent: ReactComponent, resolve: (value: any) => void): void {\n        this.portals = [...this.portals, portal];\n        this.waitForInstance(reactComponent, resolve);\n        this.batchUpdate();\n    }\n\n    public updateReactPortal(oldPortal: ReactPortal, newPortal: ReactPortal): void {\n        this.portals[this.portals.indexOf(oldPortal)] = newPortal;\n        this.batchUpdate();\n    }\n\n    private batchUpdate(): void {\n        if (this.hasPendingPortalUpdate) {\n            return;\n        }\n\n        setTimeout(() => {\n            if (!this.destroyed) { // destroyed?\n                this.parent.forceUpdate(() => {\n                    this.hasPendingPortalUpdate = false;\n                });\n            }\n        });\n\n        this.hasPendingPortalUpdate = true;\n    }\n\n    waitForInstance(reactComponent: ReactComponent, resolve: (value: any) => void, startTime = Date.now()): void {\n        // if the grid has been destroyed in the meantime just resolve\n        if (this.destroyed) {\n            resolve(null);\n            return;\n        }\n\n        if (reactComponent.rendered()) {\n            resolve(reactComponent);\n        } else {\n            if (Date.now() - startTime >= this.maxComponentCreationTimeMs! && !this.hasPendingPortalUpdate) {\n                // last check - we check if this is a null value being rendered - we do this last as using SSR to check the value\n                // can mess up contexts\n                if (reactComponent.isNullValue()) {\n                    resolve(reactComponent);\n                    return;\n                }\n\n                console.error(`AG Grid: React Component '${reactComponent.getReactComponentName()}' not created within ${this.maxComponentCreationTimeMs}ms`);\n                return;\n            }\n\n            window.setTimeout(() => {\n                this.waitForInstance(reactComponent, resolve, startTime);\n            });\n        }\n    }\n}","import { ReactPortal } from 'react';\nimport { ComponentType, IComponent, WrappableInterface } from '@ag-grid-community/core';\nimport { PortalManager } from './portalManager';\n\nabstract class BaseReactComponent implements IComponent<any>, WrappableInterface {\n    abstract getGui(): HTMLElement;\n\n    abstract getFrameworkComponentInstance(): any;\n\n    abstract rendered(): boolean;\n\n    abstract getReactComponentName(): string;\n\n    abstract hasMethod(name: string): boolean;\n\n    abstract callMethod(name: string, args: IArguments): void;\n\n    abstract addMethod(name: string, callback: Function): void;\n\n}\n\nexport abstract class ReactComponent extends BaseReactComponent {\n\n    protected eParentElement!: HTMLElement;\n    protected componentInstance: any;\n    protected reactComponent: any;\n    protected portalManager: PortalManager;\n    protected portal: ReactPortal | null = null;\n    protected statelessComponent: boolean;\n    protected componentType: ComponentType;\n\n    constructor(reactComponent: any, portalManager: PortalManager, componentType: ComponentType) {\n        super();\n\n        this.reactComponent = reactComponent;\n        this.portalManager = portalManager;\n        this.componentType = componentType;\n\n        this.statelessComponent = this.isStateless(this.reactComponent);\n    }\n\n    public getGui(): HTMLElement {\n        return this.eParentElement;\n    }\n\n    public destroy(): void {\n        if(this.componentInstance && typeof this.componentInstance.destroy == 'function') {\n            this.componentInstance.destroy();\n        }\n        return this.portalManager.destroyPortal(this.portal as ReactPortal);\n    }\n\n    protected createParentElement(params: any) {\n        const componentWrappingElement = this.portalManager.getComponentWrappingElement();\n        const eParentElement = document.createElement(componentWrappingElement || 'div');\n\n        (eParentElement as HTMLElement).classList.add('ag-react-container');\n\n        // DEPRECATED - use componentInstance.getReactContainerStyle or componentInstance.getReactContainerClasses instead\n        // so user can have access to the react container, to add css class or style\n        params.reactContainer = eParentElement;\n\n        return eParentElement;\n    }\n\n    protected addParentContainerStyleAndClasses() {\n        if (!this.componentInstance) {\n            return;\n        }\n\n        if (this.componentInstance.getReactContainerStyle && this.componentInstance.getReactContainerStyle()) {\n            Object.assign(this.eParentElement.style, this.componentInstance.getReactContainerStyle());\n        }\n\n        if (this.componentInstance.getReactContainerClasses && this.componentInstance.getReactContainerClasses()) {\n            const parentContainerClasses: string[] = this.componentInstance.getReactContainerClasses();\n            parentContainerClasses.forEach(className => this.eParentElement.classList.add(className));\n        }\n    }\n\n    public statelessComponentRendered(): boolean {\n        // fixed fragmentsFuncRendererCreateDestroy funcRendererWithNan (changeDetectionService too for NaN)\n        return this.eParentElement.childElementCount > 0 || this.eParentElement.childNodes.length > 0;\n    }\n\n    public getFrameworkComponentInstance(): any {\n        return this.componentInstance;\n    }\n\n    public isStatelessComponent(): boolean {\n        return this.statelessComponent;\n    }\n\n    public getReactComponentName(): string {\n        return this.reactComponent.name;\n    }\n\n    public getMemoType() {\n        return this.hasSymbol() ? Symbol.for('react.memo') : 0xead3;\n    }\n\n    private hasSymbol() {\n        return typeof Symbol === 'function' && Symbol.for;\n    }\n\n    protected isStateless(Component: any) {\n        return (typeof Component === 'function' && !(Component.prototype && Component.prototype.isReactComponent))\n            || (typeof Component === 'object' && Component.$$typeof === this.getMemoType());\n    }\n\n    hasMethod(name: string): boolean {\n        const frameworkComponentInstance = this.getFrameworkComponentInstance();\n        return (!!frameworkComponentInstance && frameworkComponentInstance[name] !== null) ||\n            this.fallbackMethodAvailable(name);\n    }\n\n    callMethod(name: string, args: IArguments): void {\n        const frameworkComponentInstance = this.getFrameworkComponentInstance();\n\n        if(this.isStatelessComponent()) {\n            return this.fallbackMethod(name, !!args && args[0] ? args[0] : {});\n        } else if(!(!!frameworkComponentInstance)) {\n            // instance not ready yet - wait for it\n            setTimeout(() => this.callMethod(name, args));\n            return;\n        }\n\n        const method = frameworkComponentInstance[name];\n\n        if (!!method) {\n            return method.apply(frameworkComponentInstance, args);\n        }\n\n        if (this.fallbackMethodAvailable(name)) {\n            return this.fallbackMethod(name, !!args && args[0] ? args[0] : {});\n        }\n    }\n\n    addMethod(name: string, callback: Function): void {\n        (this as any)[name] = callback;\n    }\n\n    protected abstract fallbackMethod(name: string, params: any): any;\n\n    protected abstract fallbackMethodAvailable(name: string): boolean;\n\n    public abstract isNullValue(): boolean;\n}\n","import { VanillaFrameworkOverrides } from \"@ag-grid-community/core\";\nimport GroupCellRenderer from \"../reactUi/cellRenderer/groupCellRenderer\";\nimport DetailCellRenderer from \"../reactUi/cellRenderer/detailCellRenderer\";\n\nexport class ReactFrameworkOverrides extends VanillaFrameworkOverrides {\n\n    private readonly reactUi: boolean;\n\n    constructor(reactUi: boolean) {\n        super();\n        this.reactUi = reactUi;\n    }\n\n    private frameworkComponents: any = {\n        agGroupCellRenderer: GroupCellRenderer,\n        agGroupRowRenderer: GroupCellRenderer,\n        agDetailCellRenderer: DetailCellRenderer\n    };\n\n    public frameworkComponent(name: string): any {\n        if (!this.reactUi) { return; }\n        return this.frameworkComponents[name];\n    }\n\n    isFrameworkComponent(comp: any): boolean {\n        if (!comp) { return false; }\n        const prototype = comp.prototype;\n        const isJsComp = prototype && 'getGui' in prototype;\n        return !isJsComp;\n    }\n}","exports.AgGridReact = require('./lib/agGridReact').AgGridReact;\nexports.AgGridColumn = require('./lib/shared/agGridColumn').AgGridColumn;\nexports.ChangeDetectionStrategyType = require('./lib/shared/changeDetectionService').ChangeDetectionStrategyType;\nexports.AgGridReactUi = require('./lib/reactUi/agGridReactUi').AgGridReactUi;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/** @license React v17.0.2\n * react-dom-server.browser.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var l=require(\"object-assign\"),m=require(\"react\");function p(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}\nvar q=60106,r=60107,u=60108,z=60114,B=60109,aa=60110,ba=60112,D=60113,ca=60120,da=60115,ea=60116,fa=60121,ha=60117,ia=60119,ja=60129,ka=60131;\nif(\"function\"===typeof Symbol&&Symbol.for){var E=Symbol.for;q=E(\"react.portal\");r=E(\"react.fragment\");u=E(\"react.strict_mode\");z=E(\"react.profiler\");B=E(\"react.provider\");aa=E(\"react.context\");ba=E(\"react.forward_ref\");D=E(\"react.suspense\");ca=E(\"react.suspense_list\");da=E(\"react.memo\");ea=E(\"react.lazy\");fa=E(\"react.block\");ha=E(\"react.fundamental\");ia=E(\"react.scope\");ja=E(\"react.debug_trace_mode\");ka=E(\"react.legacy_hidden\")}\nfunction F(a){if(null==a)return null;if(\"function\"===typeof a)return a.displayName||a.name||null;if(\"string\"===typeof a)return a;switch(a){case r:return\"Fragment\";case q:return\"Portal\";case z:return\"Profiler\";case u:return\"StrictMode\";case D:return\"Suspense\";case ca:return\"SuspenseList\"}if(\"object\"===typeof a)switch(a.$$typeof){case aa:return(a.displayName||\"Context\")+\".Consumer\";case B:return(a._context.displayName||\"Context\")+\".Provider\";case ba:var b=a.render;b=b.displayName||b.name||\"\";return a.displayName||\n(\"\"!==b?\"ForwardRef(\"+b+\")\":\"ForwardRef\");case da:return F(a.type);case fa:return F(a._render);case ea:b=a._payload;a=a._init;try{return F(a(b))}catch(c){}}return null}var la=m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,ma={};function I(a,b){for(var c=a._threadCount|0;c<=b;c++)a[c]=a._currentValue2,a._threadCount=c+1}function na(a,b,c,d){if(d&&(d=a.contextType,\"object\"===typeof d&&null!==d))return I(d,c),d[c];if(a=a.contextTypes){c={};for(var f in a)c[f]=b[f];b=c}else b=ma;return b}\nfor(var J=new Uint16Array(16),K=0;15>K;K++)J[K]=K+1;J[15]=0;var oa=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,pa=Object.prototype.hasOwnProperty,qa={},ra={};\nfunction sa(a){if(pa.call(ra,a))return!0;if(pa.call(qa,a))return!1;if(oa.test(a))return ra[a]=!0;qa[a]=!0;return!1}function ta(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case \"function\":case \"symbol\":return!0;case \"boolean\":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return\"data-\"!==a&&\"aria-\"!==a;default:return!1}}\nfunction ua(a,b,c,d){if(null===b||\"undefined\"===typeof b||ta(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function M(a,b,c,d,f,h,t){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=f;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=h;this.removeEmptyString=t}var N={};\n\"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style\".split(\" \").forEach(function(a){N[a]=new M(a,0,!1,a,null,!1,!1)});[[\"acceptCharset\",\"accept-charset\"],[\"className\",\"class\"],[\"htmlFor\",\"for\"],[\"httpEquiv\",\"http-equiv\"]].forEach(function(a){var b=a[0];N[b]=new M(b,1,!1,a[1],null,!1,!1)});[\"contentEditable\",\"draggable\",\"spellCheck\",\"value\"].forEach(function(a){N[a]=new M(a,2,!1,a.toLowerCase(),null,!1,!1)});\n[\"autoReverse\",\"externalResourcesRequired\",\"focusable\",\"preserveAlpha\"].forEach(function(a){N[a]=new M(a,2,!1,a,null,!1,!1)});\"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope\".split(\" \").forEach(function(a){N[a]=new M(a,3,!1,a.toLowerCase(),null,!1,!1)});\n[\"checked\",\"multiple\",\"muted\",\"selected\"].forEach(function(a){N[a]=new M(a,3,!0,a,null,!1,!1)});[\"capture\",\"download\"].forEach(function(a){N[a]=new M(a,4,!1,a,null,!1,!1)});[\"cols\",\"rows\",\"size\",\"span\"].forEach(function(a){N[a]=new M(a,6,!1,a,null,!1,!1)});[\"rowSpan\",\"start\"].forEach(function(a){N[a]=new M(a,5,!1,a.toLowerCase(),null,!1,!1)});var va=/[\\-:]([a-z])/g;function wa(a){return a[1].toUpperCase()}\n\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height\".split(\" \").forEach(function(a){var b=a.replace(va,\nwa);N[b]=new M(b,1,!1,a,null,!1,!1)});\"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type\".split(\" \").forEach(function(a){var b=a.replace(va,wa);N[b]=new M(b,1,!1,a,\"http://www.w3.org/1999/xlink\",!1,!1)});[\"xml:base\",\"xml:lang\",\"xml:space\"].forEach(function(a){var b=a.replace(va,wa);N[b]=new M(b,1,!1,a,\"http://www.w3.org/XML/1998/namespace\",!1,!1)});[\"tabIndex\",\"crossOrigin\"].forEach(function(a){N[a]=new M(a,1,!1,a.toLowerCase(),null,!1,!1)});\nN.xlinkHref=new M(\"xlinkHref\",1,!1,\"xlink:href\",\"http://www.w3.org/1999/xlink\",!0,!1);[\"src\",\"href\",\"action\",\"formAction\"].forEach(function(a){N[a]=new M(a,1,!1,a.toLowerCase(),null,!0,!0)});var xa=/[\"'&<>]/;\nfunction O(a){if(\"boolean\"===typeof a||\"number\"===typeof a)return\"\"+a;a=\"\"+a;var b=xa.exec(a);if(b){var c=\"\",d,f=0;for(d=b.index;d<a.length;d++){switch(a.charCodeAt(d)){case 34:b=\"&quot;\";break;case 38:b=\"&amp;\";break;case 39:b=\"&#x27;\";break;case 60:b=\"&lt;\";break;case 62:b=\"&gt;\";break;default:continue}f!==d&&(c+=a.substring(f,d));f=d+1;c+=b}a=f!==d?c+a.substring(f,d):c}return a}\nfunction ya(a,b){var c=N.hasOwnProperty(a)?N[a]:null;var d;if(d=\"style\"!==a)d=null!==c?0===c.type:!(2<a.length)||\"o\"!==a[0]&&\"O\"!==a[0]||\"n\"!==a[1]&&\"N\"!==a[1]?!1:!0;if(d||ua(a,b,c,!1))return\"\";if(null!==c){a=c.attributeName;d=c.type;if(3===d||4===d&&!0===b)return a+'=\"\"';c.sanitizeURL&&(b=\"\"+b);return a+'=\"'+(O(b)+'\"')}return sa(a)?a+'=\"'+(O(b)+'\"'):\"\"}function za(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}\nvar Aa=\"function\"===typeof Object.is?Object.is:za,P=null,Q=null,R=null,S=!1,T=!1,U=null,V=0;function W(){if(null===P)throw Error(p(321));return P}function Ba(){if(0<V)throw Error(p(312));return{memoizedState:null,queue:null,next:null}}function Ca(){null===R?null===Q?(S=!1,Q=R=Ba()):(S=!0,R=Q):null===R.next?(S=!1,R=R.next=Ba()):(S=!0,R=R.next);return R}function Da(a,b,c,d){for(;T;)T=!1,V+=1,R=null,c=a(b,d);Ea();return c}function Ea(){P=null;T=!1;Q=null;V=0;R=U=null}\nfunction Fa(a,b){return\"function\"===typeof b?b(a):b}function Ga(a,b,c){P=W();R=Ca();if(S){var d=R.queue;b=d.dispatch;if(null!==U&&(c=U.get(d),void 0!==c)){U.delete(d);d=R.memoizedState;do d=a(d,c.action),c=c.next;while(null!==c);R.memoizedState=d;return[d,b]}return[R.memoizedState,b]}a=a===Fa?\"function\"===typeof b?b():b:void 0!==c?c(b):b;R.memoizedState=a;a=R.queue={last:null,dispatch:null};a=a.dispatch=Ha.bind(null,P,a);return[R.memoizedState,a]}\nfunction Ia(a,b){P=W();R=Ca();b=void 0===b?null:b;if(null!==R){var c=R.memoizedState;if(null!==c&&null!==b){var d=c[1];a:if(null===d)d=!1;else{for(var f=0;f<d.length&&f<b.length;f++)if(!Aa(b[f],d[f])){d=!1;break a}d=!0}if(d)return c[0]}}a=a();R.memoizedState=[a,b];return a}function Ha(a,b,c){if(!(25>V))throw Error(p(301));if(a===P)if(T=!0,a={action:c,next:null},null===U&&(U=new Map),c=U.get(b),void 0===c)U.set(b,a);else{for(b=c;null!==b.next;)b=b.next;b.next=a}}function Ja(){}\nvar X=null,Ka={readContext:function(a){var b=X.threadID;I(a,b);return a[b]},useContext:function(a){W();var b=X.threadID;I(a,b);return a[b]},useMemo:Ia,useReducer:Ga,useRef:function(a){P=W();R=Ca();var b=R.memoizedState;return null===b?(a={current:a},R.memoizedState=a):b},useState:function(a){return Ga(Fa,a)},useLayoutEffect:function(){},useCallback:function(a,b){return Ia(function(){return a},b)},useImperativeHandle:Ja,useEffect:Ja,useDebugValue:Ja,useDeferredValue:function(a){W();return a},useTransition:function(){W();\nreturn[function(a){a()},!1]},useOpaqueIdentifier:function(){return(X.identifierPrefix||\"\")+\"R:\"+(X.uniqueID++).toString(36)},useMutableSource:function(a,b){W();return b(a._source)}},La={html:\"http://www.w3.org/1999/xhtml\",mathml:\"http://www.w3.org/1998/Math/MathML\",svg:\"http://www.w3.org/2000/svg\"};function Ma(a){switch(a){case \"svg\":return\"http://www.w3.org/2000/svg\";case \"math\":return\"http://www.w3.org/1998/Math/MathML\";default:return\"http://www.w3.org/1999/xhtml\"}}\nvar Na={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},Oa=l({menuitem:!0},Na),Y={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,\ngridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Pa=[\"Webkit\",\"ms\",\"Moz\",\"O\"];Object.keys(Y).forEach(function(a){Pa.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);Y[b]=Y[a]})});\nvar Qa=/([A-Z])/g,Ra=/^ms-/,Z=m.Children.toArray,Sa=la.ReactCurrentDispatcher,Ta={listing:!0,pre:!0,textarea:!0},Ua=/^[a-zA-Z][a-zA-Z:_\\.\\-\\d]*$/,Va={},Wa={};function Xa(a){if(void 0===a||null===a)return a;var b=\"\";m.Children.forEach(a,function(a){null!=a&&(b+=a)});return b}var Ya=Object.prototype.hasOwnProperty,Za={children:null,dangerouslySetInnerHTML:null,suppressContentEditableWarning:null,suppressHydrationWarning:null};function $a(a,b){if(void 0===a)throw Error(p(152,F(b)||\"Component\"));}\nfunction ab(a,b,c){function d(d,h){var e=h.prototype&&h.prototype.isReactComponent,f=na(h,b,c,e),t=[],g=!1,n={isMounted:function(){return!1},enqueueForceUpdate:function(){if(null===t)return null},enqueueReplaceState:function(a,c){g=!0;t=[c]},enqueueSetState:function(a,c){if(null===t)return null;t.push(c)}};if(e){if(e=new h(d.props,f,n),\"function\"===typeof h.getDerivedStateFromProps){var k=h.getDerivedStateFromProps.call(null,d.props,e.state);null!=k&&(e.state=l({},e.state,k))}}else if(P={},e=h(d.props,\nf,n),e=Da(h,d.props,e,f),null==e||null==e.render){a=e;$a(a,h);return}e.props=d.props;e.context=f;e.updater=n;n=e.state;void 0===n&&(e.state=n=null);if(\"function\"===typeof e.UNSAFE_componentWillMount||\"function\"===typeof e.componentWillMount)if(\"function\"===typeof e.componentWillMount&&\"function\"!==typeof h.getDerivedStateFromProps&&e.componentWillMount(),\"function\"===typeof e.UNSAFE_componentWillMount&&\"function\"!==typeof h.getDerivedStateFromProps&&e.UNSAFE_componentWillMount(),t.length){n=t;var v=\ng;t=null;g=!1;if(v&&1===n.length)e.state=n[0];else{k=v?n[0]:e.state;var H=!0;for(v=v?1:0;v<n.length;v++){var x=n[v];x=\"function\"===typeof x?x.call(e,k,d.props,f):x;null!=x&&(H?(H=!1,k=l({},k,x)):l(k,x))}e.state=k}}else t=null;a=e.render();$a(a,h);if(\"function\"===typeof e.getChildContext&&(d=h.childContextTypes,\"object\"===typeof d)){var y=e.getChildContext();for(var A in y)if(!(A in d))throw Error(p(108,F(h)||\"Unknown\",A));}y&&(b=l({},b,y))}for(;m.isValidElement(a);){var f=a,h=f.type;if(\"function\"!==\ntypeof h)break;d(f,h)}return{child:a,context:b}}\nvar bb=function(){function a(a,b,f){m.isValidElement(a)?a.type!==r?a=[a]:(a=a.props.children,a=m.isValidElement(a)?[a]:Z(a)):a=Z(a);a={type:null,domNamespace:La.html,children:a,childIndex:0,context:ma,footer:\"\"};var c=J[0];if(0===c){var d=J;c=d.length;var g=2*c;if(!(65536>=g))throw Error(p(304));var e=new Uint16Array(g);e.set(d);J=e;J[0]=c+1;for(d=c;d<g-1;d++)J[d]=d+1;J[g-1]=0}else J[0]=J[c];this.threadID=c;this.stack=[a];this.exhausted=!1;this.currentSelectValue=null;this.previousWasTextNode=!1;\nthis.makeStaticMarkup=b;this.suspenseDepth=0;this.contextIndex=-1;this.contextStack=[];this.contextValueStack=[];this.uniqueID=0;this.identifierPrefix=f&&f.identifierPrefix||\"\"}var b=a.prototype;b.destroy=function(){if(!this.exhausted){this.exhausted=!0;this.clearProviders();var a=this.threadID;J[a]=J[0];J[0]=a}};b.pushProvider=function(a){var b=++this.contextIndex,c=a.type._context,h=this.threadID;I(c,h);var t=c[h];this.contextStack[b]=c;this.contextValueStack[b]=t;c[h]=a.props.value};b.popProvider=\nfunction(){var a=this.contextIndex,b=this.contextStack[a],f=this.contextValueStack[a];this.contextStack[a]=null;this.contextValueStack[a]=null;this.contextIndex--;b[this.threadID]=f};b.clearProviders=function(){for(var a=this.contextIndex;0<=a;a--)this.contextStack[a][this.threadID]=this.contextValueStack[a]};b.read=function(a){if(this.exhausted)return null;var b=X;X=this;var c=Sa.current;Sa.current=Ka;try{for(var h=[\"\"],t=!1;h[0].length<a;){if(0===this.stack.length){this.exhausted=!0;var g=this.threadID;\nJ[g]=J[0];J[0]=g;break}var e=this.stack[this.stack.length-1];if(t||e.childIndex>=e.children.length){var L=e.footer;\"\"!==L&&(this.previousWasTextNode=!1);this.stack.pop();if(\"select\"===e.type)this.currentSelectValue=null;else if(null!=e.type&&null!=e.type.type&&e.type.type.$$typeof===B)this.popProvider(e.type);else if(e.type===D){this.suspenseDepth--;var G=h.pop();if(t){t=!1;var C=e.fallbackFrame;if(!C)throw Error(p(303));this.stack.push(C);h[this.suspenseDepth]+=\"\\x3c!--$!--\\x3e\";continue}else h[this.suspenseDepth]+=\nG}h[this.suspenseDepth]+=L}else{var n=e.children[e.childIndex++],k=\"\";try{k+=this.render(n,e.context,e.domNamespace)}catch(v){if(null!=v&&\"function\"===typeof v.then)throw Error(p(294));throw v;}finally{}h.length<=this.suspenseDepth&&h.push(\"\");h[this.suspenseDepth]+=k}}return h[0]}finally{Sa.current=c,X=b,Ea()}};b.render=function(a,b,f){if(\"string\"===typeof a||\"number\"===typeof a){f=\"\"+a;if(\"\"===f)return\"\";if(this.makeStaticMarkup)return O(f);if(this.previousWasTextNode)return\"\\x3c!-- --\\x3e\"+O(f);\nthis.previousWasTextNode=!0;return O(f)}b=ab(a,b,this.threadID);a=b.child;b=b.context;if(null===a||!1===a)return\"\";if(!m.isValidElement(a)){if(null!=a&&null!=a.$$typeof){f=a.$$typeof;if(f===q)throw Error(p(257));throw Error(p(258,f.toString()));}a=Z(a);this.stack.push({type:null,domNamespace:f,children:a,childIndex:0,context:b,footer:\"\"});return\"\"}var c=a.type;if(\"string\"===typeof c)return this.renderDOM(a,b,f);switch(c){case ka:case ja:case u:case z:case ca:case r:return a=Z(a.props.children),this.stack.push({type:null,\ndomNamespace:f,children:a,childIndex:0,context:b,footer:\"\"}),\"\";case D:throw Error(p(294));case ia:throw Error(p(343));}if(\"object\"===typeof c&&null!==c)switch(c.$$typeof){case ba:P={};var d=c.render(a.props,a.ref);d=Da(c.render,a.props,d,a.ref);d=Z(d);this.stack.push({type:null,domNamespace:f,children:d,childIndex:0,context:b,footer:\"\"});return\"\";case da:return a=[m.createElement(c.type,l({ref:a.ref},a.props))],this.stack.push({type:null,domNamespace:f,children:a,childIndex:0,context:b,footer:\"\"}),\n\"\";case B:return c=Z(a.props.children),f={type:a,domNamespace:f,children:c,childIndex:0,context:b,footer:\"\"},this.pushProvider(a),this.stack.push(f),\"\";case aa:c=a.type;d=a.props;var g=this.threadID;I(c,g);c=Z(d.children(c[g]));this.stack.push({type:a,domNamespace:f,children:c,childIndex:0,context:b,footer:\"\"});return\"\";case ha:throw Error(p(338));case ea:return c=a.type,d=c._init,c=d(c._payload),a=[m.createElement(c,l({ref:a.ref},a.props))],this.stack.push({type:null,domNamespace:f,children:a,childIndex:0,\ncontext:b,footer:\"\"}),\"\"}throw Error(p(130,null==c?c:typeof c,\"\"));};b.renderDOM=function(a,b,f){var c=a.type.toLowerCase();f===La.html&&Ma(c);if(!Va.hasOwnProperty(c)){if(!Ua.test(c))throw Error(p(65,c));Va[c]=!0}var d=a.props;if(\"input\"===c)d=l({type:void 0},d,{defaultChecked:void 0,defaultValue:void 0,value:null!=d.value?d.value:d.defaultValue,checked:null!=d.checked?d.checked:d.defaultChecked});else if(\"textarea\"===c){var g=d.value;if(null==g){g=d.defaultValue;var e=d.children;if(null!=e){if(null!=\ng)throw Error(p(92));if(Array.isArray(e)){if(!(1>=e.length))throw Error(p(93));e=e[0]}g=\"\"+e}null==g&&(g=\"\")}d=l({},d,{value:void 0,children:\"\"+g})}else if(\"select\"===c)this.currentSelectValue=null!=d.value?d.value:d.defaultValue,d=l({},d,{value:void 0});else if(\"option\"===c){e=this.currentSelectValue;var L=Xa(d.children);if(null!=e){var G=null!=d.value?d.value+\"\":L;g=!1;if(Array.isArray(e))for(var C=0;C<e.length;C++){if(\"\"+e[C]===G){g=!0;break}}else g=\"\"+e===G;d=l({selected:void 0,children:void 0},\nd,{selected:g,children:L})}}if(g=d){if(Oa[c]&&(null!=g.children||null!=g.dangerouslySetInnerHTML))throw Error(p(137,c));if(null!=g.dangerouslySetInnerHTML){if(null!=g.children)throw Error(p(60));if(!(\"object\"===typeof g.dangerouslySetInnerHTML&&\"__html\"in g.dangerouslySetInnerHTML))throw Error(p(61));}if(null!=g.style&&\"object\"!==typeof g.style)throw Error(p(62));}g=d;e=this.makeStaticMarkup;L=1===this.stack.length;G=\"<\"+a.type;b:if(-1===c.indexOf(\"-\"))C=\"string\"===typeof g.is;else switch(c){case \"annotation-xml\":case \"color-profile\":case \"font-face\":case \"font-face-src\":case \"font-face-uri\":case \"font-face-format\":case \"font-face-name\":case \"missing-glyph\":C=\n!1;break b;default:C=!0}for(w in g)if(Ya.call(g,w)){var n=g[w];if(null!=n){if(\"style\"===w){var k=void 0,v=\"\",H=\"\";for(k in n)if(n.hasOwnProperty(k)){var x=0===k.indexOf(\"--\"),y=n[k];if(null!=y){if(x)var A=k;else if(A=k,Wa.hasOwnProperty(A))A=Wa[A];else{var cb=A.replace(Qa,\"-$1\").toLowerCase().replace(Ra,\"-ms-\");A=Wa[A]=cb}v+=H+A+\":\";H=k;x=null==y||\"boolean\"===typeof y||\"\"===y?\"\":x||\"number\"!==typeof y||0===y||Y.hasOwnProperty(H)&&Y[H]?(\"\"+y).trim():y+\"px\";v+=x;H=\";\"}}n=v||null}k=null;C?Za.hasOwnProperty(w)||\n(k=w,k=sa(k)&&null!=n?k+'=\"'+(O(n)+'\"'):\"\"):k=ya(w,n);k&&(G+=\" \"+k)}}e||L&&(G+=' data-reactroot=\"\"');var w=G;g=\"\";Na.hasOwnProperty(c)?w+=\"/>\":(w+=\">\",g=\"</\"+a.type+\">\");a:{e=d.dangerouslySetInnerHTML;if(null!=e){if(null!=e.__html){e=e.__html;break a}}else if(e=d.children,\"string\"===typeof e||\"number\"===typeof e){e=O(e);break a}e=null}null!=e?(d=[],Ta.hasOwnProperty(c)&&\"\\n\"===e.charAt(0)&&(w+=\"\\n\"),w+=e):d=Z(d.children);a=a.type;f=null==f||\"http://www.w3.org/1999/xhtml\"===f?Ma(a):\"http://www.w3.org/2000/svg\"===\nf&&\"foreignObject\"===a?\"http://www.w3.org/1999/xhtml\":f;this.stack.push({domNamespace:f,type:c,children:d,childIndex:0,context:b,footer:g});this.previousWasTextNode=!1;return w};return a}();exports.renderToNodeStream=function(){throw Error(p(207));};exports.renderToStaticMarkup=function(a,b){a=new bb(a,!0,b);try{return a.read(Infinity)}finally{a.destroy()}};exports.renderToStaticNodeStream=function(){throw Error(p(208));};exports.renderToString=function(a,b){a=new bb(a,!1,b);try{return a.read(Infinity)}finally{a.destroy()}};\nexports.version=\"17.0.2\";\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-dom-server.browser.production.min.js');\n} else {\n  module.exports = require('./cjs/react-dom-server.browser.development.js');\n}\n"],"names":["RecursionType","rootNode","gridOptionsWrapper","eventService","columnModel","gridApi","columnApi","selectionService","beans","group","level","id","ClientSideNodeManager","ROOT_NODE_ID","allLeafChildren","childrenAfterGroup","childrenAfterSort","childrenAfterAggFilter","childrenAfterFilter","postConstruct","suppressParentsInRowNodes","isSuppressParentsInRowNodes","isRowMasterFunc","getIsRowMasterFunc","doingTreeData","isTreeData","doingMasterDetail","isMasterDetail","_","allNodesMap","rowData","sibling","childrenMapped","updateHasChildren","nextId","map","createNode","dataItem","_this","TOP_LEVEL","console","warn","rowDataTran","rowNodeOrder","rowNodeTransaction","remove","update","add","nodesToUnselect","executeRemove","executeUpdate","executeAdd","updateSelection","selectionChanged","length","forEach","rowNode","setSelected","updateGroupsFromChildrenSelections","event_1","type","Events","api","dispatchEvent","addIndex","nodesBeforeIndex","nodesAfterIndex","newNodes","item","normalizedAddIndex","allLeafChildren_1","reduce","prevIdx","currNode","currIdx","prevValueAtIndex","rowIndex","slice","rowIdsRemoved","lookupRowNode","isSelected","push","clearRowTopAndRowIndex","filter","updateData","selectable","setMasterForRow","data","getRowIdFunc","error","find","parent","node","RowNode","setDataAndId","toString","setExpanded","setMaster","expanded","rowGroupColumns","getRowGroupColumns","masterRowLevel","master","isExpanded","expandByDefault","getGroupDefaultExpanded","__extends","ClientSideRowModel","refreshEverythingFunc","refreshModel","bind","step","ClientSideRowModelSteps","animate","isSuppressAnimationFrame","refreshEverythingAfterColsChangedFunc","afterColumnsChanged","keepRenderedRows","addManagedListener","onValueChanged","onFilterChanged","onSortChanged","refreshMapListener","GridOptionsWrapper","nodeManager","getRowData","setRowData","startPixel","endPixel","startLimitIndex","endLimitIndex","atLeastOneChange","res","rowAtStartPixel","getRowIndexAtPixel","rowAtEndPixel","firstRow","Math","max","lastRow","min","getRow","rowHeightEstimated","rowHeight","getRowHeightForNode","setRowHeight","height","setRowTopAndRowIndex","defaultRowHeight","getDefaultRowHeight","nextRowTop","displayedRowsMapped","Set","allowEstimate","getDomLayout","Constants","i","rowsToDisplay","estimated","setRowTop","setRowIndex","changedPath","changedPathActive","isActive","clearIfNotDisplayed","has","recurse","detailNode","hasChildren","isRootNode","rowNodes","pixel","increment","indexAtPixelNow","rowNodeAtPixelNow","idx","keepEditingRows","highlight","getHighlightPosition","lastHighlightedRow","setHighlighted","index","RowHighlightPosition","filteredChildren","topLevelIndex","isGroupHideOpenParents","rowTop","isAnimateRows","event","afterDataChange","columns","some","isPrimary","isPivotActive","rowNodeTransactions","noTransactions","ChangedPath","setInactive","params","isSuppressModelUpdateAfterUpdateTransaction","transWithAddsOrDeletes","tx","createChangePath","doRowGrouping","groupState","doFilter","doPivot","doAggregate","doFilterAggregates","doSort","doRowsToDisplay","displayedNodesMapped","newData","newPage","rowsMissing","isReady","firstInRange","lastInRange","firstRowHit","lastRowHit","result","groupsSelectChildren","isGroupSelectsChildren","forEachNodeAfterFilterAndSort","lookingForLastRow","inRange","childOfLastRow","isParentOfNode","datasource","indexOf","pixelToMatch","isEmpty","bottomPointer","topPointer","midPointer","floor","currentRowNode","isRowInPixel","topPixel","bottomPixel","callback","recursivelyWalkNodesAndCallback","Normal","AfterFilter","AfterFilterAndSort","PivotNodes","nodes","recursionType","nodeChildren","leafGroup","aggregationStage","execute","filterAggregatesStage","expand","usingTreeData","usingPivotMode","recursiveExpandOrCollapse","actionRow","eventSource","source","sortStage","groupStage","restoreGroupState","key","filterStage","pivotStage","isRememberGroupStateWhenNewData","getCopyOfNodesMap","res_1","undefined","forEachNode","getRowNode","getGroupState","reset","filterManager","onNewRowsLoaded","rowDataChangedEvent","rowDataTransaction","applyAsyncTransactionsTimeout","rowDataTransactionBatch","waitMillis","getAsyncTransactionWaitMillis","window","setTimeout","executeBatchUpdateRowData","clearTimeout","valueCache","onDataChanged","callbackFuncsBound","rowNodeTrans","forceRowNodeOrder","rowNodeTran","updateRowData","tranItem","commonUpdateRowData","getApi","getColumnApi","results","isSuppressMaintainUnsortedOrder","orderMap","createRowNodeOrder","flattenStage","atLeastOne","onRowHeightChanged","__decorate","Autowired","Optional","PostConstruct","Bean","BeanStub","FilterStage","filterService","SortStage","sortOptions","sortController","getSortOptions","sortActive","deltaSort","isDeltaSort","sortContainsGroupColumns","opt","column","getColDef","showRowGroup","sortService","sort","FlattenStage","value","skipLeafNodes","isPivotMode","showRootNode","topList","recursivelyAddToRowsToDisplay","isGroupIncludeTotalFooter","ensureFooterNodeExists","addRowNodeToRowsToDisplay","rowsToFlatten","uiLevel","hideOpenParents","groupRemoveSingleChildren","isGroupRemoveSingleChildren","groupRemoveLowestSingleChildren","isGroupRemoveLowestSingleChildren","isParent","isSkippedLeafNode","isRemovedSingleChildrenGroup","isRemovedLowestSingleChildrenGroup","neverAllowToExpand","isHiddenOpenParent","excludedParent","uiLevelForChildren","isGroupIncludeFooter","createDetailNode","isGroupMultiAutoColumn","setUiLevel","groupNode","footerNode","Object","keys","footer","oldRowTop","masterNode","detail","SortService","postSortFunc","getPostSortFunc","useDeltaSort","groupMaintainOrder","isGroupMaintainOrder","groupColumnsPresent","getAllGridColumns","isRowGroupActive","allDirtyNodes","calculateDirtyNodes","forEachChangedNodeDepthFirst","pullDownGroupDataForHideOpenParents","skipSortingPivotLeafs","skipSortingGroups","childrenToBeSorted","indexedOrders_1","acc","row","row1","row2","doDeltaSort","rowNodeSorter","doFullSort","updateChildIndexes","updateGroupDataForHideOpenParents","dirtyNodes","addNodesFunc","tran","allTouchedNodes","unsortedRows","oldSortedRows","untouchedRowsMap","touchedRows","canSkip","sortedUntouchedRows","child","mapNodeToSortedNode","pos","currentPos","sortedChangedRows","a","b","compareRowNodes","mergeSortedArrays","_a","arr1","arr2","j","listToSort","firstChild","lastChild","setFirstChild","setLastChild","setChildIndex","executeFromRootNode","clearOperation","getGroupDisplayColumns","groupDisplayCol","displayingGroupKey","rowGroupColumn","getPrimaryColumn","childRowNode","setGroupValue","getId","parentToStealFrom","getFirstChildOfFirstChild","FilterService","filterActive","isColumnFilterPresent","isQuickFilterPresent","isExternalFilterPresent","filterNodes","filterCallback","includeChildNodes","passBecauseChildren","childNode","passBecauseDataPasses","doesRowPassFilter","doingTreeDataFiltering","treeDataDepthFirstFilter_1","alreadyFoundInParent","foundInParent","isExcludeChildrenWhenTreeDataFiltering","ImmutableService","rowModel","getType","clientSideRowModel","isImmutableData","transactionAndMap","createTransactionForRowData","transaction","orderIdMap","nodeTransaction","rowRenderer","refreshFullWidthRows","existingNodesMap","existingNode","ClientSideRowModelModule","moduleName","ModuleNames","rowModels","clientSide","makeNull","exists","allowEmptyString","missing","missingOrEmpty","toStringOrNull","attrToNumber","isNaN","valueParsed","parseInt","attrToBoolean","test","attrToString","referenceCompare","left","right","jsonEquals","val1","val2","JSON","stringify","defaultComparator","valueA","valueB","accentedCompare","valueAMissing","valueBMissing","toNumber","doQuickCompare","localeCompare","e","values","object","Map","arr_1","existingKeys","ColumnKeyCreator","this","colId","colField","count","idToTry","iterateObject","Array","isArray","cloneObject","copy","deepCloneObject","parse","deepCloneDefinition","keysToSkip","obj","sourceIsSimpleObject","isNonNullObject","constructor","getProperty","setProperty","copyPropertiesIfPresent","target","_i","properties","p","copyPropertyIfPresent","property","transform","getAllKeysInObjects","objects","allValues","getAllValuesInObject","anyObject","ret","hasOwnProperty","propertyIsEnumerable","mergeDeep","dest","copyUndefined","makeCopyOfSimpleObjects","sourceValue","destValue","missingOrEmptyObject","get","expression","defaultValue","split","objectToRead","shift","set","objectToUpdate","deepFreeze","freeze","v","getValueUsingField","field","fieldContainsDots","fields","currentObject","removeAllReferences","objectName","proto","getPrototypeOf","writable","defineProperties","FUNCTION_STRIP_COMMENTS","FUNCTION_ARGUMENT_NAMES","doOnceFlags","doOnce","func","getFunctionName","funcConstructor","name","matches","exec","trim","getFunctionParameters","fnStr","replace","match","isFunction","val","call","apply","executeInAWhile","funcs","executeAfter","executeNextVMTurnFuncs","executeNextVMTurnPending","executeNextVMTurn","funcsCopy","milliseconds","debounce","wait","immediate","timeout","args","context","callNow","throttle","previousCall","currentCall","Date","getTime","waitUntil","condition","timeoutMessage","timeStamp","interval","executed","internalCallback","reachedTimeout","clearInterval","setInterval","compose","fns","arg","composed","f","callIfPresent","logger","beanWrappers","destroyed","beanClasses","contextParams","log","createBeans","beanInstances","getBeanInstances","wireBeans","Context","beanEntry","beanInstance","bean","afterPreCreateCallback","Error","autoWireBeans","methodWireBeans","callLifeCycleMethods","createBeanWrapper","constructorParamsMeta","__agBeanMetaData","autowireMethods","agConstructor","constructorParams","getBeansForParameters","newInstance","argArray","concat","applyToConstructor","createdBeanNames","join","BeanClass","metaData","beanName","prototype","forEachMetaDataInHierarchy","attributes","agClassAttributes","attribute","otherBean","lookupBeanInstance","optional","attributeName","methodName","wireParams","initParams","getBeanName","constructorString","substring","parameters","beansList","paramIndex","otherBeanName","Number","wiringBean","providedBeanInstances","lifeCycleMethod","callLifeCycleMethodsOnBean","methodToIgnore","allMethods","methods","destroyBeans","beanAny","destroy","PreConstruct","descriptor","props","getOrCreateProps","preConstructMethods","postConstructMethods","PreDestroy","preDestroyMethods","classConstructor","propertyKey","autowiredFunc","classPrototype","methodOrAttributeName","Qualifier","allSyncListeners","allAsyncListeners","globalSyncListeners","globalAsyncListeners","asyncFunctionsQueue","scheduled","firedEvents","EventService","loggerFactory","frameworkOverrides","globalEventListener","async","useAsyncEvents","addGlobalListener","eventType","autoCreateListenerCollection","listenerMap","listeners","size","listener","getListeners","delete","dispatchToListeners","dispatchAsync","processEventListeners","flushAsyncQueue","queueCopy","__param","ModuleRegistry","module","moduleBased","modulesMap","modules","register","reason","isRegistered","warningMessage","warningKey","instanceIdSequence","colDef","userProvidedColDef","primary","instanceId","moving","menuVisible","rowGroupActive","pivotActive","aggregationActive","setState","Column","SORT_ASC","SORT_DESC","initialSort","sortIndex","initialSortIndex","hide","initialHide","visible","pinned","setPinned","initialPinned","flex","initialFlex","initMinAndMaxWidths","initDotNotation","originalParent","resetActualWidth","validate","suppressDotNotation","isSuppressFieldDotNotation","tooltipFieldContainsDots","tooltipField","minWidth","columnUtils","calculateColMinWidth","maxWidth","calculateColMaxWidth","initialWidth","calculateColInitialWidth","setActualWidth","showingAllGroups","showingThisGroup","filterFramework","colDefAny","warnOnce","msg","isRowModelDefault","RowGroupingModule","isPackageBased","RichSelectModule","cellEditor","width","pinnedRowCellRenderer","pinnedRowCellRendererParams","pinnedRowCellRendererFramework","pinnedRowValueGetter","addEventListener","removeEventListener","getContext","suppressNavigable","createColumnFunctionCallbackParams","userFunc","isEnableGroupEdit","isColumnFunc","editable","suppressFillHandle","autoHeight","rowDrag","dndSource","checkboxSelection","suppressPaste","resizable","createColumnEvent","EVENT_MOVING_CHANGED","EVENT_SORT_CHANGED","EVENT_MENU_VISIBLE_CHANGED","sortOrder","aggFunc","oldLeft","actualWidth","EVENT_LEFT_CHANGED","active","additionalEventAttributes","EVENT_FILTER_ACTIVE_CHANGED","filterChangedEvent","EVENT_FILTER_CHANGED","PINNED_LEFT","PINNED_RIGHT","firstRightPinned","EVENT_FIRST_RIGHT_PINNED_CHANGED","lastLeftPinned","EVENT_LAST_LEFT_PINNED_CHANGED","newValue","EVENT_VISIBLE_CHANGED","columnGroupShow","getColId","colSpan","createBaseColDefParams","rowSpan","silent","fireColumnWidthChangedEvent","EVENT_WIDTH_CHANGED","rowGroup","EVENT_ROW_GROUP_CHANGED","pivot","EVENT_PIVOT_CHANGED","isValueActive","isAllowPivot","isAllowRowGroup","isAllowValue","EVENT_VALUE_CHANGED","enablePivot","enableValue","enableRowGroup","defaultValues","menuTabs","lockPosition","lockVisible","lockPinned","firstExistingValue","existsAndNotEmpty","last","arr","areEqual","comparator","every","compareArrays","array1","array2","shallowCompare","sortNumerically","array","removeRepeatsFromArray","thisOneMatches","nextOneMatches","splice","removeFromArray","removeAllFromArray","toRemove","insertIntoArray","toIndex","insertArrayIntoArray","src","moveInArray","objectsToMove","reverse","includes","flatten","arrayOfArrays","pushAll","toStrings","forEachReverse","list","action","providedColumnGroup","groupId","displayedChildren","localEventService","ColumnGroup","children","createUniqueId","allLeafColumns","getProvidedColumnGroup","getLeafColumns","col","isMoving","checkLeft","isEnableRtl","lastChildLeft","getLeft","setLeft","firstChildLeft","createAgEvent","wantedChild","foundChild","isChildInThisGroupDeepSearch","groupActualWidth","getActualWidth","isResizable","groupChild","getMinWidth","addLeafColumns","addDisplayedLeafColumns","getColGroupDef","isPadding","isExpandable","leafColumns","getColumnGroupShow","getParent","getPaddingLevel","parentWithExpansion","EVENT_DISPLAYED_CHILDREN_CHANGED","HEADER_GROUP_SHOW_OPEN","HEADER_GROUP_SHOW_CLOSED","colGroupDef","padding","expandable","openByDefault","ProvidedColumnGroup","isVisible","EVENT_EXPANDED_CHANGED","getGroupId","setExpandable","onColumnVisibilityChanged","atLeastOneShowingWhenOpen","atLeastOneShowingWhenClosed","atLeastOneChangeable","findChildrenRemovingPadding","abstractColumn","headerGroupShow","EVENT_EXPANDABLE_CHANGED","process","items","DefaultColumnTypes","numericColumn","headerClass","cellClass","rightAligned","AG_GRID_STOP_PROPAGATION","PASSIVE_EVENTS","supports","stopPropagationForAgGrid","isStopPropagationForAgGrid","isEventSupported","tags","select","change","submit","load","abort","eventName","el","document","createElement","getCtrlForEvent","sourceElement","renderedComp","getDomData","parentElement","addChangeListener","element","isElementInEventPath","getEventPath","createEventPath","pointer","addAgGridEventPath","__agGridEventPath","eventNoType","path","composedPath","addSafePassiveEventListener","eElement","options","passive","destroyFunctions","__v_skip","isAlive","EVENT_DESTROYED","HTMLElement","getFrameworkOverrides","destroyFunc","fn","createBean","addDestroyFunc","destroyBean","ColumnFactory","create","defs","primaryColumns","existingTree","columnKeyCreator","existingCols","existingGroups","existingColKeys","addExistingKeys","unbalancedTree","recursivelyCreateColumns","treeDept","findMaxDept","columnTree","balanceColumnTree","depthFirstOriginalTreeSearch","setupExpandable","setOriginalParent","autoGroupCols","gridBalancedTree","createAutoGroupTreeItem","balancedColumnTree","nextChild","findDepth","autoGroup","setChildren","dept","getChildren","currentDept","columnDept","originalGroup","newChildren","firstPaddedGroup","currentPaddedGroup","newColId","getUniqueKey","colGroupDefMerged","createMergedColGroupDef","paddedGroup","leaf","treeChildren","maxDeptThisLevel","newDept","existingColsCopy","def","isColumnGroup","createColumnGroup","createColumn","existingColumns","providedGroup","existingGroup","findExistingGroup","assign","getDefaultColGroupDef","checkForDeprecatedItems","colDefMerged","mergeColDefs","findExistingColumn","setColDef","applyColumnState","setFlex","getFlex","widthBeforeUpdate","setSort","setSortIndex","setVisible","newColDef","existingCol","existingColDef","getUserProvidedColDef","newHasId","newHasField","newGroupDef","defaultColDef","getDefaultColDef","columnType","assignColumnTypes","typeKeys","allColumnTypes","getColumnTypes","t","typeColDef","colDefNoType","headerGroup","suppressRowGroup","suppressAggregation","displayName","headerName","abstractColDef","existingIds","GroupInstanceIdCreator","lastResult","reUnescapedHtml","HTML_ESCAPES","utf8_encode","s","stringFromCharCode","String","fromCharCode","createByte","point","encodeCodePoint","toUpperCase","padStart","symbol","checkScalarValue","codePoints","string","output","extra","len","counter","charCodeAt","ucs2decode","byteString","camelCaseToHyphen","str","g","toLowerCase","hyphenToCamelCase","capitalise","substr","escapeString","toEscape","chr","camelCaseToHumanText","camelCase","word","convertToMap","pair","mapById","ColumnModel","suppressColumnVirtualisation","isSuppressColumnVirtualisation","pivotMode","isPivotSettingAllowed","onAutoGroupColumnDefChanged","onDefaultColDefChanged","autoGroupsNeedBuilding","forceRecreateAutoGroups","updateGridColumns","updateDisplayedColumns","colDefVersion","createColumnsFromColumnDefs","columnDefs","colsPreviouslyExisted","raiseEventsFunc","compareColumnStatesAndRaiseEvents","expire","oldPrimaryColumns","oldPrimaryTree","primaryColumnTree","balancedTreeResult","columnFactory","createColumnTree","primaryHeaderRowCount","getColumnsFromTree","primaryColumnsMap","extractRowGroupColumns","extractPivotColumns","extractValueColumns","ready","gridColsNotProcessed","gridColsArePrimary","isMaintainColumnOrder","orderGridColumnsLikePrimary","checkViewportColumns","dispatchEverythingChanged","dispatchNewColumnsLoaded","newColumnsLoadedEvent","EVENT_NEW_COLUMNS_LOADED","eventEverythingChanged","EVENT_COLUMN_EVERYTHING_CHANGED","gridColumns","colA","colB","primaryIndexA","primaryIndexB","indexAPresent","indexBPresent","displayedAutoHeightCols","viewportLeft","bodyWidth","scrollPosition","scrollWidth","viewportRight","currentColumn","getDisplayedColAfter","displayedColumnsCenter","hashBefore","viewportColumns","extractViewport","EVENT_VIRTUAL_COLUMNS_CHANGED","bodyWidthDirty","setViewport","EVENT_COLUMN_PIVOT_MODE_CHANGED","pivotKeys","valueColKey","secondaryColumns","valueColumnToFind","foundColumn","thisPivotKeys","pivotValueColumn","lastLeft","firstRight","displayedColumnsLeft","displayedColumnsRight","setLastLeftPinned","setFirstRightPinned","skipHeader","skipHeaderGroups","stopAtGroup","animationFrameService","flushAllFrames","columnsAutosized","changesThisTimeAround","shouldSkipHeader","isSkipHeaderOnAutoSize","shouldSkipHeaderGroups","actionOnGridColumns","preferredWidth","autoWidthCalculator","getPreferredWidthForColumn","newWidth","normaliseColumnWidth","autoSizeColumnGroupsByColumns","fireColumnResizedEvent","finished","flexColumns","event_2","EVENT_COLUMN_RESIZED","autoSizeColumns","headerGroupCtrl","columnGroups","getGridColumns","columnGroup","ctrlsService","getHeaderRowContainerCtrls","getHeaderCtrlForColumn","resizeLeafColumnsToFit","allDisplayedColumns","getAllDisplayedColumns","rootColumns","recursiveFindColumns","childColumns","displayedTreeLeft","displayedTreeRight","displayedTreeCentre","gridHeaderRowCount","displayedColumns","colSpanActive","getDisplayedColumnsForRow","emptySpaceBeforeColumn","lastConsideredCol","filterPasses","maxAllowedColSpan","getColSpan","columnsToCheckFilter","colsToRemove","colForFilter","viewportColumnsCenter","isColumnInViewport","isAutoHeight","columnLeft","columnRight","leftBounds","rightBounds","getWidthOfColsInList","masterList","actionIsAdd","columnCallback","columnToAdd","colKeys","setPrimaryColumnList","EVENT_COLUMN_ROW_GROUP_CHANGED","setRowGroupActive","isSuppressMakeColumnVisibleAfterUnGroup","addRowGroupColumns","updatePrimaryColumnList","removeRowGroupColumns","pivotColumns","setPivotActive","EVENT_COLUMN_PIVOT_CHANGED","added","addPivotColumns","removePivotColumns","fireColumnEvent","valueColumns","EVENT_COLUMN_VALUE_CHANGED","setValueActive","getAggFunc","initialAggFunc","aggFuncService","getDefaultAggFunc","setAggFunc","colKey","addValueColumns","removeValueColumns","getMaxWidth","isGreaterThanMax","getGridColumn","columnWidths","shiftKey","sets","columnWidth","getPrimaryOrGridColumn","ratios","getColResizeDefault","otherCol","widthDiff","otherColWidth","resizeColumnSets","resizeSets","columnResizeSet","minWidthAccumulated","maxWidthAccumulated","maxWidthActive","checkMinAndMaxWidthsForSet","changedCols","allResizedCols","newWidths","finishedCols","finishedColsGrew","loopCount","subsetCols","subsetRatioTotal","pixelsToDistribute","ratioThisCol","ratioScale","colNewWidth","round","atLeastOneColChanged","flexedCols","refreshFlexedColumns","resizingCols","skipSetLeft","setLeftValues","updateBodyWidths","colsForEvent","fromIndex","columnsToMoveKeys","columnAnimationService","start","columnsToMove","doesMovePassRules","EVENT_COLUMN_MOVED","finish","proposedColumnOrder","doesMovePassMarryChildren","doesMovePassLockedPositions","cols","c","lastPlacement","rulePassed","position","placement","allColumnsCopy","marryChildren","newIndexes","newColIndex","moveColumns","moveColumn","lastPrimaryOrder","columnDefFactory","buildColumnDefs","leftWidth","rightWidth","newBodyWidth","newLeftWidth","newRightWidth","event_3","EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED","getDisplayedLeftColumns","getDisplayedRightColumns","getDisplayedCenterColumns","columnsForQuickFilter","setColumnsVisible","EVENT_COLUMN_VISIBLE","setColumnsPinned","actualPinned","getPinned","EVENT_COLUMN_PINNED","createEvent","updatedColumns","event_4","oldIndex","getDisplayedGroupAtDirection","direction","requiredLevel","getLevel","colGroupLeafColumns","getDisplayedLeafColumns","getDisplayColMethod","groupPointer","getColumnGroupAtLevel","groupAutoColumns","rowGroupIndex","pivotIndex","getSort","getSortIndex","getPrimaryAndSecondaryAndAutoColumns","createStateItemFromColumn","orderColumnStateList","columnStateList","colIdToGridIndexMap","itemA","itemB","columnStates","letRowGroupIndex","letPivotIndex","colsToProcess","getValueOrNull","initialRowGroupIndex","initialRowGroup","initialPivotIndex","initialPivot","stateItem","state","applyOrder","applyStates","states","getById","columnsWithNoState","rowGroupIndexes","pivotIndexes","autoGroupColumnStates","unmatchedAndAutoStates","unmatchedCount","previousRowGroupCols","previousPivotCols","startsWith","GROUP_AUTO_COLUMN_ID","syncColumnWithStateItem","defaultState","applyDefaultsFunc","indexes","oldList","indexA","indexB","aHasIndex","bHasIndex","oldIndexA","oldIndexB","aHasOldIndex","autoGroupColsCopy","autoCol","getAutoColumn","applyOrderAfterApplyState","getSecondaryColumn","newOrder","processedColIds","gridColumnsMap","autoGroupInsertIndex","placeLockedColumns","startState","columnStateBefore","getColumnState","columnStateBeforeMap","isSuppressColumnStateEvents","colsForState","raiseWhenListsDifferent","colsBefore","colsAfter","idMapper","getChangedColumns","changedPredicate","changedColumns","colStateBefore","columnIdMapper","cs","oldActive","activeChanged","aggFuncChanged","raiseColumnPinnedEvent","raiseColumnVisibleEvent","dispatchSortChangedEvents","raiseColumnMovedEvent","getCommonValue","valueGetter","firstValue","colStateAfter","colStateAfterMapped","colsIntersectIds","beforeFiltered","afterFiltered","movedColumns","csAfter","csBefore","gridCol","getValue","key1","key2","value1","value2","calculated","minColWidth","getColumns","columnLookupCallback","foundColumns","getColumn","secondaryColumnsMap","columnList","columnMap","columnsMatch","groupCol","columnMatches","colDefMatches","idMatches","location","includeAggFunc","getHeaderName","wrapHeaderNameWithAggFunc","getDisplayNameForProvidedColumnGroup","headerValueGetter","expressionService","evaluate","isSuppressAggFuncInHeader","aggFuncFound","isCollapsedHeaderEnabled","isRemovePivotHeaderRowWhenSingleValueColumn","isTotalColumn","pivotTotalColumnIds","measureActive","aggregationPresent","isRowGroupEmpty","aggFuncString","getLocaleTextFunc","localeTextFunc","allColumnGroups","getAllDisplayedTrees","checkInstanceId","depthFirstAllColumnTreeSearch","getInstanceId","extractColumns","flag","previousCols","setFlagFunc","getIndexFunc","getInitialIndexFunc","getValueFunc","getInitialValueFunc","colsWithIndex","colsWithValue","colIsNew","initialValue","initialIndex","getIndexForCol","defaultIndex","stateItems","open","setColumnGroupState","columnGroupState","impactedGroups","groupKey","updateGroupsAndDisplayedColumns","setFirstRightAndLastLeftPinned","EVENT_COLUMN_GROUP_OPENED","keyAsString","isAutoGroupCol","isValueCol","groupDisplayColumns","checkFunc","columnsForDisplay","calculateColumnsForDisplay","buildDisplayedTrees","calculateColumnsForGroupDisplay","colDefs","newColsPresent","processSecondaryColumnDefinitions","secondaryBalancedTree","previousSecondaryColumns","secondaryHeaderRowCount","getProcessSecondaryColDefFunc","groupCallback","getProcessSecondaryColGroupDefFunc","searchForColDefs","colDefs2","lastSecondaryOrder","hasSameColumns","orderGridColsLike","addAutoGroupToGridColumns","setupQuickFilterColumns","clearDisplayedAndViewportColumns","checkColSpanActiveInCols","setAutoHeightActive","EVENT_GRID_COLUMNS_CHANGED","autoHeightActive","autoHeightActiveAtLeastOnce","rowModelType","ROW_MODEL_TYPE_CLIENT_SIDE","ROW_MODEL_TYPE_SERVER_SIDE","colsOrder","lastOrderMapped","noColsFound","gridColsMap","oldColsOrdered","oldColsMap","newColsOrdered","newGridColumns","newCol","getOriginalParent","siblings","leafCol","presentInNewGriColumns","noYetInSiblings","lastIndex","normal","createGroupAutoColumnsIfNeeded","autoColBalancedTree","createForAutoGroups","viewportRowLeft","viewportRowRight","viewportRowCenter","updateOpenClosedVisibilityInColumnGroups","deriveDisplayedColumns","EVENT_DISPLAYED_COLUMNS_CHANGED","derivedDisplayedColumnsFromDisplayedTree","joinDisplayedColumns","setLeftValuesOfColumns","setLeftValuesOfGroups","allColumns","doingRtl","left_1","left_2","tree","depthFirstDisplayedColumnTreeSearch","filterOutColumnsWithinViewport","virtualColIds","testGroup","returnValue","addThisItem","getDisplayedChildren","extractViewportColumns","extractViewportRows","viewportWidth","flexViewportWidth","flexAfterDisplayIndex","indexOfCol","isColFlex","afterResizingCols","knownWidthColumns","flexingColumns","spaceForFlexingColumns","flexingColumnSizes","outer","totalFlex","widthByFlexRule","constrainedWidth","remainingSpace","fireResizedEvent","flexColsCalculatedAtLestOnce","resetRowHeights","gridWidth","colsToSpread","colsToNotSpread","suppressSizeToFit","colsToFireEventFor","finishedResizing","moveToNotSpread","availablePixels","setMinimum","scale","pixelsForLastCol","visibleColumns","leftVisibleColumns","rightVisibleColumns","centerVisibleColumns","groupInstanceIdCreator","displayedGroupCreator","createDisplayedGroups","updateDisplayedMap","displayedColumnsAndGroupsMap","getUniqueId","calculateDisplayedColumns","groupFullWidthRow","isGroupUseEntireRow","suppressAutoColumn","isPivotSuppressAutoColumn","isGroupSuppressAutoColumn","newAutoGroupCols","autoGroupColService","createAutoGroupColumns","autoColsEqual","colsA","colsB","floatingFilter","isRtl","queryOrder","container","ColumnUtils","getMinColWidth","getMaxColWidth","MAX_SAFE_INTEGER","maxColWidth","colDefWidth","colDefInitialWidth","getColWidth","originalBalancedTree","found","recursePath","DisplayedGroupCreator","sortedVisibleColumns","oldDisplayedGroups","previousRealPath","previousOriginalPath","oldColumnsMapped","mapOldGroupsById","currentOriginalPath","getOriginalPathForColumn","currentRealPath","firstColumn","newGroup","addChild","setupParentsIntoColumns","getInstanceIdForKey","displayedGroups","recursive","columnsOrGroups","columnOrGroup","columnsOrGroup","setParent","PropertyKeys","ARRAY_PROPERTIES","OBJECT_PROPERTIES","STRING_PROPERTIES","NUMBER_PROPERTIES","FUNCTION_PROPERTIES","BOOLEAN_PROPERTIES","ComponentUtil","EVENT_CALLBACKS","EVENTS","getCallbackForEvent","gridOptions","component","skipEventDeprecationCheck","pGridOptions","keyExists","groupAggFiltering","toBoolean","__spread","getEventCallbacks","changes","changesToApply","rowClass","setRowClass","currentValue","enableCellTextSelection","setEnableCellTextSelection","quickFilterText","setQuickFilter","autoGroupColumnDef","setAutoGroupColumnDef","setColumnDefs","setDefaultColDef","paginationPageSize","paginationSetPageSize","setPivotMode","setGroupRemoveSingleChildren","suppressRowDrag","setSuppressRowDrag","suppressMoveWhenRowDragging","setSuppressMoveWhenRowDragging","suppressRowClickSelection","setSuppressRowClickSelection","suppressClipboardPaste","setSuppressClipboardPaste","headerHeight","setHeaderHeight","dynamicApi","setterName","charAt","EVENT_COMPONENT_STATE_CHANGED","ALL_PROPERTIES","EXCLUDED_INTERNAL_EVENTS","EVENT_SCROLLBAR_WIDTH_CHANGED","EVENT_CHECKBOX_CHANGED","EVENT_HEIGHT_SCALE_CHANGED","EVENT_BODY_HEIGHT_CHANGED","EVENT_SCROLL_VISIBILITY_CHANGED","EVENT_COLUMN_HOVER_CHANGED","EVENT_FLASH_CELLS","EVENT_PAGINATION_PIXEL_OFFSET_CHANGED","EVENT_DISPLAYED_ROWS_CHANGED","EVENT_LEFT_PINNED_WIDTH_CHANGED","EVENT_RIGHT_PINNED_WIDTH_CHANGED","EVENT_ROW_CONTAINER_HEIGHT_CHANGED","EVENT_POPUP_TO_FRONT","EVENT_KEYBOARD_FOCUS","EVENT_MOUSE_FOCUS","EVENT_STORE_UPDATED","EVENT_COLUMN_PANEL_ITEM_DRAG_START","EVENT_COLUMN_PANEL_ITEM_DRAG_END","EVENT_FILL_START","EVENT_FILL_END","EVENT_FULL_WIDTH_ROW_FOCUSED","PUBLIC_EVENTS","AgStackComponentsRegistry","components","componentMeta","addComponent","classUpperCase","componentName","componentsMappedByName","componentClass","htmlTag","ColDefUtil","r","Color","fromHexString","hex","nameToHex","fromRgbaString","input","parts","parseHex","po","pc","contents","rgba","part","parseFloat","stringToRgba","h","alpha","rgb","HSBtoRGB","padHex","fractionDigits","k","pow","toHexString","toRgbaString","RGBtoHSB","H","NaN","delta","rc","gc","bc","S","B","q","hueShift","saturationFactor","brightnessFactor","opacityFactor","hsb","fromArray","derive","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","stringToArray","strData","delimiter","isNewline","char","insideQuotedField","previousChar","currentChar","nextChar","ensureDataExists","isSafari","isIE","isEdge","isChrome","isFirefox","isIOS","invisibleScrollbar","browserScrollbarWidth","rtlNegativeScroll","isBrowserEdge","documentMode","StyleMedia","isBrowserSafari","navigator","userAgent","isBrowserChrome","win","chrome","webstore","runtime","vendor","isBrowserFirefox","InstallTrigger","isIOSUserAgent","platform","maxTouchPoints","MSStream","getTabIndex","numberTabIndex","tabIndex","getAttribute","getMaxDivHeight","body","testUpTo","div","appendChild","style","clientHeight","removeChild","getScrollbarWidth","initScrollbarWidthAndVisibility","opacity","overflow","msOverflowStyle","offsetWidth","clientWidth","parentNode","isInvisibleScrollbar","hasOverflowScrolling","prefixes","getElementsByTagName","setAttribute","prefix","computedStyle","getComputedStyle","overflowScrolling","getBodyWidth","innerHeight","innerWidth","documentElement","getBodyHeight","radioCssClass","elementClass","otherElementClass","classList","toggle","nextSibling","isFocusableFormField","Element","msMatchesSelector","isFocusable","INPUT_SELECTOR","isNotFocusable","FOCUSABLE_EXCLUDE","isElementVisible","setDisplayed","displayed","setDisabled","disabled","addOrRemoveDisabledAttribute","removeAttribute","nodeListForEach","querySelectorAll","isElementChildOfClass","cls","maxNest","contains","getElementSize","paddingTop","paddingRight","paddingBottom","paddingLeft","marginTop","marginRight","marginBottom","marginLeft","boxSizing","getInnerHeight","getInnerWidth","getAbsoluteHeight","ceil","offsetHeight","getAbsoluteWidth","marginWidth","isRtlNegativeScroll","template","top","dir","innerHTML","scrollLeft","getScrollLeft","rtl","abs","setScrollLeft","clearElement","removeElement","cssSelector","removeFromParent","querySelector","offsetParent","loadTemplate","DOMParser","parseFromString","tempDiv","appendHtml","eContainer","htmlTemplate","insertAdjacentHTML","getElementAttribute","ensureDomOrder","eChild","eChildBefore","insertBefore","insertAdjacentElement","setDomChildOrder","orderedChildren","correctCellAtIndex","actualCellAtIndex","insertWithDomOrder","eToInsert","prependDC","documentFragment","addStylesToElement","styles","keyCamelCase","isHorizontalScrollShowing","isVerticalScrollShowing","scrollHeight","setElementWidth","removeProperty","setFixedWidth","formatSize","setElementHeight","setFixedHeight","maxHeight","minHeight","isNode","o","Node","nodeType","nodeName","isElement","isNodeOrElement","copyNodeList","nodeList","iterateNamedNodeMap","attr","setCheckboxState","eCheckbox","checked","indeterminate","addOrRemoveAttribute","getNameOfClass","theClass","funcAsString","findLineByLeastSquares","maxDecimals","splitExponent","sum_x","sum_y","sum_xy","sum_xx","y","x","m","toFixed","cssStyleObjectToMarkup","stylesToUse","resParts","styleKey","styleValue","styleKeyDashed","message","eMessage","eBox","bindCellRendererToHtmlElement","cellRendererPromise","eTarget","then","cellRenderer","gui","getGui","setAriaAttribute","ariaAttributeName","removeAriaAttribute","setAriaRole","role","getAriaSortState","isSortAscending","isSortDescending","getAriaLevel","getAriaPosInSet","getAriaDescribedBy","setAriaLabel","label","setAriaLabelledBy","labelledBy","setAriaDescription","description","setAriaDescribedBy","describedby","setAriaLevel","setAriaDisabled","setAriaExpanded","removeAriaExpanded","setAriaSetSize","setsize","setAriaPosInSet","setAriaMultiSelectable","multiSelectable","setAriaRowCount","rowCount","setAriaRowIndex","setAriaColCount","colCount","setAriaColIndex","colIndex","setAriaColSpan","setAriaSort","removeAriaSort","setAriaSelected","selected","setAriaChecked","padStartWidthZeros","totalStringSize","createArrayOfNumbers","first","isNumeric","isFinite","cleanNumber","decToHex","number","bytes","formatNumberTwoDecimalPlacesAndCommas","thousandSeparator","decimalSeparator","formatNumberCommas","sum","total","serialiseDate","date","includeTime","separator","serialised","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","parseDateTimeFromString","dateStr","timeStr","year","month","day","hours","minutes","seconds","setHours","setMinutes","setSeconds","fuzzyCheckStrings","inputValues","validValues","allSuggestions","fuzzyMatches","invalidInputs","inputValue","validValue","invalidInput","fuzzySuggestions","hideIrrelevant","weighted","search","string_weighted_distances","string_distances","thisSuggestions","text","relevance","toLocaleLowerCase","suggestion","get_bigrams","from","ref","str1","str2","pairs1","pairs2","union","hit_count","len1","weight","iconNameClassMap","columnGroupOpened","columnGroupClosed","columnSelectClosed","columnSelectOpen","columnSelectIndeterminate","columnMovePin","columnMoveHide","columnMoveMove","columnMoveLeft","columnMoveRight","columnMoveGroup","columnMoveValue","columnMovePivot","dropNotAllowed","groupContracted","groupExpanded","chart","close","cancel","check","previous","next","linked","unlinked","colorPicker","groupLoading","menu","maximize","minimize","menuPin","menuValue","menuAddRowGroup","menuRemoveRowGroup","clipboardCopy","clipboardPaste","pivotPanel","rowGroupPanel","valuePanel","columnDrag","save","csvExport","excelExport","smallDown","smallLeft","smallRight","smallUp","sortAscending","sortDescending","sortUnSort","createIcon","iconName","iconContents","createIconNoSpan","className","eResult","forceCreate","userProvidedIcon","icons","optionsIcons","getIcons","span","cssClass","rendererResult","isEventFromPrintableCharacter","altKey","ctrlKey","metaKey","printableCharacter","numpadDelWithNumlockOnForEdgeOrIe","charCode","isNumpadDelWithNumLockOnForEdge","isUserSuppressingKeyboardEvent","keyboardEvent","editing","gridOptionsFunc","getSuppressKeyboardEventFunc","colDefFunc","suppressKeyboardEvent","isUserSuppressingHeaderKeyboardEvent","headerRowIndex","getDefinition","suppressHeaderKeyboardEvent","areEventsNear","e1","e2","pixelCount","diffX","clientX","diffY","clientY","sortRowNodesByOrder","nodeA","nodeB","positionA","positionB","__objectId","atLeastOneOutOfOrder","traverseNodesWithKey","keyParts","recursiveSearchNodes","currentNodes","pop","convertToSet","AgPromiseStatus","GeneralUtils","AriaUtils","ArrayUtils","BrowserUtils","CsvUtils","DateUtils","DomUtils","EventUtils","FunctionUtils","FuzzyMatchUtils","GenericUtils","IconUtils","KeyboardUtils","MapUtils","MouseUtils","NumberUtils","ObjectUtils","RowNodeUtils","SetUtils","StringUtils","initValue","nextValue","NumberSequence","valToReturn","TooltipStates","status","IN_PROGRESS","resolution","waiters","onDone","onReject","AgPromise","promises","resolve","remainingToResolve","combinedValues","promise","RESOLVED","ifNotResolvedValue","ifResolved","waiter","timestamp","Timer","duration","info","parentComp","_super","NOTHING","CustomTooltipFeature","tooltipShowDelay","getTooltipDelay","DEFAULT_SHOW_TOOLTIP_DELAY","tooltipHideDelay","DEFAULT_HIDE_TOOLTIP_DELAY","tooltipMouseTrack","isTooltipMouseTrack","onMouseEnter","onMouseLeave","onMouseMove","onMouseDown","onKeyDown","setToDoNothing","delay","isLastTooltipHiddenRecently","showTooltipTimeoutId","showTooltip","lastMouseEvent","WAITING_TO_SHOW","SHOWING","hideTooltip","clearTimeouts","tooltipComp","positionTooltipUnderLastMouseEvent","destroyTooltipComp","lastTooltipHideTime","tooltipPopupDestroyFunc","FADE_OUT_TOOLTIP_TIMEOUT","SHOW_QUICK_TOOLTIP_DIFF","getTooltipParams","tooltipInstanceCount","newTooltipComponentCallback","userComponentFactory","getTooltipCompDetails","newAgStackInstance","tooltipInstanceCopy","eGui","translate","addPopupRes","popupService","addPopup","ariaLabel","hideFunc","hideTooltipTimeoutId","positionPopupUnderMouseEvent","mouseEvent","ePopup","nudgeY","compIdSequence","cssClassStates","CssClassManager","addCssClass","removeCssClass","addOrRemove","addOrRemoveCssClass","cssClassManager","setTemplate","Component","usingBrowserTooltips","isEnableBrowserTooltips","compId","tooltipText","newTooltipText","tooltipFeature","paramsMap","childNodes","childComp","createComponentFromElement","copyAttributesFromNode","addItems","createChildComponentsFromTags","swapComponentForNode","componentParams","ComponentClass","agStackComponentsRegistry","getComponentClass","elementGettingCreated","newComponent","setParentComponent","eComponent","replaceChild","createComment","swapInComponentForQuerySelectors","thisNoType","iterateOverQuerySelectors","thisPrototype","__agComponentMetaData","currentProtoName","querySelectors","setTemplateFromElement","__agComponent","wireQuerySelectors","setResult","refSelector","resultOfQuery","parentComponent","newChild","childComponent","EVENT_DISPLAYED_CHANGED","containsCssClass","refName","queryForHtmlElement","QuerySelector","selector","querySelectorFunc","RefSelector","instanceName","addToObjectProps","ConditionPosition","ReadOnlyFloatingFilter","getDisplayNameForColumn","eFloatingFilterText","setInputAriaLabel","parentModel","parentFilterInstance","filterInstance","getModelAsString","modelAsString","setValue","dateComponentParams","eParent","alive","getDateCompDetails","dateComp","afterGuiAttached","tempValue","setDate","setDateCompDisabled","DateCompWrapper","placeholder","setInputPlaceholder","customFilterOptions","OptionsFactory","defaultOptions","filterOptions","mapCustomOptions","selectDefaultItem","checkForDeprecatedParams","hideFilterInput","filterOption","mutatedFilterOptions","predicate","cv","numberOfInputs","displayKey","defaultOption","firstFilterOption","DEFAULT_FILTER_LOCALE_TEXT","applyFilter","clearFilter","resetFilter","cancelFilter","textFilter","numberFilter","dateFilter","setFilter","filterOoo","empty","equals","notEqual","lessThan","greaterThan","inRangeStart","inRangeEnd","lessThanOrEqual","greaterThanOrEqual","notContains","endsWith","blank","notBlank","andCondition","orCondition","dateFormatOoo","KeyCode","eFocusableElement","callbacks","shouldStopEventPropagation","onTabKeyDown","defaultPrevented","nextRoot","focusService","findNextFocusableElement","focus","preventDefault","ManagedFocusFeature","FOCUS_MANAGED_CLASS","addKeyDownListeners","onFocusIn","onFocusOut","TAB","handleKeyDown","filterNameKey","ProvidedFilter","resetTemplate","createManagedBean","getFocusableElement","appliedModel","templateString","getCssIdentifier","createBodyTemplate","providedFilterParams","readOnly","setParams","resetUiToDefaults","updateUiVisibility","setupOnBtApplyDebounce","applyActive","isUseApplyButton","createButtonPanel","buttons","isReadOnly","eButtonsPanel","clickListener","onBtApply","onBtClear","onBtReset","onBtCancel","button","addButton","debounceMs","getDebounceMs","getDefaultDebounceMs","onBtApplyDebounce","model","setModelIntoUi","applyModel","currentModel","getModel","afterAppliedFunc","onUiChanged","closeOnApply","newModel","getModelFromUi","isModelValid","previousModel","areModelsEqual","afterFloatingFilter","filterChangedCallback","hidePopup","fromFloatingFilter","filterModifiedCallback","isValid","getRefElement","debounceDefault","config","AgAbstractLabel","eLabel","labelSeparator","labelWidth","labelAlignment","setLabelSeparator","setLabel","setLabelWidth","setLabelAlignment","refreshLabel","innerText","getCompId","alignment","eGuiClassList","AgAbstractField","callbackFn","EVENT_CHANGED","previousValue","pickerIcon","ariaRole","AgPickerField","displayId","eDisplayField","eWrapper","clickHandler","skipClick","isDisabled","pickerComponent","showPicker","UP","DOWN","ENTER","SPACE","ESCAPE","isPickerDisplayed","icon","eIcon","getLabel","getLabelId","cssIdentifier","AgList","highlightedEl","itemEls","setValueByIndex","isDown","itemToHighlight","nextPos","highlightItem","listOptions","listOption","addOption","sanitisedText","renderOption","updateIndices","option","itemEl","clearHighlighted","fireItemSelected","findIndex","displayValue","fireChangeEvent","ACTIVE_CLASS","EVENT_ITEM_SELECTED","AgSelect","listComponent","hideList","listGui","eDocument","getDocument","destroyMouseWheelFunc","destroyFocusOutFunc","relatedTarget","modal","closeOnEsc","closedCallback","getPopupParent","positionPopupUnderComponent","keepWithinBounds","refreshHighlighted","fromPicker","getDisplayValue","inputType","displayFieldTag","AgAbstractInputField","setInputType","eInput","setWidth","addInputListeners","getInputElement","maxLength","SimpleFilter","customOpts","optionsFactory","getCustomOption","zeroInputTypes","EMPTY","NOT_BLANK","BLANK","IN_RANGE","setTypeFromFloatingFilter","setValueFromFloatingFilter","eType1","eType2","getDefaultOption","isDefaultOperator","eJoinOperatorAnd","eJoinOperatorOr","isConditionUiComplete","One","isAllowTwoConditions","Two","filterType","getFilterType","operator","getJoinOperator","condition1","createCondition","condition2","aIsSimple","bIsSimple","aSimple","bSimple","areSimpleModelsEqual","aCombined","bCombined","combinedModel","orChecked","setConditionIntoUi","simpleModel","models","individualConditionPasses","init","getDefaultFilterOptions","allowTwoConditions","suppressAndOrCondition","alwaysShowBothConditions","defaultJoinOperator","getDefaultJoinOperator","putOptionsIntoDropdown","addChangedListeners","getFilterOptions","eTypes","createBoilerplateListOption","createCustomListOption","eType","customOption","createValueTemplate","elementConditionGroups","eJoinOperatorPanel","elementBodies","eCondition1Body","eCondition2Body","isConditionVisible","isConditionDisabled","isConditionBodyVisible","forEachInput","setElementDisplayed","setElementDisabled","resetPlaceholder","suppressFocus","firstInput","getInputs","globalTranslate","onValueChange","cb","inputs","getConditionTypes","getNumberOfInputs","getValues","filteringLabel","uniqueGroupId","setName","setElementValue","mapValuesFromModel","elPosition","attachElementOnChange","filterModel","cellValue","getCellValue","customFilterOption","customFilterResult","evaluateCustomFilter","evaluateNullValue","evaluateNonNullValue","ScalarFilter","scalarFilterParams","EQUALS","NOT_EQUAL","includeBlanksInEquals","GREATER_THAN","GREATER_THAN_OR_EQUAL","includeBlanksInGreaterThan","LESS_THAN","LESS_THAN_OR_EQUAL","includeBlanksInLessThan","includeBlanksInRange","compareResult","compareToResult","inRangeInclusive","isBlank","DEFAULT_MAX_YEAR","Infinity","DateFilter","dateCondition1FromComp","dateFrom","dateTo","dateFilterParams","filterDate","yearParser","param","fallback","minValidYear","maxValidYear","createDateComponents","createDateCompWrapper","onDateChanged","filterParams","eCondition1PanelFrom","dateCondition1ToComp","eCondition1PanelTo","dateCondition2FromComp","eCondition2PanelFrom","dateCondition2ToComp","eCondition2PanelTo","DEFAULT_FILTER_OPTIONS","valid","getUTCFullYear","SimpleFloatingFilter","customOption1","customOption2","conditionToString","lastType","isTypeEditable","setEditable","uneditableTypes","doesFilterHaveSingleInput","DateFloatingFilter","isRange","createDateComponent","eReadOnlyText","eDateWrapper","isEventFromFloatingFilter","setLastTypeFromModel","allowEditing","canWeEditAfterModelFromParentFilter","dateModel","getTextFromModel","filterValueText","onFloatingFilterChanged","getLastType","DefaultDateComponent","inputElement","eDateInput","shouldUseBrowserDatePicker","activeElement","browserDatePicker","NumberFilter","filterTo","numberFilterParams","allowedCharPattern","getAllowedCharPattern","agElementTag","stringToFloat","filterText","numberParser","eValueFrom1","eValueTo1","eValueFrom2","eValueTo2","TextFilter","trimmedInput","textFilterParams","matcher","getTextMatcher","formatter","textFormatter","caseSensitive","DEFAULT_FORMATTER","DEFAULT_LOWERCASE_FORMATTER","legacyComparator","textCustomComparator","textMatcher","DEFAULT_MATCHER","cleanValue","trimInput","filterTypesAllowNulls","NOT_CONTAINS","formattedValues","cellValueFormatted","matcherParams","CONTAINS","STARTS_WITH","ENDS_WITH","lastIndexOf","TextInputFloatingFilter","eFloatingFilterInput","toDebounce","syncUpWithParentFilter","filterGui","columnDef","enterKeyPressed","NumberFloatingFilter","TextFloatingFilter","preventMouseClick","destroyFuncs","touching","startListener","onTouchStart","moveListener","onTouchMove","endListener","onTouchEnd","TouchListener","touchList","identifier","touchStart","touchEvent","touches","moved","touchStartCopy","touchesMatch","EVENT_LONG_TAP","touch","getActiveTouch","EVENT_TAP","checkForDoubleTap","now","lastTapTime","DOUBLE_TAP_MILLIS","EVENT_DOUBLE_TAP","HeaderComp","workOutTemplate","currentTemplate","workOutShowMenu","currentShowMenu","workOutSort","currentSort","setDisplayName","TEMPLATE","setupTap","setupIcons","setMenu","setupSort","setupFilterIcon","currentDisplayName","displayNameSanitised","eText","addInIcon","eSortAsc","eSortDesc","eSortNone","eMenu","eFilter","isSuppressTouch","touchListener","suppressMenuHide","isSuppressMenuHide","tapMenuButton","menuTouchListener","enableMenu","showColumnMenuAfterMouseClick","enableSorting","progressSort","menuHides","onIpadAndMenuHides","showMenu","menuFactory","showMenuAfterButtonClick","eSortOrder","sortUsingCtrl","isMultiSortKeyCtrl","lastMovingChanged","movedRecently","multiSort","setMultiSortOrder","removeSortIcons","isSortNone","alwaysHideNoSort","unSortIcon","isUnSortIcon","allColumnsWithSorting","getColumnsWithSortingOrdered","indexThisCol","moreThanOneColSorting","showIndex","isSorting","filterPresent","isFilterActive","HeaderGroupComp","checkWarnings","setupLabel","addGroupExpandIcon","setupExpandIcons","expandAction","newExpandedValue","setColumnGroupOpened","addTouchAndClickListeners","eCloseIcon","eOpenIcon","stopPropagationAction","updateIconVisibility","PopupComponent","LargeTextCellEditor","focusAfterAttached","cellStartedEdit","eTextArea","setMaxLength","setCols","setRows","rows","addGuiEventListener","LEFT","RIGHT","stopPropagation","parseValue","SelectCellEditor","startedByEnter","eventKey","hasValue","valueFormatted","valueFormatterService","formatValue","valueFormattedExits","eSelect","isFullRowEdit","stopEditing","PopupSelectCellEditor","TextCellEditor","startValue","BACKSPACE","DELETE","charPress","getStartValue","F2","highlightAllOnFocus","PAGE_UP","PAGE_DOWN","inputEl","setSelectionRange","focusEl","useFormatter","refData","PopupTextCellEditor","AnimateShowChangeCellRenderer","eValue","eDelta","refresh","absDelta","valueToUse","deltaUp","refreshCount","refreshCountCopy","hideDeltaValue","lastValue","isSuppressFlashingCellsBecauseFiltering","showDelta","setTimerToRemoveDelta","AnimateSlideCellRenderer","eCurrent","ePrevious","addSlideAnimation","DragSourceType","VerticalDirection","HorizontalDirection","OBJECT_ID_SEQUENCE","__autoHeights","alreadyRendered","highlighted","onRowHeightChangedDebounced","setDataCommon","oldData","updateDataOnDetailNode","checkRowSelectable","createDataChangedEvent","dispatchLocalEvent","EVENT_DATA_CHANGED","rowPinned","PINNED_TOP","PINNED_BOTTOM","oldNode","daemon","createDaemonNode","setId","syncInRowNode","isRowSelectableFunc","getIsRowSelectableFunc","setRowSelectable","newVal","createLocalRowEvent","EVENT_SELECTABLE_CHANGED","parentKeys","getGroupKeys","ID_PREFIX_ROW_GROUP","excludeSelf","EVENT_FIRST_CHILD_CHANGED","EVENT_LAST_CHILD_CHANGED","childIndex","EVENT_CHILD_INDEX_CHANGED","EVENT_TOP_CHANGED","dragging","EVENT_DRAGGING_CHANGED","EVENT_HIGHLIGHT_CHANGED","allChildrenCount","EVENT_ALL_CHILDREN_COUNT_CHANGED","EVENT_MASTER_CHANGED","EVENT_GROUP_CHANGED","EVENT_HEIGHT_CHANGED","cellHeight","checkAutoHeightsDebounced","checkAutoHeights","notAllPresent","nonePresent","newRowHeight","autoHeights","getAllDisplayedAutoHeightCols","EVENT_ROW_INDEX_CHANGED","EVENT_UI_LEVEL_CHANGED","createGlobalRowEvent","EVENT_ROW_GROUP_OPENED","rowNodeEventThrottle","dispatchExpanded","refreshCells","oldValue","valueService","valueChanged","dispatchCellChangedEvent","groupData","columnId","newAggData","colIds","aggData","oldAggData","__hasChildren","EVENT_HAS_CHILDREN_CHANGED","cellChangedEvent","EVENT_CELL_CHANGED","quickFilterAggregateText","depthFirstSearch","newSelectedValue","atLeastOneSelected","atLeastOneDeSelected","atLeastOneMixed","selectThisNode","clearSelection","suppressFinishActions","setSelectedParams","rangeSelect","groupSelectsChildren","groupSelectsFiltered","getLastSelectedNode","newRowClicked","allowMultiSelect","isRowSelectionMulti","nodesChanged","doRowRangeSelection","setLastSelectedNode","updatedCount","selectChildNodes","clearOtherNodes","EVENT_SELECTION_CHANGED","lastSelectedNode","nodesToSelect","getNodesInRangeForSelection","potentialParent","selectionNotAllowed","selectionNotChanged","EVENT_ROW_SELECTED","noRegisteredListenersExist","EVENT_MOUSE_ENTER","EVENT_MOUSE_LEAVE","isCandidate","foundFirstChildPath","nodeToSwapIn","parentRowNode","isFullWidthCellFunc","getIsFullWidthCellFunc","CheckboxSelectionComponent","setPassive","onSelectionChanged","showOrHideSelect","stateName","isGroupSelectsFiltered","getPreviousValue","onUncheckedClicked","onCheckedClicked","onSelectableChanged","checkboxCallbackExists","showOrHideSelectListener","isCellCheckboxSelection","ExcelFactoryMode","DragAndDropService","ePinnedIcon","eHideIcon","eMoveIcon","eLeftIcon","eRightIcon","eGroupIcon","eAggregateIcon","ePivotIcon","eDropNotAllowedIcon","dragSource","allowTouch","dragStartPixels","onDragStart","onDragStop","onDragging","dragSourceAndParamsList","dragService","addDragSource","sourceAndParams","removeDragSource","eventLastTime","dragItem","getDragItem","lastDropTarget","dragSourceDropTarget","onDragStarted","createGhost","onDragStopped","draggingEvent","createDropTargetEvent","removeGhost","fromNudge","hDirection","getHorizontalDirection","vDirection","getVerticalDirection","positionGhost","validDropTargets","dropTargets","isMouseOnDropTarget","dropTarget","prevTarget","currTarget","prevContainer","getContainer","currContainer","leaveLastTargetIfExists","enterDragTargetIfExists","onDragEnter","dragEnterEvent","setGhostIcon","getIconName","onDragLeave","dragLeaveEvent","secondaryContainers","getSecondaryContainers","containers","rect","getBoundingClientRect","horizontalFit","verticalFit","bottom","allContainersFromDropTarget","getAllContainersFromDropTarget","mouseOverTarget","currentContainers","allContainersIntersect","targetContainsSource","isInterestedIn","zones","external","zone","eClientX","Left","Right","eClientY","Up","Down","dropZoneTarget","ghost","eGhost","ghostHeight","browserWidth","browserHeight","pageY","pageX","defaultView","windowScrollY","pageYOffset","scrollTop","windowScrollX","pageXOffset","eGhostParent","DragAndDropService_1","GHOST_TEMPLATE","theme","eGhostIcon","dragItemName","targetEl","fullscreenElement","shake","defaultIconName","ICON_NOT_ALLOWED","ICON_PINNED","ICON_MOVE","ICON_LEFT","ICON_RIGHT","ICON_GROUP","ICON_AGGREGATE","ICON_PIVOT","ICON_HIDE","isSuppressDragLeaveHidesColumns","cellValueFn","customGui","suppressVisibilityChange","RowDragComp","setDragElement","checkCompatibility","strategy","isRowDragManaged","ManagedVisibilityStrategy","NonManagedVisibilityStrategy","dragElement","isRowDragMultiRow","selection","getSelectedNodes","managed","defaultTextValue","rowDragText","RowDrag","dragItemCount","getSelectedCount","dragSourceDomDataKey","getDomDataKey","dragAndDropService","VisibilityStrategy","neverDisplayed","shown","isShownSometimes","isRowDrag","isCustomGui","onSuppressRowDrag","workOutVisibility","isSuppressRowDrag","setDisplayedOrVisible","rowDragFeature","getGridBodyCtrl","getRowDragFeature","shouldPreventRowMove","hasExternalDropZones","GroupCellRendererCtrl","comp","eExpanded","eContracted","compClass","topLevelFooter","isTopLevelFooter","embeddedRowMismatch","isEmbeddedRowMismatch","nullValue","skipCell","cellIsBlank","setupShowingValueForOpenedParent","findDisplayedGroupNode","addFullWidthRowDraggerIfNeeded","addExpandAndContract","addCheckboxIfNeeded","addValueElement","setupIndent","refreshAriaExpanded","expandListener","eParentOfValue","rowGroupCols","fullWidth","isEmbedFullWidthRows","pinnedLeftCell","pinnedRightCell","bodyCell","isPinningLeft","showingValueForOpenedParent","isRowGroupDisplayed","displayedGroupNode","keyOfGroupingColumn","valPresent","addFooterValue","addGroupValue","addChildCount","paramsAdjusted","adjustParamsWithDetailsFromRelatedColumn","innerCompDetails","getInnerCompDetails","valueWhenNoRenderer","setInnerRenderer","relatedColumn","footerValueGetter","footerValue","paramsClone","getFullWidthGroupRowInnerCellRenderer","groupRowRendererParams","getInnerRendererDetails","isGroupRowRenderer","details","relatedColDef","relatedCompDetails","getCellRendererDetails","cellRendererParams","innerRenderer","suppressCount","updateChildCount","countString","isShowRowGroupForThisRow","setChildCount","eExpandedIcon","eContractedIcon","eGroupCell","eGridCell","suppressDoubleClickExpand","onCellDblClicked","onExpandClicked","showExpandAndContractIcons","expandableChangedListener","onRowNodeIsExpandableChanged","onExpandOrContract","nextExpandState","reducedLeafNode","displayedGroup","setExpandedDisplayed","setContractedDisplayed","pivotModeAndLeafGroup","addExpandableCss","isTotalFooterNode","setIndent","suppressPadding","fullWithRow","treeData","paddingCount","indentClass","rowDragComp","paramsCheckbox","checkbox","checkboxNeeded","isUserWantsSelected","cbSelectionComponent_1","setCheckboxVisible","suppressEnterExpand","isCellEditable","GroupCellRenderer","compProxy","compDetails","valueToDisplay","setRenderDetails","eChildCount","ctrl","componentPromise","destroyComp","innerCellRenderer","LoadingCellRenderer","failedLoad","setupFailed","setupLoading","eLoadingText","eLoadingIcon","LoadingOverlayComponent","getOverlayLoadingTemplate","DEFAULT_LOADING_OVERLAY_TEMPLATE","localisedTemplate","NoRowsOverlayComponent","getOverlayNoRowsTemplate","DEFAULT_NO_ROWS_TEMPLATE","TooltipComponent","agDateInput","agColumnHeader","agColumnGroupHeader","agTextColumnFloatingFilter","agNumberColumnFloatingFilter","agDateColumnFloatingFilter","agReadOnlyFloatingFilter","agAnimateShowChangeCellRenderer","agAnimateSlideCellRenderer","agGroupCellRenderer","agGroupRowRenderer","agLoadingCellRenderer","agCellEditor","agTextCellEditor","agSelectCellEditor","agPopupTextCellEditor","agPopupSelectCellEditor","agLargeTextCellEditor","agTextColumnFilter","agNumberColumnFilter","agDateColumnFilter","agLoadingOverlay","agNoRowsOverlay","agTooltipComponent","newComponentName","propertyHolder","animateShowChange","animateSlide","largeText","popupSelect","popupText","richSelect","headerComponent","UserComponentRegistry","registerJsComponent","frameworkComponents","registerFwComponent","rawName","translateIfDeprecated","agGridDefaults","fwComps","jsComps","createResult","componentFromFramework","registeredViaFrameworkComp","frameworkComponent","jsComponent","isFrameworkComponent","defaultComponent","raw","deprecatedInfo","agDeprecatedNames","DateComponent","propertyName","HeaderComponent","HeaderGroupComponent","CellRendererComponent","CellEditorComponent","InnerRendererComponent","FilterComponent","FloatingFilterComponent","ToolPanelComponent","StatusPanelComponent","FullWidth","FullWidthLoading","FullWidthGroup","FullWidthDetail","FloatingFilterMapper","filterToFloatingFilterMapping","agSetColumnFilter","multi","agMultiColumnFilter","UserComponentFactory","getCompDetails","defaultFilter","defaultFloatingFilter","toolPanelDef","defObject","defaultName","mandatory","compName","jsComp","fwComp","paramsFromSelector","popupFromSelector","popupPositionFromSelector","lookupFromRegistry","userComponentRegistry","retrieve","agComponentUtils","doesImplementIComponent","adaptFunction","paramsMerged","mergeParamsWithApplicationProvidedParams","defObjectAny","selectorFunc","selectorRes","assignComp","providedJsComp","providedFwComp","xxxFrameworkDeprecatedWarn","warningMessage_1","popup","popupPosition","instance","thisComponentConfig","componentMetadataProvider","frameworkComponentWrapper","wrap","mandatoryMethodList","optionalMethodList","deferredInit","initComponent","paramsFromGrid","userParams","defaultFloatingFilterType","getFloatingFilterType","SetFilterModule","DragService","dragSources","removeListener","dragSourceAndListener","mouseDownListener","touchEnabled","touchStartListener","includeTouch","mouseListener","suppressTouch","cancelable","currentDragParams","touchLastTime","touchEndEvent","onTouchUp","events","addTemporaryEvents","onCommonMove","skipMouseEvent","_alreadyProcessedByDragService","mouseStartEvent","onMouseUp","currentEvent","dragEndFunctions","startEvent","isEventNearStartEvent","EVENT_DRAG_STARTED","getFirstActiveTouch","mouseEventService","isEventFromThisGrid","isOverFormFieldElement","tagName","changedTouches","onUpCommon","eventOrTouch","EVENT_DRAG_STOPPED","FilterManager","onColumnsChanged","refreshFiltersForAggregations","quickFilter","parseQuickFilter","getQuickFilterText","setQuickFilterParts","allowShowChangeAfterFilter","isAllowShowChangeAfterFilter","quickFilterParts","allPromises","getFilterModel","modelKeys_1","allColumnFilters","filterWrapper","setModelOnFilterWrapper","filterPromise","isFilterAllowed","getOrCreateFilterWrapper","all","before","after","setModel","resolveNow","promiseFilter","activeColumnFilters","activeAggregateFilters","filterToSkip","doColumnFiltersPass","groupFilterEnabled","getGroupAggFiltering","filterComp","isShowingPrimaryColumns","isAggFilter","setFilterActive","isAggregateFilterPresent","targetAggregates","targetedFilters","targetedData","doesFilterPass","newFilter","parsedFilter","isRefreshInProgress","updateActiveFilters","updateFilterFlagInColumns","onAnyFilterChanged","processingFilterChange","filterInstanceToSkip","filterPart","getAllColumnsForQuickFilter","getQuickFilterTextForColumn","aggregateRowForQuickFilter","usingCache","isCacheQuickFilter","doesRowPassQuickFilterCache","doesRowPassQuickFilterNoCache","doAggregateFiltersPass","doesRowPassQuickFilter","doesExternalFilterPass","stringParts","FilterManager_1","QUICK_FILTER_SEPARATOR","createIfDoesNotExist","cachedFilter","putIntoGui","createFilterWrapper","createFilterParams","EVENT_FILTER_MODIFIED","callOnFilterChangedOutsideRenderCycle","doesRowPassOtherFilter","doesRowPassOtherFilters","getFilterDetails","createValueGetter","compiledElement","guiPromise","createFilterInstance","eFilterGui","guiFromFilter","EVENT_FILTER_OPENED","wrapper","disposeFilterWrapper","AbstractHeaderCellComp","HeaderFilterCellComp","cssClassName","on","addOrRemoveBodyCssClass","eFloatingFilterBody","addOrRemoveButtonWrapperCssClass","eButtonWrapper","setCompDetails","getFloatingFilterComp","compPromise","setMenuIcon","eButtonShowMainFilter","setComp","afterCompCreated","SideBarDefParser","toParse","toolPanels","DEFAULT_COLUMN_COMP","DEFAULT_FILTER_COMP","defaultToolPanel","comps_1","lookupResult","DEFAULT_BY_KEY","parseComponents","hiddenByDefault","it","toAdd","labelDefault","labelKey","iconKey","toolPanel","filters","isTrue","oneOrGreater","valueNumber","LayoutCssClasses","propertyEventService","domDataKey","random","checkForDeprecated","checkForViolations","suppressPropertyNamesCheck","checkGridOptionsProperties","checkColumnDefProperties","sideBar","globalEventHandler","isRowModelServerSide","prop","groupDefaultExpanded","isEnableRangeSelection","assertRegistered","RangeSelectionModule","isEnableRangeHandle","isEnableFillHandle","warnOfDeprecaredIcon","userProperties","getOwnPropertyNames","validProperties","FRAMEWORK_PROPERTIES","checkProperties","validPropertiesAndExceptions","containerName","docsUrl","invalidProperties","callbackParams","mergedParams","__assign","domData","rowSelection","suppressRowDeselection","rowMultiSelectWithClick","suppressExpandablePivotGroups","pivotColumnGroupTotals","pivotRowTotals","ROW_MODEL_TYPE_INFINITE","ROW_MODEL_TYPE_VIEWPORT","editType","suppressFocusAfterRefresh","suppressBrowserResizeObserver","suppressMaintainUnsortedOrder","suppressClearOnFillReduction","getSideBar","maintainColumnOrder","suppressRowTransform","suppressColumnStateEvents","allowDragFromColumnsToolPanel","suppressAsyncEvents","enableCellChangeFlash","cellFlashDelay","cellFadeDelay","suppressRowHoverHighlight","columnHoverHighlight","groupHideOpenParents","groupDisplayType","matchesGroupDisplayType","treeDataDisplayType","matchesTreeDataDisplayType","groupIncludeFooter","groupIncludeTotalFooter","groupSuppressBlankHeader","suppressCellFocus","suppressMultiSort","alwaysMultiSort","multiSortKey","pivotSuppressAutoColumn","suppressDragLeaveHidesColumns","suppressScrollOnNewData","suppressScrollWhenPopupsAreOpen","rowDragEntireRow","rowDragManaged","rowDragMultiRow","domLayout","DOM_LAYOUT_NORMAL","DOM_LAYOUT_PRINT","DOM_LAYOUT_AUTO_HEIGHT","suppressHorizontalScroll","suppressMaxRenderedRowRestriction","excludeChildrenWhenTreeDataFiltering","alwaysShowHorizontalScroll","alwaysShowVerticalScroll","debounceVerticalScrollbar","suppressLoadingOverlay","suppressNoRowsOverlay","suppressFieldDotNotation","pinnedTopRowData","pinnedBottomRowData","functionsPassive","suppressChangeDetection","suppressAnimationFrame","cacheQuickFilter","enterMovesDownAfterEdit","enterMovesDown","undoRedoCellEditing","undoRedoCellEditingLimit","rowStyle","mergeGridCommonParams","getRowStyle","getRowClass","rowClassRules","serverSideStoreType","getServerSideStoreParams","createChartContainer","popupParent","blockLoadDebounceMillis","postProcessPopup","paginationNumberFormatter","getChildCount","isApplyServerSideTransaction","initialGroupOrderComparator","defaultGroupOrderComparator","isFullWidthRow","isFullWidthCell","fullWidthCellRendererParams","embedFullWidthRows","deprecatedEmbedFullWidthRows","detailRowAutoHeight","getBusinessKeyForNode","readOnlyEdit","getRowIdProvided","getRowId","immutableData","resetRowDataOnUpdate","enableCharts","GridChartsModule","colResizeDefault","singleClickEdit","suppressClickEdit","stopEditingWhenCellsLoseFocus","maxConcurrentDatasourceRequests","maxBlocksInCache","cacheOverflowSize","paginateChildRows","cacheBlockSize","infiniteInitialRowCount","purgeClosedRowNodes","suppressPaginationPanel","enableRtl","rowGroupPanelShow","pivotPanelShow","angularCompileRows","angularCompileFilters","debug","columnTypes","viewportDatasource","serverSideDatasource","accentedSort","enableBrowserTooltips","enableCellExpressions","enableGroupEdit","suppressMiddleClickScrolls","preventDefaultOnContextMenu","suppressPreventDefaultOnMouseWheel","suppressRowVirtualisation","suppressContextMenu","allowContextMenuWithControlKey","suppressCopyRowsToClipboard","suppressCopySingleCellRanges","copyHeadersToClipboard","copyGroupHeadersToClipboard","suppressLastEmptyLineOnPaste","pagination","suppressEnterpriseResetOnNewColumns","processDataFromClipboard","asyncTransactionWaitMillis","BATCH_WAIT_MILLIS","suppressMovableColumns","isEnsureDomOrder","animateRows","suppressColumnMoveAnimation","suppressAggFuncInHeader","suppressAggAtRootLevel","suppressAggFilteredOnly","removePivotHeaderRowWhenSingleValueColumn","showOpenedGroup","reactUi","suppressReactUi","enableRangeSelection","enableRangeHandle","enableFillHandle","fillHandleDirection","fillOperation","suppressMultiRangeSelection","paginationAutoPageSize","rememberGroupStateWhenNewData","userValue","aggFuncs","sortingOrder","alignedGrids","masterDetail","MasterDetailModule","keepDetailRows","keepDetailRowsCount","isRowMaster","isRowSelectable","overlayLoadingTemplate","overlayNoRowsTemplate","suppressAutoSize","suppressClipboardApi","functionsReadOnly","defaultColGroupDef","defaultExportParams","defaultCsvExportParams","defaultExcelExportParams","suppressCsvExport","suppressExcelExport","suppressMakeColumnVisibleAfterUnGroup","getDataPath","isServerSideGroup","isServerSideGroupOpenByDefault","isGroupOpenByDefault","getServerSideGroupKey","getGroupRowAgg","groupRowAggNodes","getContextMenuItems","getMainMenuItems","getRowNodeId","navigateToNextHeader","tabToNextHeader","navigateToNextCell","tabToNextCell","valueCacheNeverExpires","aggregateOnlyChangedColumns","processSecondaryColDef","processSecondaryColGroupDef","sendToClipboard","processRowPostCreate","processCellForClipboard","processHeaderForClipboard","processGroupHeaderForClipboard","processCellFromClipboard","viewportRowModelPageSize","viewportRowModelBufferSize","serverSideSortingAlwaysResets","serverSideFilteringAlwaysResets","postSortRows","postSort","getChartToolbarItems","chartThemeOverrides","customChartThemes","chartThemes","clipboardDelimiter","force","gridOptionsNoType","skipHeaderOnAutoSize","autoSizePadding","getFromTheme","floatingFiltersHeight","groupHeaderHeight","getHeaderHeight","pivotHeaderHeight","pivotGroupHeaderHeight","getGroupHeaderHeight","capitalisedType","suppressModelUpdateAfterUpdateTransaction","eGridDiv","ownerDocument","GridOptionsWrapper_1","MIN_COL_WIDTH","measuredMin","colWidth","rowBuffer","ROW_BUFFER_SIZE","getRowBuffer","getRowHeightAsNumber","scrollbarWidth","rowDeselection","enableMultiRowDragging","checkRenamedProperty","oldProp","newProp","version","immutableColumns","deltaColumnMode","groupRowInnerRenderer","groupRowInnerRendererParams","groupRowInnerRendererFramework","innerRendererParams","innerRendererFramework","detailCellRendererParams","stopEditingWhenGridLosesFocus","applyColumnDefOrder","groupMultiAutoColumn","groupUseEntireRow","groupSuppressAutoColumn","propName","defaultGroupSortComparator","suppressCellSelection","clipboardDeliminator","treeDataViolations","getDataPathFunc","getIsServerSideGroupFunc","getServerSideGroupKeyFunc","localeText","getLocaleText","variableValues","localisedText","callbackMethodName","getPropertyValue","setRowHeightVariable","getRowHeight","isGetRowHeightFunction","isDetailRowAutoHeight","detailRowHeight","environment","chartMenuPanelWidth","sassVariableName","getSassVariable","toMatch","supplied","groupDisplayTypeValues","treeDataDisplayTypeValues","RowAnimationCssClasses","view","LayoutFeature","PROP_DOM_LAYOUT","updateLayoutClasses","print","AUTO_HEIGHT","PRINT","NORMAL","eBodyViewport","resetLastHorizontalScrollElementDebounced","resetLastHorizontalScrollElement","GridBodyScrollFeature","onDisplayedColumnsWidthChanged","whenReady","centerRowContainerCtrl","addScrollListener","fakeHScroll","getFakeHScrollCtrl","getViewportElement","onCenterViewportScroll","getViewport","onFakeHorizontalScroll","onVerticalScroll","isDebounceVerticalScrollbar","horizontallyScrollHeaderCenterAndFloatingCenter","getCenterViewportScrollLeft","offset","topCenterContainer","getTopCenterRowContainerCtrl","bottomCenterContainer","getBottomCenterRowContainerCtrl","getHeaderRowContainerCtrl","setHorizontalScroll","setContainerTranslateX","lastHorizontalScrollElement","eDiv","fakeHScrollViewport","isControllingScroll","onBodyHorizontalScroll","centerContainerViewport","eSource","shouldBlockScrollUpdate","doHorizontalScroll","setScrollTop","nextScrollTop","redrawRowsAfterScroll","schedule","fakeScrollLeft","fireScrollEvent","onHorizontalViewportChanged","bodyScrollEvent","EVENT_BODY_SCROLL","scrollTimer","bodyScrollEndEvent","EVENT_BODY_SCROLL_END","scrollTo","touchOnly","getCenterWidth","frameNeeded","hScrollPosition","maxScrollLeft","vScrollPosition","getHScrollPosition","pixels","oldScrollPosition","setHorizontalScrollPosition","getRowCount","comparatorIsAFunction","indexToSelect","ensureIndexVisible","paginationProxy","isPagination","isSuppressPaginationPanel","goToPageWithIndex","rowGotShiftedDuringOperation","startingRowTop","startingRowHeight","paginationOffset","getPixelOffset","rowTopPixel","rowBottomPixel","getVScrollPosition","heightOffset","heightScaler","getDivStretchOffset","vScrollTop","vScrollBottom","viewportHeight","pxTop","getScrollPositionForPixel","pxBottom","pxMiddle","newScrollPosition","redrawAfterScroll","isPinned","isColumnDisplayed","newHorizontalScroll","getPositionedHorizontalScroll","setCenterViewportScrollLeft","columnBeforeStart","columnAfterEnd","viewportTooSmallForColumn","alignColToStart","alignColToEnd","isMiddle","colLeft","colMiddle","colRight","viewportStart","viewportEnd","getBodyContainerWidth","multiplier","colLeftPixel","end","tickingInterval","onScrollCallback","scrollContainer","scrollHorizontally","scrollAxis","scrollVertically","scrollByTick","getVerticalPosition","setVerticalPosition","getHorizontalPosition","setHorizontalPosition","shouldSkipVerticalScroll","shouldSkipHorizontalScroll","AutoScrollService","forceSkipVerticalScroll","skipVerticalScroll","scrollTick","tickLeft","tickRight","tickUp","tickDown","ensureTickingStarted","ensureCleared","doTick","tickCount","tickAmount","RowDragFeature","refreshStatus","onRowGroupChanged","EVENT_MODEL_UPDATED","gridBodyCon","autoScrollService","getBodyViewportElement","getScrollFeature","setVerticalScrollPosition","lastDraggingEvent","isGridSorted","isSortActive","isGridFiltered","isAnyFilterPresent","rowGroups","isFromThisGrid","selectedNodes","getRowIndexNumber","currentNode","isMultiRowDrag","getRowNodes","dispatchGridEvent","EVENT_ROW_DRAG_ENTER","setDragging","onEnterOrDragging","gridGui","EVENT_ROW_DRAG_MOVE","getNormalisedPosition","doManagedDrag","managedDrag","isSuppressMoveWhenRowDragging","isDropZoneWithinThisGrid","highlightRowAtPixel","moveRows","getRowIndexString","lastHighlightedRowNode","getLastHighlightedRowNode","isBelow","Below","getRowIdFunc_1","Above","clearRowHighlight","ensureRowsAtPixel","clearFocusedCell","rangeService","removeAllCellRanges","findExternalZone","processedParams","fromGrid","draggingToRowDragEvent","EVENT_ROW_DRAG_LEAVE","EVENT_ROW_DRAG_END","addDropTarget","overNode","vDirectionString","yNormalised","overIndex","getCurrentPageHeight","stopDragging","moveRowAndClearHighlight","SelectionHandleType","CellRangeType","CSS_CLASS_CELL_SELECTABLE","CSS_CLASS_FORCE_VERTICAL_SCROLL","CSS_CLASS_COLUMN_MOVING","GridBodyCtrl","bodyScrollFeature","eGridBody","eTop","eBottom","setCellTextSelection","isEnableCellTextSelect","addRowDragListener","setupRowAnimationCssClass","addEventListeners","addFocusListeners","onGridColumnsChanged","addBodyViewportListener","setFloatingHeights","disableBrowserDragging","addStopEditingWhenGridLosesFocus","registerGridBodyCtrl","onScrollVisibilityChanged","EVENT_PINNED_ROW_DATA_CHANGED","elements","setColumnMovingCss","setCellSelectableCss","scrollVisibleService","setVerticalScrollPaddingVisible","setColumnCount","HTMLImageElement","isStopEditingWhenCellsLoseFocus","focusOutListener","elementWithFocus","clickInsideGrid","viewports","viewport","isElementInThisGrid","getActivePopups","isElementWithinCustomPopup","headerCount","headerNavigationService","getHeaderRowCount","modelType","setRowCount","registerBodyViewportResizeListener","overflowY","setPinnedTopBottomOverflowY","show","isAlwaysShowVerticalScroll","setAlwaysVerticalScrollClass","rowContainerHeightService","isStretching","animateRowsCssClass","ANIMATION_ON","ANIMATION_OFF","setRowAnimationCssOnBodyViewport","isPreventDefaultOnContextMenu","getCenterRowContainerCtrl","contextMenuFactory","onContextMenu","onWheel","isSuppressScrollWhenPopupsAreOpen","hasAnchoredPopup","pinnedRowModel","floatingTopHeight","getPinnedTopTotalHeight","floatingBottomHeight","getPinnedBottomTotalHeight","setTopHeight","setBottomHeight","setTopDisplay","setBottomDisplay","nextTimeout","scrollWidthToRemove","availableWidth","sizeColumnsToFit","RowType","CSS_CELL_RANGE_SELECTED","cellCtrl","CellRangeFeature","cellComp","onRangeSelectionChanged","rangeCount","getCellRangeCount","getCellPosition","hasChartRange","getHasChartRange","isSingleCell","updateRangeBorders","refreshHandle","rangeBorders","getRangeBorders","isTop","isRight","isBottom","isLeft","isMoreThanOneCell","cellRanges","getCellRanges","range","DIMENSION","VALUE","leftCol","rightCol","thisCol","getDisplayedColBefore","ranges","isCellInSpecificRange","startRow","getRangeStartRow","endRow","getRangeEndRow","rowPositionUtils","sameRow","shouldHaveSelectionHandle","selectionHandle","addSelectionHandle","rangesLen","cellRange","cellPosition","isFillHandleAvailable","isSuppressFillHandle","isRangeHandleAvailable","handleIsAvailable","isEditing","isCategoryCell","isContiguousRange","isBottomRightCell","cellRangeType","FILL","RANGE","selectionHandleFactory","createSelectionHandle","setupColSpan","setupRowSpan","CellPositionFeature","getRowSpan","onLeftChanged","onWidthChanged","applyRowSpan","colsSpanning","getColSpanningList","onDisplayColumnsChanged","getCellWidth","modifyLeftForPrintLayout","getCellLeft","leftPosition","isPrintLayout","getDisplayedColumnsLeftWidth","totalRowHeight","zIndex","CellCustomStyleFeature","applyUserStyles","applyCellClassRules","applyClassesFromColDef","cellClassParams","stylingService","processClassRules","cellClassRules","cellStyle","cellStyleParams","cellStyleFunc","setUserStyles","staticClasses","getStaticCellClasses","TooltipFeature","setupTooltip","browserTooltips","updateTooltipText","setTitle","tooltip","createTooltipFeatureIfNeeded","getTooltipValue","genericTooltipFeature","getLocation","getRowIndex","getTooltipText","getValueFormatted","Beans","serverSideRowModel","CellMouseListenerFeature","onCellClicked","onCellDoubleClicked","onMouseOut","onMouseOver","isDoubleClickOnIPad","cellClickedEvent","EVENT_CELL_CLICKED","isSingleClickEdit","isSuppressClickEdit","startRowOrCellEdit","nowMillis","lastIPadMouseClickEvent","cellDoubleClickedEvent","EVENT_CELL_DOUBLE_CLICKED","isRightClickInExistingRange","forceBrowserFocus","focusCell","containsWidget","thisCell","extendLatestRangeToCell","ctrlKeyPressed","setRangeToCell","EVENT_CELL_MOUSE_DOWN","isCellInAnyRange","mouseStayingInsideCell","cellMouseOutEvent","EVENT_CELL_MOUSE_OUT","columnHoverService","clearMouseOver","cellMouseOverEvent","EVENT_CELL_MOUSE_OVER","setMouseOver","cellContainsTarget","cellContainsRelatedTarget","rowCtrl","CellKeyboardListenerFeature","onEnterKeyDown","onF2KeyDown","onEscapeKeyDown","onBackspaceOrDeleteKeyPressed","onNavigationKeyPressed","isRangeSelectionEnabled","onShiftRangeSelect","navigationService","endCell","extendLatestRangeInDirection","ensureCellVisible","stopEditingAndFocus","isEnterMovesDown","stopRowOrCellEdit","pressedChar","onSpaceKeyPressed","isRowSelection","currentSelection","newSelection","isSuppressRowDeselection","eCell","DndSourceComp","checkVisibility","dragEvent","providedOnRowDrag","dndSourceOnRowDrag","dataTransfer","setDragImage","jsonData","setData","defaultOnRowDrag","isDndSource","CSS_CELL_NOT_INLINE_EDITING","createCellPosition","addFeatures","CellCtrl","cellPositionFeature","cellCustomStyleFeature","cellMouseListenerFeature","cellKeyboardListenerFeature","cellRangeFeature","addTooltipFeature","tooltipCtrl","isTooltipFieldContainsDots","tooltipValueGetter","eCellWrapper","printLayout","startEditing","gow","updateAndFormatValue","addDomData","onCellFocused","applyStaticCssClasses","setWrapText","onFirstRightPinnedChanged","onLastLeftPinnedChanged","onColumnHover","setupControlComps","setupAutoHeight","isSuppressCellFocus","setTabIndex","colIdSanitised","setColId","setRole","showValue","eAutoHeightContainer","eParentCell","minRowHeight","measureHeight","timesCalled","doc","newHeight","setRowAutoHeight","destroyResizeObserver","resizeObserverService","observeResize","forceNewCellRendererInstance","createCellRendererParams","includeSelection","isIncludeControl","includeRowDrag","includeDndSource","setIncludeSelection","setIncludeDndSource","setIncludeRowDrag","isEnableCellTextSelection","rowDragChanged","dndSourceChanged","editorParams","createCellEditorParams","getCellEditorDetails","cellEditorPopup","cellEditorPopupPosition","setEditing","setEditDetails","EVENT_CELL_EDITING_STARTED","inPopup","editingInPopup","setInlineEditingClass","stopRowEditing","noValueResult","newValueExists","getCellEditor","isCancelAfterEnd","isReadOnlyEdit","dispatchEventForSaveValueReadOnly","suppressRefreshCell","setDataValue","EVENT_CELL_EDIT_REQUEST","getValueFromValueService","saveNewValue","refreshCell","forceRefresh","suppressFlash","dispatchEditingStoppedEvent","editingStoppedEvent","EVENT_CELL_EDITING_STOPPED","editingInline","popupEditorShowing","setInlineEditingCss","getParentOfValue","registerRowDragger","rowDraggerElement","addRowCompListener","valueParser","focusOut","focusIn","suppressCellFlash","noValueProvided","valuesDifferent","isEnableCellChangeFlash","flashCell","refreshToolTip","suppressNavigateAfterEdit","navigateAfterEdit","isEnterMovesDownAfterEdit","delays","flashDelay","fadeDelay","animateCell","cssName","fullName","animationFullName","getCellFlashDelay","getCellFadeDelay","transition","cellId","cellPositionUtils","createId","cells","callValueFormatter","oldValueFormatted","valuesAreEqual","lockedClosedGroup","isOpenGroup","groupFootersEnabled","groupAlwaysShowAggData","isGroupSuppressBlankHeader","ignoreAggData","setDomData","DOM_DATA_KEY_CELL_CTRL","domEvent","onKeyPress","onMouseEvent","colIdx","getAriaColumnIndex","isSuppressNavigable","htmlElement","startRowEditing","updateRangeBordersIfRangeCount","setFocusedCell","isFirstRightPinned","isLastLeftPinned","cellFocused","isCellFocused","fullRowEdit","isColumnHoverHighlight","isHovered","wrapText","cellContextMenuEvent","EVENT_CELL_CONTEXT_MENU","onCellContextMenu","getCellRenderer","cbSelectionComponent","dndSourceComp","customElement","customRowDragComp","newComp","createRowDragComp","clientSideRowModelActive","RowContainerName","RowContainerType","animateIn","useAnimationFrameForCreate","paginationPage","getCurrentPage","setAnimateFlags","rowFocused","isRowFocused","rowLevel","rowCssClassCalculator","calculateRowLevel","setRowType","addListeners","setInitialRowTop","RowCtrl","rowComp","containerType","allRowGuis","leftGui","rightGui","FULL_WIDTH","fullWidthGui","centerGui","allNormalPresent","fullWidthPresent","initialiseRowComps","rowType","isKeepDetailRows","cached","rg","display","updateRowIndexes","setFocusedClasses","setStylesFromGridOptions","onRowSelected","updateColumnLists","slideRowIn","onTopChanged","fadeRowIn","businessKey","getRowBusinessKey","rowIdSanitised","businessKeySanitised","getInitialRowClasses","setRowId","setRowBusinessKey","isFullWidth","DOM_DATA_KEY_ROW_CTRL","createTask","addHoverFunctionality","setupFullWidth","isRowDragEntireRow","addRowDraggerToRow","addDestroyTask","executeProcessRowPostCreateFunc","getPinnedForContainer","createFullWidthParams","masterDetailModuleLoaded","getFullWidthDetailCellRendererDetails","getFullWidthGroupCellRendererDetails","getFullWidthLoadingCellRendererDetails","getFullWidthCellRendererDetails","showFullWidth","getCellCtrl","getProcessRowPostCreateFunc","eRow","ePinnedLeftRow","ePinnedRightRow","addRenderedRowListener","isStub","stub","isDetailCell","isFullWidthGroup","updateColumnListsImpl","updateColumnListsPending","prev","addCell","colInstanceId","prevCellCtrl","isCellEligibleToBeRemoved","centerCellCtrls","createCellCtrls","leftCellCtrls","rightCellCtrls","centerCols","getViewportCenterColumnsForRow","leftCols","getDisplayedLeftColumnsForRow","rightCols","getDisplayedRightColumnsForRow","cellControls","setCellCtrls","nextContainerPinned","REMOVE_CELL","focused","column_1","oldRowTopExists","editingRow","tryRefresh","getFullWidthCellRenderer","fullWidthSuccess","centerSuccess","leftSuccess","rightSuccess","onRowIndexChanged","updateExpandedCss","onRowNodeDataChanged","onRowNodeCellChanged","onRowNodeHighlightChanged","onRowNodeDraggingChanged","onUiLevelChanged","onPaginationPixelOffsetChanged","onDisplayedColumnsChanged","onVirtualColumnsChanged","EVENT_CELL_FOCUSED","onCellFocusChanged","EVENT_PAGINATION_CHANGED","onPaginationChanged","onModelUpdated","onColumnMoved","addListenersForCellComps","getAllCellCtrls","onCellChanged","postProcessCss","postProcessClassesFromGridOptions","postProcessRowClassRules","postProcessRowDragging","aboveOn","belowOn","wasAutoRowHeightEverActive","currentFullWidthComp","lastFocusedCell","getFocusedCell","currentFullWidthContainer","isFullWidthContainerFocused","nextEl","isFocused","preventScroll","removeCellCtrl","cellCtrlToRemove","onRowDblClick","onRowClick","onRowMouseDown","createRowEvent","agEvent","createRowEventWithSource","EVENT_ROW_DOUBLE_CLICKED","lastMouseDownOnDragger","EVENT_ROW_CLICKED","multiSelectKeyPressed","shiftKeyPressed","isSuppressRowClickSelection","multiSelectOnClick","isRowMultiSelectWithClick","rowDeselectionWithCtrl","eDetailGui","checkRowSizeFunc","resizeObserverDestroyFunc","addFullWidthRowDragging","newLevel","classToAdd_1","classToRemove_1","getPageFirstRow","getPageLastRow","refreshFirstAndLastRowStyles","newFirst","isFirstRowOnPage","newLast","isLastRowOnPage","firstRowOnPage","lastRowOnPage","cellEdits","edit","EVENT_ROW_VALUE_CHANGED","setEditingRow","EVENT_ROW_EDITING_STARTED","EVENT_ROW_EDITING_STOPPED","sourceRenderedCell","cssClasses","processClassesFromGridOptions","classStr","processRowClassRules","rowStyles","processStylesFromGridOptions","businessKeyForNodeFunc","getBusinessKeyForNodeFunc","rowContainerType","rowIsEven","fullWidthRow","rowStyleFuncResult","rowStyleFunc","getRowStyleFunc","createAriaLabel","isSuppressRowHoverHighlight","minPixel","applyPaginationOffset","maxPixel","heightFromFunc","lineHeight","EVENT_VIRTUAL_ROW_REMOVED","setupRemoveAnimation","roundRowTopToBounds","destroyCellCtrls","ctrls","currentPage","topPx","isRowPinned","afterPaginationPixels","getRealPixelPosition","setRowTopStyle","initialTop","initialTransform","isSuppressRowTransform","setTop","setTransform","rowIndexStr","headerRowCount","ariaRowIndex","RowContainerEventsFeature","addMouseListeners","mockContextMenuForIPad","addKeyboardEvents","processKeyboardEvent","processMouseEvent","getRowForEvent","getRenderedCellForEvent","handleContextMenuMouseEvent","rowCon","dispatchCellContextMenuEvent","anchorToElement","getGridBodyElement","processCellKeyboardEvent","processFullWidthRowKeyboardEvent","handlePageScrollingKey","doGridOperations","cellKeyDownEvent","EVENT_CELL_KEY_DOWN","cellKeyPressEvent","EVENT_CELL_KEY_PRESS","focusedCell","onKeyboardNavigate","code","A","onCtrlAndA","C","onCtrlAndC","V","onCtrlAndV","D","onCtrlAndD","Z","undoRedoService","redo","undo","Y","isRowsToRender","floatingStart","isEmptyPinnedTop","floatingEnd","rowEnd","isEmptyPinnedBottom","getPinnedBottomRowData","setCellRange","rowStartIndex","rowStartPinned","rowEndIndex","rowEndPinned","columnStart","columnEnd","clipboardService","copyToClipboard","ClipboardModule","isSuppressClipboardPaste","pasteFromClipboard","copyRangeDown","centerContainerCtrl","ViewportSizeFeature","gridBodyCtrl","listenForResize","onScrollbarWidthChanged","onCenterViewportResized","registerViewportResizeListener","checkViewportAndScrolls","isViewportVisible","centerWidth","bodyHeight","updateScrollVisibleService","checkBodyHeight","checkScrollLeft","updateScrollVisibleServiceImpl","horizontalScrollShowing","verticalScrollShowing","setScrollsVisible","isAlwaysShowHorizontalScroll","isViewportHScrollShowing","getViewportScrollLeft","setViewportPosition","SetPinnedLeftWidthFeature","onPinnedLeftWidthChanged","pinnedWidthService","getPinnedLeftWidth","SetPinnedRightWidthFeature","onPinnedRightWidthChanged","getPinnedRightWidth","SetHeightFeature","onHeightChanged","maxDivHeightScaler","getUiContainerHeight","heightString","DragListenerFeature","CenterWidthFeature","getDisplayedColumnsRightWidth","totalWidth","getRowContainerTypeForName","CENTER","TOP_CENTER","BOTTOM_CENTER","TOP_LEFT","BOTTOM_LEFT","TOP_RIGHT","BOTTOM_RIGHT","TOP_FULL_WIDTH","BOTTOM_FULL_WIDTH","ContainerCssClasses","ViewportCssClasses","WrapperCssClasses","RowContainerCtrl","forContainers","viewportSizeFeature","registerCenterRowContainerCtrl","registerLeftRowContainerCtrl","registerRightRowContainerCtrl","registerTopCenterRowContainerCtrl","registerTopLeftRowContainerCon","registerTopRightRowContainerCtrl","registerBottomCenterRowContainerCtrl","registerBottomLeftRowContainerCtrl","registerBottomRightRowContainerCtrl","names","eViewport","addPreventScrollWhileDragging","listenOnDomOrder","stopHScrollOnPinnedRows","allTopNoFW","allBottomNoFW","allMiddleNoFW","allNoFW","allMiddle","allCenter","allLeft","allRight","setContainerWidth","registerWithCtrlsService","onDisplayedRowsChanged","setDomOrder","setViewportHeight","isDragging","unsubscribeFromResize","amount","fullWithContainer","rowsThisContainer","getRowCtrls","embedFW","setRowCtrls","getTopRowCtrls","getBottomRowCtrls","GRID_BODY_TEMPLATE","GridBodyComp","setHeight","bodyViewportClassList","ct","ScrollVisibleService","updateImpl","centerRowCtrl","MouseEventService_1","gridInstanceSequence","MouseEventService","GRID_DOM_KEY","gridInstanceId","gridPanelHasScrolls","vRange","onPageDown","onPageUp","NavigationService","alt","rangeServiceShouldHandleShift","currentCell","getCellPositionForEvent","processed","PAGE_HOME","PAGE_END","onHomeOrEndKey","onCtrlUpDownLeftRight","navigateParams","scrollIndex","scrollType","scrollColumn","focusIndex","focusColumn","ensureColumnVisible","gridCell","pixelsInOnePage","getViewportHeight","pagingPixelOffset","currentPageBottomPixel","currentPageBottomRow","isAutoRowHeightActive","navigateToNextPageWithAutoHeight","navigateToNextPage","currentPageTopPixel","currentPageTopRow","up","rowPixelDiff","nextCellPixel","diff","isRowTallerThanView","navigateTo","getNextFocusIndexForAutoHeight","lastRowIndex","pixelSum","currentIndex","currentCellHeight","cellToFocus","cellNavigationService","getNextCellToFocus","homeKey","columnToSelect","backwards","tabToNextCellCommon","focusLastHeader","focusNextGridCoreContainer","cellOrRow","getCellByPosition","getRowByPosition","getRowCtrl","moveToNextEditingRow","moveToNextEditingCell","moveToNextCellNotEditing","getFocusedHeader","previousCell","previousPos","nextCell","findNextCellToFocusOn","previousEditable","nextEditable","rowsMatch","setFocusOutOnEditor","setFocusInOnEditor","cellPos","getRowPosition","tryToFocusFullWidthRow","previousPosition","nextPosition","getLastCellOfColSpan","getNextTabbedCell","getTabToNextCellFunc","userCell","previousCellPosition","nextCellPosition","floating","headerLen","focusHeaderPosition","headerPosition","cell","lookupRowNodeForCell","getPinnedTopRow","getPinnedBottomRow","allowUserOverride","hitEdgeOfGrid","isValidNavigateCell","getNavigateToNextCellFunc","normalisedPosition","focusPosition","currentCellFocused","fromBelow","focusEvent","colSpanningList","PopupEditorWrapper","DOM_KEY_POPUP_EDITOR_WRAPPER","addKeyDownListener","forceWrapper","isForceWrapper","refreshWrapper","actualElement","title","include","CellComp","eCellValue","cellEditorPopupWrapper","firstRender","controlWrapperChanged","refreshCellRenderer","destroyRenderer","createCellRendererInstance","insertValueWithoutCellRenderer","createCellEditorInstance","destroyEditor","checkboxSelectionComp","rowDraggingComp","providingControls","usingWrapper","putWrapperIn","takeWrapperOut","usingCellValue","putCellValueIn","takeCellValueOut","templateChanged","removeControls","addControls","describedByIds","createDndSource","createSelectionCheckbox","getCheckboxId","versionCopy","editorVersion","cellEditorPromise","afterCellEditorCreated","escapedValue","cellRendererGui","rendererVersion","hideEditorPopup","cellEditorGui","compClassAndParams","cellRendererClass","isAngularCompileRows","useTaskService","displayComponentVersionCopy","createCellRendererFunc","afterCellRendererCreated","cellRendererVersion","requestVersion","isCancelBeforeStart","isPopup","hackSayEditingInPopup","addPopupCellEditor","addInCellEditor","clearParentOfValue","ePopupGui","useModelPopup","positionToUse","getPopupPosition","positionParams","positionCallback","positionPopupOverComponent","onPopupEditorClosed","destroyEditorAndRenderer","getInitialStyle","domOrder","cellCtrls","rowId","RowComp","getInitialTransform","getInitialRowTop","setupDetailRowAutoHeight","setFullWidthRowComp","cellsToRemove","cellComps","newCellComp","cellCompsToRemove","destroyCells","elementsInOrder","destroyAllCells","cellsToDestroy","cp","fullWidthRowComponent","fullWidthCellRenderer","getCtrl","detach","HeaderRowType","getRowContainerCssClasses","template1","template2","templateFactory","RowContainerComp","rowCtrls","oldRows","rowComps","lastPlacedElement","existingRowComp","newRowComp","appendRow","oldRowComp","columnsToAggregate","columnsToGroup","columnsToPivot","BodyDropPivotTarget","clearColumnsList","isFunctionsReadOnly","dragColumns","isAnyFunctionActive","needToMoveLeft","needToMoveRight","centerContainer","MoveColumnFeature","ToolPanel","visibleState_1","visibleState","ensureIntervalCleared","allowedCols","xAdjustedForScroll","firstVisiblePixel","lastVisiblePixel","ensureIntervalStarted","fromEnter","mouseXNormalised","normaliseX","checkCenterForScrolling","hDirectionNormalised","normaliseDirection","dragSourceType","attemptMoveColumns","movingCols","gridCols","firstIndex","allMovingColumns","mouseX","draggingLeft","draggingRight","allMovingColumnsOrdered","sortColumnsLikeGridColumns","validMoves","calculateValidMoves","calculateOldIndex","firstValidMove","constrainDirection","HeaderCell","move","isMoveBlocked","isSuppressMovableColumns","suppressMovable","allDisplayedCols","getDisplayedColumns","allGridCols","movingDisplayedCols","otherDisplayedCols","otherGridCols","displayIndex","widthOfMovingDisplayedCols_1","leftColumn","numberComparator","displacedCol","isColumnHidden","movingIntervalId","intervalCount","failedMoveAttempts","moveInterval","pixelsToMove","pixelsMoved","scrollFeature","columnsThatCanPin","pinType","nudge","BodyDropTarget","eSecondaryContainers","leftRowContainerCtrl","getContainerElement","bottomLeftRowContainerCtrl","topLeftRowContainerCtrl","rightRowContainerCtrl","bottomRightRowContainerCtrl","topRightRowContainerCtrl","bottomCenterRowContainerCtrl","topCenterRowContainerCtrl","isAllowDragFromColumnsToolPanel","moveColumnFeature","bodyDropPivotTarget","currentDropListener","isDropColumnInPivotMode","CssClassApplier","getColumnClassesFromCollDef","toolPanelClass","classesOrFunc","classToUse","getClassParams","HeaderCellComp","getColumnGroupChild","setUserCompDetails","getUserCompInstance","headerComp","eResize","selectAllGui","getSelectAllGui","headerCompGui","headerCompVersion","destroyHeaderComp","setDragSource","HeaderGroupCellComp","addOrRemoveResizableCssClass","afterHeaderCompCreated","headerGroupComp","extraClass","COLUMN_GROUP","FLOATING_FILTER","HeaderRowComp","setHeaderCtrls","oldComps","headerComps","createHeaderComp","comps","headerCtrl","columnGroupChild","parentRowCtrl","AbstractHeaderCellCtrl","DOM_DATA_KEY_HEADER_CTRL","lastFocusEvent","unwrapUserComp","compAsAny","getFrameworkComponentInstance","HeaderNavigationDirection","detailGridInfoMap","destroyCalled","GridApi","overlayWrapperComp","sideBarComp","infiniteRowModel","alignedGridsService","gridInfo","CsvExportModule","csvCreator","getDataAsCsv","exportDataAsCsv","baseParams","getDefaultExportParams","exportMode","ExcelExportModule","getExcelExportMode","excelCreator","getFactoryMode","MULTI_SHEET","getDataAsExcel","exportDataAsExcel","setFactoryMode","getSheetDataForExcel","getMultipleSheetsAsExcel","exportMultipleSheetsAsExcel","setServerSideDatasource","eGrid","ariaProperty","setDatasource","isRowModelInfinite","isRowModelViewport","setViewportDatasource","immutableService","setPinnedTopRowData","setPinnedBottomRowData","getPinnedTopRowCount","getPinnedBottomRowCount","flashCells","redrawRows","deprecated_refreshFromIndex","MAP","refreshClientSideRowModel","paramsStep","EVERYTHING","stepsMapped","FILTER","aggregate","AGGREGATE","SORT","PIVOT","modelParams","isQueueEmpty","expandOrCollapseAll","expandAll","getToolPanelInstance","tryMulti","suppressEvents","selectIndex","deselectIndex","selectAllRowNodes","deselectAllRowNodes","showLoadingOverlay","showNoRowsOverlay","hideOverlay","getSelectedRows","getBestCostNodeSelection","getRenderedNodes","ensureNodeVisible","forEachLeafNode","forEachNodeAfterFilter","getFilterInstanceImpl","unwrapped","getFilterComponent","destroyFilter","statusBarService","getStatusPanel","getColumnDefs","setFilterModel","PROP_SUPPRESS_ROW_DRAG","PROP_SUPPRESS_MOVE_WHEN_ROW_DRAG","PROP_SUPPRESS_ROW_CLICK_SELECTION","addRowDropZone","activeDropTarget","removeDropTarget","getRowDropZone","PROP_HEADER_HEIGHT","PROP_FILL_HANDLE_DIRECTION","PROP_GROUP_HEADER_HEIGHT","PROP_FLOATING_FILTERS_HEIGHT","PROP_PIVOT_HEADER_HEIGHT","PROP_PIVOT_GROUP_HEADER_HEIGHT","isExternalFilterPresentFunc","PROP_IS_EXTERNAL_FILTER_PRESENT","doesExternalFilterPassFunc","PROP_DOES_EXTERNAL_FILTER_PASS","navigateToNextCellFunc","PROP_NAVIGATE_TO_NEXT_CELL","tabToNextCellFunc","PROP_TAB_TO_NEXT_CELL","tabToNextHeaderFunc","PROP_TAB_TO_NEXT_HEADER","navigateToNextHeaderFunc","PROP_NAVIGATE_TO_NEXT_HEADER","groupRowAggNodesFunc","PROP_GROUP_ROW_AGG_NODES","getGroupRowAggFunc","PROP_GET_GROUP_ROW_AGG","PROP_GET_BUSINESS_KEY_FOR_NODE","getChildCountFunc","PROP_GET_CHILD_COUNT","processRowPostCreateFunc","PROP_PROCESS_ROW_POST_CREATE","getRowNodeIdFunc","PROP_GET_ROW_NODE_ID","PROP_GET_ROW_ID","rowClassFunc","PROP_GET_ROW_CLASS","PROP_IS_FULL_WIDTH_CELL","isFullWidthRowFunc","PROP_IS_FULL_WIDTH_ROW","PROP_IS_ROW_SELECTABLE","PROP_IS_ROW_MASTER","PROP_POST_SORT","postSortRowsFunc","PROP_POST_SORT_ROWS","getDocumentFunc","PROP_GET_DOCUMENT","getContextMenuItemsFunc","PROP_GET_CONTEXT_MENU_ITEMS","getMainMenuItemsFunc","PROP_GET_MAIN_MENU_ITEMS","processCellForClipboardFunc","PROP_PROCESS_CELL_FOR_CLIPBOARD","sendToClipboardFunc","PROP_SEND_TO_CLIPBOARD","processCellFromClipboardFunc","PROP_PROCESS_CELL_FROM_CLIPBOARD","processSecondaryColDefFunc","PROP_PROCESS_TO_SECONDARY_COLDEF","processSecondaryColGroupDefFunc","PROP_PROCESS_SECONDARY_COL_GROUP_DEF","postProcessPopupFunc","PROP_POST_PROCESS_POPUP","defaultGroupOrderComparatorFunc","PROP_DEFAULT_GROUP_ORDER_COMPARATOR","initialGroupOrderComparatorFunc","PROP_INITIAL_GROUP_ORDER_COMPARATOR","getChartToolbarItemsFunc","PROP_GET_CHART_TOOLBAR_ITEMS","paginationNumberFormatterFunc","PROP_PAGINATION_NUMBER_FORMATTER","getServerSideStoreParamsFunc","PROP_GET_SERVER_SIDE_STORE_PARAMS","isServerSideGroupOpenByDefaultFunc","PROP_IS_SERVER_SIDE_GROUPS_OPEN_BY_DEFAULT","isApplyServerSideTransactionFunc","PROP_IS_APPLY_SERVER_SIDE_TRANSACTION","isServerSideGroupFunc","PROP_IS_SERVER_SIDE_GROUP","PROP_GET_SERVER_SIDE_GROUP_KEY","PROP_GET_ROW_STYLE","rowHeightFunc","PROP_GET_ROW_HEIGHT","isDisplayed","setSideBarPosition","openToolPanel","openedItem","PROP_SUPPRESS_CLIPBOARD_PASTE","isToolPanelShowing","PROP_GROUP_REMOVE_SINGLE_CHILDREN","PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN","removeGlobalListener","gridCtrl","getGridCtrl","destroyGridUi","warnIfDestroyed","deprecatedNoLongerUsed","addCellRange","getCurrentUndoStackSize","getCurrentRedoStackSize","chartService","getChartModels","chartId","getChartRef","getChartImageDataURL","createRangeChart","createCrossFilterChart","chartModel","chartContainer","restoreChart","createPivotChart","copySelectedRowsToClipboard","copySelectedRangeToClipboard","buttonElement","showMenuAfterMouseEvent","hideActiveMenu","ePopupParent","PROP_POPUP_PARENT","getCellRendererInstances","getCellEditorInstances","getEditingCells","addAggFunc","addAggFuncs","clear","serverSideTransactionManager","applyTransaction","applyTransactionAsync","retryLoads","flushAsyncTransactions","isSuppressChangeDetection","enable","batchUpdateRowData","skipRefresh","dataToRemove","refreshInfiniteCache","refreshCache","purgeInfinitePageCache","purgeInfiniteCache","purgeCache","route","purgeServerSideCache","refreshServerSideStore","purge","refreshStore","getStoreState","getInfiniteRowCount","isLastRowIndexKnown","maxRowFound","getCacheBlockState","rowNodeBlockLoader","getBlockState","getFirstDisplayedRow","getFirstVirtualRenderedRow","getLastDisplayedRow","getLastVirtualRenderedRow","isLastPageFound","getPageSize","getTotalPages","getMasterRowCount","goToNextPage","goToPreviousPage","goToFirstPage","goToLastPage","page","goToPage","PROP_ROW_CLASS","ariaEl","SetLeftFeature","setLeftFirstTime","suppressMoveAnimation","isSuppressColumnMoveAnimation","oldLeftExists","getOldLeft","animateInLeft","colOrGroup","getColumnOrGroup","oldActualLeft","actualLeft","indexColumn","HoverFeature","addMouseHoverListeners","HeaderFilterCellCtrl","setGui","filterExists","floatingFilterExists","setupWidth","setupLeft","setupHover","setupFocus","setupUserComp","setupSyncWithFilter","setupUi","showParentFilter","suppressFilterButton","eMenuIcon","nextFocusableEl","scrollToColumn","nextFocusableColumn","findNextColumnWithFloatingFilter","getParentRowCtrl","columModel","nextCol","wrapperHasFocus","focusInto","notFromHeaderWrapper","fromWithinHeader","fromTab","shouldFocusLast","setFocusedHeader","hovered","setLeftFeature","finalFilterParams","getDefaultFloatingFilterType","currentParentModel","floatingFilterComponentParams","getFloatingFilterCompDetails","filterComponent","syncWithFilter","onParentModelChanged","ResizeFeature","canResize","canAutosize","destroyResizeFuncs","removeResize","resize","autoSize","isSuppressAutoSize","finishedWithResizeFunc","horizontalResizeService","addResizeBar","eResizeBar","onResizeStart","onResizing","onResizeEnd","skipHeaderOnAutoSize_1","autoSizeColListener_1","autoSizeColumn","touchListener_1","addResize","addRefreshFunction","resizeAmount","resizeAmountNormalised","normaliseResizeAmount","resizeStartWidth","setColumnWidths","resizeWithShiftKey","dragChange","notPinningLeft","pinningRight","AgCheckbox","onCheckboxClick","getNextValue","dispatchChange","refreshSelectedClass","checkboxChangedEvent","filteredOnly","headerCheckboxSelectionFilteredOnly","SelectAllFeature","cbSelectAll","headerCellCtrl","showOrHideSelectAll","onModelChanged","onCbSelectAll","refreshSelectAllLabel","cbSelectAllVisible","isCheckboxSelection","checkRightRowModelType","updateStateOfCheckbox","selectionCount","notSelected","processingEventFromCheckbox","getSelectionCount","allSelected","getNextCheckboxState","ariaStatus","setAriaDescriptionProperty","refreshAriaDescription","selectedCount","notSelectedCount","headerCheckboxSelection","HeaderCellCtrl","getColDefVersion","updateState","setupMovingCss","setupMenuClass","setupSortableClass","addColumnHoverListener","setupFilterCss","setupColId","setupClassesFromColDef","addActiveHeaderMouseListeners","setupSelectAll","refreshAria","onNewColumnsLoaded","onColumnValueChanged","onColumnRowGroupChanged","onColumnPivotChanged","lookupUserCompDetails","userCompDetails","createParams","getHeaderCompDetails","sortable","menuEnabled","showColumnMenu","showColumnMenuAfterButtonClick","setSortForColumn","eGridHeader","selectAllFeature","getCheckboxGui","onEnterKeyPressed","setActiveHeader","headerTooltip","refreshFunctions","refreshHeaderClasses","goa","classes","getHeaderClassesFromColDef","oldClasses","userHeaderClasses","dragSourceElement","draggable","moveDragSource","createDragItem","setMoving","colDefVersionNow","isMenuEnabled","suppressMenu","calculateDisplayName","workOutDraggable","refreshHeaderComp","newCompDetails","attemptHeaderCompRefresh","checkDisplayName","isMenuVisible","updateSortableCssClass","refreshAriaSort","ariaDescriptionProperties","descriptionArray","refreshAriaMenu","GroupResizeFeature","calculateInitialValues","takeFromGroup","getDisplayedGroupAfter","takeFromLeafCols","resizeTakeFromCols","resizeTakeFromStartWidth","resizeTakeFromRatios","normaliseDragChange","resizeColumns","preferredSize","getPreferredWidthForColumnGroup","resizeCols","resizeRatios","leafCols","GroupWidthFeature","addListenersToChildrenColumns","onDisplayedChildrenChanged","removeListenersOnChildrenColumns","widthChangedListener","removeChildListenersFuncs","HeaderGroupCellCtrl","getDisplayNameForColumnGroup","addClasses","addAttributes","groupResizeFeature","getHeaderGroupCompDetails","providedColGroup","refreshExpanded","eHeaderGroup","isSuppressMoving","getDragItemForGroup","allColumnsOriginalOrder","allColumnsCurrentOrder","childSuppressesMoving","HeaderRowCtrl","onColumnResized","headerCellCtrls","getWidthForRow","getContainerWidth","groupHeight","sizes","numberOfFloating","hasFloatingFilters","getPivotGroupHeaderHeight","getPivotHeaderHeight","numberOfGroups","getFloatingFiltersHeight","oldCtrls","getColumnsInViewport","isEmptyGroup","idOfChild","oldCtrl","isHeaderWrapperFocused","ctrlsToDisplay","getColumnsInViewportPrintLayout","getColumnsInViewportNormalLayout","actualDepth","getActualDepth","getVirtualHeaderGroupRow","HeaderRowContainerCtrl","setupCenterWidth","setupPinnedWidth","setupDragAndDrop","registerHeaderContainer","dropContainer","bodyDropTarget","keepColumns","sequence","focusedHeaderPosition","getFocusHeaderToUseAfterRefresh","groupRowCount","groupsRowCtrls","refreshColumnGroups","columnsRowCtrl","COLUMN","refreshColumns","destroyPreviousComp","filtersRowCtrl","rowIndexMismatch","refreshFilters","allCtrls","getAllCtrls","setCtrls","restoreFocusOnHeader","setCenterWidth","setContainerTransform","pinningLeft","hidden","widthWithPadding","setPinnedContainerWidth","getHeaderCellCtrl","focusHeader","HeaderRowContainerComp","selectAndSetTemplate","eCenterContainer","pinnedLeft","pinnedRight","PINNED_LEFT_TEMPLATE","PINNED_RIGHT_TEMPLATE","CENTER_TEMPLATE","eRowContainer","prevGui","oldRowComps","headerRowComps","rowCompsList","ctrlId","existingComp","appendEnsuringDomOrder","destroyRowComp","HeaderNavigationService","centerHeaderContainer","getRowType","fromHeader","rowLen","isUp","nextRow","nextFocusColumn","skipColumn","currentRowType","getHeaderRowType","nextHeader","normalisedDirection","focusedHeader","headerPositionUtils","findHeader","focusNextHeaderRow","nextRowIndex","findColAtEdgeForHeaderRow","columnToScrollTo","GridHeaderCtrl","onPivotModeChanged","setupHeaderHeight","registerGridHeaderCtrl","totalHeaderHeight","px","setHeightAndMinHeight","navigateHorizontally","navigateVertically","clearFocusedHeader","GridHeaderComp","addContainer","HorizontalResizeService","dragStartX","setResizeIcons","MouseEvent","setResizeCursor","disableUserSelect","resetIcons","StandardMenuFactory","showPopup","tabListener","trapFocusWithin","setMenuVisible","isKeyboardEvent","KeyboardEvent","focusableEl","findTabbableParent","TabbedLayout","getTemplate","addItem","eHeader","currentPosition","activeItem","nextItem","showItemWrapper","eHeaderButton","eBody","isFocusUnderManagedComponent","afterAttachedParams","titleLabel","tabbedItem","itemWrapper","onItemClicked","lastScrollListener","bodyPromise","onlyUnmanaged","isKeyboardMode","afterAttachedCallback","keepScrollPosition","scrollableContainer_1","getScrollableContainer","tabbedItemScrollMap","scrollPosition_1","onActiveItemClicked","simpleHttpRequest","httpRequest","XMLHttpRequest","url","send","onreadystatechange","readyState","responseText","ServerSideTransactionResultStatus","ResizeObserverService","debouncedCallback","suppressResize","isSuppressBrowserResizeObserver","ResizeObserver","resizeObserver","observe","disconnect","useBrowserResizeObserver","widthLastTime","heightLastTime","running","periodicallyCheckWidthAndHeight","doNextPolyfillTurn","usePolyfill","polyfillFunctions","schedulePolyfill","polyfillScheduled","sorted","AnimationFrameService","scrollGoingDown","lastScrollTop","useAnimationFrame","task","verifyAnimationFrameOn","taskItem","createOrder","taskCount","addTaskToList","cancelledTasks","taskList","sortDirection","destroyTasks","millis","p1TaskList","createTasksP1","p1Tasks","p2TaskList","createTasksP2","p2Tasks","frameStart","noMaxMillis","executeAnimationFrameScroll","sortTaskList","requestFrame","stopTicking","ticking","executeFrame","requestAnimationFrame","webkitRequestAnimationFrame","pending","isOn","PositionableFeature","getWidth","getHeight","offsetElement","centered","forcePopupParentAsOffsetParent","setOffsetParent","computedMinHeight","computedMinWidth","boundaryEl","findBoundaryElement","offsetParentComputedStyles","paddingWidth","paddingHeight","refreshSize","center","top_1","positioned","movable","moveElement","moveElementDragListener","onMoveStart","onMove","onMoveEnd","clearResizeListeners","addResizers","removeResizers","topLeft","topRight","bottomRight","bottomLeft","side","resizerEl","getResizerElement","onResize","resizeListeners","pointerEvents","isPercent","elRect","parentRect","yPosition","parentTop","lastSize","xPosition","positionPopup","setPosition","dragStartPosition","anywhereWithin","topBuffer","xDiff","yDiff","movementX","shouldSkipX","movementY","shouldSkipY","boundaryElRect","skipX","skipY","resizerMap","resizersAdded","resizers","createResizeMap","initialisePosition","currentResizer","applySizeToSiblings","isResizing","updateDragStartPosition","getSiblings","currentEl","isFlex","nextHeight","nextWidth","vertical","containerToFlex","isHorizontal","isVertical","offsetLeft","offsetTop","oldWidth","skipWidth","oldHeight","skipHeight","getMinSizeOfSiblings","calculateTopBuffer","AutoWidthCalculator","eHeaderCell","getHeaderCellForColumn","getAllCellsForColumn","addElementsToContainerAndGetWidth","eDummyContainer","eBodyContainer","cloneItemIntoDummy","dummyContainerWidth","getAutoSizePadding","getHtmlElementForColumnHeader","eCellClone","cloneNode","eCloneParent","eCloneParentClassList","RowRenderer","initialise","onPageLoaded","onPinnedRowDataChanged","onDomLayoutChanged","registerCellEventListeners","initialiseCache","redrawAfterModelUpdate","countProp","getKeepDetailRowsCount","cachedRowCtrls","RowCtrlCache","allRowCtrls","liveList","rowCtrlsByRowIndex","zombieList","zombieRowCtrls","cachedList","getEntries","getFullWidthRowCtrls","onFullWidthRowFocused","onFlashCells","EVENT_RANGE_SELECTION_CHANGED","refreshListenersToColumnsForCellComps","removeGridColumnListeners","destroyFuncsForColumnListeners","forEachCellWithThisCol","leftChangedListener","firstRightPinnedChangedListener","lastLeftPinnedChangedListener","destroyRows","firstRenderedRow","lastRenderedRow","rowIndexesToRemove","removeRowCtrls","recycleRows","onlyBody","getAllRowCtrls","getCellElement","refreshFloatingRows","topRowCtrls","getPinnedTopRowData","bottomRowCtrls","destroyFirstPass","destroySecondPass","renderedRow","partialRefresh","indexesToRemove","getRenderedIndexesForRowNodes","suppressKeepFocus","getFocusCellToUseAfterRefresh","cellDomData","rowDomData","getLockOnRefresh","getCellToRestoreFocusToAfterRefresh","updateContainerHeights","scrollToTopIfNewData","rowsToRecycle","removeAllRowComps","focusedCellRecycled","rowIndexEqual","pinnedEqual","isFocusedCellGettingRecycled","redraw","refreshFloatingRowComps","dispatchDisplayedRowsChanged","restoreFocusedCell","releaseLockOnRefresh","scrollToTop","suppressScrollToTop","isSuppressScrollOnNewData","setModelHeight","containerHeight","refreshInProgress","getCellCtrls","refreshCellParams","refreshShouldDestroy","fullWidthRowCtrl","refreshFullWidth","renderer","rowIdsMap","colIdsMap","mapRowNodes","processRow","isRowInMap","stubNodeIndexes","nodesByIdMap","rowsToRemove","indexToRemove","indexesToDraw","indexesToDrawMap","indexesNotToDraw","checkRowToDraw","indexStr","doNotUnVirtualiseRow","afterScroll","updateOffset","workOutFirstAndLastRowsToRender","calculateIndexesToDraw","removeRowCompsNotToDraw","createOrUpdateRowCtrl","destroyRowCtrls","updateAllRowCtrls","updateRowCount","isPinningRight","redrawFullWidthEmbeddedRows","fullWidthCtrl","rowNodesMap","rowNodesToRefresh","selectivelyRefreshing","idsToRefresh","parentId","createRowCon","rowCtrlsMap","executeInAWhileFuncs","nodeId","isCacheable","addRow","bufferPixels","getRowBufferInPixels","isSuppressRowVirtualisation","rowHeightsChanged","firstPixel","lastPixel","pageFirstPixel","pageLastPixel","divStretchOffset","bodyVRange","bodyTopPixel","bodyBottomPixel","ensureAllRowsInRangeHaveHeightsCalculated","firstRowIndex","pageFirstRow","pageLastRow","rowLayoutNormal","suppressRowCountRestriction","isSuppressMaxRenderedRowRestriction","rowBufferMaxSize","firstDiffers","lastDiffers","EVENT_VIEWPORT_CHANGED","EVENT_FIRST_DATA_RENDERED","dispatchEventOnce","ensureRowHeightsValid","rowHasFocus","isRowNodeFocused","rowIsEditing","rowIsDetail","isRowPresent","rowCtrlFromCache","renderedRows","rowPosition","rowComponent","gridRow","startIndex","endIndex","blockAfterViewport","maxCount","entriesMap","entriesList","setCached","rowCtrlToDestroy","removeFromCache","rowNodeId","ValueFormatterService","suppliedFormatter","useFormatterFromColumn","pinnedRowValueFormatter","valueFormatter","PinnedRowModel","pinnedTopRows","pinnedBottomRows","createNodesFromData","allData","nextRowTop_1","idPrefix","ID_PREFIX_TOP_PINNED","ID_PREFIX_BOTTOM_PINNED","getTotalHeight","lastNode","DIRECTION","keepingColumns","nodeIdsToColumns","mapToItems","pathRoot","pathItem","depthFirstSearchChangedPath","traverseEverything","depthFirstSearchEverything","traverseLeafNodes","newEntryCount","newEntry","thisItem","parentItem","createPathItems","linkPathItems","populateColumnsMap","colsForThisNode","RowNodeBlock","STATE_WAITING_TO_LOAD","STATE_LOADING","loadFromDatasource","isRequestMostRecentAndLive","STATE_FAILED","processServerFail","dispatchLoadCompleted","successCommon","thisIsMostRecentRequest","weAreNotDestroyed","STATE_LOADED","processServerResult","success","EVENT_LOAD_COMPLETE","block","RowNodeBlockLoader","maxConcurrentRequests","getMaxConcurrentDatasourceRequests","getBlockLoadDebounceMillis","checkBlockToLoadDebounce","performCheckBlocksToLoad","blocks","loadComplete","checkBlockToLoad","activeBlockLoadsCount","RowNodeBlockLoader_1","BLOCK_LOADER_FINISHED_EVENT","printCacheStatus","blockToLoad","getState","isLogging","PaginationProxy","isPaginateChildRows","onPaginationPageSizeChanged","calculatePages","modelUpdatedEvent","paginationChangedEvent","pixelOffset","topRowBounds","bottomRowBounds","topDisplayedRowIndex","bottomDisplayedRowIndex","getRowBounds","pageSize","pageNumber","getPageForIndex","lastPage","totalPages","getPaginationPageSize","setPageSize","calculatePagesAllRows","calculatePagesMasterRowsOnly","calculatedPagesNotActive","setPixelOffset","masterRowCount","getTopLevelRowCount","setZeroRows","masterLastRowIndex","masterPageStartIndex","masterPageEndIndex","getTopLevelRowDisplayedIndex","firstIndexNotToShow","maxRowIndex","StylingService","onApplicableClass","onNotApplicableClass","processStaticCellClasses","classRules","classNames","classesToApply","classesToRemove","resultOfRule","rule","this_1","singleClass","classOrClasses","cssClassItem","AgRadioButton","onChange","AgToggleButton","AgInputTextField","preventDisallowedCharacters","pattern","RegExp","clipboardData","getData","AgInputTextArea","AgInputNumberField","floatedValue","normalizeValue","precision","adjustPrecision","floatString","AgInputRange","setMinValue","setMaxValue","setStep","AgSlider","eSlider","eventChanged","textValue","sliderValue","minValue","setMin","maxValue","setMax","AgAngleSelect","dragListener","eParentCircle","parentCircleRect","calculateAngleDrag","eAngleValue","setInputWidth","degrees","floatValue","updateNumberInput","normalizeNegativeValue","normalizedValue","radians","eChildCircle","centerX","centerY","cos","sin","offsetX","offsetY","atan2","toDegrees","radius","sqrt","positionChildCircle","toRadians","getRadius","setOffsetX","setOffsetY","calculatePolar","dx","dy","PI","calculateCartesian","radiansValue","normalizeAngle180","AgColorPanel","picker","initRecentColors","spectrumVal","onSpectrumDraggerDown","onSpectrumDraggerMove","spectrumHue","onSpectrumHueDown","onSpectrumHueMove","spectrumAlpha","onSpectrumAlphaDown","onSpectrumAlphaMove","recentColors","onRecentColorClick","spectrumValRect","spectrumHueRect","spectrumAlphaRect","refreshSpectrumRect","isSpectrumDragging","moveDragger","refreshHueRect","isSpectrumHueDragging","moveHueSlider","refreshAlphaRect","isSpectrumAlphaDragging","moveAlphaSlider","valRect","setSpectrumValue","hueRect","slider","spectrumHueSlider","sliderRect","alphaRect","spectrumAlphaSlider","color","fromHSB","spectrumColor","rgbaColor","fromString","colorChanged","backgroundColor","spectrumDragger","saturation","brightness","dragger","draggerRect","innerHtml","currentColor","maxRecentColors","addRecentColor","AgPanel","closable","hideTitleBar","_b","_c","positionableFeature","setBodyComponent","eTitleBar","setClosable","eTitleBarButtons","eContentWrapper","isPositioned","renderComponent","closeButtonComp","CLOSE_BTN_TEMPLATE","addTitleBarButton","onBtClose","bodyComponent","eTitle","AgDialog","maximizable","bringPopupToFront","setMovable","setMaximizable","setResizable","alwaysOnTop","getPosition","isMaximized","lastPosition","refreshMaximizeIcon","maximizeIcon","minimizeIcon","maximizeListeners","destroyListener","resizeListenerDestroy","maximizeButtonComp","clearMaximizebleListeners","isMaximizable","toggleMaximize","AgColorPicker","eGuiRect","colorDialog","colorPanel","isDestroyingPicker","AgGroupComponent","enabled","suppressEnabledCheckbox","suppressOpenCloseIcons","alignItems","initialItems","cbGroupEnabled","setEnabled","setAlignItems","hideEnabledCheckbox","hideOpenCloseIcons","setupExpandContract","refreshAriaStatus","refreshChildDisplay","eGroupClosedIcon","eGroupOpenedIcon","toggleGroupExpand","showIcon","eToolbar","newCls","EVENT_EXPANDED","EVENT_COLLAPSED","skipToggle","refreshDisabledStyles","eTopGuard","eBottomGuard","focusInnerElement","providedFocusInnerElement","providedFocusIn","providedFocusOut","providedShouldStopEventPropagation","providedOnTabKeyDown","providedHandleKeyDown","TabGuardCtrl","activateTabGuards","guard","onFocus","hasAttribute","getGridTabIndex","skipTabGuardFocus","fromBottom","deactivateTabGuards","tabGuardsAreActive","getNextFocusableElement","focusable","findFocusableElements","tabGuardToFocus","TabGuardComp","createTabGuard","tabGuards","tabGuard","addTabGuards","tabGuardCtrl","topTabGuard","bottomTabGuard","forceFocusOutOfContainer","AgMenuList","initialiseTabGuard","getParentComponent","parentGui","closeIfIsChild","handleNavKey","topMenu","findTopMenu","activeMenuItem","deactivate","menuItems","menuItemOrString","addSeparator","menuItemDef","menuItem","AgMenuItemComponent","isAnotherSubMenuOpen","isSubMenuOpen","EVENT_MENU_ITEM_SELECTED","EVENT_MENU_ITEM_ACTIVATED","currentItem","activate","nextParent","findNextItem","openChild","closeSubMenu","openSubMenu","foundCurrent","clearActiveItem","wrappedComponent","AgMenuPanel","closePanel","getClassName","addIcon","addName","addShortcut","addSubMenu","addTooltip","onItemSelected","activateFirstItem","subMenu","destroySubMenu","currentLevel","nextLevel","childMenu_1","addMenuItems","cancelDeactivate","menuPanel","subMenu_1","subMenuGui_1","mouseEvent_1","mouseEnterListener_1","positionPopupForMenu","subMenuIsOpen","hideSubMenu","cancelActivate","onItemActivated","isCompact","shortcut","activateTimeoutId","deactivateTimeoutId","ACTIVATION_DELAY","suffix","FocusService","controller","docControllers","FocusService_1","instancesMonitored","toggleKeyboardMode","newControllers","currentGridCore","isKeyboardActive","keyboardModeActive","controllersForDoc","clearFocusedCellListener","onColumnEverythingChanged","addKeyboardModeEvents","unregisterGridCompController","gridCompController","removeKeyboardModeEvents","focusedCellPosition","colFromColumnModel","isSuppressFocusAfterRefresh","isDomDataMissingInHierarchy","eBrowserCell","ePointer","gridColumn","focusedColumn","focusedHeaderRowIndex","getTabToNextHeaderFunc","previousHeaderPosition","nextHeaderPosition","getNavigateToNextHeaderFunc","focusGridView","exclude","focusableString","FOCUSABLE_SELECTOR","excludeString","excludeNodes","focusableElements","toFocus","onlyManaged","activeEl","nextIndex","managedContainers","limit","getLastRow","getFirstRow","focusNextInnerContainer","isDetailGrid","LoadingType","instanceIdSeq","PopupService","popupList","AG_KEYBOARD_FOCUS","sourceRect","getParentRect","keepXYWithinBounds","maxX","xRightPosition","xLeftPosition","nudgeX","callPostProcessPopup","alignSide","getPostProcessPopupFunc","horizontal","bounds","borderTopWidth","borderLeftWidth","borderRightWidth","borderBottomWidth","sizeProperty","anchorProperty","offsetProperty","scrollPositionProperty","docElement","documentRect","isBody","offsetSize","sizeOfParent","initialDiffTop","initialDiffLeft","lastDiffTop","lastDiffLeft","leftPx","pRect","sRect","currentDiffTop","newTop","currentDiffLeft","newLeft","intervalId","click","destroyPositionTracker","stopAnchoringPromise","setAlwaysOnTop","popupHidden","hidePopupOnKeyboardEvent","hidePopupOnMouseEvent","hidePopupOnTouchEvent","popupParams","isEventFromCurrentPopup","isEventSameChainAsOriginalEvent","originalMouseEvent","keepPopupPositionedRelativeTo","isAnchored","indexOfThisChild","mouseEventOrTouch","screenX_1","screenX","screenY_1","screenY","xMatch","yMatch","getWrapper","popupLen","alwaysOnTopList","onTopLength","innerEls","innerElsScrollMap","listName","VirtualList","getItemHeight","addResizeObserver","setAriaProperties","drawVirtualRows","destroyObserver","focusRow","lastFocusedRowIndex","navigate","rowNumber","getListItemHeight","viewportTopPixel","viewportScrolledBeforeRow","componentCreator","isDestroyed","clearVirtualRows","removeRow","ensureRowsRendered","insertRow","isRowSelected","OUTSIDE_ANGULAR_EVENTS","isOutsideAngular","VanillaFrameworkOverrides","useCapture","isPassive","capture","global","CellNavigationService","ctrlPressed","getNextCellToFocusWithCtrlPressed","getNextCellToFocusWithoutCtrlPressed","upKey","downKey","leftKey","getCellAbove","getCellBelow","getCellToLeft","getCellToRight","isCellGoodToFocusOn","lastCell","colToLeft","colToRight","isLastRowInContainer","rowBelow","getRowBelow","getLastBodyCell","getLastFloatingTopRow","rowAbove","getRowAbove","getNextTabbedCellBackwards","getNextTabbedCellForwards","newRowIndex","newFloating","newColumn","isRowInPage","AlignedGridsService","consuming","otherGrids","getAlignedGrids","otherGridOptions","alignedGridService","__getAlignedGridService","fireEvent","onColumnEvent","onScrollEvent","onEvent","colEvent","processColumnEvent","groupOpenedEvent","processGroupOpenedEvent","masterColumnGroup","otherColumnGroup","masterColumn","otherColumn","masterColumns","getMasterColumns","movedEvent","destColState","visibleEvent","pinnedEvent","resizedEvent_1","grid","setAlwaysShowVerticalScroll","SelectionService","selectedRows","getRootNode","calculateSelectedFromChildren","rowNodeToKeepSelected","groupsToRefresh","otherRowNode","syncInOldRowNode","syncInNewRowNode","setSelectedInitialValue","topLevelNodes","getTopLevelNodes","traverse","l","maybeGroup","justFiltered","rowModelClientSide","deselectNode","selectNode","ColumnApi","getColumnGroup","resetColumnState","getColumnGroupState","resetColumnGroupState","setColumnVisible","setColumnPinned","getAllPrimaryColumns","getViewportColumns","moveColumnByIndex","moveRowGroupColumn","setColumnAggFunc","getSecondaryPivotColumn","setValueColumns","getValueColumns","removeValueColumn","addValueColumn","setRowGroupColumns","removeRowGroupColumn","addRowGroupColumn","setPivotColumns","removePivotColumn","addPivotColumn","getPivotColumns","getDisplayedTreeLeft","getDisplayedTreeCentre","getDisplayedTreeRight","autoSizeAllColumns","setSecondaryColumns","getSecondaryColumns","columnState","setColumnState","ValueService","cellExpressions","isEnableCellExpressions","initialised","EVENT_CELL_VALUE_CHANGED","callColumnCellValueChangedHandler","forFilter","groupDataExists","aggDataExists","filterValueGetter","executeFilterValueGetter","executeValueGetter","isFieldContainsDots","cellValueGetter","openedGroup","getOpenedGroup","isShowOpenedGroup","newValueHandler","valueSetter","valueWasDifferent","setValueUsingField","resetQuickFilterAggregateText","onCellValueChanged","fieldPieces","fieldPiece","getValueCallback","valueFromCache","keyCreator","ExpressionService","expressionOrFunc","evaluateExpression","createExpressionFunction","javaScriptFunction","expressionToFunctionCache","functionBody","createFunctionBody","theFunction","Function","TemplateService","templateFromCache","templateCache","callbackList","waitingCallbacks","that","client","onload","handleHttpResult","httpResult","response","LoggerFactory","logging","isDebug","Logger","isLoggingFunc","GridCtrl","eGridHostDiv","stampTopLevelGridCompWithGridInstance","addRtlSupport","addOrRemoveKeyboardFocusClass","onGridSizeChanged","registerGridCtrl","SideBarModule","StatusBarModule","EnterpriseCoreModule","EVENT_GRID_SIZE_CHANGED","setRtlClass","setCursor","setUserSelect","focusableContainers","getFocusableContainers","nextIdx","lastColumn","focusFirstHeader","GridComp","userSelect","webkitUserSelect","cursor","createTemplate","insertGridIntoDom","eRootWrapperBodyClassList","eRootWrapperBody","showDropZones","showSideBar","showStatusBar","showWatermark","gridBodyComp","SortController","nextDirection","getNextSortDirection","isAlwaysMultiSort","isSuppressMultiSort","clearSortBarThisColumn","updateSortIndex","lastColToChange","allSortedCols","sortedCols","columnToSkip","columnToClear","getSortingOrder","SortController_1","DEFAULT_SORTING_ORDER","notInArray","lastItemInArray","allColumnsIncludingAuto","columnsWithSorting","allColsIndexes","iA","iB","ColumnHoverService","selectedColumns","ColumnAnimationService","ensureAnimationCssClassPresent","flush","executeNextFuncs","executeLaterFuncs","animationThreadCount","animationThreadCountCopy","nowFuncs","waitFuncs","AutoGroupColService","doingMultiAutoColumn","rowGroupCol","createOneAutoGroupColumn","defaultAutoColDef","generateDefaultColDef","AutoGroupColService_1","GROUP_AUTO_COLUMN_BUNDLE_ID","getAutoGroupColumnDef","userDef","cellRendererFramework","cellRendererSelector","PaginationAutoPageSizeService","centerRowContainerCon","onBodyHeightChanged","checkPageSize","isPaginationAutoPageSize","notActive","getViewportSizeFeature","newPageSize","ValueCache","isValueCache","neverExpires","isValueCacheNeverExpires","cacheVersion","__cacheVersion","__cacheData","ChangeDetectionService","SOURCE_PASTE","doChangeDetection","onlyChangedColumns","isAggregateOnlyChangedColumns","addParentNode","AgComponentUtils","jsCompFunc","metadata","functionAdapter","Adapter","callbackResult","candidate","ComponentMetadataProvider","componentMetaData","dateComponent","detailCellRenderer","adaptCellRendererFunction","headerGroupComponent","loadingCellRenderer","loadingOverlayComponent","noRowsOverlayComponent","floatingFilterComponent","floatingFilterWrapperComponent","groupRowRenderer","statusPanel","tooltipComponent","HARD_CODED_SIZES","headerCellMinWidth","listItemHeight","BASE_GRID_SIZE","MAT_GRID_SIZE","BALHAM_GRID_SIZE","ALPINE_GRID_SIZE","SASS_PROPERTY_BUILDER","CALCULATED_SIZES","Environment","useTheme","calculatedValue","prevEl","currentClass","currentDiv","sizeName","getTheme","themeFamily","reg","themeMatch","newTheme_1","RowContainerHeightService","maxDivHeight","stretching","newScrollY","newBodyHeight","getUiBodyHeight","scrollY","uiBodyHeight","calculateOffset","setUiContainerHeight","pixelsToShave","modelHeight","uiContainerHeight","maxScrollY","scrollPercent","setDivStretchOffset","newOffset","newOffsetFloor","clearOffset","modelPixel","SelectableService","recurseDown","nextChildrenFunc","rowSelectable","PaginationComp","btFirst","btPrevious","btNext","btLast","onBtFirst","onBtPrevious","onBtNext","onBtLast","enableOrDisableButtons","updateRowLabels","setCurrentPageLabel","setTotalLabels","previousAndFirstButtonsDisabled","pagesExist","toDisplay","lbCurrent","formatNumber","getPaginationNumberFormatterFunc","strPage","strTo","strOf","strFirst","strPrevious","strNext","strLast","nextButtonDisabled","lastButtonDisabled","toggleButtonDisabled","zeroPagesToDisplay","isZeroPagesToDisplay","onLastPage","lbFirstRowOnPage","isLoading","lbLastRowOnPage","lastPageFound","setTotalLabelsToZero","lbTotal","lbRecordCount","moreText","OverlayWrapperComponent","overlayWrapperClassList","eOverlayWrapper","EVENT_ROW_DATA_CHANGED","onRowDataChanged","EVENT_ROW_DATA_UPDATED","registerOverlayWrapperComp","loadingType","Loading","NoRows","isSuppressLoadingOverlay","getLoadingOverlayCompDetails","showOverlay","isSuppressNoRowsOverlay","getNoRowsOverlayCompDetails","workItem","inProgress","setWrapperTypeClass","destroyActiveOverlay","activeOverlay","destroyRequested","manuallyDisplayed","showOrHideOverlay","RowPositionUtils","pinnedBottomCount","pinnedTopCount","rowA","rowB","CellPositionUtils","createIdFromValues","cellA","cellB","colsMatch","floatingMatch","indexMatch","cellValueChanges","initialRange","finalRange","UndoRedoAction","maxStackSize","actionStack","UndoRedoStack","DEFAULT_STACK_SIZE","eventCell","isCellEditing","activeCellEdit","isRowEditing","activeRowEdit","isPasting","isFilling","cellValueChange","undoStack","redoStack","UndoRedoService","isUndoRedoCellEditing","undoRedoLimit","getUndoRedoCellEditingLimit","addRowEditingListeners","addCellEditingListeners","addPasteListeners","addFillListeners","clearStacks","getCurrentStackSize","undoAction","processAction","FillUndoRedoAction","processRangeAndCellFocus","redoAction","valueExtractor","currentRow","startColumn","setLastFocusedCell","cellRangeParams","clearRangeSelection","pushActionsToUndoStack","EVENT_PASTE_START","EVENT_PASTE_END","HeaderPositionUtils","nextColumn","getGroupMethod","getColMethod","ColumnDefFactory","colGroupDefs","addToResult","childDef","createDefFromColumn","parentDef","existingParentDef","createDefFromGroup","defCloned","colDefCloned","RowCssClassCalculator","extraCssClass","preProcessRowClassRules","rowCls","getRowClassFunc","rowClassParams","RowNodeSorter","sortedRowNodes","sortedNodeA","sortedNodeB","sortOption","isInverted","comparatorResult","providedComparator","getComparator","isAccentedSort","comparatorOnCol","groupLeafField","primaryColumn","CtrlsService","centerHeaderRowContainerCtrl","leftHeaderRowContainerCtrl","rightHeaderRowContainerCtrl","fakeHScrollCtrl","gridHeaderCtrl","p_1","createReadyParams","readyCallbacks","checkReady","CtrlsService_1","NAME","CtrlsFactory","meta","registry","controllerName","controllerClass","ControllerClass","FakeHScrollCtrl","spacerWidthsListener","setFakeHScrollSpacerWidths","hideAndShowInvisibleScrollAsNeeded","addActiveListenerToggles","registerFakeHScrollCtrl","setScrollVisible","vScrollShowing","rightSpacing","scrollOnRight","setRightSpacerFixedWidth","includeRightSpacerScrollerCss","leftSpacing","setLeftSpacerFixedWidth","includeLeftSpacerScrollerCss","hScrollShowing","isSuppressHorizontalScroll","scrollContainerSize","setContainerHeight","FakeHScrollComp","eRightSpacer","eLeftSpacer","PinnedWidthService","checkContainerWidths","RowNodeEventThrottle","dispatchExpandedDebounced","onRowGroupOpened","GridCoreCreator","gridComp","Grid","createUi","acceptChanges","registeredModules","getRegisteredModules","createBeansList","createProvidedBeans","contextLogger","getBean","registerModuleUserComponents","registerStackComponents","registerControllers","setColumnsAndData","dispatchGridReadyEvent","isEnterprise","controllers","ctrlsFactory","agStackComponents","createAgStackComponentsList","setupComponents","passedViaConstructor","registered","allModules","mapNames","addModule","mod","currentModule","dependantModules","extractModuleEntity","userComponents","compMeta","registerDefaultComponent","seed","moduleAgStackComps","rowModelClass","getRowModelClass","moduleBeans","beansNoDuplicates","moduleEntities","extractor","readyEvent","EVENT_GRID_READY","rowModelClasses","InfiniteRowModelModule","ViewportRowModelModule","ServerSideRowModelModule","defaultGroupComparator","nodeAIsGroup","nodeBIsGroup","bothAreNormal","BarColumnLabelPlacement","BaseComponentWrapper","OriginalConstructor","componentType","createWrapper","createMethod","addMethod","createMethodProxy","hasMethod","callMethod","arguments","globalObj","HTMLButtonElement","HTMLSelectElement","HTMLInputElement","AgGridReact","react_1","setGridApi","render","ReactComponentToUse","agGridReactLegacy_1","agGridReactUi_1","exports","AgGridReactLegacy","super","changeDetectionService","changeDetectionService_1","SYNCHRONOUS_CHANGE_PROPERTIES","portalManager","portalManager_1","componentWrappingElement","maxComponentCreationTimeMs","createStyleForDiv","getPortals","containerStyle","componentDidMount","gridParams","agGridReact","ReactFrameworkComponentWrapper","reactFrameworkOverrides_1","agGridColumn_1","hasChildColumns","mapChildColumnDefs","core_1","copyAttributesToGridOptions","getStrategyTypeForProp","propKey","rowDataChangeDetectionStrategy","isImmutableDataActive","IdentityCheck","DeepValueCheck","deltaRowDataMode","shouldComponentUpdate","nextProps","processPropsChanges","componentDidUpdate","prevProps","extractGridPropertyChanges","extractDeclarativeColDefChanges","processSynchronousChanges","processAsynchronousChanges","debugLogging","currentColDefs","detectionStrategy","getStrategy","newColDefs","funcName","componentWillUnmount","isDisableStaticMarkup","disableStaticMarkup","isLegacyComponentRendering","legacyComponentRendering","asyncChanges","synchronousChanges","synchronousChangeProperty","processOnChange","addProperties","listOfProps","propType","MAX_COMPONENT_CREATION_TIME_IN_MS","propTypes","prop_types_1","bool","UserReactComponent","legacyReactComponent_1","newReactComponent_1","LegacyReactComponent","reactComponent_1","reactComponent","staticMarkup","staticRenderTime","eParentElement","createParentElement","renderStaticMarkup","createReactComponent","isStatelessComponent","componentInstance","addParentContainerStyleAndClasses","removeStaticMarkup","portal","react_dom_1","keyGenerator_1","mountReactPortal","isSlowRenderer","fallbackMethodAvailable","fallbackMethod","SLOW_RENDERING_THRESHOLD","isNullValue","originalConsoleError","server_1","rendered","statelessComponentRendered","AgGridReactUi","createRef","whenReadyFuncs","renderedAfterMount","mounted","gridComp_1","current","processChanges","processWhenReady","createContext","beansContext_1","setCssClasses","utils_1","gridCssClasses","setGridCssClasses","detailGridOptions","setDetailGridOptions","detailRowData","setDetailRowData","ctrlRef","eGuiRef","topClassName","gridClassName","useEffectOnce_1","setClass","addOrRemoveDetailGridCssClass","setDetailGrid","getInstance","registerDetailWithMaster","eValueRef","eCheckboxRef","eExpandedRef","eContractedRef","setInnerCompDetails","childCount","expandedCssClasses","setExpandedCssClasses","contractedCssClasses","setContractedCssClasses","checkboxCssClasses","setCheckboxCssClasses","jsComp_1","expandedClassName","contractedClassName","checkboxClassName","useFwRenderer","FwRenderer","useValue","CellCompState","renderDetails","editDetails","renderKey","setRenderKey","userStyles","ariaDescribedBy","jsEditorComp","setJsEditorComp","cellRendererRef","jsCellRendererRef","cellEditorRef","cellWrapperVersion","setCellWrapperVersion","setCellWrapperRef","cellValueVersion","setCellValueVersion","setCellValueRef","showTools","showCellWrapper","setCellEditorRef","checkCellEditorDeprecations","setPopupCellEditorRef","setInlineCellEditorRef","showJsRenderer_1","lastRenderDetails","oldDetails","newDetails","oldCompDetails","compGui","addComp","cellWrapperOrUndefined","reactCellRendererStateless","cellInstanceId","showContents","showDetails","setECellValue","noCellRenderer","reactCellRenderer","CellRendererClass","valueForNoCellRenderer","bodyJsxFunc","jsxShowValue","CellEditorClass","reactInlineEditor","reactPopupEditor","jsPopupEditor","popupEditorComp_1","wrappedContent","jsChildComp","jsxEditValue","popupEditorWrapper","setPopupEditorWrapper","eChildGui","destroyCellRenderer","jsCompDetails","refreshResult","rowAnimationClass","setRowAnimationClass","ariaColCount","ariaRowCount","topHeight","bottomHeight","topDisplay","bottomDisplay","movingCss","setMovingCss","forceVerticalScrollClass","setForceVerticalScrollClass","topAndBottomOverflowY","setTopAndBottomOverflowY","cellSelectableCss","layoutClass","setLayoutClass","eRoot","reactComment_1","beansToDestroy","tag","CompClass","rootClasses","bodyViewportClasses","topClasses","bottomClasses","topStyle","bottomStyle","createRowContainer","rowContainerComp_1","createSection","section","gridHeaderComp_1","rtlClass","keyboardFocusClass","setKeyboardFocusClass","setInitialised","tabGuardReady","setTabGuardReady","gridCtrlRef","eRootWrapperRef","tabGuardRef","eGridBodyParentRef","focusInnerElementRef","currentController","els","gridBodyCompEl","sideBarEl","HeaderDropZonesClass","SideBarClass","StatusBarClass","WatermarkClass","PaginationClass","additionalEls","eRootWrapper","eGridBodyParent","headerDropZonesComp","statusBarComp","paginationComp","watermarkComp","rootWrapperClasses","rootWrapperBodyClasses","WebkitUserSelect","setTabGuardCompRef","Provider","tabGuardComp_1","gridBodyComp_1","headerRowContainerComp_1","ariaSort","ariaDescription","userCompRef","userCompDomElement","userCompStateless","reactUserComp","UserCompClass","cssBodyClasses","setBodyCssClasses","cssButtonWrapperClasses","setButtonWrapperCssClasses","alreadyResolved","userCompResolve","userCompPromise","bodyClassName","buttonWrapperClassName","cssResizableClasses","setResizableCssClasses","ariaExpanded","resizableClassName","typeColumn","typeGroup","typeFilter","setCellCtrlsMaintainOrder","prevMap","nextMap","createCellJsx","headerGroupCellComp_1","headerFilterCellComp_1","headerCellComp_1","centerContainerWidth","setCenterContainerWidth","centerContainerTransform","setCenterContainerTransform","pinnedContainerWidth","headerRowCtrls","setHeaderRowCtrls","centre","insertRowsJsx","headerRowComp_1","eCenterContainerStyle","ePinnedStyle","setRef","comment","eForCommentRef","eForComment","eComment","rowBusinessKey","instanceIdMap","fullWidthCompDetails","setFullWidthCompDetails","fullWidthCompRef","autoHeightSetup","autoHeightSetupAttempt","setAutoHeightSetupAttempt","oldCellCtrls","newCellCtrls","newInstanceIdMap","tempMap","maintainOrderOnColumns","showFullWidthFramework","showCells","reactFullWidthCellRendererStateless","cellComp_1","FullWidthComp","showFullWidthFrameworkJsx","rowCtrlsOrdered","setRowCtrlsOrdered","containerWidth","wrapperClasses","viewportClasses","containerClasses","template3","topLevelRef","newRows","viewportStyle","buildContainer","rowComp_1","forwardRef","topTabGuardRef","bottomTabGuardRef","tabGuardCtrlRef","effect","effectCalled","renderAfterCalled","setVal","filtered","CssClasses","classesMap","initialClasses","isReactComponent","$$typeof","Symbol","for","AgGridColumn","static","Children","toColDef","columnProps","AgGrid","ChangeDetectionStrategyType","SimpleFunctionalStrategy","DeepValueStrategy","areEquivalent","valueOf","arrayCopy","unwrapStringOrNumber","isFrozen","newA","areEquivPropertyTracking","newB","other","tmp","strategyMap","NoCheck","changeDetectionStrategy","NewReactComponent","oldPortal","portalKey","createOrUpdatePortal","reactElement","valueRenderedIsNull","ignore","refreshComponent","updateReactPortal","method","PortalManager","wrappingElement","portals","hasPendingPortalUpdate","destroyPortal","curPortal","batchUpdate","getComponentWrappingElement","waitForInstance","newPortal","forceUpdate","startTime","getReactComponentName","statelessComponent","isStateless","reactContainer","getReactContainerStyle","getReactContainerClasses","childElementCount","getMemoType","hasSymbol","frameworkComponentInstance","ReactFrameworkOverrides","groupCellRenderer_1","agDetailCellRenderer","detailCellRenderer_1","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","propFullName","secret","err","getShim","isRequired","ReactPropTypes","bigint","any","arrayOf","elementType","instanceOf","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","encodeURIComponent","u","z","aa","ba","ca","da","ea","fa","ha","ia","ja","ka","E","F","_context","_render","_payload","_init","la","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ma","I","_threadCount","_currentValue2","J","Uint16Array","K","oa","pa","qa","ra","sa","M","d","acceptsBooleans","attributeNamespace","mustUseProperty","sanitizeURL","removeEmptyString","N","va","wa","xlinkHref","xa","O","ya","ta","ua","Aa","is","P","Q","R","T","U","W","Ba","memoizedState","queue","Ca","Da","Ea","Fa","Ga","dispatch","Ha","Ia","Ja","X","Ka","readContext","threadID","useContext","useMemo","useReducer","useRef","useState","useLayoutEffect","useCallback","useImperativeHandle","useEffect","useDebugValue","useDeferredValue","useTransition","useOpaqueIdentifier","identifierPrefix","uniqueID","useMutableSource","_source","La","Ma","Na","area","base","br","embed","hr","img","keygen","link","track","wbr","Oa","menuitem","animationIterationCount","borderImageOutset","borderImageSlice","borderImageWidth","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","gridArea","gridRowEnd","gridRowSpan","gridRowStart","gridColumnEnd","gridColumnSpan","gridColumnStart","fontWeight","lineClamp","order","orphans","tabSize","widows","zoom","fillOpacity","floodOpacity","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth","Pa","Qa","Ra","toArray","Sa","ReactCurrentDispatcher","Ta","listing","pre","textarea","Ua","Va","Wa","Ya","Za","dangerouslySetInnerHTML","suppressContentEditableWarning","suppressHydrationWarning","$a","ab","contextType","contextTypes","na","n","isMounted","enqueueForceUpdate","enqueueReplaceState","enqueueSetState","getDerivedStateFromProps","updater","UNSAFE_componentWillMount","componentWillMount","getChildContext","childContextTypes","isValidElement","bb","domNamespace","stack","exhausted","currentSelectValue","previousWasTextNode","makeStaticMarkup","suspenseDepth","contextIndex","contextStack","contextValueStack","clearProviders","pushProvider","popProvider","read","L","G","fallbackFrame","renderDOM","defaultChecked","Xa","w","__html","renderToNodeStream","renderToStaticMarkup","renderToStaticNodeStream","renderToString"],"sourceRoot":""}